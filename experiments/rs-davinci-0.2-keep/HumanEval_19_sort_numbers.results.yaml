name: HumanEval_19_sort_numbers
language: rust
results:
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|num| match num {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|num|\
    \ match num {\n            0 => \"zero\",\n            1 => \"one\",\n       \
    \     2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n\
    \            5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|num| match num {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|num|\
    \ match num {\n            0 => \"zero\",\n            1 => \"one\",\n       \
    \     2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n\
    \            5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b| {\n      \
    \  let a = number_to_int(a);\n        let b = number_to_int(b);\n        a.cmp(&b)\n\
    \    });\n    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpuyceg8t7.rs:9:17\n  |\n9 |         let a = number_to_int(a);\n  |  \
    \               ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `number_to_int` in this scope\n  --> /tmp/tmpuyceg8t7.rs:10:17\n\
    \   |\n10 |         let b = number_to_int(b);\n   |                 ^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<String>\
    \ = numbers.split_whitespace().map(|n| n.to_string()).collect();\n    numbers.sort_by(|a,\
    \ b| number_to_int(a).cmp(&number_to_int(b)));\n    numbers.join(\" \")\n}\n\n\
    fn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpho0ryuds.rs:8:28\n  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                            ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_int` in this scope\n --> /tmp/tmpho0ryuds.rs:8:50\n\
    \  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                                                  ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|num| match num {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|num|\
    \ match num {\n            0 => \"zero\",\n            1 => \"one\",\n       \
    \     2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n\
    \            5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        nums.push(match num {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => 0,\n     \
    \   });\n    }\n    nums.sort();\n    let mut result = String::new();\n    for\
    \ num in nums {\n        result.push_str(match num {\n            0 => \"zero\"\
    ,\n            1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => \"zero\",\n        });\n        result.push('\
    \ ');\n    }\n    result.pop();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split(' ')\n        .map(|s| match s {\n            \"zero\" => 0,\n\
    \            \"one\" => 1,\n            \"two\" => 2,\n            \"three\" =>\
    \ 3,\n            \"four\" => 4,\n            \"five\" => 5,\n            \"six\"\
    \ => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n          \
    \  \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n        })\n\
    \        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n| match\
    \ n {\n            0 => \"zero\",\n            1 => \"one\",\n            2 =>\
    \ \"two\",\n            3 => \"three\",\n            4 => \"four\",\n        \
    \    5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\",\n\
    \            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'Invalid number', /tmp/tmp_pbpiy85.rs:20:18\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|x| match x {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|x|\
    \ match x {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number: {}\", s),\n\
    \        })\n        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid number: {}\", n),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmp9h4fwf5x.rs:8:28\n  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                            ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_int` in this scope\n --> /tmp/tmp9h4fwf5x.rs:8:50\n\
    \  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                                                  ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|numeral| numeral_to_number(numeral))\n\
    \        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n    \
    \    .map(|number| number_to_numeral(*number))\n        .collect::<Vec<String>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `numeral_to_number` in this scope\n\
    \ --> /tmp/tmpp7zknj1h.rs:9:24\n  |\n9 |         .map(|numeral| numeral_to_number(numeral))\n\
    \  |                        ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_numeral` in this scope\n  --> /tmp/tmpp7zknj1h.rs:14:23\n\
    \   |\n14 |         .map(|number| number_to_numeral(*number))\n   |          \
    \             ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        nums.push(match num {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        });\n    }\n    nums.sort();\n    let mut result =\
    \ String::new();\n    for num in nums {\n        result.push_str(match num {\n\
    \            0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\"\
    ,\n            3 => \"three\",\n            4 => \"four\",\n            5 => \"\
    five\",\n            6 => \"six\",\n            7 => \"seven\",\n            8\
    \ => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid\
    \ number\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    let mut result = String::new();\n\
    \    for num in nums {\n        result.push_str(match num {\n            0 =>\
    \ \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n          \
    \  3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n \
    \           6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\"\
    ,\n            9 => \"nine\",\n            _ => panic!(\"Invalid input\"),\n \
    \       });\n        result.push(' ');\n    }\n    result.pop();\n    result\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        nums.push(match num {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    nums.sort();\n    let mut result =\
    \ String::new();\n    for num in nums {\n        result.push_str(match num {\n\
    \            0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\"\
    ,\n            3 => \"three\",\n            4 => \"four\",\n            5 => \"\
    five\",\n            6 => \"six\",\n            7 => \"seven\",\n            8\
    \ => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid\
    \ input\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        match num {\n          \
    \  \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n         \
    \   \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n       \
    \     \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n     \
    \       \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n   \
    \         \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => panic!(\"Invalid input\"),\n        }\n    }\n    nums.sort();\n\
    \    let mut result = String::new();\n    for num in nums {\n        match num\
    \ {\n            0 => result.push_str(\"zero \"),\n            1 => result.push_str(\"\
    one \"),\n            2 => result.push_str(\"two \"),\n            3 => result.push_str(\"\
    three \"),\n            4 => result.push_str(\"four \"),\n            5 => result.push_str(\"\
    five \"),\n            6 => result.push_str(\"six \"),\n            7 => result.push_str(\"\
    seven \"),\n            8 => result.push_str(\"eight \"),\n            9 => result.push_str(\"\
    nine \"),\n            _ => panic!(\"Invalid input\"),\n        }\n    }\n   \
    \ result.trim().to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        nums.push(match num {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    unknown number\"),\n        });\n    }\n    nums.sort();\n    let mut result =\
    \ String::new();\n    for num in nums {\n        result.push_str(match num {\n\
    \            0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\"\
    ,\n            3 => \"three\",\n            4 => \"four\",\n            5 => \"\
    five\",\n            6 => \"six\",\n            7 => \"seven\",\n            8\
    \ => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"unknown\
    \ number\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|x| match x {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|x|\
    \ match x {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n\
    \        .map(|&n| match n {\n            0 => \"zero\",\n            1 => \"\
    one\",\n            2 => \"two\",\n            3 => \"three\",\n            4\
    \ => \"four\",\n            5 => \"five\",\n            6 => \"six\",\n      \
    \      7 => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\"\
    ,\n            _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split(' ').collect();\n    numbers.sort_by(|a, b| {\n        let a =\
    \ match a {\n            \"zero\" => 0,\n            \"one\" => 1,\n         \
    \   \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n \
    \           \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid number\"),\n        };\n        let b = match b {\n       \
    \     \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n \
    \           \"three\" => 3,\n            \"four\" => 4,\n            \"five\"\
    \ => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n            \"\
    eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"\
    ),\n        };\n        a.cmp(&b)\n    });\n    numbers.join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp02vlv0lx.rs:10:13\n   |\n\
    9  |         let a = match a {\n   |                       - this expression has\
    \ type `&&str`\n10 |             \"zero\" => 0,\n   |             ^^^^^^ expected\
    \ `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n         \
    \     found reference `&'static str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp02vlv0lx.rs:11:13\n   |\n9  |         let a = match a {\n   |      \
    \                 - this expression has type `&&str`\n10 |             \"zero\"\
    \ => 0,\n11 |             \"one\" => 1,\n   |             ^^^^^ expected `&str`,\
    \ found `str`\n   |\n   = note: expected reference `&&str`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02vlv0lx.rs:12:13\n\
    \   |\n9  |         let a = match a {\n   |                       - this expression\
    \ has type `&&str`\n...\n12 |             \"two\" => 2,\n   |             ^^^^^\
    \ expected `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp02vlv0lx.rs:13:13\n   |\n9  |         let a = match a {\n   | \
    \                      - this expression has type `&&str`\n...\n13 |         \
    \    \"three\" => 3,\n   |             ^^^^^^^ expected `&str`, found `str`\n\
    \   |\n   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp02vlv0lx.rs:14:13\n  \
    \ |\n9  |         let a = match a {\n   |                       - this expression\
    \ has type `&&str`\n...\n14 |             \"four\" => 4,\n   |             ^^^^^^\
    \ expected `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp02vlv0lx.rs:15:13\n   |\n9  |         let a = match a {\n   | \
    \                      - this expression has type `&&str`\n...\n15 |         \
    \    \"five\" => 5,\n   |             ^^^^^^ expected `&str`, found `str`\n  \
    \ |\n   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror["
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split(' ').collect();\n    numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpgohyv40j.rs:8:28\n  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                            ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_int` in this scope\n --> /tmp/tmpgohyv40j.rs:8:50\n\
    \  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                                                  ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        match num {\n          \
    \  \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n         \
    \   \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n       \
    \     \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n     \
    \       \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n   \
    \         \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => panic!(\"Invalid number: {}\", num),\n        }\n    }\n   \
    \ nums.sort();\n    let mut result = String::new();\n    for num in nums {\n \
    \       match num {\n            0 => result.push_str(\"zero \"),\n          \
    \  1 => result.push_str(\"one \"),\n            2 => result.push_str(\"two \"\
    ),\n            3 => result.push_str(\"three \"),\n            4 => result.push_str(\"\
    four \"),\n            5 => result.push_str(\"five \"),\n            6 => result.push_str(\"\
    six \"),\n            7 => result.push_str(\"seven \"),\n            8 => result.push_str(\"\
    eight \"),\n            9 => result.push_str(\"nine \"),\n            _ => panic!(\"\
    Invalid number: {}\", num),\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|n| match n {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|num| match num {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|num|\
    \ match num {\n            0 => \"zero\",\n            1 => \"one\",\n       \
    \     2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n\
    \            5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b| {\n      \
    \  let a = number_to_int(a);\n        let b = number_to_int(b);\n        a.cmp(&b)\n\
    \    });\n    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpdj46j0nh.rs:9:17\n  |\n9 |         let a = number_to_int(a);\n  |  \
    \               ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `number_to_int` in this scope\n  --> /tmp/tmpdj46j0nh.rs:10:17\n\
    \   |\n10 |         let b = number_to_int(b);\n   |                 ^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|n| match n {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number: {}\", n),\n\
    \        })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number: {}\", n),\n        })\n        .collect::<Vec<&str>>()\n     \
    \   .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b| {\n      \
    \  let a = match a {\n            \"zero\" => 0,\n            \"one\" => 1,\n\
    \            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => panic!(\"Invalid number\"),\n        };\n        let b = match b\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        };\n        a.cmp(&b)\n    });\n    numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptlhemkiq.rs:10:13\n   |\n\
    9  |         let a = match a {\n   |                       - this expression has\
    \ type `&&str`\n10 |             \"zero\" => 0,\n   |             ^^^^^^ expected\
    \ `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n         \
    \     found reference `&'static str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmptlhemkiq.rs:11:13\n   |\n9  |         let a = match a {\n   |      \
    \                 - this expression has type `&&str`\n10 |             \"zero\"\
    \ => 0,\n11 |             \"one\" => 1,\n   |             ^^^^^ expected `&str`,\
    \ found `str`\n   |\n   = note: expected reference `&&str`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptlhemkiq.rs:12:13\n\
    \   |\n9  |         let a = match a {\n   |                       - this expression\
    \ has type `&&str`\n...\n12 |             \"two\" => 2,\n   |             ^^^^^\
    \ expected `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmptlhemkiq.rs:13:13\n   |\n9  |         let a = match a {\n   | \
    \                      - this expression has type `&&str`\n...\n13 |         \
    \    \"three\" => 3,\n   |             ^^^^^^^ expected `&str`, found `str`\n\
    \   |\n   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptlhemkiq.rs:14:13\n  \
    \ |\n9  |         let a = match a {\n   |                       - this expression\
    \ has type `&&str`\n...\n14 |             \"four\" => 4,\n   |             ^^^^^^\
    \ expected `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmptlhemkiq.rs:15:13\n   |\n9  |         let a = match a {\n   | \
    \                      - this expression has type `&&str`\n...\n15 |         \
    \    \"five\" => 5,\n   |             ^^^^^^ expected `&str`, found `str`\n  \
    \ |\n   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror["
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<i32> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        nums.push(match num {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        });\n    }\n    nums.sort();\n    let mut result =\
    \ String::new();\n    for num in nums {\n        result.push_str(match num {\n\
    \            0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\"\
    ,\n            3 => \"three\",\n            4 => \"four\",\n            5 => \"\
    five\",\n            6 => \"six\",\n            7 => \"seven\",\n            8\
    \ => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid\
    \ number\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u8> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        match num {\n          \
    \  \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n         \
    \   \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n       \
    \     \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n     \
    \       \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n   \
    \         \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => panic!(\"Invalid number: {}\", num),\n        }\n    }\n   \
    \ nums.sort();\n    let mut result = String::new();\n    for num in nums {\n \
    \       match num {\n            0 => result.push_str(\"zero \"),\n          \
    \  1 => result.push_str(\"one \"),\n            2 => result.push_str(\"two \"\
    ),\n            3 => result.push_str(\"three \"),\n            4 => result.push_str(\"\
    four \"),\n            5 => result.push_str(\"five \"),\n            6 => result.push_str(\"\
    six \"),\n            7 => result.push_str(\"seven \"),\n            8 => result.push_str(\"\
    eight \"),\n            9 => result.push_str(\"nine \"),\n            _ => panic!(\"\
    Invalid number: {}\", num),\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<i32> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        nums.push(match num {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    nums.sort();\n    let mut result =\
    \ String::new();\n    for num in nums {\n        result.push_str(match num {\n\
    \            0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\"\
    ,\n            3 => \"three\",\n            4 => \"four\",\n            5 => \"\
    five\",\n            6 => \"six\",\n            7 => \"seven\",\n            8\
    \ => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid\
    \ input\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut num_vec: Vec<u32> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        num_vec.push(match num {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    num_vec.sort();\n    let mut result\
    \ = String::new();\n    for num in num_vec {\n        result.push_str(match num\
    \ {\n            0 => \"zero \",\n            1 => \"one \",\n            2 =>\
    \ \"two \",\n            3 => \"three \",\n            4 => \"four \",\n     \
    \       5 => \"five \",\n            6 => \"six \",\n            7 => \"seven\
    \ \",\n            8 => \"eight \",\n            9 => \"nine \",\n           \
    \ _ => panic!(\"Invalid input\"),\n        });\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<i32> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        nums.push(match num {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number: {}\", num),\n        });\n    }\n    nums.sort();\n    let mut\
    \ result = String::new();\n    for num in nums {\n        result.push_str(match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number: {}\", num),\n        });\n        result.push(' ');\n    }\n \
    \   result.pop();\n    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        nums.push(match num {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    nums.sort();\n    let mut result =\
    \ String::new();\n    for num in nums {\n        result.push_str(match num {\n\
    \            0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\"\
    ,\n            3 => \"three\",\n            4 => \"four\",\n            5 => \"\
    five\",\n            6 => \"six\",\n            7 => \"seven\",\n            8\
    \ => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid\
    \ input\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number: {}\", s),\n\
    \        })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number: {}\", n),\n        })\n        .collect::<Vec<&str>>()\n     \
    \   .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b| {\n      \
    \  let a = match a {\n            \"zero\" => 0,\n            \"one\" => 1,\n\
    \            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => panic!(\"Invalid number\"),\n        };\n        let b = match b\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        };\n        a.cmp(&b)\n    });\n    numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyyhm6ytt.rs:10:13\n   |\n\
    9  |         let a = match a {\n   |                       - this expression has\
    \ type `&&str`\n10 |             \"zero\" => 0,\n   |             ^^^^^^ expected\
    \ `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n         \
    \     found reference `&'static str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpyyhm6ytt.rs:11:13\n   |\n9  |         let a = match a {\n   |      \
    \                 - this expression has type `&&str`\n10 |             \"zero\"\
    \ => 0,\n11 |             \"one\" => 1,\n   |             ^^^^^ expected `&str`,\
    \ found `str`\n   |\n   = note: expected reference `&&str`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyyhm6ytt.rs:12:13\n\
    \   |\n9  |         let a = match a {\n   |                       - this expression\
    \ has type `&&str`\n...\n12 |             \"two\" => 2,\n   |             ^^^^^\
    \ expected `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpyyhm6ytt.rs:13:13\n   |\n9  |         let a = match a {\n   | \
    \                      - this expression has type `&&str`\n...\n13 |         \
    \    \"three\" => 3,\n   |             ^^^^^^^ expected `&str`, found `str`\n\
    \   |\n   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyyhm6ytt.rs:14:13\n  \
    \ |\n9  |         let a = match a {\n   |                       - this expression\
    \ has type `&&str`\n...\n14 |             \"four\" => 4,\n   |             ^^^^^^\
    \ expected `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpyyhm6ytt.rs:15:13\n   |\n9  |         let a = match a {\n   | \
    \                      - this expression has type `&&str`\n...\n15 |         \
    \    \"five\" => 5,\n   |             ^^^^^^ expected `&str`, found `str`\n  \
    \ |\n   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror["
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"invalid number\"),\n  \
    \      })\n        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpjmeuqlf1.rs:8:28\n  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                            ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_int` in this scope\n --> /tmp/tmpjmeuqlf1.rs:8:50\n\
    \  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                                                  ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b| {\n      \
    \  let a = number_to_int(a);\n        let b = number_to_int(b);\n        a.cmp(&b)\n\
    \    });\n    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmp0z3h5rov.rs:9:17\n  |\n9 |         let a = number_to_int(a);\n  |  \
    \               ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `number_to_int` in this scope\n  --> /tmp/tmp0z3h5rov.rs:10:17\n\
    \   |\n10 |         let b = number_to_int(b);\n   |                 ^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<String>\
    \ = numbers.split_whitespace().map(|s| s.to_string()).collect();\n    numbers.sort_by(|a,\
    \ b| number_to_int(a).cmp(&number_to_int(b)));\n    numbers.join(\" \")\n}\n\n\
    fn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpjgq4xin4.rs:8:28\n  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                            ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_int` in this scope\n --> /tmp/tmpjgq4xin4.rs:8:50\n\
    \  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                                                  ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmp4435c_rg.rs:8:28\n  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                            ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_int` in this scope\n --> /tmp/tmp4435c_rg.rs:8:50\n\
    \  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                                                  ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|num| match num {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|num|\
    \ match num {\n            0 => \"zero\",\n            1 => \"one\",\n       \
    \     2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n\
    \            5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|num| match num {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|num|\
    \ match num {\n            0 => \"zero\",\n            1 => \"one\",\n       \
    \     2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n\
    \            5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|numeral| match numeral {\n       \
    \     \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n \
    \           \"three\" => 3,\n            \"four\" => 4,\n            \"five\"\
    \ => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n            \"\
    eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"Invalid numeral\"\
    ),\n        })\n        .collect();\n    numbers.sort();\n    numbers\n      \
    \  .iter()\n        .map(|num| match num {\n            0 => \"zero\",\n     \
    \       1 => \"one\",\n            2 => \"two\",\n            3 => \"three\",\n\
    \            4 => \"four\",\n            5 => \"five\",\n            6 => \"six\"\
    ,\n            7 => \"seven\",\n            8 => \"eight\",\n            9 =>\
    \ \"nine\",\n            _ => panic!(\"Invalid number\"),\n        })\n      \
    \  .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers_vec: Vec<u8>\
    \ = Vec::new();\n    for number in numbers.split_whitespace() {\n        match\
    \ number {\n            \"zero\" => numbers_vec.push(0),\n            \"one\"\
    \ => numbers_vec.push(1),\n            \"two\" => numbers_vec.push(2),\n     \
    \       \"three\" => numbers_vec.push(3),\n            \"four\" => numbers_vec.push(4),\n\
    \            \"five\" => numbers_vec.push(5),\n            \"six\" => numbers_vec.push(6),\n\
    \            \"seven\" => numbers_vec.push(7),\n            \"eight\" => numbers_vec.push(8),\n\
    \            \"nine\" => numbers_vec.push(9),\n            _ => panic!(\"Invalid\
    \ number\"),\n        }\n    }\n    numbers_vec.sort();\n    let mut result =\
    \ String::new();\n    for number in numbers_vec {\n        match number {\n  \
    \          0 => result.push_str(\"zero \"),\n            1 => result.push_str(\"\
    one \"),\n            2 => result.push_str(\"two \"),\n            3 => result.push_str(\"\
    three \"),\n            4 => result.push_str(\"four \"),\n            5 => result.push_str(\"\
    five \"),\n            6 => result.push_str(\"six \"),\n            7 => result.push_str(\"\
    seven \"),\n            8 => result.push_str(\"eight \"),\n            9 => result.push_str(\"\
    nine \"),\n            _ => panic!(\"Invalid number\"),\n        }\n    }\n  \
    \  result.trim().to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|num| match num {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|num|\
    \ match num {\n            0 => \"zero\",\n            1 => \"one\",\n       \
    \     2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n\
    \            5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b| {\n      \
    \  let a = number_to_int(a);\n        let b = number_to_int(b);\n        a.cmp(&b)\n\
    \    });\n    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpxf06agpw.rs:9:17\n  |\n9 |         let a = number_to_int(a);\n  |  \
    \               ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `number_to_int` in this scope\n  --> /tmp/tmpxf06agpw.rs:10:17\n\
    \   |\n10 |         let b = number_to_int(b);\n   |                 ^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers_vec: Vec<u32>\
    \ = Vec::new();\n    for num in numbers.split_whitespace() {\n        match num\
    \ {\n            \"zero\" => numbers_vec.push(0),\n            \"one\" => numbers_vec.push(1),\n\
    \            \"two\" => numbers_vec.push(2),\n            \"three\" => numbers_vec.push(3),\n\
    \            \"four\" => numbers_vec.push(4),\n            \"five\" => numbers_vec.push(5),\n\
    \            \"six\" => numbers_vec.push(6),\n            \"seven\" => numbers_vec.push(7),\n\
    \            \"eight\" => numbers_vec.push(8),\n            \"nine\" => numbers_vec.push(9),\n\
    \            _ => panic!(\"Invalid input\"),\n        }\n    }\n    numbers_vec.sort();\n\
    \    let mut result = String::new();\n    for num in numbers_vec {\n        match\
    \ num {\n            0 => result.push_str(\"zero \"),\n            1 => result.push_str(\"\
    one \"),\n            2 => result.push_str(\"two \"),\n            3 => result.push_str(\"\
    three \"),\n            4 => result.push_str(\"four \"),\n            5 => result.push_str(\"\
    five \"),\n            6 => result.push_str(\"six \"),\n            7 => result.push_str(\"\
    seven \"),\n            8 => result.push_str(\"eight \"),\n            9 => result.push_str(\"\
    nine \"),\n            _ => panic!(\"Invalid input\"),\n        }\n    }\n   \
    \ result.trim().to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|num| match num {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|num|\
    \ match num {\n            0 => \"zero\",\n            1 => \"one\",\n       \
    \     2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n\
    \            5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|num| match num {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number {}\", num),\n\
    \        })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|num|\
    \ match num {\n            0 => \"zero\",\n            1 => \"one\",\n       \
    \     2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n\
    \            5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number {}\", num),\n        })\n        .collect::<Vec<&str>>()\n    \
    \    .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b| {\n      \
    \  let a_num = match a {\n            \"zero\" => 0,\n            \"one\" => 1,\n\
    \            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => panic!(\"Invalid number: {}\", a),\n        };\n        let b_num\
    \ = match b {\n            \"zero\" => 0,\n            \"one\" => 1,\n       \
    \     \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n\
    \            \"five\" => 5,\n            \"six\" => 6,\n            \"seven\"\
    \ => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n           \
    \ _ => panic!(\"Invalid number: {}\", b),\n        };\n        a_num.cmp(&b_num)\n\
    \    });\n    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp65ch512b.rs:10:13\n   |\n\
    9  |         let a_num = match a {\n   |                           - this expression\
    \ has type `&&str`\n10 |             \"zero\" => 0,\n   |             ^^^^^^ expected\
    \ `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n         \
    \     found reference `&'static str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp65ch512b.rs:11:13\n   |\n9  |         let a_num = match a {\n   |  \
    \                         - this expression has type `&&str`\n10 |           \
    \  \"zero\" => 0,\n11 |             \"one\" => 1,\n   |             ^^^^^ expected\
    \ `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n         \
    \     found reference `&'static str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp65ch512b.rs:12:13\n   |\n9  |         let a_num = match a {\n   |  \
    \                         - this expression has type `&&str`\n...\n12 |      \
    \       \"two\" => 2,\n   |             ^^^^^ expected `&str`, found `str`\n \
    \  |\n   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp65ch512b.rs:13:13\n  \
    \ |\n9  |         let a_num = match a {\n   |                           - this\
    \ expression has type `&&str`\n...\n13 |             \"three\" => 3,\n   |   \
    \          ^^^^^^^ expected `&str`, found `str`\n   |\n   = note: expected reference\
    \ `&&str`\n              found reference `&'static str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp65ch512b.rs:14:13\n   |\n9  |         let a_num = match\
    \ a {\n   |                           - this expression has type `&&str`\n...\n\
    14 |             \"four\" => 4,\n   |             ^^^^^^ expected `&str`, found\
    \ `str`\n   |\n   = note: expected reference `&&str`\n              found reference\
    \ `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp65ch512b.rs:15:13\n\
    \   |\n9  |         let a_num = match a {\n   |                           - this\
    \ expression has type `&&str`\n...\n15 |             \"five\" => 5,\n   |    \
    \         ^^^^^^ expected `&str`, found `str`\n   |\n   = note: expected reference\
    \ `&&str`\n    "
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|num| match num {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|num|\
    \ match num {\n            0 => \"zero\",\n            1 => \"one\",\n       \
    \     2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n\
    \            5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    let mut result = String::new();\n\
    \    for num in nums {\n        result.push_str(match num {\n            0 =>\
    \ \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n          \
    \  3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n \
    \           6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\"\
    ,\n            9 => \"nine\",\n            _ => panic!(\"Invalid input\"),\n \
    \       });\n        result.push(' ');\n    }\n    result.pop();\n    result\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number {}\", s),\n\
    \        })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number {}\", n),\n        })\n        .collect::<Vec<&str>>()\n      \
    \  .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers_vec: Vec<u32>\
    \ = Vec::new();\n    for num in numbers.split_whitespace() {\n        match num\
    \ {\n            \"zero\" => numbers_vec.push(0),\n            \"one\" => numbers_vec.push(1),\n\
    \            \"two\" => numbers_vec.push(2),\n            \"three\" => numbers_vec.push(3),\n\
    \            \"four\" => numbers_vec.push(4),\n            \"five\" => numbers_vec.push(5),\n\
    \            \"six\" => numbers_vec.push(6),\n            \"seven\" => numbers_vec.push(7),\n\
    \            \"eight\" => numbers_vec.push(8),\n            \"nine\" => numbers_vec.push(9),\n\
    \            _ => panic!(\"Invalid number\"),\n        }\n    }\n    numbers_vec.sort();\n\
    \    let mut result = String::new();\n    for num in numbers_vec {\n        match\
    \ num {\n            0 => result.push_str(\"zero \"),\n            1 => result.push_str(\"\
    one \"),\n            2 => result.push_str(\"two \"),\n            3 => result.push_str(\"\
    three \"),\n            4 => result.push_str(\"four \"),\n            5 => result.push_str(\"\
    five \"),\n            6 => result.push_str(\"six \"),\n            7 => result.push_str(\"\
    seven \"),\n            8 => result.push_str(\"eight \"),\n            9 => result.push_str(\"\
    nine \"),\n            _ => panic!(\"Invalid number\"),\n        }\n    }\n  \
    \  result.trim().to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|n| match n {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        match num {\n          \
    \  \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n         \
    \   \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n       \
    \     \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n     \
    \       \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n   \
    \         \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => panic!(\"Invalid input\"),\n        }\n    }\n    nums.sort();\n\
    \    let mut result = String::new();\n    for num in nums {\n        match num\
    \ {\n            0 => result.push_str(\"zero \"),\n            1 => result.push_str(\"\
    one \"),\n            2 => result.push_str(\"two \"),\n            3 => result.push_str(\"\
    three \"),\n            4 => result.push_str(\"four \"),\n            5 => result.push_str(\"\
    five \"),\n            6 => result.push_str(\"six \"),\n            7 => result.push_str(\"\
    seven \"),\n            8 => result.push_str(\"eight \"),\n            9 => result.push_str(\"\
    nine \"),\n            _ => panic!(\"Invalid input\"),\n        }\n    }\n   \
    \ result.trim().to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    numbers.sort();\n    let numbers: Vec<String>\
    \ = numbers\n        .iter()\n        .map(|&n| match n {\n            0 => \"\
    zero\",\n            1 => \"one\",\n            2 => \"two\",\n            3 =>\
    \ \"three\",\n            4 => \"four\",\n            5 => \"five\",\n       \
    \     6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\",\n\
    \            9 => \"nine\",\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .map(|s| s.to_string())\n        .collect();\n    numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|num| match num {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|num|\
    \ match num {\n            0 => \"zero\",\n            1 => \"one\",\n       \
    \     2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n\
    \            5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b| numeral_to_int(a).cmp(&numeral_to_int(b)));\n\
    \    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `numeral_to_int` in this scope\n -->\
    \ /tmp/tmpm1gfpxz1.rs:8:28\n  |\n8 |     numbers.sort_by(|a, b| numeral_to_int(a).cmp(&numeral_to_int(b)));\n\
    \  |                            ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `numeral_to_int` in this scope\n --> /tmp/tmpm1gfpxz1.rs:8:51\n\
    \  |\n8 |     numbers.sort_by(|a, b| numeral_to_int(a).cmp(&numeral_to_int(b)));\n\
    \  |                                                   ^^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|num| match num {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n\
    \        .map(|num| match num {\n            0 => \"zero\",\n            1 =>\
    \ \"one\",\n            2 => \"two\",\n            3 => \"three\",\n         \
    \   4 => \"four\",\n            5 => \"five\",\n            6 => \"six\",\n  \
    \          7 => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\"\
    ,\n            _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b| {\n      \
    \  let a = number_to_int(a);\n        let b = number_to_int(b);\n        a.cmp(&b)\n\
    \    });\n    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpkjv02e_2.rs:9:17\n  |\n9 |         let a = number_to_int(a);\n  |  \
    \               ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `number_to_int` in this scope\n  --> /tmp/tmpkjv02e_2.rs:10:17\n\
    \   |\n10 |         let b = number_to_int(b);\n   |                 ^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split(' ').collect();\n    numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpjggmzz_8.rs:8:28\n  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                            ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_int` in this scope\n --> /tmp/tmpjggmzz_8.rs:8:50\n\
    \  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                                                  ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmp2b6n71tg.rs:8:28\n  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                            ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_int` in this scope\n --> /tmp/tmp2b6n71tg.rs:8:50\n\
    \  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                                                  ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b| {\n      \
    \  let a = number_to_int(a);\n        let b = number_to_int(b);\n        a.cmp(&b)\n\
    \    });\n    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpx9_hltde.rs:9:17\n  |\n9 |         let a = number_to_int(a);\n  |  \
    \               ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `number_to_int` in this scope\n  --> /tmp/tmpx9_hltde.rs:10:17\n\
    \   |\n10 |         let b = number_to_int(b);\n   |                 ^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b| {\n      \
    \  let a = match a {\n            \"zero\" => 0,\n            \"one\" => 1,\n\
    \            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => unreachable!(),\n        };\n        let b = match b {\n        \
    \    \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n  \
    \          \"three\" => 3,\n            \"four\" => 4,\n            \"five\" =>\
    \ 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\"\
    \ => 8,\n            \"nine\" => 9,\n            _ => unreachable!(),\n      \
    \  };\n        a.cmp(&b)\n    });\n    numbers.join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6ms1cofr.rs:10:13\n   |\n\
    9  |         let a = match a {\n   |                       - this expression has\
    \ type `&&str`\n10 |             \"zero\" => 0,\n   |             ^^^^^^ expected\
    \ `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n         \
    \     found reference `&'static str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp6ms1cofr.rs:11:13\n   |\n9  |         let a = match a {\n   |      \
    \                 - this expression has type `&&str`\n10 |             \"zero\"\
    \ => 0,\n11 |             \"one\" => 1,\n   |             ^^^^^ expected `&str`,\
    \ found `str`\n   |\n   = note: expected reference `&&str`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6ms1cofr.rs:12:13\n\
    \   |\n9  |         let a = match a {\n   |                       - this expression\
    \ has type `&&str`\n...\n12 |             \"two\" => 2,\n   |             ^^^^^\
    \ expected `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp6ms1cofr.rs:13:13\n   |\n9  |         let a = match a {\n   | \
    \                      - this expression has type `&&str`\n...\n13 |         \
    \    \"three\" => 3,\n   |             ^^^^^^^ expected `&str`, found `str`\n\
    \   |\n   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6ms1cofr.rs:14:13\n  \
    \ |\n9  |         let a = match a {\n   |                       - this expression\
    \ has type `&&str`\n...\n14 |             \"four\" => 4,\n   |             ^^^^^^\
    \ expected `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp6ms1cofr.rs:15:13\n   |\n9  |         let a = match a {\n   | \
    \                      - this expression has type `&&str`\n...\n15 |         \
    \    \"five\" => 5,\n   |             ^^^^^^ expected `&str`, found `str`\n  \
    \ |\n   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror["
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpzewea_c3.rs:8:28\n  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                            ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_int` in this scope\n --> /tmp/tmpzewea_c3.rs:8:50\n\
    \  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                                                  ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|numeral| numeral_to_u32(numeral))\n\
    \        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n    \
    \    .map(|num| u32_to_numeral(*num))\n        .collect::<Vec<String>>()\n   \
    \     .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `numeral_to_u32` in this scope\n -->\
    \ /tmp/tmp076tzk6p.rs:9:24\n  |\n9 |         .map(|numeral| numeral_to_u32(numeral))\n\
    \  |                        ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `u32_to_numeral` in this scope\n  --> /tmp/tmp076tzk6p.rs:14:20\n\
    \   |\n14 |         .map(|num| u32_to_numeral(*num))\n   |                   \
    \ ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|x| match x {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|x|\
    \ match x {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<String>\
    \ = numbers.split_whitespace().map(|s| s.to_string()).collect();\n    numbers.sort_by(|a,\
    \ b| number_to_int(a).cmp(&number_to_int(b)));\n    numbers.join(\" \")\n}\n\n\
    fn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpy6eit_2n.rs:8:28\n  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                            ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_int` in this scope\n --> /tmp/tmpy6eit_2n.rs:8:50\n\
    \  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                                                  ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<i32> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        match num {\n          \
    \  \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n         \
    \   \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n       \
    \     \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n     \
    \       \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n   \
    \         \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => panic!(\"Invalid input\"),\n        }\n    }\n    nums.sort();\n\
    \    let mut result = String::new();\n    for num in nums {\n        match num\
    \ {\n            0 => result.push_str(\"zero \"),\n            1 => result.push_str(\"\
    one \"),\n            2 => result.push_str(\"two \"),\n            3 => result.push_str(\"\
    three \"),\n            4 => result.push_str(\"four \"),\n            5 => result.push_str(\"\
    five \"),\n            6 => result.push_str(\"six \"),\n            7 => result.push_str(\"\
    seven \"),\n            8 => result.push_str(\"eight \"),\n            9 => result.push_str(\"\
    nine \"),\n            _ => panic!(\"Invalid input\"),\n        }\n    }\n   \
    \ result.trim().to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<String>\
    \ = numbers.split_whitespace().map(|s| s.to_string()).collect();\n    numbers.sort_by(|a,\
    \ b| {\n        let a = number_to_int(a);\n        let b = number_to_int(b);\n\
    \        a.cmp(&b)\n    });\n    numbers.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmp3gznz8s7.rs:9:17\n  |\n9 |         let a = number_to_int(a);\n  |  \
    \               ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `number_to_int` in this scope\n  --> /tmp/tmp3gznz8s7.rs:10:17\n\
    \   |\n10 |         let b = number_to_int(b);\n   |                 ^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split(' ').collect();\n    numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmp1y7x976x.rs:8:28\n  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                            ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_int` in this scope\n --> /tmp/tmp1y7x976x.rs:8:50\n\
    \  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                                                  ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums = numbers.split_whitespace().map(|s|\
    \ match s {\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" =>\
    \ 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n\
    \        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n   \
    \     \"nine\" => 9,\n        _ => panic!(\"Invalid number\"),\n    }).collect::<Vec<u8>>();\n\
    \    nums.sort();\n    nums.iter().map(|n| match n {\n        0 => \"zero\",\n\
    \        1 => \"one\",\n        2 => \"two\",\n        3 => \"three\",\n     \
    \   4 => \"four\",\n        5 => \"five\",\n        6 => \"six\",\n        7 =>\
    \ \"seven\",\n        8 => \"eight\",\n        9 => \"nine\",\n        _ => panic!(\"\
    Invalid number\"),\n    }).collect::<Vec<&str>>().join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split(' ').collect();\n    numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmp7iye7c5j.rs:8:28\n  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                            ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_int` in this scope\n --> /tmp/tmp7iye7c5j.rs:8:50\n\
    \  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                                                  ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut num_vec: Vec<u32> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        num_vec.push(numeral_to_int(num));\n\
    \    }\n    num_vec.sort();\n    let mut sorted_numbers = String::new();\n   \
    \ for num in num_vec {\n        sorted_numbers.push_str(int_to_numeral(num).as_str());\n\
    \        sorted_numbers.push(' ');\n    }\n    sorted_numbers.pop();\n    sorted_numbers\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `numeral_to_int` in this scope\n -->\
    \ /tmp/tmpe1c_phye.rs:9:22\n  |\n9 |         num_vec.push(numeral_to_int(num));\n\
    \  |                      ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `int_to_numeral` in this scope\n  --> /tmp/tmpe1c_phye.rs:14:33\n\
    \   |\n14 |         sorted_numbers.push_str(int_to_numeral(num).as_str());\n \
    \  |                                 ^^^^^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    let mut res = String::new();\n\
    \    for num in nums {\n        res.push_str(match num {\n            0 => \"\
    zero\",\n            1 => \"one\",\n            2 => \"two\",\n            3 =>\
    \ \"three\",\n            4 => \"four\",\n            5 => \"five\",\n       \
    \     6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\",\n\
    \            9 => \"nine\",\n            _ => panic!(\"invalid input\"),\n   \
    \     });\n        res.push(' ');\n    }\n    res.pop();\n    res\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<i32> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        nums.push(match num {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number: {}\", num),\n        });\n    }\n    nums.sort();\n    let mut\
    \ result = String::new();\n    for num in nums {\n        result.push_str(match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number: {}\", num),\n        });\n        result.push(' ');\n    }\n \
    \   result.pop();\n    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|numeral| match numeral {\n       \
    \     \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n \
    \           \"three\" => 3,\n            \"four\" => 4,\n            \"five\"\
    \ => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n            \"\
    eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"Invalid numeral\"\
    ),\n        })\n        .collect();\n    numbers.sort();\n    numbers\n      \
    \  .iter()\n        .map(|num| match num {\n            0 => \"zero\",\n     \
    \       1 => \"one\",\n            2 => \"two\",\n            3 => \"three\",\n\
    \            4 => \"four\",\n            5 => \"five\",\n            6 => \"six\"\
    ,\n            7 => \"seven\",\n            8 => \"eight\",\n            9 =>\
    \ \"nine\",\n            _ => panic!(\"Invalid number\"),\n        })\n      \
    \  .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers_vec: Vec<u32>\
    \ = Vec::new();\n    for num in numbers.split_whitespace() {\n        numbers_vec.push(match\
    \ num {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"\
    two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n       \
    \     \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n\
    \            \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number {}\", num),\n        });\n    }\n    numbers_vec.sort();\n    let\
    \ mut result = String::new();\n    for num in numbers_vec {\n        result.push_str(match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number {}\", num),\n        });\n        result.push(' ');\n    }\n  \
    \  result.pop();\n    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => 0,\n        })\n        .collect();\n\
    \    nums.sort();\n    nums.iter()\n        .map(|n| match n {\n            0\
    \ => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n       \
    \     3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n\
    \            6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\"\
    ,\n            9 => \"nine\",\n            _ => \"\",\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b| {\n      \
    \  let a = match a {\n            \"zero\" => 0,\n            \"one\" => 1,\n\
    \            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => panic!(\"Invalid number\"),\n        };\n        let b = match b\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        };\n        a.cmp(&b)\n    });\n    numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwdjysnxe.rs:10:13\n   |\n\
    9  |         let a = match a {\n   |                       - this expression has\
    \ type `&&str`\n10 |             \"zero\" => 0,\n   |             ^^^^^^ expected\
    \ `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n         \
    \     found reference `&'static str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpwdjysnxe.rs:11:13\n   |\n9  |         let a = match a {\n   |      \
    \                 - this expression has type `&&str`\n10 |             \"zero\"\
    \ => 0,\n11 |             \"one\" => 1,\n   |             ^^^^^ expected `&str`,\
    \ found `str`\n   |\n   = note: expected reference `&&str`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwdjysnxe.rs:12:13\n\
    \   |\n9  |         let a = match a {\n   |                       - this expression\
    \ has type `&&str`\n...\n12 |             \"two\" => 2,\n   |             ^^^^^\
    \ expected `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpwdjysnxe.rs:13:13\n   |\n9  |         let a = match a {\n   | \
    \                      - this expression has type `&&str`\n...\n13 |         \
    \    \"three\" => 3,\n   |             ^^^^^^^ expected `&str`, found `str`\n\
    \   |\n   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwdjysnxe.rs:14:13\n  \
    \ |\n9  |         let a = match a {\n   |                       - this expression\
    \ has type `&&str`\n...\n14 |             \"four\" => 4,\n   |             ^^^^^^\
    \ expected `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpwdjysnxe.rs:15:13\n   |\n9  |         let a = match a {\n   | \
    \                      - this expression has type `&&str`\n...\n15 |         \
    \    \"five\" => 5,\n   |             ^^^^^^ expected `&str`, found `str`\n  \
    \ |\n   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror["
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|x| match x {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|x|\
    \ match x {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b| {\n      \
    \  let a = match a {\n            \"zero\" => 0,\n            \"one\" => 1,\n\
    \            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => panic!(\"Invalid number: {}\", a),\n        };\n        let b = match\
    \ b {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number: {}\", b),\n        };\n        a.cmp(&b)\n    });\n    numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxc7htozw.rs:10:13\n   |\n\
    9  |         let a = match a {\n   |                       - this expression has\
    \ type `&&str`\n10 |             \"zero\" => 0,\n   |             ^^^^^^ expected\
    \ `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n         \
    \     found reference `&'static str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpxc7htozw.rs:11:13\n   |\n9  |         let a = match a {\n   |      \
    \                 - this expression has type `&&str`\n10 |             \"zero\"\
    \ => 0,\n11 |             \"one\" => 1,\n   |             ^^^^^ expected `&str`,\
    \ found `str`\n   |\n   = note: expected reference `&&str`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxc7htozw.rs:12:13\n\
    \   |\n9  |         let a = match a {\n   |                       - this expression\
    \ has type `&&str`\n...\n12 |             \"two\" => 2,\n   |             ^^^^^\
    \ expected `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpxc7htozw.rs:13:13\n   |\n9  |         let a = match a {\n   | \
    \                      - this expression has type `&&str`\n...\n13 |         \
    \    \"three\" => 3,\n   |             ^^^^^^^ expected `&str`, found `str`\n\
    \   |\n   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxc7htozw.rs:14:13\n  \
    \ |\n9  |         let a = match a {\n   |                       - this expression\
    \ has type `&&str`\n...\n14 |             \"four\" => 4,\n   |             ^^^^^^\
    \ expected `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpxc7htozw.rs:15:13\n   |\n9  |         let a = match a {\n   | \
    \                      - this expression has type `&&str`\n...\n15 |         \
    \    \"five\" => 5,\n   |             ^^^^^^ expected `&str`, found `str`\n  \
    \ |\n   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror["
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|n| match n {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u8> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        match num {\n          \
    \  \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n         \
    \   \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n       \
    \     \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n     \
    \       \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n   \
    \         \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => panic!(\"Invalid input\"),\n        }\n    }\n    nums.sort();\n\
    \    let mut result = String::new();\n    for num in nums {\n        match num\
    \ {\n            0 => result.push_str(\"zero \"),\n            1 => result.push_str(\"\
    one \"),\n            2 => result.push_str(\"two \"),\n            3 => result.push_str(\"\
    three \"),\n            4 => result.push_str(\"four \"),\n            5 => result.push_str(\"\
    five \"),\n            6 => result.push_str(\"six \"),\n            7 => result.push_str(\"\
    seven \"),\n            8 => result.push_str(\"eight \"),\n            9 => result.push_str(\"\
    nine \"),\n            _ => panic!(\"Invalid input\"),\n        }\n    }\n   \
    \ result.trim().to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        nums.push(match num {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    nums.sort();\n    let mut output =\
    \ String::new();\n    for num in nums {\n        output.push_str(match num {\n\
    \            0 => \"zero \",\n            1 => \"one \",\n            2 => \"\
    two \",\n            3 => \"three \",\n            4 => \"four \",\n         \
    \   5 => \"five \",\n            6 => \"six \",\n            7 => \"seven \",\n\
    \            8 => \"eight \",\n            9 => \"nine \",\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    output.trim().to_string()\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<_> = numbers.split_whitespace().collect();\n\
    \    numbers.sort_by_key(|&n| match n {\n        \"zero\" => 0,\n        \"one\"\
    \ => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"four\" => 4,\n\
    \        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\" => 7,\n    \
    \    \"eight\" => 8,\n        \"nine\" => 9,\n        _ => panic!(\"invalid number\"\
    ),\n    });\n    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|x| match x {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|x|\
    \ match x {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<i32> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        nums.push(match num {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    nums.sort();\n    let mut result =\
    \ String::new();\n    for num in nums {\n        result.push_str(match num {\n\
    \            0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\"\
    ,\n            3 => \"three\",\n            4 => \"four\",\n            5 => \"\
    five\",\n            6 => \"six\",\n            7 => \"seven\",\n            8\
    \ => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid\
    \ input\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmp7ju9v5te.rs:8:28\n  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                            ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_int` in this scope\n --> /tmp/tmp7ju9v5te.rs:8:50\n\
    \  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                                                  ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        match num {\n          \
    \  \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n         \
    \   \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n       \
    \     \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n     \
    \       \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n   \
    \         \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => panic!(\"Invalid input\"),\n        }\n    }\n    nums.sort();\n\
    \    let mut result = String::new();\n    for num in nums {\n        match num\
    \ {\n            0 => result.push_str(\"zero \"),\n            1 => result.push_str(\"\
    one \"),\n            2 => result.push_str(\"two \"),\n            3 => result.push_str(\"\
    three \"),\n            4 => result.push_str(\"four \"),\n            5 => result.push_str(\"\
    five \"),\n            6 => result.push_str(\"six \"),\n            7 => result.push_str(\"\
    seven \"),\n            8 => result.push_str(\"eight \"),\n            9 => result.push_str(\"\
    nine \"),\n            _ => panic!(\"Invalid input\"),\n        }\n    }\n   \
    \ result.trim().to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<i32> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        nums.push(match num {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        });\n    }\n    nums.sort();\n    let mut result =\
    \ String::new();\n    for num in nums {\n        result.push_str(match num {\n\
    \            0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\"\
    ,\n            3 => \"three\",\n            4 => \"four\",\n            5 => \"\
    five\",\n            6 => \"six\",\n            7 => \"seven\",\n            8\
    \ => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid\
    \ number\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b| {\n      \
    \  let a_num = match a {\n            \"zero\" => 0,\n            \"one\" => 1,\n\
    \            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => panic!(\"Invalid number: {}\", a),\n        };\n        let b_num\
    \ = match b {\n            \"zero\" => 0,\n            \"one\" => 1,\n       \
    \     \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n\
    \            \"five\" => 5,\n            \"six\" => 6,\n            \"seven\"\
    \ => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n           \
    \ _ => panic!(\"Invalid number: {}\", b),\n        };\n        a_num.cmp(&b_num)\n\
    \    });\n    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr4__scre.rs:10:13\n   |\n\
    9  |         let a_num = match a {\n   |                           - this expression\
    \ has type `&&str`\n10 |             \"zero\" => 0,\n   |             ^^^^^^ expected\
    \ `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n         \
    \     found reference `&'static str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpr4__scre.rs:11:13\n   |\n9  |         let a_num = match a {\n   |  \
    \                         - this expression has type `&&str`\n10 |           \
    \  \"zero\" => 0,\n11 |             \"one\" => 1,\n   |             ^^^^^ expected\
    \ `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n         \
    \     found reference `&'static str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpr4__scre.rs:12:13\n   |\n9  |         let a_num = match a {\n   |  \
    \                         - this expression has type `&&str`\n...\n12 |      \
    \       \"two\" => 2,\n   |             ^^^^^ expected `&str`, found `str`\n \
    \  |\n   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr4__scre.rs:13:13\n  \
    \ |\n9  |         let a_num = match a {\n   |                           - this\
    \ expression has type `&&str`\n...\n13 |             \"three\" => 3,\n   |   \
    \          ^^^^^^^ expected `&str`, found `str`\n   |\n   = note: expected reference\
    \ `&&str`\n              found reference `&'static str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpr4__scre.rs:14:13\n   |\n9  |         let a_num = match\
    \ a {\n   |                           - this expression has type `&&str`\n...\n\
    14 |             \"four\" => 4,\n   |             ^^^^^^ expected `&str`, found\
    \ `str`\n   |\n   = note: expected reference `&&str`\n              found reference\
    \ `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr4__scre.rs:15:13\n\
    \   |\n9  |         let a_num = match a {\n   |                           - this\
    \ expression has type `&&str`\n...\n15 |             \"five\" => 5,\n   |    \
    \         ^^^^^^ expected `&str`, found `str`\n   |\n   = note: expected reference\
    \ `&&str`\n    "
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|num| match num {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|num|\
    \ match num {\n            0 => \"zero\",\n            1 => \"one\",\n       \
    \     2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n\
    \            5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        nums.push(match num {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    nums.sort();\n    let mut result =\
    \ String::new();\n    for num in nums {\n        result.push_str(match num {\n\
    \            0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\"\
    ,\n            3 => \"three\",\n            4 => \"four\",\n            5 => \"\
    five\",\n            6 => \"six\",\n            7 => \"seven\",\n            8\
    \ => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid\
    \ input\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split(' ').collect();\n    numbers.sort_by(|a, b| {\n        let a =\
    \ number_to_int(a);\n        let b = number_to_int(b);\n        a.cmp(&b)\n  \
    \  });\n    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmp8d_tmod_.rs:9:17\n  |\n9 |         let a = number_to_int(a);\n  |  \
    \               ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `number_to_int` in this scope\n  --> /tmp/tmp8d_tmod_.rs:10:17\n\
    \   |\n10 |         let b = number_to_int(b);\n   |                 ^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<_> = numbers.split_whitespace().collect();\n\
    \    numbers.sort_by_key(|&num| {\n        match num {\n            \"zero\" =>\
    \ 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"three\"\
    \ => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n            \"\
    six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n      \
    \      \"nine\" => 9,\n            _ => panic!(\"Invalid number: {}\", num),\n\
    \        }\n    });\n    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers: Vec<String>\
    \ = numbers.split_whitespace().map(|s| s.to_string()).collect();\n    sorted_numbers.sort_by(|a,\
    \ b| {\n        let a_num = number_to_int(a);\n        let b_num = number_to_int(b);\n\
    \        a_num.cmp(&b_num)\n    });\n    sorted_numbers.join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmp0czjzzsy.rs:9:21\n  |\n9 |         let a_num = number_to_int(a);\n \
    \ |                     ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_int` in this scope\n  --> /tmp/tmp0czjzzsy.rs:10:21\n\
    \   |\n10 |         let b_num = number_to_int(b);\n   |                     ^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpt_7ss9km.rs:8:28\n  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                            ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_int` in this scope\n --> /tmp/tmpt_7ss9km.rs:8:50\n\
    \  |\n8 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                                                  ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|numeral| match numeral {\n       \
    \     \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n \
    \           \"three\" => 3,\n            \"four\" => 4,\n            \"five\"\
    \ => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n            \"\
    eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"Invalid numeral\"\
    ),\n        })\n        .collect();\n    numbers.sort();\n    numbers\n      \
    \  .iter()\n        .map(|num| match num {\n            0 => \"zero\",\n     \
    \       1 => \"one\",\n            2 => \"two\",\n            3 => \"three\",\n\
    \            4 => \"four\",\n            5 => \"five\",\n            6 => \"six\"\
    ,\n            7 => \"seven\",\n            8 => \"eight\",\n            9 =>\
    \ \"nine\",\n            _ => panic!(\"Invalid numeral\"),\n        })\n     \
    \   .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<_> = numbers.split_whitespace().collect();\n\
    \    numbers.sort_by_key(|&num| match num {\n        \"zero\" => 0,\n        \"\
    one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"four\"\
    \ => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\" => 7,\n\
    \        \"eight\" => 8,\n        \"nine\" => 9,\n        _ => unreachable!(),\n\
    \    });\n    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        nums.push(match num {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    nums.sort();\n    let mut result =\
    \ String::new();\n    for num in nums {\n        result.push_str(match num {\n\
    \            0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\"\
    ,\n            3 => \"three\",\n            4 => \"four\",\n            5 => \"\
    five\",\n            6 => \"six\",\n            7 => \"seven\",\n            8\
    \ => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid\
    \ input\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|n| match n {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<String>\
    \ = numbers.split_whitespace().map(|s| s.to_string()).collect();\n    numbers.sort_by(|a,\
    \ b| {\n        let a: u32 = number_to_int(a);\n        let b: u32 = number_to_int(b);\n\
    \        a.cmp(&b)\n    });\n    numbers.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpos4wyu60.rs:9:22\n  |\n9 |         let a: u32 = number_to_int(a);\n\
    \  |                      ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_int` in this scope\n  --> /tmp/tmpos4wyu60.rs:10:22\n\
    \   |\n10 |         let b: u32 = number_to_int(b);\n   |                     \
    \ ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|num| match num {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|num|\
    \ match num {\n            0 => \"zero\",\n            1 => \"one\",\n       \
    \     2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n\
    \            5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<String>\
    \ = numbers.split_whitespace().map(|s| s.to_string()).collect();\n    numbers.sort_by(|a,\
    \ b| NUMBERS[a].cmp(&NUMBERS[b]));\n    numbers.join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `NUMBERS` in this scope\n --> /tmp/tmpyaljg5va.rs:8:28\n\
    \  |\n8 |     numbers.sort_by(|a, b| NUMBERS[a].cmp(&NUMBERS[b]));\n  |      \
    \                      ^^^^^^^ help: a local variable with a similar name exists:\
    \ `numbers`\n\nerror[E0425]: cannot find value `NUMBERS` in this scope\n --> /tmp/tmpyaljg5va.rs:8:44\n\
    \  |\n8 |     numbers.sort_by(|a, b| NUMBERS[a].cmp(&NUMBERS[b]));\n  |      \
    \                                      ^^^^^^^ help: a local variable with a similar\
    \ name exists: `numbers`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        nums.push(match num {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        });\n    }\n    nums.sort();\n    let mut result =\
    \ String::new();\n    for num in nums {\n        result.push_str(match num {\n\
    \            0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\"\
    ,\n            3 => \"three\",\n            4 => \"four\",\n            5 => \"\
    five\",\n            6 => \"six\",\n            7 => \"seven\",\n            8\
    \ => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid\
    \ number\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        nums.push(match num {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number: {}\", num),\n        });\n    }\n    nums.sort();\n    let mut\
    \ result = String::new();\n    for num in nums {\n        result.push_str(match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number: {}\", num),\n        });\n        result.push(' ');\n    }\n \
    \   result.pop();\n    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number: {}\", s),\n\
    \        })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number: {}\", n),\n        })\n        .collect::<Vec<&str>>()\n     \
    \   .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        nums.push(match num {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    nums.sort();\n    let mut result =\
    \ String::new();\n    for num in nums {\n        result.push_str(match num {\n\
    \            0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\"\
    ,\n            3 => \"three\",\n            4 => \"four\",\n            5 => \"\
    five\",\n            6 => \"six\",\n            7 => \"seven\",\n            8\
    \ => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid\
    \ input\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        nums.push(match num {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        });\n    }\n    nums.sort();\n    let mut result =\
    \ String::new();\n    for num in nums {\n        result.push_str(match num {\n\
    \            0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\"\
    ,\n            3 => \"three\",\n            4 => \"four\",\n            5 => \"\
    five\",\n            6 => \"six\",\n            7 => \"seven\",\n            8\
    \ => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid\
    \ number\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split(' ').collect();\n    numbers.sort_by(|a, b| {\n        let a_num\
    \ = number_to_int(a);\n        let b_num = number_to_int(b);\n        a_num.cmp(&b_num)\n\
    \    });\n    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpi4fy9_p8.rs:9:21\n  |\n9 |         let a_num = number_to_int(a);\n \
    \ |                     ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_int` in this scope\n  --> /tmp/tmpi4fy9_p8.rs:10:21\n\
    \   |\n10 |         let b_num = number_to_int(b);\n   |                     ^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b| {\n      \
    \  let a = number_to_int(a);\n        let b = number_to_int(b);\n        a.cmp(&b)\n\
    \    });\n    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpufhy0xfh.rs:9:17\n  |\n9 |         let a = number_to_int(a);\n  |  \
    \               ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `number_to_int` in this scope\n  --> /tmp/tmpufhy0xfh.rs:10:17\n\
    \   |\n10 |         let b = number_to_int(b);\n   |                 ^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|numeral| match numeral {\n       \
    \     \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n \
    \           \"three\" => 3,\n            \"four\" => 4,\n            \"five\"\
    \ => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n            \"\
    eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"Invalid numeral\"\
    ),\n        })\n        .collect();\n    nums.sort();\n    let mut result = String::new();\n\
    \    for num in nums {\n        result.push_str(match num {\n            0 =>\
    \ \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n          \
    \  3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n \
    \           6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\"\
    ,\n            9 => \"nine\",\n            _ => panic!(\"Invalid numeral\"),\n\
    \        });\n        result.push(' ');\n    }\n    result.pop();\n    result\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b| {\n      \
    \  let a = match a {\n            \"zero\" => 0,\n            \"one\" => 1,\n\
    \            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => panic!(\"Invalid number\"),\n        };\n        let b = match b\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        };\n        a.cmp(&b)\n    });\n    numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp3c0pv8v.rs:10:13\n   |\n\
    9  |         let a = match a {\n   |                       - this expression has\
    \ type `&&str`\n10 |             \"zero\" => 0,\n   |             ^^^^^^ expected\
    \ `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n         \
    \     found reference `&'static str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpp3c0pv8v.rs:11:13\n   |\n9  |         let a = match a {\n   |      \
    \                 - this expression has type `&&str`\n10 |             \"zero\"\
    \ => 0,\n11 |             \"one\" => 1,\n   |             ^^^^^ expected `&str`,\
    \ found `str`\n   |\n   = note: expected reference `&&str`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpp3c0pv8v.rs:12:13\n\
    \   |\n9  |         let a = match a {\n   |                       - this expression\
    \ has type `&&str`\n...\n12 |             \"two\" => 2,\n   |             ^^^^^\
    \ expected `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpp3c0pv8v.rs:13:13\n   |\n9  |         let a = match a {\n   | \
    \                      - this expression has type `&&str`\n...\n13 |         \
    \    \"three\" => 3,\n   |             ^^^^^^^ expected `&str`, found `str`\n\
    \   |\n   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpp3c0pv8v.rs:14:13\n  \
    \ |\n9  |         let a = match a {\n   |                       - this expression\
    \ has type `&&str`\n...\n14 |             \"four\" => 4,\n   |             ^^^^^^\
    \ expected `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpp3c0pv8v.rs:15:13\n   |\n9  |         let a = match a {\n   | \
    \                      - this expression has type `&&str`\n...\n15 |         \
    \    \"five\" => 5,\n   |             ^^^^^^ expected `&str`, found `str`\n  \
    \ |\n   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror["
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums = numbers.split_whitespace().map(|n|\
    \ match n {\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" =>\
    \ 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n\
    \        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n   \
    \     \"nine\" => 9,\n        _ => panic!(\"Invalid number: {}\", n),\n    }).collect::<Vec<_>>();\n\
    \    nums.sort();\n    nums.iter().map(|n| match n {\n        0 => \"zero\",\n\
    \        1 => \"one\",\n        2 => \"two\",\n        3 => \"three\",\n     \
    \   4 => \"four\",\n        5 => \"five\",\n        6 => \"six\",\n        7 =>\
    \ \"seven\",\n        8 => \"eight\",\n        9 => \"nine\",\n        _ => panic!(\"\
    Invalid number: {}\", n),\n    }).collect::<Vec<_>>().join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<_> = numbers.split_whitespace().collect();\n\
    \    numbers.sort_by_key(|s| match s {\n        \"zero\" => 0,\n        \"one\"\
    \ => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"four\" => 4,\n\
    \        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\" => 7,\n    \
    \    \"eight\" => 8,\n        \"nine\" => 9,\n        _ => unreachable!(),\n \
    \   });\n    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpx9avwnio.rs:9:9\n  |\n8 |\
    \     numbers.sort_by_key(|s| match s {\n  |                                 \
    \  - this expression has type `&&str`\n9 |         \"zero\" => 0,\n  |       \
    \  ^^^^^^ expected `&str`, found `str`\n  |\n  = note: expected reference `&&str`\n\
    \             found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpx9avwnio.rs:10:9\n   |\n8  |     numbers.sort_by_key(|s| match\
    \ s {\n   |                                   - this expression has type `&&str`\n\
    9  |         \"zero\" => 0,\n10 |         \"one\" => 1,\n   |         ^^^^^ expected\
    \ `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n         \
    \     found reference `&'static str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpx9avwnio.rs:11:9\n   |\n8  |     numbers.sort_by_key(|s| match s {\n\
    \   |                                   - this expression has type `&&str`\n...\n\
    11 |         \"two\" => 2,\n   |         ^^^^^ expected `&str`, found `str`\n\
    \   |\n   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx9avwnio.rs:12:9\n   |\n\
    8  |     numbers.sort_by_key(|s| match s {\n   |                             \
    \      - this expression has type `&&str`\n...\n12 |         \"three\" => 3,\n\
    \   |         ^^^^^^^ expected `&str`, found `str`\n   |\n   = note: expected\
    \ reference `&&str`\n              found reference `&'static str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpx9avwnio.rs:13:9\n   |\n8  |     numbers.sort_by_key(|s|\
    \ match s {\n   |                                   - this expression has type\
    \ `&&str`\n...\n13 |         \"four\" => 4,\n   |         ^^^^^^ expected `&str`,\
    \ found `str`\n   |\n   = note: expected reference `&&str`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx9avwnio.rs:14:9\n\
    \   |\n8  |     numbers.sort_by_key(|s| match s {\n   |                      \
    \             - this expression has type `&&str`\n...\n14 |         \"five\" =>\
    \ 5,\n   |         ^^^^^^ expected `&str`, found `str`\n   |\n   = note: exp"
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        nums.push(match num {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    nums.sort();\n    let mut result =\
    \ String::new();\n    for num in nums {\n        result.push_str(match num {\n\
    \            0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\"\
    ,\n            3 => \"three\",\n            4 => \"four\",\n            5 => \"\
    five\",\n            6 => \"six\",\n            7 => \"seven\",\n            8\
    \ => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid\
    \ input\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|num| {\n            match num {\n\
    \                \"zero\" => 0,\n                \"one\" => 1,\n             \
    \   \"two\" => 2,\n                \"three\" => 3,\n                \"four\" =>\
    \ 4,\n                \"five\" => 5,\n                \"six\" => 6,\n        \
    \        \"seven\" => 7,\n                \"eight\" => 8,\n                \"\
    nine\" => 9,\n                _ => panic!(\"Invalid number: {}\", num),\n    \
    \        }\n        })\n        .collect();\n    numbers.sort();\n    numbers\n\
    \        .iter()\n        .map(|num| match num {\n            0 => \"zero\",\n\
    \            1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Invalid number: {}\", num),\n    \
    \    })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<&str> =\
    \ numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b| {\n      \
    \  let a = match a {\n            \"zero\" => 0,\n            \"one\" => 1,\n\
    \            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => panic!(\"Invalid number\"),\n        };\n        let b = match b\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        };\n        a.cmp(&b)\n    });\n    numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj4zh7l6x.rs:10:13\n   |\n\
    9  |         let a = match a {\n   |                       - this expression has\
    \ type `&&str`\n10 |             \"zero\" => 0,\n   |             ^^^^^^ expected\
    \ `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n         \
    \     found reference `&'static str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpj4zh7l6x.rs:11:13\n   |\n9  |         let a = match a {\n   |      \
    \                 - this expression has type `&&str`\n10 |             \"zero\"\
    \ => 0,\n11 |             \"one\" => 1,\n   |             ^^^^^ expected `&str`,\
    \ found `str`\n   |\n   = note: expected reference `&&str`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj4zh7l6x.rs:12:13\n\
    \   |\n9  |         let a = match a {\n   |                       - this expression\
    \ has type `&&str`\n...\n12 |             \"two\" => 2,\n   |             ^^^^^\
    \ expected `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpj4zh7l6x.rs:13:13\n   |\n9  |         let a = match a {\n   | \
    \                      - this expression has type `&&str`\n...\n13 |         \
    \    \"three\" => 3,\n   |             ^^^^^^^ expected `&str`, found `str`\n\
    \   |\n   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj4zh7l6x.rs:14:13\n  \
    \ |\n9  |         let a = match a {\n   |                       - this expression\
    \ has type `&&str`\n...\n14 |             \"four\" => 4,\n   |             ^^^^^^\
    \ expected `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpj4zh7l6x.rs:15:13\n   |\n9  |         let a = match a {\n   | \
    \                      - this expression has type `&&str`\n...\n15 |         \
    \    \"five\" => 5,\n   |             ^^^^^^ expected `&str`, found `str`\n  \
    \ |\n   = note: expected reference `&&str`\n              found reference `&'static\
    \ str`\n\nerror["
  exit_code: 1
  status: SyntaxError
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<_> = numbers.split_whitespace().collect();\n\
    \    numbers.sort_by_key(|&num| {\n        match num {\n            \"zero\" =>\
    \ 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"three\"\
    \ => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n            \"\
    six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n      \
    \      \"nine\" => 9,\n            _ => panic!(\"Invalid number: {}\", num),\n\
    \        }\n    });\n    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|num| match num {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"),\n   \
    \     })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|num|\
    \ match num {\n            0 => \"zero\",\n            1 => \"one\",\n       \
    \     2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n\
    \            5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number: {}\", s),\n\
    \        })\n        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid number: {}\", n),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        nums.push(match num {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid input\"),\n        });\n    }\n    nums.sort();\n    let mut result =\
    \ String::new();\n    for num in nums {\n        result.push_str(match num {\n\
    \            0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\"\
    ,\n            3 => \"three\",\n            4 => \"four\",\n            5 => \"\
    five\",\n            6 => \"six\",\n            7 => \"seven\",\n            8\
    \ => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid\
    \ input\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<i32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        nums.push(match num {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        });\n    }\n    nums.sort();\n    let mut result =\
    \ String::new();\n    for num in nums {\n        result.push_str(match num {\n\
    \            0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\"\
    ,\n            3 => \"three\",\n            4 => \"four\",\n            5 => \"\
    five\",\n            6 => \"six\",\n            7 => \"seven\",\n            8\
    \ => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid\
    \ number\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        match num {\n          \
    \  \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n         \
    \   \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n       \
    \     \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n     \
    \       \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n   \
    \         \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => panic!(\"Invalid number {}\", num),\n        }\n    }\n    nums.sort();\n\
    \    let mut output = String::new();\n    for num in nums {\n        match num\
    \ {\n            0 => output.push_str(\"zero \"),\n            1 => output.push_str(\"\
    one \"),\n            2 => output.push_str(\"two \"),\n            3 => output.push_str(\"\
    three \"),\n            4 => output.push_str(\"four \"),\n            5 => output.push_str(\"\
    five \"),\n            6 => output.push_str(\"six \"),\n            7 => output.push_str(\"\
    seven \"),\n            8 => output.push_str(\"eight \"),\n            9 => output.push_str(\"\
    nine \"),\n            _ => panic!(\"Invalid number {}\", num),\n        }\n \
    \   }\n    output.trim().to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number: {}\", s),\n\
    \        })\n        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid number: {}\", n),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number: {}\", s),\n\
    \        })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number: {}\", n),\n        })\n        .collect::<Vec<&str>>()\n     \
    \   .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u8> = numbers\n\
    \        .split_whitespace()\n        .map(|num| match num {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|num|\
    \ match num {\n            0 => \"zero\",\n            1 => \"one\",\n       \
    \     2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n\
    \            5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        match num {\n          \
    \  \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n         \
    \   \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n       \
    \     \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n     \
    \       \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n   \
    \         \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => panic!(\"Invalid input\"),\n        }\n    }\n    nums.sort();\n\
    \    let mut result = String::new();\n    for num in nums {\n        match num\
    \ {\n            0 => result.push_str(\"zero \"),\n            1 => result.push_str(\"\
    one \"),\n            2 => result.push_str(\"two \"),\n            3 => result.push_str(\"\
    three \"),\n            4 => result.push_str(\"four \"),\n            5 => result.push_str(\"\
    five \"),\n            6 => result.push_str(\"six \"),\n            7 => result.push_str(\"\
    seven \"),\n            8 => result.push_str(\"eight \"),\n            9 => result.push_str(\"\
    nine \"),\n            _ => panic!(\"Invalid input\"),\n        }\n    }\n   \
    \ result.trim().to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        match num {\n          \
    \  \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n         \
    \   \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n       \
    \     \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n     \
    \       \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n   \
    \         \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => panic!(\"Invalid number: {}\", num),\n        }\n    }\n   \
    \ nums.sort();\n    let mut result = String::new();\n    for num in nums {\n \
    \       match num {\n            0 => result.push_str(\"zero \"),\n          \
    \  1 => result.push_str(\"one \"),\n            2 => result.push_str(\"two \"\
    ),\n            3 => result.push_str(\"three \"),\n            4 => result.push_str(\"\
    four \"),\n            5 => result.push_str(\"five \"),\n            6 => result.push_str(\"\
    six \"),\n            7 => result.push_str(\"seven \"),\n            8 => result.push_str(\"\
    eight \"),\n            9 => result.push_str(\"nine \"),\n            _ => panic!(\"\
    Invalid number: {}\", num),\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut numbers: Vec<u32> = numbers\n\
    \        .split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"Invalid number\"),\n  \
    \      })\n        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid number\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfn\
    \ sort_numbers(numbers: String) -> String {\n    let mut nums: Vec<u32> = Vec::new();\n\
    \    for num in numbers.split_whitespace() {\n        nums.push(match num {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => unreachable!(),\n\
    \        });\n    }\n    nums.sort();\n    let mut result = String::new();\n \
    \   for num in nums {\n        result.push_str(match num {\n            0 => \"\
    zero\",\n            1 => \"one\",\n            2 => \"two\",\n            3 =>\
    \ \"three\",\n            4 => \"four\",\n            5 => \"five\",\n       \
    \     6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\",\n\
    \            9 => \"nine\",\n            _ => unreachable!(),\n        });\n \
    \       result.push(' ');\n    }\n    result.pop();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
