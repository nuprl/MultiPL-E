name: HumanEval_127_intersection
language: rust
prompt: "/// You are given two intervals,\n/// where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n/// The given intervals are closed\
  \ which means that the interval (start, end)\n/// includes both start and end.\n\
  /// For each given interval, it is assumed that its start is less or equal its end.\n\
  /// Your task is to determine whether the length of intersection of these two \n\
  /// intervals is a prime number.\n/// Example, the intersection of the intervals\
  \ (1, 3), (2, 4) is (2, 3)\n/// which its length is 1, which not a prime number.\n\
  /// If the length of the intersection is a prime number, return \"YES\",\n/// otherwise,\
  \ return \"NO\".\n/// If the two intervals don't intersect, return \"NO\".\n///\
  \ [input/output] samples:\n/// intersection((1, 2), (2, 3)) ==> \"NO\"\n/// intersection((-1,\
  \ 1), (0, 4)) ==> \"NO\"\n/// intersection((-3, -1), (-5, 5)) ==> \"YES\"\nfn intersection(interval1:\
  \ (isize, isize), interval2: (isize, isize)) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = intersection;\n    assert_eq!(candidate((1,\
  \ 2), (2, 3)), String::from(\"NO\"));\n    assert_eq!(candidate((-1, 1), (0, 4)),\
  \ String::from(\"NO\"));\n    assert_eq!(candidate((-3, -1), (-5, 5)), String::from(\"\
  YES\"));\n    assert_eq!(candidate((-2, 2), (-4, 0)), String::from(\"YES\"));\n\
  \    assert_eq!(candidate((-11, 2), (-1, -1)), String::from(\"NO\"));\n    assert_eq!(candidate((1,\
  \ 2), (3, 5)), String::from(\"NO\"));\n    assert_eq!(candidate((1, 2), (1, 2)),\
  \ String::from(\"NO\"));\n    assert_eq!(candidate((-2, -2), (-3, -2)), String::from(\"\
  NO\"));\n}\n"
completions: ["    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    if start1 > end2 || start2 > end1 {\n        return \"NO\".to_string();\n\
    \    }\n    let start = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1,\
    \ end2);\n    let len = end - start + 1;\n    if len <= 1 {\n        return \"\
    NO\".to_string();\n    }\n    if len == 2 {\n        return \"YES\".to_string();\n\
    \    }\n    for i in 2..len {\n        if len % i == 0 {\n            return \"\
    NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if start > end {\n \
    \       return \"NO\".to_string();\n    }\n    let len = end - start + 1;\n  \
    \  if len <= 1 {\n        return \"NO\".to_string();\n    }\n    for i in 2..len\
    \ {\n        if len % i == 0 {\n            return \"NO\".to_string();\n     \
    \   }\n    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = start1.max(start2);\n  \
    \  let end = end1.min(end2);\n    if start > end {\n        return \"NO\".to_string();\n\
    \    }\n    let len = end - start + 1;\n    if len == 1 {\n        return \"NO\"\
    .to_string();\n    }\n    if len == 2 {\n        return \"YES\".to_string();\n\
    \    }\n    for i in 2..len {\n        if len % i == 0 {\n            return \"\
    NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    let start = start1.max(start2);\n\
    \    let end = end1.min(end2);\n    if start > end {\n        return \"NO\".to_string();\n\
    \    }\n    let len = end - start + 1;\n    if len == 1 {\n        return \"NO\"\
    .to_string();\n    }\n    let mut is_prime = true;\n    for i in 2..len {\n  \
    \      if len % i == 0 {\n            is_prime = false;\n            break;\n\
    \        }\n    }\n    if is_prime {\n        \"YES\".to_string()\n    } else\
    \ {\n        \"NO\".to_string()\n    }", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = std::cmp::max(start1, start2);\n\
    \    let end = std::cmp::min(end1, end2);\n    if start > end {\n        return\
    \ \"NO\".to_string();\n    }\n    let len = end - start + 1;\n    if len == 1\
    \ {\n        return \"NO\".to_string();\n    }\n    if len == 2 {\n        return\
    \ \"YES\".to_string();\n    }\n    for i in 2..len {\n        if len % i == 0\
    \ {\n            return \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()",
  "    let (a, b) = interval1;\n    let (c, d) = interval2;\n    let (start, end)\
    \ = if a > c {\n        (a, b)\n    } else {\n        (c, d)\n    };\n    let\
    \ (start, end) = if start > end {\n        (end, start)\n    } else {\n      \
    \  (start, end)\n    };\n    let (start, end) = if start > end {\n        (end,\
    \ start)\n    } else {\n        (start, end)\n    };\n    let (start, end) = if\
    \ start > end {\n        (end, start)\n    } else {\n        (start, end)\n  \
    \  };\n    let (start, end) = if start > end {\n        (end, start)\n    } else\
    \ {\n        (start, end)\n    };\n    let (start, end) = if start > end {\n \
    \       (end, start)\n    } else {\n        (start, end)\n    };\n    let (start,\
    \ end) = if start > end {\n        (end, start)\n    } else {\n        (start,\
    \ end)\n    };\n    let (start, end) = if start > end {\n        (end, start)\n\
    \    } else {\n        (start, end)\n    };\n    let (start, end) = if start >\
    \ end {\n        (end, start)\n    } else {\n        (start, end)\n    };\n  \
    \  let (start, end) = if start > end {\n        (end, start)\n    } else {\n \
    \       (start, end)\n    };\n    let (start, end) = if start > end {\n      \
    \  (end, start)\n    } else {\n        (start, end)\n    };\n    let (start, end)\
    \ = if start > end {\n        (end, start)\n    } else {\n        (start, end)\n\
    \    };\n    let (start, end) = if start > end {\n        (end, start)\n    }\
    \ else {\n        (start, end)\n    };\n    let (start, end) = if start > end\
    \ {\n        (end, start", "    let (a, b) = interval1;\n    let (c, d) = interval2;\n\
    \    let (start, end) = if a > c { (a, b) } else { (c, d) };\n    let (start,\
    \ end) = if start > end { (end, start) } else { (start, end) };\n    if start\
    \ > end {\n        return \"NO\".to_string();\n    }\n    let len = end - start\
    \ + 1;\n    if len <= 1 {\n        return \"NO\".to_string();\n    }\n    if len\
    \ == 2 {\n        return \"YES\".to_string();\n    }\n    for i in 2..len {\n\
    \        if len % i == 0 {\n            return \"NO\".to_string();\n        }\n\
    \    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n    let\
    \ (start2, end2) = interval2;\n    if start1 > end2 || start2 > end1 {\n     \
    \   return \"NO\".to_string();\n    }\n    let start = std::cmp::max(start1, start2);\n\
    \    let end = std::cmp::min(end1, end2);\n    let length = end - start + 1;\n\
    \    if length <= 1 {\n        return \"NO\".to_string();\n    }\n    let mut\
    \ is_prime = true;\n    for i in 2..length {\n        if length % i == 0 {\n \
    \           is_prime = false;\n            break;\n        }\n    }\n    if is_prime\
    \ {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n \
    \   }", "    let (a, b) = interval1;\n    let (c, d) = interval2;\n    let mut\
    \ result = \"NO\";\n    if a <= c && c <= b {\n        if d <= b {\n         \
    \   result = if (d - c).abs() == 1 { \"YES\" } else { \"NO\" };\n        } else\
    \ {\n            result = if (b - c).abs() == 1 { \"YES\" } else { \"NO\" };\n\
    \        }\n    } else if c <= a && a <= d {\n        if b <= d {\n          \
    \  result = if (b - a).abs() == 1 { \"YES\" } else { \"NO\" };\n        } else\
    \ {\n            result = if (d - a).abs() == 1 { \"YES\" } else { \"NO\" };\n\
    \        }\n    }\n    result.to_string()", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let (start, end) = (start1.max(start2),\
    \ end1.min(end2));\n    if start > end {\n        return \"NO\".to_string();\n\
    \    }\n    let len = end - start + 1;\n    if len == 1 {\n        return \"NO\"\
    .to_string();\n    }\n    let mut is_prime = true;\n    for i in 2..len {\n  \
    \      if len % i == 0 {\n            is_prime = false;\n            break;\n\
    \        }\n    }\n    if is_prime {\n        \"YES\".to_string()\n    } else\
    \ {\n        \"NO\".to_string()\n    }", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    if start1 > end2 || start2 > end1 {\n\
    \        return \"NO\".to_string();\n    }\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    let length = end - start\
    \ + 1;\n    if length <= 1 {\n        return \"NO\".to_string();\n    }\n    if\
    \ length == 2 {\n        return \"YES\".to_string();\n    }\n    for i in 2..length\
    \ {\n        if length % i == 0 {\n            return \"NO\".to_string();\n  \
    \      }\n    }\n    \"YES\".to_string()", "    let (a, b) = interval1;\n    let\
    \ (c, d) = interval2;\n    if a > d || b < c {\n        return \"NO\".to_string();\n\
    \    }\n    let (mut start, mut end) = (a, b);\n    if c > a {\n        start\
    \ = c;\n    }\n    if d < b {\n        end = d;\n    }\n    let len = end - start\
    \ + 1;\n    if len == 2 {\n        return \"YES\".to_string();\n    }\n    for\
    \ i in 2..len {\n        if len % i == 0 {\n            return \"NO\".to_string();\n\
    \        }\n    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = std::cmp::max(start1, start2);\n\
    \    let end = std::cmp::min(end1, end2);\n    if start > end {\n        return\
    \ \"NO\".to_string();\n    }\n    let len = end - start + 1;\n    if len == 1\
    \ {\n        return \"NO\".to_string();\n    }\n    if len == 2 {\n        return\
    \ \"YES\".to_string();\n    }\n    for i in 2..len {\n        if len % i == 0\
    \ {\n            return \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let\
    \ start = start1.max(start2);\n    let end = end1.min(end2);\n    if start > end\
    \ {\n        return \"NO\".to_string();\n    }\n    let length = (end - start\
    \ + 1) as usize;\n    if length == 1 {\n        return \"NO\".to_string();\n \
    \   }\n    if is_prime(length) {\n        return \"YES\".to_string();\n    }\n\
    \    \"NO\".to_string()", "    let (a, b) = interval1;\n    let (c, d) = interval2;\n\
    \    let (start, end) = if a > c {\n        (a, b)\n    } else {\n        (c,\
    \ d)\n    };\n    let (start, end) = if start > end {\n        (end, start)\n\
    \    } else {\n        (start, end)\n    };\n    let (start, end) = if start <\
    \ 0 {\n        (0, end)\n    } else {\n        (start, end)\n    };\n    let mut\
    \ length = end - start;\n    if length == 0 {\n        return \"NO\".to_string();\n\
    \    }\n    length += 1;\n    let mut is_prime = true;\n    for i in 2..length\
    \ {\n        if length % i == 0 {\n            is_prime = false;\n           \
    \ break;\n        }\n    }\n    if is_prime {\n        \"YES\".to_string()\n \
    \   } else {\n        \"NO\".to_string()\n    }", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = if start1 > start2 { start1\
    \ } else { start2 };\n    let end = if end1 < end2 { end1 } else { end2 };\n \
    \   if start > end {\n        return \"NO\".to_string();\n    }\n    let len =\
    \ end - start + 1;\n    if len == 1 {\n        return \"NO\".to_string();\n  \
    \  }\n    if len == 2 {\n        return \"YES\".to_string();\n    }\n    for i\
    \ in 2..len {\n        if len % i == 0 {\n            return \"NO\".to_string();\n\
    \        }\n    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let mut start = std::cmp::max(start1,\
    \ start2);\n    let mut end = std::cmp::min(end1, end2);\n    if start > end {\n\
    \        return \"NO\".to_string();\n    }\n    if start == end {\n        return\
    \ \"YES\".to_string();\n    }\n    while start < end {\n        if end % start\
    \ == 0 {\n            return \"NO\".to_string();\n        }\n        start +=\
    \ 1;\n    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let mut start = start1.max(start2);\n\
    \    let mut end = end1.min(end2);\n    if start > end {\n        return \"NO\"\
    .to_string();\n    }\n    if start == end {\n        return \"YES\".to_string();\n\
    \    }\n    while start < end {\n        if end % start == 0 {\n            return\
    \ \"NO\".to_string();\n        }\n        start += 1;\n    }\n    \"YES\".to_string()",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let\
    \ start = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1, end2);\n\
    \    if start > end {\n        return \"NO\".to_string();\n    }\n    let len\
    \ = end - start + 1;\n    if len == 1 {\n        return \"NO\".to_string();\n\
    \    }\n    if len == 2 {\n        return \"YES\".to_string();\n    }\n    for\
    \ i in 2..len {\n        if len % i == 0 {\n            return \"NO\".to_string();\n\
    \        }\n    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = std::cmp::max(start1, start2);\n\
    \    let end = std::cmp::min(end1, end2);\n    if start > end {\n        return\
    \ \"NO\".to_string();\n    }\n    let len = end - start + 1;\n    if len == 1\
    \ {\n        return \"NO\".to_string();\n    }\n    if len == 2 {\n        return\
    \ \"YES\".to_string();\n    }\n    for i in 2..len {\n        if len % i == 0\
    \ {\n            return \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()",
  "    let (mut start, mut end) = (interval1.0, interval1.1);\n    if interval1.0\
    \ > interval2.0 {\n        start = interval2.0;\n    }\n    if interval1.1 < interval2.1\
    \ {\n        end = interval2.1;\n    }\n    if start > end {\n        return \"\
    NO\".to_string();\n    }\n    let mut count = 0;\n    for i in start..=end {\n\
    \        count += 1;\n    }\n    if is_prime(count) {\n        return \"YES\"\
    .to_string();\n    }\n    \"NO\".to_string()", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let mut start = start1;\n    let mut\
    \ end = end1;\n    if start2 > start1 {\n        start = start2;\n    }\n    if\
    \ end2 < end1 {\n        end = end2;\n    }\n    if start > end {\n        return\
    \ \"NO\".to_string();\n    }\n    let len = end - start + 1;\n    if len < 2 {\n\
    \        return \"NO\".to_string();\n    }\n    if len == 2 {\n        return\
    \ \"YES\".to_string();\n    }\n    for i in 2..len {\n        if len % i == 0\
    \ {\n            return \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    if\
    \ start1 > end2 || start2 > end1 {\n        return \"NO\".to_string();\n    }\n\
    \    let start = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1,\
    \ end2);\n    if is_prime(end - start) {\n        \"YES\".to_string()\n    } else\
    \ {\n        \"NO\".to_string()\n    }", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = std::cmp::max(start1, start2);\n\
    \    let end = std::cmp::min(end1, end2);\n    if start > end {\n        return\
    \ \"NO\".to_string();\n    }\n    let len = end - start + 1;\n    if len == 2\
    \ {\n        return \"YES\".to_string();\n    }\n    for i in 2..len {\n     \
    \   if len % i == 0 {\n            return \"NO\".to_string();\n        }\n   \
    \ }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n    let (start2,\
    \ end2) = interval2;\n    let mut start = start1;\n    let mut end = end1;\n \
    \   if start2 > start1 {\n        start = start2;\n    }\n    if end2 < end1 {\n\
    \        end = end2;\n    }\n    if start > end {\n        return \"NO\".to_string();\n\
    \    }\n    let len = end - start + 1;\n    if len == 2 {\n        return \"YES\"\
    .to_string();\n    }\n    for i in 2..len {\n        if len % i == 0 {\n     \
    \       return \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let\
    \ start = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1, end2);\n\
    \    if start > end {\n        return \"NO\".to_string();\n    }\n    let len\
    \ = end - start + 1;\n    if len == 1 {\n        return \"NO\".to_string();\n\
    \    }\n    if len == 2 {\n        return \"YES\".to_string();\n    }\n    for\
    \ i in 2..len {\n        if len % i == 0 {\n            return \"NO\".to_string();\n\
    \        }\n    }\n    \"YES\".to_string()", "    let (a, b) = interval1;\n  \
    \  let (c, d) = interval2;\n    if a > b || c > d {\n        return \"NO\".to_string();\n\
    \    }\n    let mut start = a;\n    let mut end = b;\n    if c > a {\n       \
    \ start = c;\n    }\n    if d < b {\n        end = d;\n    }\n    if start >=\
    \ end {\n        return \"NO\".to_string();\n    }\n    let len = end - start\
    \ + 1;\n    if len == 1 {\n        return \"NO\".to_string();\n    }\n    if len\
    \ == 2 {\n        return \"YES\".to_string();\n    }\n    for i in 2..len {\n\
    \        if len % i == 0 {\n            return \"NO\".to_string();\n        }\n\
    \    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n    let\
    \ (start2, end2) = interval2;\n    let (start, end) = (start1.max(start2), end1.min(end2));\n\
    \    if start > end {\n        return \"NO\".to_string();\n    }\n    let len\
    \ = end - start + 1;\n    if len == 2 {\n        return \"YES\".to_string();\n\
    \    }\n    for i in 2..len {\n        if len % i == 0 {\n            return \"\
    NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (a, b)\
    \ = interval1;\n    let (c, d) = interval2;\n    let (mut start, mut end) = (0,\
    \ 0);\n    if a <= c && c <= b {\n        start = c;\n    } else if c <= a &&\
    \ a <= d {\n        start = a;\n    }\n    if a <= d && d <= b {\n        end\
    \ = d;\n    } else if c <= b && b <= d {\n        end = b;\n    }\n    if start\
    \ <= end {\n        let len = end - start + 1;\n        if len == 2 {\n      \
    \      return \"YES\".to_string();\n        }\n        for i in 2..len {\n   \
    \         if len % i == 0 {\n                return \"NO\".to_string();\n    \
    \        }\n        }\n        return \"YES\".to_string();\n    }\n    \"NO\"\
    .to_string()", "    let (start1, end1) = interval1;\n    let (start2, end2) =\
    \ interval2;\n    if start1 > end2 || start2 > end1 {\n        return \"NO\".to_string();\n\
    \    }\n    let start = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1,\
    \ end2);\n    let length = end - start + 1;\n    if length == 1 {\n        return\
    \ \"NO\".to_string();\n    }\n    let mut is_prime = true;\n    for i in 2..length\
    \ {\n        if length % i == 0 {\n            is_prime = false;\n           \
    \ break;\n        }\n    }\n    if is_prime {\n        \"YES\".to_string()\n \
    \   } else {\n        \"NO\".to_string()\n    }", "    let (mut start, mut end)\
    \ = (interval1.0, interval1.1);\n    if start > end {\n        start = interval1.1;\n\
    \        end = interval1.0;\n    }\n    let (mut start2, mut end2) = (interval2.0,\
    \ interval2.1);\n    if start2 > end2 {\n        start2 = interval2.1;\n     \
    \   end2 = interval2.0;\n    }\n    if start > end2 || start2 > end {\n      \
    \  return \"NO\".to_string();\n    }\n    if start2 > start {\n        start =\
    \ start2;\n    }\n    if end2 < end {\n        end = end2;\n    }\n    if start\
    \ == end {\n        return \"NO\".to_string();\n    }\n    if is_prime(end - start)\
    \ {\n        return \"YES\".to_string();\n    }\n    \"NO\".to_string()", "  \
    \  let (a, b) = interval1;\n    let (c, d) = interval2;\n    let mut start = a;\n\
    \    let mut end = b;\n    if a > c {\n        start = c;\n    }\n    if b < d\
    \ {\n        end = d;\n    }\n    if start > end {\n        return \"NO\".to_string();\n\
    \    }\n    if start == end {\n        return \"YES\".to_string();\n    }\n  \
    \  let mut is_prime = true;\n    for i in 2..end {\n        if end % i == 0 {\n\
    \            is_prime = false;\n            break;\n        }\n    }\n    if is_prime\
    \ {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n \
    \   }", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    if start1 > end2 || start2 > end1 {\n        return \"NO\".to_string();\n\
    \    }\n    let start = start1.max(start2);\n    let end = end1.min(end2);\n \
    \   let length = end - start + 1;\n    if length < 2 {\n        return \"NO\"\
    .to_string();\n    }\n    if length == 2 {\n        return \"YES\".to_string();\n\
    \    }\n    for i in 2..length {\n        if length % i == 0 {\n            return\
    \ \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if start > end {\n \
    \       return \"NO\".to_string();\n    }\n    let len = end - start + 1;\n  \
    \  if len == 1 {\n        return \"NO\".to_string();\n    }\n    if len == 2 {\n\
    \        return \"YES\".to_string();\n    }\n    for i in 2..len {\n        if\
    \ len % i == 0 {\n            return \"NO\".to_string();\n        }\n    }\n \
    \   \"YES\".to_string()", "    let (start1, end1) = interval1;\n    let (start2,\
    \ end2) = interval2;\n    let start = start1.max(start2);\n    let end = end1.min(end2);\n\
    \    if start > end {\n        return \"NO\".to_string();\n    }\n    let len\
    \ = end - start + 1;\n    if len == 1 {\n        return \"NO\".to_string();\n\
    \    }\n    if len == 2 {\n        return \"YES\".to_string();\n    }\n    for\
    \ i in 2..len {\n        if len % i == 0 {\n            return \"NO\".to_string();\n\
    \        }\n    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = start1.max(start2);\n  \
    \  let end = end1.min(end2);\n    if start > end {\n        return \"NO\".to_string();\n\
    \    }\n    let len = end - start + 1;\n    if len <= 1 {\n        return \"NO\"\
    .to_string();\n    }\n    if len == 2 {\n        return \"YES\".to_string();\n\
    \    }\n    for i in 2..len {\n        if len % i == 0 {\n            return \"\
    NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (i1_start,\
    \ i1_end) = interval1;\n    let (i2_start, i2_end) = interval2;\n    let mut start\
    \ = i1_start;\n    let mut end = i1_end;\n    if i1_start > i2_start {\n     \
    \   start = i2_start;\n    }\n    if i1_end < i2_end {\n        end = i2_end;\n\
    \    }\n    if start > end {\n        return \"NO\".to_string();\n    }\n    let\
    \ length = end - start + 1;\n    if length == 2 {\n        return \"YES\".to_string();\n\
    \    }\n    for i in 2..length {\n        if length % i == 0 {\n            return\
    \ \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    let start = if\
    \ start1 > start2 { start1 } else { start2 };\n    let end = if end1 < end2 {\
    \ end1 } else { end2 };\n    if start > end {\n        return \"NO\".to_string();\n\
    \    }\n    let len = end - start + 1;\n    if len == 1 {\n        return \"NO\"\
    .to_string();\n    }\n    if len == 2 {\n        return \"YES\".to_string();\n\
    \    }\n    for i in 2..len {\n        if len % i == 0 {\n            return \"\
    NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (a, b)\
    \ = interval1;\n    let (c, d) = interval2;\n    let (mut start, mut end) = (0,\
    \ 0);\n    if a <= c && c <= b {\n        start = c;\n    } else if c <= a &&\
    \ a <= d {\n        start = a;\n    }\n    if a <= d && d <= b {\n        end\
    \ = d;\n    } else if c <= b && b <= d {\n        end = b;\n    }\n    if start\
    \ == 0 || end == 0 {\n        return \"NO\".to_string();\n    }\n    let len =\
    \ end - start;\n    if len == 1 {\n        return \"NO\".to_string();\n    }\n\
    \    let mut is_prime = true;\n    for i in 2..len {\n        if len % i == 0\
    \ {\n            is_prime = false;\n            break;\n        }\n    }\n   \
    \ if is_prime {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n\
    \    }", "    let (a, b) = interval1;\n    let (c, d) = interval2;\n    let mut\
    \ start = a;\n    let mut end = b;\n    if a > c {\n        start = c;\n    }\n\
    \    if b < d {\n        end = d;\n    }\n    if start > end {\n        return\
    \ \"NO\".to_string();\n    }\n    let len = end - start + 1;\n    if len == 1\
    \ {\n        return \"NO\".to_string();\n    }\n    if len == 2 {\n        return\
    \ \"YES\".to_string();\n    }\n    for i in 2..len {\n        if len % i == 0\
    \ {\n            return \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let\
    \ mut start = start1;\n    let mut end = end1;\n    if start2 > start1 {\n   \
    \     start = start2;\n    }\n    if end2 < end1 {\n        end = end2;\n    }\n\
    \    if start > end {\n        return \"NO\".to_string();\n    }\n    let length\
    \ = end - start + 1;\n    if length == 1 {\n        return \"NO\".to_string();\n\
    \    }\n    for i in 2..length {\n        if length % i == 0 {\n            return\
    \ \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    if start1 > end2\
    \ || start2 > end1 {\n        return \"NO\".to_string();\n    }\n    let start\
    \ = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1, end2);\n\
    \    let diff = (end - start) as usize;\n    if diff == 0 {\n        return \"\
    NO\".to_string();\n    }\n    if diff == 1 {\n        return \"YES\".to_string();\n\
    \    }\n    if diff == 2 {\n        return \"NO\".to_string();\n    }\n    if\
    \ diff % 2 == 0 {\n        return \"NO\".to_string();\n    }\n    for i in (3..diff).step_by(2)\
    \ {\n        if diff % i == 0 {\n            return \"NO\".to_string();\n    \
    \    }\n    }\n    \"YES\".to_string()", "    let (a, b) = interval1;\n    let\
    \ (c, d) = interval2;\n    let mut start = a;\n    let mut end = b;\n    if a\
    \ > c {\n        start = c;\n    }\n    if b < d {\n        end = d;\n    }\n\
    \    if start > end {\n        return \"NO\".to_string();\n    }\n    if is_prime(end\
    \ - start + 1) {\n        return \"YES\".to_string();\n    }\n    \"NO\".to_string()",
  "    let (a, b) = interval1;\n    let (c, d) = interval2;\n    let (mut start, mut\
    \ end) = (0, 0);\n    if a <= c && c <= b {\n        start = c;\n    } else if\
    \ c <= a && a <= d {\n        start = a;\n    }\n    if a <= d && d <= b {\n \
    \       end = d;\n    } else if c <= b && b <= d {\n        end = b;\n    }\n\
    \    if start >= end {\n        return \"NO\".to_string();\n    }\n    let len\
    \ = end - start;\n    if len == 1 {\n        return \"NO\".to_string();\n    }\n\
    \    for i in 2..len {\n        if len % i == 0 {\n            return \"NO\".to_string();\n\
    \        }\n    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = start1.max(start2);\n  \
    \  let end = end1.min(end2);\n    if start > end {\n        return \"NO\".to_string();\n\
    \    }\n    if is_prime(end - start + 1) {\n        return \"YES\".to_string();\n\
    \    }\n    \"NO\".to_string()", "    let (mut start, mut end) = (interval1.0,\
    \ interval1.1);\n    if interval1.0 > interval2.0 {\n        start = interval2.0;\n\
    \    }\n    if interval1.1 < interval2.1 {\n        end = interval2.1;\n    }\n\
    \    if start > end {\n        return \"NO\".to_string();\n    }\n    let diff\
    \ = end - start;\n    if diff == 1 {\n        return \"NO\".to_string();\n   \
    \ }\n    let mut is_prime = true;\n    for i in 2..diff {\n        if diff % i\
    \ == 0 {\n            is_prime = false;\n            break;\n        }\n    }\n\
    \    if is_prime {\n        \"YES\".to_string()\n    } else {\n        \"NO\"\
    .to_string()\n    }", "    let (start1, end1) = interval1;\n    let (start2, end2)\
    \ = interval2;\n    if start1 > end2 || start2 > end1 {\n        return \"NO\"\
    .to_string();\n    }\n    let start = if start1 > start2 { start1 } else { start2\
    \ };\n    let end = if end1 < end2 { end1 } else { end2 };\n    let diff = end\
    \ - start;\n    if diff == 0 {\n        return \"NO\".to_string();\n    }\n  \
    \  if diff == 1 {\n        return \"YES\".to_string();\n    }\n    for i in 2..diff\
    \ {\n        if diff % i == 0 {\n            return \"NO\".to_string();\n    \
    \    }\n    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = start1.max(start2);\n  \
    \  let end = end1.min(end2);\n    if start > end {\n        return \"NO\".to_string();\n\
    \    }\n    let length = end - start + 1;\n    if length == 1 {\n        return\
    \ \"NO\".to_string();\n    }\n    if length == 2 {\n        return \"YES\".to_string();\n\
    \    }\n    for i in 2..length {\n        if length % i == 0 {\n            return\
    \ \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    if start1 > end2\
    \ || start2 > end1 {\n        return \"NO\".to_string();\n    }\n    let start\
    \ = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1, end2);\n\
    \    if start == end {\n        return \"NO\".to_string();\n    }\n    if is_prime(end\
    \ - start) {\n        return \"YES\".to_string();\n    }\n    \"NO\".to_string()",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let\
    \ start = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1, end2);\n\
    \    if start > end {\n        return \"NO\".to_string();\n    }\n    let length\
    \ = end - start + 1;\n    if length == 1 {\n        return \"NO\".to_string();\n\
    \    }\n    if length == 2 {\n        return \"YES\".to_string();\n    }\n   \
    \ for i in 2..length {\n        if length % i == 0 {\n            return \"NO\"\
    .to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (start1, end1)\
    \ = interval1;\n    let (start2, end2) = interval2;\n    if start1 > end2 || start2\
    \ > end1 {\n        return \"NO\".to_string();\n    }\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if is_prime(end - start)\
    \ {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n \
    \   }", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    let start = start1.max(start2);\n    let end = end1.min(end2);\n    if start\
    \ > end {\n        return \"NO\".to_string();\n    }\n    let len = end - start\
    \ + 1;\n    if len <= 1 {\n        return \"NO\".to_string();\n    }\n    for\
    \ i in 2..len {\n        if len % i == 0 {\n            return \"NO\".to_string();\n\
    \        }\n    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = std::cmp::max(start1, start2);\n\
    \    let end = std::cmp::min(end1, end2);\n    if start > end {\n        return\
    \ \"NO\".to_string();\n    }\n    let len = end - start + 1;\n    if len == 1\
    \ {\n        return \"NO\".to_string();\n    }\n    if len == 2 {\n        return\
    \ \"YES\".to_string();\n    }\n    for i in 2..len {\n        if len % i == 0\
    \ {\n            return \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let\
    \ mut start = start1;\n    let mut end = end1;\n    if start1 > start2 {\n   \
    \     start = start2;\n    }\n    if end1 < end2 {\n        end = end2;\n    }\n\
    \    if start > end {\n        return \"NO\".to_string();\n    }\n    let length\
    \ = end - start + 1;\n    if length == 1 {\n        return \"NO\".to_string();\n\
    \    }\n    if length == 2 {\n        return \"YES\".to_string();\n    }\n   \
    \ let mut is_prime = true;\n    for i in 2..length {\n        if length % i ==\
    \ 0 {\n            is_prime = false;\n            break;\n        }\n    }\n \
    \   if is_prime {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n\
    \    }", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    if start1 > end2 || start2 > end1 {\n        return \"NO\".to_string();\n\
    \    }\n    let start = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1,\
    \ end2);\n    let len = end - start + 1;\n    if len == 1 {\n        return \"\
    NO\".to_string();\n    }\n    if len == 2 {\n        return \"YES\".to_string();\n\
    \    }\n    for i in 2..len {\n        if len % i == 0 {\n            return \"\
    NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    let start = start1.max(start2);\n\
    \    let end = end1.min(end2);\n    if start > end {\n        return \"NO\".to_string();\n\
    \    }\n    let len = end - start + 1;\n    if len == 1 {\n        return \"NO\"\
    .to_string();\n    }\n    if len == 2 {\n        return \"YES\".to_string();\n\
    \    }\n    for i in 2..len {\n        if len % i == 0 {\n            return \"\
    NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (a, b)\
    \ = interval1;\n    let (c, d) = interval2;\n    if a > d || b < c {\n       \
    \ return \"NO\".to_string();\n    }\n    let (start, end) = if a > c { (a, b)\
    \ } else { (c, d) };\n    let length = end - start + 1;\n    if length == 1 {\n\
    \        return \"NO\".to_string();\n    }\n    if length == 2 {\n        return\
    \ \"YES\".to_string();\n    }\n    if length % 2 == 0 {\n        return \"NO\"\
    .to_string();\n    }\n    for i in 3..length {\n        if length % i == 0 {\n\
    \            return \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    if\
    \ start1 > end2 || start2 > end1 {\n        return \"NO\".to_string();\n    }\n\
    \    let start = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1,\
    \ end2);\n    let len = end - start + 1;\n    if len <= 1 {\n        return \"\
    NO\".to_string();\n    }\n    if len == 2 {\n        return \"YES\".to_string();\n\
    \    }\n    for i in 2..len {\n        if len % i == 0 {\n            return \"\
    NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (a, b)\
    \ = interval1;\n    let (c, d) = interval2;\n    let (start, end) = if a < c {\n\
    \        (c, b.min(d))\n    } else {\n        (a, d.min(b))\n    };\n    if start\
    \ > end {\n        return \"NO\".to_string();\n    }\n    let len = end - start\
    \ + 1;\n    if len <= 1 {\n        return \"NO\".to_string();\n    }\n    for\
    \ i in 2..len {\n        if len % i == 0 {\n            return \"NO\".to_string();\n\
    \        }\n    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let (start, end) = (start1.max(start2),\
    \ end1.min(end2));\n    if start > end {\n        return \"NO\".to_string();\n\
    \    }\n    let len = end - start + 1;\n    if len == 1 {\n        return \"NO\"\
    .to_string();\n    }\n    if len == 2 {\n        return \"YES\".to_string();\n\
    \    }\n    for i in 2..len {\n        if len % i == 0 {\n            return \"\
    NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    let start = isize::max(start1,\
    \ start2);\n    let end = isize::min(end1, end2);\n    if start > end {\n    \
    \    return \"NO\".to_string();\n    }\n    let len = end - start + 1;\n    if\
    \ len == 1 {\n        return \"NO\".to_string();\n    }\n    for i in 2..len {\n\
    \        if len % i == 0 {\n            return \"NO\".to_string();\n        }\n\
    \    }\n    \"YES\".to_string()", "    let (a, b) = interval1;\n    let (c, d)\
    \ = interval2;\n    let mut start = a;\n    let mut end = b;\n    if c > a {\n\
    \        start = c;\n    }\n    if d < b {\n        end = d;\n    }\n    if start\
    \ > end {\n        return \"NO\".to_string();\n    }\n    let len = end - start\
    \ + 1;\n    if len <= 1 {\n        return \"NO\".to_string();\n    }\n    for\
    \ i in 2..len {\n        if len % i == 0 {\n            return \"NO\".to_string();\n\
    \        }\n    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    if start1 > end2 || start2 > end1 {\n\
    \        return \"NO\".to_string();\n    }\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    let len = end - start\
    \ + 1;\n    if len <= 1 {\n        return \"NO\".to_string();\n    }\n    if len\
    \ == 2 {\n        return \"YES\".to_string();\n    }\n    for i in 2..len {\n\
    \        if len % i == 0 {\n            return \"NO\".to_string();\n        }\n\
    \    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n    let\
    \ (start2, end2) = interval2;\n    if start1 > end2 || start2 > end1 {\n     \
    \   return \"NO\".to_string();\n    }\n    let start = std::cmp::max(start1, start2);\n\
    \    let end = std::cmp::min(end1, end2);\n    let len = end - start + 1;\n  \
    \  if len <= 1 {\n        return \"NO\".to_string();\n    }\n    if len == 2 {\n\
    \        return \"YES\".to_string();\n    }\n    for i in 2..len {\n        if\
    \ len % i == 0 {\n            return \"NO\".to_string();\n        }\n    }\n \
    \   \"YES\".to_string()", "    let (a, b) = interval1;\n    let (c, d) = interval2;\n\
    \    let (mut start, mut end) = (0, 0);\n    if a <= c && c <= b {\n        start\
    \ = c;\n    } else if c <= a && a <= d {\n        start = a;\n    }\n    if a\
    \ <= d && d <= b {\n        end = d;\n    } else if c <= b && b <= d {\n     \
    \   end = b;\n    }\n    if start <= end {\n        if is_prime(end - start +\
    \ 1) {\n            return \"YES\".to_string();\n        }\n    }\n    \"NO\"\
    .to_string()", "    let (start1, end1) = interval1;\n    let (start2, end2) =\
    \ interval2;\n    if start1 > end2 || start2 > end1 {\n        return \"NO\".to_string();\n\
    \    }\n    let start = if start1 > start2 { start1 } else { start2 };\n    let\
    \ end = if end1 < end2 { end1 } else { end2 };\n    let length = (end - start)\
    \ + 1;\n    if length == 1 {\n        return \"NO\".to_string();\n    }\n    if\
    \ length == 2 {\n        return \"YES\".to_string();\n    }\n    for i in 2..length\
    \ {\n        if length % i == 0 {\n            return \"NO\".to_string();\n  \
    \      }\n    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    if start1 > end2 || start2 > end1 {\n\
    \        return \"NO\".to_string();\n    }\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if is_prime(end - start)\
    \ {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n \
    \   }", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    let mut start = start1.max(start2);\n    let mut end = end1.min(end2);\n\
    \    if start > end {\n        return \"NO\".to_string();\n    }\n    if start\
    \ == end {\n        return \"YES\".to_string();\n    }\n    while start < end\
    \ {\n        start += 1;\n        if is_prime(start) {\n            return \"\
    YES\".to_string();\n        }\n    }\n    \"NO\".to_string()", "    let (a, b)\
    \ = interval1;\n    let (c, d) = interval2;\n    if a > d || b < c {\n       \
    \ return \"NO\".to_string();\n    }\n    let (start, end) = if a > c { (a, b)\
    \ } else { (c, d) };\n    let mut n = end - start;\n    if n == 1 {\n        return\
    \ \"NO\".to_string();\n    }\n    n -= 1;\n    for i in 2..n {\n        if n %\
    \ i == 0 {\n            return \"NO\".to_string();\n        }\n    }\n    \"YES\"\
    .to_string()", "    let (start1, end1) = interval1;\n    let (start2, end2) =\
    \ interval2;\n    let start = start1.max(start2);\n    let end = end1.min(end2);\n\
    \    if start > end {\n        return \"NO\".to_string();\n    }\n    if is_prime(end\
    \ - start + 1) {\n        return \"YES\".to_string();\n    }\n    \"NO\".to_string()",
  "    let (a, b) = interval1;\n    let (c, d) = interval2;\n    let mut start = a;\n\
    \    let mut end = b;\n    if a > c {\n        start = c;\n    }\n    if b < d\
    \ {\n        end = d;\n    }\n    if start > end {\n        return \"NO\".to_string();\n\
    \    }\n    let length = end - start + 1;\n    if length == 1 {\n        return\
    \ \"NO\".to_string();\n    }\n    if length == 2 {\n        return \"YES\".to_string();\n\
    \    }\n    let mut is_prime = true;\n    for i in 2..length {\n        if length\
    \ % i == 0 {\n            is_prime = false;\n            break;\n        }\n \
    \   }\n    if is_prime {\n        \"YES\".to_string()\n    } else {\n        \"\
    NO\".to_string()\n    }", "    let (a, b) = interval1;\n    let (c, d) = interval2;\n\
    \    let mut intersection = (0, 0);\n    if a <= c && c <= b {\n        intersection.0\
    \ = c;\n    } else if c <= a && a <= d {\n        intersection.0 = a;\n    }\n\
    \    if b <= d && d <= c {\n        intersection.1 = b;\n    } else if d <= b\
    \ && b <= c {\n        intersection.1 = d;\n    }\n    if intersection.0 == 0\
    \ || intersection.1 == 0 {\n        return \"NO\".to_string();\n    }\n    let\
    \ length = (intersection.1 - intersection.0) + 1;\n    if length <= 1 {\n    \
    \    return \"NO\".to_string();\n    }\n    if length == 2 {\n        return \"\
    YES\".to_string();\n    }\n    for i in 2..length {\n        if length % i ==\
    \ 0 {\n            return \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let\
    \ (start, end) = (start1.max(start2), end1.min(end2));\n    if start > end {\n\
    \        return \"NO\".to_string();\n    }\n    let len = end - start + 1;\n \
    \   if len == 1 {\n        return \"NO\".to_string();\n    }\n    if len == 2\
    \ {\n        return \"YES\".to_string();\n    }\n    for i in 2..len {\n     \
    \   if len % i == 0 {\n            return \"NO\".to_string();\n        }\n   \
    \ }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n    let (start2,\
    \ end2) = interval2;\n    let start = std::cmp::max(start1, start2);\n    let\
    \ end = std::cmp::min(end1, end2);\n    if start > end {\n        return \"NO\"\
    .to_string();\n    }\n    let length = end - start + 1;\n    if length == 1 {\n\
    \        return \"NO\".to_string();\n    }\n    if length == 2 {\n        return\
    \ \"YES\".to_string();\n    }\n    for i in 2..length {\n        if length % i\
    \ == 0 {\n            return \"NO\".to_string();\n        }\n    }\n    \"YES\"\
    .to_string()", "    let (a, b) = interval1;\n    let (c, d) = interval2;\n   \
    \ let (start, end) = if a > c {\n        (a, b)\n    } else {\n        (c, d)\n\
    \    };\n    let (start, end) = if start > end {\n        (end, start)\n    }\
    \ else {\n        (start, end)\n    };\n    let (start, end) = if start > end\
    \ {\n        (end, start)\n    } else {\n        (start, end)\n    };\n    let\
    \ (start, end) = if start > end {\n        (end, start)\n    } else {\n      \
    \  (start, end)\n    };\n    let (start, end) = if start > end {\n        (end,\
    \ start)\n    } else {\n        (start, end)\n    };\n    let (start, end) = if\
    \ start > end {\n        (end, start)\n    } else {\n        (start, end)\n  \
    \  };\n    let (start, end) = if start > end {\n        (end, start)\n    } else\
    \ {\n        (start, end)\n    };\n    let (start, end) = if start > end {\n \
    \       (end, start)\n    } else {\n        (start, end)\n    };\n    let (start,\
    \ end) = if start > end {\n        (end, start)\n    } else {\n        (start,\
    \ end)\n    };\n    let (start, end) = if start > end {\n        (end, start)\n\
    \    } else {\n        (start, end)\n    };\n    let (start, end) = if start >\
    \ end {\n        (end, start)\n    } else {\n        (start, end)\n    };\n  \
    \  let (start, end) = if start > end {\n        (end, start)\n    } else {\n \
    \       (start, end)\n    };\n    let (start, end) = if start > end {\n      \
    \  (end, start)\n    } else {\n        (start, end)\n    };\n    let (start, end)\
    \ = if start > end {\n        (end, start", "    let (mut start, mut end) = (interval1.0,\
    \ interval1.1);\n    if start > end {\n        std::mem::swap(&mut start, &mut\
    \ end);\n    }\n    let (mut start2, mut end2) = (interval2.0, interval2.1);\n\
    \    if start2 > end2 {\n        std::mem::swap(&mut start2, &mut end2);\n   \
    \ }\n    if start > end2 || start2 > end {\n        return \"NO\".to_string();\n\
    \    }\n    let (mut start, mut end) = (start.max(start2), end.min(end2));\n \
    \   if start > end {\n        return \"NO\".to_string();\n    }\n    if start\
    \ == end {\n        return \"YES\".to_string();\n    }\n    let mut is_prime =\
    \ true;\n    for i in 2..(end - start) {\n        if (end - start) % i == 0 {\n\
    \            is_prime = false;\n            break;\n        }\n    }\n    if is_prime\
    \ {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n \
    \   }", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    let (start, end) = (start1.max(start2), end1.min(end2));\n    if start >\
    \ end {\n        return \"NO\".to_string();\n    }\n    let length = end - start\
    \ + 1;\n    if length == 1 {\n        return \"NO\".to_string();\n    }\n    if\
    \ length == 2 {\n        return \"YES\".to_string();\n    }\n    for i in 2..length\
    \ {\n        if length % i == 0 {\n            return \"NO\".to_string();\n  \
    \      }\n    }\n    \"YES\".to_string()", "    let (a, b) = interval1;\n    let\
    \ (c, d) = interval2;\n    let (start, end) = if a > c {\n        (a, b)\n   \
    \ } else {\n        (c, d)\n    };\n    let (start, end) = if start > end {\n\
    \        (end, start)\n    } else {\n        (start, end)\n    };\n    let (start,\
    \ end) = if start > end {\n        (end, start)\n    } else {\n        (start,\
    \ end)\n    };\n    let (start, end) = if start > end {\n        (end, start)\n\
    \    } else {\n        (start, end)\n    };\n    let (start, end) = if start >\
    \ end {\n        (end, start)\n    } else {\n        (start, end)\n    };\n  \
    \  let (start, end) = if start > end {\n        (end, start)\n    } else {\n \
    \       (start, end)\n    };\n    let (start, end) = if start > end {\n      \
    \  (end, start)\n    } else {\n        (start, end)\n    };\n    let (start, end)\
    \ = if start > end {\n        (end, start)\n    } else {\n        (start, end)\n\
    \    };\n    let (start, end) = if start > end {\n        (end, start)\n    }\
    \ else {\n        (start, end)\n    };\n    let (start, end) = if start > end\
    \ {\n        (end, start)\n    } else {\n        (start, end)\n    };\n    let\
    \ (start, end) = if start > end {\n        (end, start)\n    } else {\n      \
    \  (start, end)\n    };\n    let (start, end) = if start > end {\n        (end,\
    \ start)\n    } else {\n        (start, end)\n    };\n    let (start, end) = if\
    \ start > end {\n        (end, start)\n    } else {\n        (start, end)\n  \
    \  };\n    let (start, end) = if start > end {\n        (end, start", "    let\
    \ (a, b) = interval1;\n    let (c, d) = interval2;\n    if a > d || b < c {\n\
    \        return \"NO\".to_string();\n    }\n    let mut x = c;\n    if a > x {\n\
    \        x = a;\n    }\n    let mut y = d;\n    if b < y {\n        y = b;\n \
    \   }\n    if x > y {\n        return \"NO\".to_string();\n    }\n    let mut\
    \ n = y - x + 1;\n    if n == 1 {\n        return \"NO\".to_string();\n    }\n\
    \    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     return \"NO\".to_string();\n        }\n        i += 1;\n    }\n    \"YES\"\
    .to_string()", "    let (a, b) = interval1;\n    let (c, d) = interval2;\n   \
    \ let mut start = a;\n    let mut end = b;\n    if c > a {\n        start = c;\n\
    \    }\n    if d < b {\n        end = d;\n    }\n    if start > end {\n      \
    \  return \"NO\".to_string();\n    }\n    let len = end - start + 1;\n    if len\
    \ == 1 {\n        return \"NO\".to_string();\n    }\n    if len == 2 {\n     \
    \   return \"YES\".to_string();\n    }\n    for i in 2..len {\n        if len\
    \ % i == 0 {\n            return \"NO\".to_string();\n        }\n    }\n    \"\
    YES\".to_string()", "    let (i1_start, i1_end) = interval1;\n    let (i2_start,\
    \ i2_end) = interval2;\n    let mut intersection = (0, 0);\n    if i1_start <=\
    \ i2_start && i2_start <= i1_end {\n        intersection.0 = i2_start;\n    }\
    \ else if i2_start <= i1_start && i1_start <= i2_end {\n        intersection.0\
    \ = i1_start;\n    }\n    if i1_start <= i2_end && i2_end <= i1_end {\n      \
    \  intersection.1 = i2_end;\n    } else if i2_start <= i1_end && i1_end <= i2_end\
    \ {\n        intersection.1 = i1_end;\n    }\n    if intersection.0 == 0 && intersection.1\
    \ == 0 {\n        return \"NO\".to_string();\n    }\n    let length = intersection.1\
    \ - intersection.0;\n    if length == 1 {\n        return \"NO\".to_string();\n\
    \    }\n    for i in 2..length {\n        if length % i == 0 {\n            return\
    \ \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (a,\
    \ b) = interval1;\n    let (c, d) = interval2;\n    let mut start = a;\n    let\
    \ mut end = b;\n    if a > c {\n        start = c;\n    }\n    if b < d {\n  \
    \      end = d;\n    }\n    if start > end {\n        return \"NO\".to_string();\n\
    \    }\n    let len = end - start + 1;\n    if len == 1 {\n        return \"NO\"\
    .to_string();\n    }\n    if len == 2 {\n        return \"YES\".to_string();\n\
    \    }\n    for i in 2..len {\n        if len % i == 0 {\n            return \"\
    NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    if start1 > end2\
    \ || start2 > end1 {\n        return \"NO\".to_string();\n    }\n    let start\
    \ = start1.max(start2);\n    let end = end1.min(end2);\n    if start > end {\n\
    \        return \"NO\".to_string();\n    }\n    let mut is_prime = true;\n   \
    \ for i in 2..end {\n        if end % i == 0 {\n            is_prime = false;\n\
    \            break;\n        }\n    }\n    if is_prime {\n        \"YES\".to_string()\n\
    \    } else {\n        \"NO\".to_string()\n    }", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = std::cmp::max(start1, start2);\n\
    \    let end = std::cmp::min(end1, end2);\n    if start > end {\n        return\
    \ \"NO\".to_string();\n    }\n    let len = end - start + 1;\n    if len == 1\
    \ {\n        return \"NO\".to_string();\n    }\n    if len == 2 {\n        return\
    \ \"YES\".to_string();\n    }\n    for i in 2..len {\n        if len % i == 0\
    \ {\n            return \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let\
    \ mut start = start1;\n    let mut end = end1;\n    if start2 > start1 {\n   \
    \     start = start2;\n    }\n    if end2 < end1 {\n        end = end2;\n    }\n\
    \    if start > end {\n        return \"NO\".to_string();\n    }\n    let len\
    \ = end - start + 1;\n    if len <= 1 {\n        return \"NO\".to_string();\n\
    \    }\n    if len == 2 {\n        return \"YES\".to_string();\n    }\n    for\
    \ i in 2..len {\n        if len % i == 0 {\n            return \"NO\".to_string();\n\
    \        }\n    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = std::cmp::max(start1, start2);\n\
    \    let end = std::cmp::min(end1, end2);\n    if start > end {\n        return\
    \ \"NO\".to_string();\n    }\n    let len = end - start + 1;\n    if len == 1\
    \ {\n        return \"NO\".to_string();\n    }\n    if len == 2 {\n        return\
    \ \"YES\".to_string();\n    }\n    for i in 2..len {\n        if len % i == 0\
    \ {\n            return \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let\
    \ start = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1, end2);\n\
    \    if start > end {\n        return \"NO\".to_string();\n    }\n    let len\
    \ = end - start + 1;\n    if len == 1 {\n        return \"NO\".to_string();\n\
    \    }\n    if len == 2 {\n        return \"YES\".to_string();\n    }\n    for\
    \ i in 2..len {\n        if len % i == 0 {\n            return \"NO\".to_string();\n\
    \        }\n    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    if start1 > end2 || start2 > end1 {\n\
    \        return \"NO\".to_string();\n    }\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    let length = end - start\
    \ + 1;\n    if length <= 1 {\n        return \"NO\".to_string();\n    }\n    let\
    \ mut is_prime = true;\n    for i in 2..length {\n        if length % i == 0 {\n\
    \            is_prime = false;\n            break;\n        }\n    }\n    if is_prime\
    \ {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n \
    \   }", "    let (i1_start, i1_end) = interval1;\n    let (i2_start, i2_end) =\
    \ interval2;\n    let mut start = i1_start;\n    let mut end = i1_end;\n    if\
    \ i1_start > i2_start {\n        start = i2_start;\n    }\n    if i1_end < i2_end\
    \ {\n        end = i2_end;\n    }\n    if start > end {\n        return \"NO\"\
    .to_string();\n    }\n    let mut is_prime = true;\n    for i in 2..end {\n  \
    \      if end % i == 0 {\n            is_prime = false;\n            break;\n\
    \        }\n    }\n    if is_prime {\n        return \"YES\".to_string();\n  \
    \  }\n    \"NO\".to_string()", "    let (start1, end1) = interval1;\n    let (start2,\
    \ end2) = interval2;\n    let start = std::cmp::max(start1, start2);\n    let\
    \ end = std::cmp::min(end1, end2);\n    if start > end {\n        return \"NO\"\
    .to_string();\n    }\n    let length = end - start + 1;\n    if length == 1 {\n\
    \        return \"NO\".to_string();\n    }\n    let mut is_prime = true;\n   \
    \ for i in 2..length {\n        if length % i == 0 {\n            is_prime = false;\n\
    \            break;\n        }\n    }\n    if is_prime {\n        \"YES\".to_string()\n\
    \    } else {\n        \"NO\".to_string()\n    }", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = std::cmp::max(start1, start2);\n\
    \    let end = std::cmp::min(end1, end2);\n    if start > end {\n        return\
    \ \"NO\".to_string();\n    }\n    let len = end - start + 1;\n    if len <= 1\
    \ {\n        return \"NO\".to_string();\n    }\n    if len == 2 {\n        return\
    \ \"YES\".to_string();\n    }\n    for i in 2..len {\n        if len % i == 0\
    \ {\n            return \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let\
    \ start = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1, end2);\n\
    \    if start > end {\n        return \"NO\".to_string();\n    }\n    let len\
    \ = end - start + 1;\n    if is_prime(len) {\n        return \"YES\".to_string();\n\
    \    }\n    \"NO\".to_string()", "    let (a, b) = interval1;\n    let (c, d)\
    \ = interval2;\n    let (mut start, mut end) = (0, 0);\n    if a <= c && c <=\
    \ b {\n        start = c;\n    } else if c <= a && a <= d {\n        start = a;\n\
    \    }\n    if a <= d && d <= b {\n        end = d;\n    } else if c <= b && b\
    \ <= d {\n        end = b;\n    }\n    if start == 0 || end == 0 {\n        return\
    \ \"NO\".to_string();\n    }\n    let len = end - start + 1;\n    if len == 1\
    \ {\n        return \"NO\".to_string();\n    }\n    if len == 2 {\n        return\
    \ \"YES\".to_string();\n    }\n    for i in 2..len {\n        if len % i == 0\
    \ {\n            return \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let\
    \ start = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1, end2);\n\
    \    if start > end {\n        return \"NO\".to_string();\n    }\n    let len\
    \ = end - start + 1;\n    if len == 1 {\n        return \"NO\".to_string();\n\
    \    }\n    let mut is_prime = true;\n    for i in 2..len {\n        if len %\
    \ i == 0 {\n            is_prime = false;\n            break;\n        }\n   \
    \ }\n    if is_prime {\n        \"YES\".to_string()\n    } else {\n        \"\
    NO\".to_string()\n    }", "    let (a, b) = interval1;\n    let (c, d) = interval2;\n\
    \    if a > d || b < c {\n        return \"NO\".to_string();\n    }\n    let (start,\
    \ end) = if a > c { (a, b) } else { (c, d) };\n    let length = end - start +\
    \ 1;\n    if length == 1 {\n        return \"NO\".to_string();\n    }\n    if\
    \ length == 2 {\n        return \"YES\".to_string();\n    }\n    for i in 2..length\
    \ {\n        if length % i == 0 {\n            return \"NO\".to_string();\n  \
    \      }\n    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    if start1 > end2 || start2 > end1 {\n\
    \        return \"NO\".to_string();\n    }\n    let start = if start1 > start2\
    \ { start1 } else { start2 };\n    let end = if end1 < end2 { end1 } else { end2\
    \ };\n    let len = end - start + 1;\n    if len <= 1 {\n        return \"NO\"\
    .to_string();\n    }\n    if len == 2 {\n        return \"YES\".to_string();\n\
    \    }\n    for i in 2..len {\n        if len % i == 0 {\n            return \"\
    NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (a, b)\
    \ = interval1;\n    let (c, d) = interval2;\n    let mut x = 0;\n    if a <= c\
    \ && c <= b {\n        x = b - c + 1;\n    } else if c <= a && a <= d {\n    \
    \    x = d - a + 1;\n    }\n    if x == 0 {\n        return \"NO\".to_string();\n\
    \    }\n    if x == 1 {\n        return \"NO\".to_string();\n    }\n    if x ==\
    \ 2 {\n        return \"YES\".to_string();\n    }\n    let mut i = 2;\n    while\
    \ i * i <= x {\n        if x % i == 0 {\n            return \"NO\".to_string();\n\
    \        }\n        i += 1;\n    }\n    \"YES\".to_string()", "    let (mut start,\
    \ mut end) = (interval1.0, interval1.1);\n    if interval1.0 > interval2.0 {\n\
    \        start = interval2.0;\n    }\n    if interval1.1 < interval2.1 {\n   \
    \     end = interval2.1;\n    }\n    if start > end {\n        return \"NO\".to_string();\n\
    \    }\n    let len = end - start + 1;\n    if len <= 2 {\n        return \"NO\"\
    .to_string();\n    }\n    for i in 2..len {\n        if len % i == 0 {\n     \
    \       return \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let\
    \ start = start1.max(start2);\n    let end = end1.min(end2);\n    if start > end\
    \ {\n        return \"NO\".to_string();\n    }\n    let len = end - start + 1;\n\
    \    if len == 1 {\n        return \"NO\".to_string();\n    }\n    if len == 2\
    \ {\n        return \"YES\".to_string();\n    }\n    let mut i = 2;\n    while\
    \ i * i <= len {\n        if len % i == 0 {\n            return \"NO\".to_string();\n\
    \        }\n        i += 1;\n    }\n    \"YES\".to_string()", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if start > end {\n \
    \       return \"NO\".to_string();\n    }\n    let length = end - start + 1;\n\
    \    if length == 1 {\n        return \"NO\".to_string();\n    }\n    for i in\
    \ 2..length {\n        if length % i == 0 {\n            return \"NO\".to_string();\n\
    \        }\n    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = std::cmp::max(start1, start2);\n\
    \    let end = std::cmp::min(end1, end2);\n    if start > end {\n        return\
    \ \"NO\".to_string();\n    }\n    let len = end - start + 1;\n    if len == 1\
    \ {\n        return \"NO\".to_string();\n    }\n    for i in 2..len {\n      \
    \  if len % i == 0 {\n            return \"NO\".to_string();\n        }\n    }\n\
    \    \"YES\".to_string()", "    let (a, b) = interval1;\n    let (c, d) = interval2;\n\
    \    if a > b || c > d {\n        return \"NO\".to_string();\n    }\n    if a\
    \ > d || b < c {\n        return \"NO\".to_string();\n    }\n    let mut start\
    \ = a;\n    let mut end = b;\n    if c > a {\n        start = c;\n    }\n    if\
    \ d < b {\n        end = d;\n    }\n    if start > end {\n        return \"NO\"\
    .to_string();\n    }\n    let len = end - start + 1;\n    if len == 1 {\n    \
    \    return \"NO\".to_string();\n    }\n    if len == 2 {\n        return \"YES\"\
    .to_string();\n    }\n    for i in 2..len {\n        if len % i == 0 {\n     \
    \       return \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()",
  "    let (a, b) = interval1;\n    let (c, d) = interval2;\n    let (mut start, mut\
    \ end) = (0, 0);\n    if a <= c && c <= b {\n        start = c;\n    } else if\
    \ c <= a && a <= d {\n        start = a;\n    }\n    if a <= d && d <= b {\n \
    \       end = d;\n    } else if c <= b && b <= d {\n        end = b;\n    }\n\
    \    if start == 0 || end == 0 {\n        return \"NO\".to_string();\n    }\n\
    \    let len = end - start;\n    if len < 2 {\n        return \"NO\".to_string();\n\
    \    }\n    for i in 2..len {\n        if len % i == 0 {\n            return \"\
    NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    if start1 > end2\
    \ || start2 > end1 {\n        return \"NO\".to_string();\n    }\n    let start\
    \ = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1, end2);\n\
    \    let len = end - start + 1;\n    if len < 2 {\n        return \"NO\".to_string();\n\
    \    }\n    if len == 2 {\n        return \"YES\".to_string();\n    }\n    for\
    \ i in 2..len {\n        if len % i == 0 {\n            return \"NO\".to_string();\n\
    \        }\n    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    if start1 > end2 || start2 > end1 {\n\
    \        return \"NO\".to_string();\n    }\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    let len = end - start\
    \ + 1;\n    if len <= 1 {\n        return \"NO\".to_string();\n    }\n    if len\
    \ == 2 {\n        return \"YES\".to_string();\n    }\n    for i in 2..len {\n\
    \        if len % i == 0 {\n            return \"NO\".to_string();\n        }\n\
    \    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n    let\
    \ (start2, end2) = interval2;\n    let (start, end) = (start1.max(start2), end1.min(end2));\n\
    \    if start > end {\n        return \"NO\".to_string();\n    }\n    let len\
    \ = end - start + 1;\n    if len == 1 {\n        return \"NO\".to_string();\n\
    \    }\n    if len == 2 {\n        return \"YES\".to_string();\n    }\n    for\
    \ i in 2..len {\n        if len % i == 0 {\n            return \"NO\".to_string();\n\
    \        }\n    }\n    \"YES\".to_string()", "    let (mut start, mut end) = (interval1.0,\
    \ interval1.1);\n    if interval1.0 > interval2.0 {\n        start = interval2.0;\n\
    \    }\n    if interval1.1 < interval2.1 {\n        end = interval2.1;\n    }\n\
    \    if start > end {\n        return \"NO\".to_string();\n    }\n    let length\
    \ = (end - start) + 1;\n    if length == 2 {\n        return \"YES\".to_string();\n\
    \    }\n    for i in 2..length {\n        if length % i == 0 {\n            return\
    \ \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    if start1 > end2\
    \ || start2 > end1 {\n        return \"NO\".to_string();\n    }\n    let start\
    \ = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1, end2);\n\
    \    let len = end - start + 1;\n    if len <= 1 {\n        return \"NO\".to_string();\n\
    \    }\n    if len == 2 {\n        return \"YES\".to_string();\n    }\n    for\
    \ i in 2..len {\n        if len % i == 0 {\n            return \"NO\".to_string();\n\
    \        }\n    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    if start1 > end2 || start2 > end1 {\n\
    \        return \"NO\".to_string();\n    }\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    let length = end - start\
    \ + 1;\n    if length < 2 {\n        return \"NO\".to_string();\n    }\n    if\
    \ length == 2 {\n        return \"YES\".to_string();\n    }\n    for i in 2..length\
    \ {\n        if length % i == 0 {\n            return \"NO\".to_string();\n  \
    \      }\n    }\n    \"YES\".to_string()", "    let (a, b) = interval1;\n    let\
    \ (c, d) = interval2;\n    let mut start = a;\n    let mut end = b;\n    if a\
    \ > c {\n        start = c;\n    }\n    if b < d {\n        end = d;\n    }\n\
    \    if start > end {\n        return \"NO\".to_string();\n    }\n    let len\
    \ = end - start + 1;\n    if len == 1 {\n        return \"NO\".to_string();\n\
    \    }\n    for i in 2..len {\n        if len % i == 0 {\n            return \"\
    NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (a, b)\
    \ = interval1;\n    let (c, d) = interval2;\n    let (start, end) = if a > c {\n\
    \        (a, b)\n    } else {\n        (c, d)\n    };\n    let (start, end) =\
    \ if start > end {\n        (end, start)\n    } else {\n        (start, end)\n\
    \    };\n    if start > end {\n        return \"NO\".to_string();\n    }\n   \
    \ let mut is_prime = true;\n    for i in 2..end {\n        if end % i == 0 {\n\
    \            is_prime = false;\n            break;\n        }\n    }\n    if is_prime\
    \ {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n \
    \   }", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    let start = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1,\
    \ end2);\n    if start > end {\n        return \"NO\".to_string();\n    }\n  \
    \  let len = end - start + 1;\n    if len == 2 {\n        return \"YES\".to_string();\n\
    \    }\n    for i in 2..len {\n        if len % i == 0 {\n            return \"\
    NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (mut start,\
    \ mut end) = (interval1.0, interval1.1);\n    if interval1.0 > interval2.0 {\n\
    \        start = interval2.0;\n    }\n    if interval1.1 < interval2.1 {\n   \
    \     end = interval2.1;\n    }\n    if start > end {\n        return \"NO\".to_string();\n\
    \    }\n    let length = end - start + 1;\n    if length == 1 {\n        return\
    \ \"NO\".to_string();\n    }\n    if length == 2 {\n        return \"YES\".to_string();\n\
    \    }\n    for i in 2..length {\n        if length % i == 0 {\n            return\
    \ \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    let start = start1.max(start2);\n\
    \    let end = end1.min(end2);\n    if start > end {\n        return \"NO\".to_string();\n\
    \    }\n    let len = end - start + 1;\n    if len == 1 {\n        return \"NO\"\
    .to_string();\n    }\n    if len == 2 {\n        return \"YES\".to_string();\n\
    \    }\n    for i in 2..len {\n        if len % i == 0 {\n            return \"\
    NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    if start1 > end2\
    \ || start2 > end1 {\n        return \"NO\".to_string();\n    }\n    let start\
    \ = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1, end2);\n\
    \    if is_prime(end - start) {\n        \"YES\".to_string()\n    } else {\n \
    \       \"NO\".to_string()\n    }", "    let (start1, end1) = interval1;\n   \
    \ let (start2, end2) = interval2;\n    let mut start = start1;\n    let mut end\
    \ = end1;\n    if start2 > start1 {\n        start = start2;\n    }\n    if end2\
    \ < end1 {\n        end = end2;\n    }\n    if start > end {\n        return \"\
    NO\".to_string();\n    }\n    let len = end - start + 1;\n    if len == 1 {\n\
    \        return \"NO\".to_string();\n    }\n    for i in 2..len {\n        if\
    \ len % i == 0 {\n            return \"NO\".to_string();\n        }\n    }\n \
    \   \"YES\".to_string()", "    let (start1, end1) = interval1;\n    let (start2,\
    \ end2) = interval2;\n    if start1 > end2 || start2 > end1 {\n        return\
    \ \"NO\".to_string();\n    }\n    let start = std::cmp::max(start1, start2);\n\
    \    let end = std::cmp::min(end1, end2);\n    let len = end - start + 1;\n  \
    \  if len < 2 {\n        return \"NO\".to_string();\n    }\n    if len == 2 {\n\
    \        return \"YES\".to_string();\n    }\n    for i in 2..len {\n        if\
    \ len % i == 0 {\n            return \"NO\".to_string();\n        }\n    }\n \
    \   \"YES\".to_string()", "    let (start1, end1) = interval1;\n    let (start2,\
    \ end2) = interval2;\n    let start = max(start1, start2);\n    let end = min(end1,\
    \ end2);\n    if start > end {\n        return \"NO\".to_string();\n    }\n  \
    \  let len = end - start + 1;\n    if len == 1 {\n        return \"NO\".to_string();\n\
    \    }\n    if len == 2 {\n        return \"YES\".to_string();\n    }\n    for\
    \ i in 2..len {\n        if len % i == 0 {\n            return \"NO\".to_string();\n\
    \        }\n    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = start1.max(start2);\n  \
    \  let end = end1.min(end2);\n    if start > end {\n        return \"NO\".to_string();\n\
    \    }\n    let length = end - start + 1;\n    if length == 1 {\n        return\
    \ \"NO\".to_string();\n    }\n    if length == 2 {\n        return \"YES\".to_string();\n\
    \    }\n    for i in 2..length {\n        if length % i == 0 {\n            return\
    \ \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (a,\
    \ b) = interval1;\n    let (c, d) = interval2;\n    if a > d || b < c {\n    \
    \    return \"NO\".to_string();\n    }\n    let mut intersection = (a, b);\n \
    \   if a < c {\n        intersection.0 = c;\n    }\n    if b > d {\n        intersection.1\
    \ = d;\n    }\n    let len = intersection.1 - intersection.0 + 1;\n    if len\
    \ == 1 {\n        return \"NO\".to_string();\n    }\n    if len == 2 {\n     \
    \   return \"YES\".to_string();\n    }\n    for i in 2..len {\n        if len\
    \ % i == 0 {\n            return \"NO\".to_string();\n        }\n    }\n    \"\
    YES\".to_string()", "    let (start1, end1) = interval1;\n    let (start2, end2)\
    \ = interval2;\n    if start1 > end2 || start2 > end1 {\n        return \"NO\"\
    .to_string();\n    }\n    let start = if start1 > start2 { start1 } else { start2\
    \ };\n    let end = if end1 < end2 { end1 } else { end2 };\n    let len = (end\
    \ - start) + 1;\n    if len == 1 {\n        return \"NO\".to_string();\n    }\n\
    \    if len == 2 {\n        return \"YES\".to_string();\n    }\n    for i in 2..len\
    \ {\n        if len % i == 0 {\n            return \"NO\".to_string();\n     \
    \   }\n    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    if start1 > end2 || start2 > end1 {\n\
    \        return \"NO\".to_string();\n    }\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    let length = end - start\
    \ + 1;\n    if length == 1 {\n        return \"NO\".to_string();\n    }\n    if\
    \ length == 2 {\n        return \"YES\".to_string();\n    }\n    for i in 2..length\
    \ {\n        if length % i == 0 {\n            return \"NO\".to_string();\n  \
    \      }\n    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = start1.max(start2);\n  \
    \  let end = end1.min(end2);\n    if start > end {\n        return \"NO\".to_string();\n\
    \    }\n    let len = end - start + 1;\n    if len == 2 {\n        return \"YES\"\
    .to_string();\n    }\n    if len % 2 == 0 {\n        return \"NO\".to_string();\n\
    \    }\n    for i in 3..len {\n        if len % i == 0 {\n            return \"\
    NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    if start1 > end2\
    \ || start2 > end1 {\n        return \"NO\".to_string();\n    }\n    let start\
    \ = if start1 > start2 { start1 } else { start2 };\n    let end = if end1 < end2\
    \ { end1 } else { end2 };\n    let len = end - start + 1;\n    if len == 1 {\n\
    \        return \"NO\".to_string();\n    }\n    if len == 2 {\n        return\
    \ \"YES\".to_string();\n    }\n    for i in 2..len {\n        if len % i == 0\
    \ {\n            return \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()",
  "    let (a, b) = interval1;\n    let (c, d) = interval2;\n    let (start, end)\
    \ = if a > c { (a, b) } else { (c, d) };\n    let (start, end) = if start > end\
    \ { (end, start) } else { (start, end) };\n    let (start, end) = if start > b\
    \ || start > d { (0, 0) } else { (start, end) };\n    let (start, end) = if end\
    \ < a || end < c { (0, 0) } else { (start, end) };\n    let length = end - start;\n\
    \    if length == 0 {\n        \"NO\".to_string()\n    } else {\n        let is_prime\
    \ = (2..length).all(|x| length % x != 0);\n        if is_prime {\n           \
    \ \"YES\".to_string()\n        } else {\n            \"NO\".to_string()\n    \
    \    }\n    }", "    let (a, b) = interval1;\n    let (c, d) = interval2;\n  \
    \  let mut start = a;\n    let mut end = b;\n    if a > c {\n        start = c;\n\
    \    }\n    if b < d {\n        end = d;\n    }\n    if start > end {\n      \
    \  return \"NO\".to_string();\n    }\n    if start == end {\n        return \"\
    YES\".to_string();\n    }\n    let mut is_prime = true;\n    for i in 2..end {\n\
    \        if end % i == 0 {\n            is_prime = false;\n            break;\n\
    \        }\n    }\n    if is_prime {\n        \"YES\".to_string()\n    } else\
    \ {\n        \"NO\".to_string()\n    }", "    let (a, b) = interval1;\n    let\
    \ (c, d) = interval2;\n    let (mut start, mut end) = (0, 0);\n    if a < c {\n\
    \        start = c;\n    } else {\n        start = a;\n    }\n    if b < d {\n\
    \        end = b;\n    } else {\n        end = d;\n    }\n    if start > end {\n\
    \        return \"NO\".to_string();\n    }\n    let len = end - start + 1;\n \
    \   if len == 1 {\n        return \"NO\".to_string();\n    }\n    if len == 2\
    \ {\n        return \"YES\".to_string();\n    }\n    for i in 2..len {\n     \
    \   if len % i == 0 {\n            return \"NO\".to_string();\n        }\n   \
    \ }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n    let (start2,\
    \ end2) = interval2;\n    let start = start1.max(start2);\n    let end = end1.min(end2);\n\
    \    if start > end {\n        return \"NO\".to_string();\n    }\n    let length\
    \ = end - start + 1;\n    if length == 1 {\n        return \"NO\".to_string();\n\
    \    }\n    if length == 2 {\n        return \"YES\".to_string();\n    }\n   \
    \ for i in 2..length {\n        if length % i == 0 {\n            return \"NO\"\
    .to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (a, b) = interval1;\n\
    \    let (c, d) = interval2;\n    let (mut start, mut end) = (0, 0);\n    if a\
    \ <= c && c <= b {\n        start = c;\n    } else if c <= a && a <= d {\n   \
    \     start = a;\n    }\n    if a <= d && d <= b {\n        end = d;\n    } else\
    \ if c <= b && b <= d {\n        end = b;\n    }\n    if start > end {\n     \
    \   return \"NO\".to_string();\n    }\n    let len = end - start + 1;\n    if\
    \ len == 1 {\n        return \"NO\".to_string();\n    }\n    if len == 2 {\n \
    \       return \"YES\".to_string();\n    }\n    for i in 2..len {\n        if\
    \ len % i == 0 {\n            return \"NO\".to_string();\n        }\n    }\n \
    \   \"YES\".to_string()", "    let (start1, end1) = interval1;\n    let (start2,\
    \ end2) = interval2;\n    let (start, end) = if start1 > start2 {\n        (start1,\
    \ end2)\n    } else {\n        (start2, end1)\n    };\n    if start > end {\n\
    \        return \"NO\".to_string();\n    }\n    let len = end - start + 1;\n \
    \   if len == 1 {\n        return \"NO\".to_string();\n    }\n    if len == 2\
    \ {\n        return \"YES\".to_string();\n    }\n    for i in 2..len {\n     \
    \   if len % i == 0 {\n            return \"NO\".to_string();\n        }\n   \
    \ }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n    let (start2,\
    \ end2) = interval2;\n    let mut start = std::cmp::max(start1, start2);\n   \
    \ let mut end = std::cmp::min(end1, end2);\n    if start > end {\n        return\
    \ \"NO\".to_string();\n    }\n    if start == end {\n        return \"YES\".to_string();\n\
    \    }\n    if start == 1 {\n        start += 1;\n    }\n    for i in start..end\
    \ {\n        if is_prime(i) {\n            return \"YES\".to_string();\n     \
    \   }\n    }\n    \"NO\".to_string()", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = if start1 > start2 { start1\
    \ } else { start2 };\n    let end = if end1 < end2 { end1 } else { end2 };\n \
    \   if start > end {\n        return \"NO\".to_string();\n    }\n    let len =\
    \ end - start + 1;\n    if len <= 1 {\n        return \"NO\".to_string();\n  \
    \  }\n    if len == 2 {\n        return \"YES\".to_string();\n    }\n    for i\
    \ in 2..len {\n        if len % i == 0 {\n            return \"NO\".to_string();\n\
    \        }\n    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = if start1 > start2 { start1\
    \ } else { start2 };\n    let end = if end1 < end2 { end1 } else { end2 };\n \
    \   if start > end {\n        return \"NO\".to_string();\n    }\n    let len =\
    \ end - start + 1;\n    if len == 1 {\n        return \"NO\".to_string();\n  \
    \  }\n    if len == 2 {\n        return \"YES\".to_string();\n    }\n    for i\
    \ in 2..len {\n        if len % i == 0 {\n            return \"NO\".to_string();\n\
    \        }\n    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = start1.max(start2);\n  \
    \  let end = end1.min(end2);\n    if start > end {\n        return \"NO\".to_string();\n\
    \    }\n    let len = end - start + 1;\n    if len == 1 {\n        return \"NO\"\
    .to_string();\n    }\n    if len == 2 {\n        return \"YES\".to_string();\n\
    \    }\n    for i in 2..len {\n        if len % i == 0 {\n            return \"\
    NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    let (start, end)\
    \ = (start1.max(start2), end1.min(end2));\n    if start > end {\n        return\
    \ \"NO\".to_string();\n    }\n    let len = end - start + 1;\n    if len == 1\
    \ {\n        return \"NO\".to_string();\n    }\n    if len == 2 {\n        return\
    \ \"YES\".to_string();\n    }\n    for i in 2..len {\n        if len % i == 0\
    \ {\n            return \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let\
    \ start = start1.max(start2);\n    let end = end1.min(end2);\n    if start > end\
    \ {\n        return \"NO\".to_string();\n    }\n    let len = end - start + 1;\n\
    \    if len == 1 {\n        return \"NO\".to_string();\n    }\n    if len == 2\
    \ {\n        return \"YES\".to_string();\n    }\n    for i in 2..len {\n     \
    \   if len % i == 0 {\n            return \"NO\".to_string();\n        }\n   \
    \ }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n    let (start2,\
    \ end2) = interval2;\n    let start = std::cmp::max(start1, start2);\n    let\
    \ end = std::cmp::min(end1, end2);\n    if start >= end {\n        return \"NO\"\
    .to_string();\n    }\n    let len = end - start + 1;\n    if len == 2 {\n    \
    \    return \"YES\".to_string();\n    }\n    for i in 2..len {\n        if len\
    \ % i == 0 {\n            return \"NO\".to_string();\n        }\n    }\n    \"\
    YES\".to_string()", "    let mut start = interval1.0;\n    let mut end = interval1.1;\n\
    \    if interval2.0 > start {\n        start = interval2.0;\n    }\n    if interval2.1\
    \ < end {\n        end = interval2.1;\n    }\n    if start > end {\n        return\
    \ \"NO\".to_string();\n    }\n    if is_prime(end - start + 1) {\n        return\
    \ \"YES\".to_string();\n    }\n    \"NO\".to_string()", "    let (start1, end1)\
    \ = interval1;\n    let (start2, end2) = interval2;\n    let start = if start1\
    \ > start2 { start1 } else { start2 };\n    let end = if end1 < end2 { end1 }\
    \ else { end2 };\n    if start > end {\n        return \"NO\".to_string();\n \
    \   }\n    let len = end - start + 1;\n    if len == 1 {\n        return \"NO\"\
    .to_string();\n    }\n    if len == 2 {\n        return \"YES\".to_string();\n\
    \    }\n    for i in 2..len {\n        if len % i == 0 {\n            return \"\
    NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    let start = start1.max(start2);\n\
    \    let end = end1.min(end2);\n    if start > end {\n        return \"NO\".to_string();\n\
    \    }\n    let len = end - start + 1;\n    if len == 1 {\n        return \"NO\"\
    .to_string();\n    }\n    for i in 2..len {\n        if len % i == 0 {\n     \
    \       return \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()",
  "    let (a, b) = interval1;\n    let (c, d) = interval2;\n    let (start, end)\
    \ = if a > c {\n        (a, b)\n    } else {\n        (c, d)\n    };\n    let\
    \ (start, end) = if start > end {\n        (end, start)\n    } else {\n      \
    \  (start, end)\n    };\n    let (a, b) = interval1;\n    let (c, d) = interval2;\n\
    \    let (start, end) = if a < c {\n        (a, b)\n    } else {\n        (c,\
    \ d)\n    };\n    let (start, end) = if start > end {\n        (end, start)\n\
    \    } else {\n        (start, end)\n    };\n    if start > end {\n        return\
    \ \"NO\".to_string();\n    }\n    let mut count = 0;\n    for i in start..end\
    \ + 1 {\n        count += 1;\n    }\n    if count == 2 {\n        return \"YES\"\
    .to_string();\n    }\n    for i in 2..count {\n        if count % i == 0 {\n \
    \           return \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()",
  "    let (a, b) = interval1;\n    let (c, d) = interval2;\n    if a > d || b < c\
    \ {\n        return \"NO\".to_string();\n    }\n    let (mut start, mut end) =\
    \ (a, b);\n    if c > a {\n        start = c;\n    }\n    if d < b {\n       \
    \ end = d;\n    }\n    let len = end - start + 1;\n    if len <= 1 {\n       \
    \ return \"NO\".to_string();\n    }\n    for i in 2..len {\n        if len % i\
    \ == 0 {\n            return \"NO\".to_string();\n        }\n    }\n    \"YES\"\
    .to_string()", "    let (a, b) = interval1;\n    let (c, d) = interval2;\n   \
    \ let (start, end) = if a > c {\n        (a, b)\n    } else {\n        (c, d)\n\
    \    };\n    let (start2, end2) = if a < c {\n        (a, b)\n    } else {\n \
    \       (c, d)\n    };\n    if start > end2 || end < start2 {\n        return\
    \ \"NO\".to_string();\n    }\n    let len = if start > start2 {\n        start\
    \ - start2\n    } else {\n        start2 - start\n    };\n    if len == 1 {\n\
    \        return \"NO\".to_string();\n    }\n    if len == 2 {\n        return\
    \ \"YES\".to_string();\n    }\n    for i in 2..len {\n        if len % i == 0\
    \ {\n            return \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let\
    \ start = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1, end2);\n\
    \    if start > end {\n        return \"NO\".to_string();\n    }\n    let len\
    \ = end - start + 1;\n    if len == 1 {\n        return \"NO\".to_string();\n\
    \    }\n    if len == 2 {\n        return \"YES\".to_string();\n    }\n    for\
    \ i in 2..len {\n        if len % i == 0 {\n            return \"NO\".to_string();\n\
    \        }\n    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    if start1 > end2 || start2 > end1 {\n\
    \        return \"NO\".to_string();\n    }\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if is_prime(end - start)\
    \ {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n \
    \   }", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    let start = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1,\
    \ end2);\n    if start > end {\n        return \"NO\".to_string();\n    }\n  \
    \  let length = end - start + 1;\n    if length == 1 {\n        return \"NO\"\
    .to_string();\n    }\n    if length == 2 {\n        return \"YES\".to_string();\n\
    \    }\n    for i in 2..length {\n        if length % i == 0 {\n            return\
    \ \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    if start1 > end2\
    \ || start2 > end1 {\n        return \"NO\".to_string();\n    }\n    let start\
    \ = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1, end2);\n\
    \    let length = end - start + 1;\n    if length == 1 {\n        return \"NO\"\
    .to_string();\n    }\n    for i in 2..length {\n        if length % i == 0 {\n\
    \            return \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let\
    \ (start, end) = (start1.max(start2), end1.min(end2));\n    if start > end {\n\
    \        return \"NO\".to_string();\n    }\n    let length = end - start + 1;\n\
    \    if length == 1 {\n        return \"NO\".to_string();\n    }\n    if length\
    \ == 2 {\n        return \"YES\".to_string();\n    }\n    for i in 2..length {\n\
    \        if length % i == 0 {\n            return \"NO\".to_string();\n      \
    \  }\n    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = std::cmp::max(start1, start2);\n\
    \    let end = std::cmp::min(end1, end2);\n    if start > end {\n        return\
    \ \"NO\".to_string();\n    }\n    if start == end {\n        return \"YES\".to_string();\n\
    \    }\n    let mut is_prime = true;\n    for i in 2..start {\n        if start\
    \ % i == 0 {\n            is_prime = false;\n            break;\n        }\n \
    \   }\n    if is_prime {\n        return \"YES\".to_string();\n    }\n    for\
    \ i in 2..end {\n        if end % i == 0 {\n            is_prime = false;\n  \
    \          break;\n        }\n    }\n    if is_prime {\n        return \"YES\"\
    .to_string();\n    }\n    for i in 2..(end - start) {\n        if (end - start)\
    \ % i == 0 {\n            is_prime = false;\n            break;\n        }\n \
    \   }\n    if is_prime {\n        return \"YES\".to_string();\n    }\n    \"NO\"\
    .to_string()", "    let (a, b) = interval1;\n    let (c, d) = interval2;\n   \
    \ if a > b || c > d {\n        return \"NO\".to_string();\n    }\n    if a > d\
    \ || b < c {\n        return \"NO\".to_string();\n    }\n    let mut start = a;\n\
    \    let mut end = b;\n    if a < c {\n        start = c;\n    }\n    if b > d\
    \ {\n        end = d;\n    }\n    if start > end {\n        return \"NO\".to_string();\n\
    \    }\n    let length = end - start + 1;\n    if length == 1 {\n        return\
    \ \"NO\".to_string();\n    }\n    if length == 2 {\n        return \"YES\".to_string();\n\
    \    }\n    for i in 2..length {\n        if length % i == 0 {\n            return\
    \ \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if start > end {\n \
    \       return \"NO\".to_string();\n    }\n    let length = end - start + 1;\n\
    \    if length == 1 {\n        return \"NO\".to_string();\n    }\n    if length\
    \ == 2 {\n        return \"YES\".to_string();\n    }\n    for i in 2..length {\n\
    \        if length % i == 0 {\n            return \"NO\".to_string();\n      \
    \  }\n    }\n    \"YES\".to_string()", "    let (a, b) = interval1;\n    let (c,\
    \ d) = interval2;\n    let (start, end) = if a < c {\n        (c, b)\n    } else\
    \ {\n        (a, d)\n    };\n    if start > end {\n        return \"NO\".to_string();\n\
    \    }\n    let len = end - start + 1;\n    if len == 1 {\n        return \"NO\"\
    .to_string();\n    }\n    if len == 2 {\n        return \"YES\".to_string();\n\
    \    }\n    for i in 2..len {\n        if len % i == 0 {\n            return \"\
    NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    let mut start =\
    \ start1.max(start2);\n    let mut end = end1.min(end2);\n    if start > end {\n\
    \        return \"NO\".to_string();\n    }\n    if start == end {\n        return\
    \ \"YES\".to_string();\n    }\n    while start <= end {\n        if is_prime(start)\
    \ {\n            return \"YES\".to_string();\n        }\n        start += 1;\n\
    \    }\n    \"NO\".to_string()", "    let (start1, end1) = interval1;\n    let\
    \ (start2, end2) = interval2;\n    let start = std::cmp::max(start1, start2);\n\
    \    let end = std::cmp::min(end1, end2);\n    if start > end {\n        return\
    \ \"NO\".to_string();\n    }\n    if is_prime(end - start + 1) {\n        return\
    \ \"YES\".to_string();\n    }\n    \"NO\".to_string()", "    let (start1, end1)\
    \ = interval1;\n    let (start2, end2) = interval2;\n    let (start, end) = (max(start1,\
    \ start2), min(end1, end2));\n    if start > end {\n        return \"NO\".to_string();\n\
    \    }\n    let len = end - start + 1;\n    if len == 1 {\n        return \"NO\"\
    .to_string();\n    }\n    for i in 2..len {\n        if len % i == 0 {\n     \
    \       return \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()",
  "    let mut start = interval1.0;\n    let mut end = interval1.1;\n    if interval2.0\
    \ > start {\n        start = interval2.0;\n    }\n    if interval2.1 < end {\n\
    \        end = interval2.1;\n    }\n    if start > end {\n        return \"NO\"\
    .to_string();\n    }\n    let length = end - start + 1;\n    if length == 1 {\n\
    \        return \"NO\".to_string();\n    }\n    let mut is_prime = true;\n   \
    \ for i in 2..length {\n        if length % i == 0 {\n            is_prime = false;\n\
    \            break;\n        }\n    }\n    if is_prime {\n        return \"YES\"\
    .to_string();\n    }\n    return \"NO\".to_string();", "    let (start1, end1)\
    \ = interval1;\n    let (start2, end2) = interval2;\n    let mut start = start1;\n\
    \    let mut end = end1;\n    if start2 > start1 {\n        start = start2;\n\
    \    }\n    if end2 < end1 {\n        end = end2;\n    }\n    if start > end {\n\
    \        return \"NO\".to_string();\n    }\n    let length = end - start + 1;\n\
    \    if length == 1 {\n        return \"NO\".to_string();\n    }\n    if length\
    \ == 2 {\n        return \"YES\".to_string();\n    }\n    if length % 2 == 0 {\n\
    \        return \"NO\".to_string();\n    }\n    for i in 3..length {\n       \
    \ if length % i == 0 {\n            return \"NO\".to_string();\n        }\n  \
    \  }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n    let\
    \ (start2, end2) = interval2;\n    let start = std::cmp::max(start1, start2);\n\
    \    let end = std::cmp::min(end1, end2);\n    if start > end {\n        return\
    \ \"NO\".to_string();\n    }\n    let len = end - start + 1;\n    if len == 1\
    \ {\n        return \"NO\".to_string();\n    }\n    if len == 2 {\n        return\
    \ \"YES\".to_string();\n    }\n    for i in 2..len {\n        if len % i == 0\
    \ {\n            return \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let\
    \ (start, end) = (start1.max(start2), end1.min(end2));\n    if start > end {\n\
    \        return \"NO\".to_string();\n    }\n    let len = end - start + 1;\n \
    \   if len == 2 {\n        return \"YES\".to_string();\n    }\n    if len % 2\
    \ == 0 {\n        return \"NO\".to_string();\n    }\n    for i in 3..len/2 {\n\
    \        if len % i == 0 {\n            return \"NO\".to_string();\n        }\n\
    \    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n    let\
    \ (start2, end2) = interval2;\n    let start = std::cmp::max(start1, start2);\n\
    \    let end = std::cmp::min(end1, end2);\n    if start > end {\n        return\
    \ \"NO\".to_string();\n    }\n    let len = end - start + 1;\n    if len == 1\
    \ {\n        return \"NO\".to_string();\n    }\n    if len == 2 {\n        return\
    \ \"YES\".to_string();\n    }\n    for i in 2..len {\n        if len % i == 0\
    \ {\n            return \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()",
  "    let (a, b) = interval1;\n    let (c, d) = interval2;\n    let mut start = a;\n\
    \    let mut end = b;\n    if c > a {\n        start = c;\n    }\n    if d < b\
    \ {\n        end = d;\n    }\n    if start > end {\n        return \"NO\".to_string();\n\
    \    }\n    let len = end - start + 1;\n    if len == 1 {\n        return \"NO\"\
    .to_string();\n    }\n    for i in 2..len {\n        if len % i == 0 {\n     \
    \       return \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()",
  "    let (a, b) = interval1;\n    let (c, d) = interval2;\n    let (mut start, mut\
    \ end) = (0, 0);\n    if a <= c && c <= b {\n        start = c;\n    } else if\
    \ c <= a && a <= d {\n        start = a;\n    }\n    if a <= d && d <= b {\n \
    \       end = d;\n    } else if c <= b && b <= d {\n        end = b;\n    }\n\
    \    if start > end {\n        return \"NO\".to_string();\n    }\n    let len\
    \ = end - start + 1;\n    if len == 1 {\n        return \"NO\".to_string();\n\
    \    }\n    for i in 2..len {\n        if len % i == 0 {\n            return \"\
    NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (a, b)\
    \ = interval1;\n    let (c, d) = interval2;\n    let (start, end) = if a > c {\n\
    \        (a, b)\n    } else {\n        (c, d)\n    };\n    let (start, end) =\
    \ if start > end {\n        (end, start)\n    } else {\n        (start, end)\n\
    \    };\n    let (start, end) = if start > 0 {\n        (start, end)\n    } else\
    \ {\n        (0, end)\n    };\n    let (start, end) = if end < 0 {\n        (start,\
    \ 0)\n    } else {\n        (start, end)\n    };\n    let (start, end) = if start\
    \ > end {\n        (end, start)\n    } else {\n        (start, end)\n    };\n\
    \    let (start, end) = if start == end {\n        (start + 1, end)\n    } else\
    \ {\n        (start, end)\n    };\n    let (start, end) = if start > end {\n \
    \       (end, start)\n    } else {\n        (start, end)\n    };\n    let (start,\
    \ end) = if start > 0 {\n        (start, end)\n    } else {\n        (0, end)\n\
    \    };\n    let (start, end) = if end < 0 {\n        (start, 0)\n    } else {\n\
    \        (start, end)\n    };\n    let (start, end) = if start > end {\n     \
    \   (end, start)\n    } else {\n        (start, end)\n    };\n    let (start,\
    \ end) = if start == end {\n        (start + 1, end)\n    } else {\n        (start,\
    \ end)\n    };\n    let (start, end) = if start > end {\n        (end, start)\n\
    \    } else {\n        (start, end)\n    };\n    let (start, end) = if start >\
    \ 0 {\n        (start, end)\n    } else {\n        (0, end)\n    };\n    let (start,\
    \ end) = if end < 0 {\n       ", "    let (start1, end1) = interval1;\n    let\
    \ (start2, end2) = interval2;\n    let start = start1.max(start2);\n    let end\
    \ = end1.min(end2);\n    if start > end {\n        return \"NO\".to_string();\n\
    \    }\n    let len = end - start + 1;\n    if len == 1 {\n        return \"NO\"\
    .to_string();\n    }\n    for i in 2..len {\n        if len % i == 0 {\n     \
    \       return \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    if\
    \ start1 > end2 || start2 > end1 {\n        return \"NO\".to_string();\n    }\n\
    \    let start = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1,\
    \ end2);\n    let length = end - start + 1;\n    if length == 1 {\n        return\
    \ \"NO\".to_string();\n    }\n    let mut is_prime = true;\n    for i in 2..length\
    \ {\n        if length % i == 0 {\n            is_prime = false;\n           \
    \ break;\n        }\n    }\n    if is_prime {\n        \"YES\".to_string()\n \
    \   } else {\n        \"NO\".to_string()\n    }", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = start1.max(start2);\n  \
    \  let end = end1.min(end2);\n    if start > end {\n        return \"NO\".to_string();\n\
    \    }\n    let length = (end - start + 1) as usize;\n    if length == 1 {\n \
    \       return \"NO\".to_string();\n    }\n    for i in 2..length {\n        if\
    \ length % i == 0 {\n            return \"NO\".to_string();\n        }\n    }\n\
    \    \"YES\".to_string()", "    let (a, b) = interval1;\n    let (c, d) = interval2;\n\
    \    let mut start = a;\n    let mut end = b;\n    if c > a {\n        start =\
    \ c;\n    }\n    if d < b {\n        end = d;\n    }\n    if start > end {\n \
    \       return \"NO\".to_string();\n    }\n    let len = end - start + 1;\n  \
    \  if len == 2 {\n        return \"YES\".to_string();\n    }\n    let mut i =\
    \ 2;\n    while i * i <= len {\n        if len % i == 0 {\n            return\
    \ \"NO\".to_string();\n        }\n        i += 1;\n    }\n    \"YES\".to_string()",
  "    let (i1_start, i1_end) = interval1;\n    let (i2_start, i2_end) = interval2;\n\
    \    let mut intersection = (0, 0);\n    if i1_start <= i2_start && i2_start <=\
    \ i1_end {\n        intersection.0 = i2_start;\n    } else if i2_start <= i1_start\
    \ && i1_start <= i2_end {\n        intersection.0 = i1_start;\n    } else {\n\
    \        return \"NO\".to_string();\n    }\n    if i1_start <= i2_end && i2_end\
    \ <= i1_end {\n        intersection.1 = i2_end;\n    } else if i2_start <= i1_end\
    \ && i1_end <= i2_end {\n        intersection.1 = i1_end;\n    } else {\n    \
    \    return \"NO\".to_string();\n    }\n    let length = intersection.1 - intersection.0;\n\
    \    if length == 1 {\n        return \"NO\".to_string();\n    }\n    for i in\
    \ 2..length {\n        if length % i == 0 {\n            return \"NO\".to_string();\n\
    \        }\n    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = if start1 > start2 { start1\
    \ } else { start2 };\n    let end = if end1 < end2 { end1 } else { end2 };\n \
    \   if start > end {\n        return \"NO\".to_string();\n    }\n    let len =\
    \ end - start + 1;\n    if len == 1 {\n        return \"NO\".to_string();\n  \
    \  }\n    if len == 2 {\n        return \"YES\".to_string();\n    }\n    for i\
    \ in 2..len {\n        if len % i == 0 {\n            return \"NO\".to_string();\n\
    \        }\n    }\n    \"YES\".to_string()", "    let (a, b) = interval1;\n  \
    \  let (c, d) = interval2;\n    let (start, end) = if a > c { (a, b) } else {\
    \ (c, d) };\n    let (start, end) = if start > end { (end, start) } else { (start,\
    \ end) };\n    let (start, end) = if start > end { (end, start) } else { (start,\
    \ end) };\n    let (start, end) = if start > end { (end, start) } else { (start,\
    \ end) };\n    let (start, end) = if start > end { (end, start) } else { (start,\
    \ end) };\n    let (start, end) = if start > end { (end, start) } else { (start,\
    \ end) };\n    let (start, end) = if start > end { (end, start) } else { (start,\
    \ end) };\n    let (start, end) = if start > end { (end, start) } else { (start,\
    \ end) };\n    let (start, end) = if start > end { (end, start) } else { (start,\
    \ end) };\n    let (start, end) = if start > end { (end, start) } else { (start,\
    \ end) };\n    let (start, end) = if start > end { (end, start) } else { (start,\
    \ end) };\n    let (start, end) = if start > end { (end, start) } else { (start,\
    \ end) };\n    let (start, end) = if start > end { (end, start) } else { (start,\
    \ end) };\n    let (start, end) = if start > end { (end, start) } else { (start,\
    \ end) };\n    let (start, end) = if start > end { (end, start) } else { (start,\
    \ end) };\n    let (start, end) = if start > end { (end, start) } else { (start,\
    \ end) };\n    let (start, end) = if start > end { (end, start) } else { (start,\
    \ end) };\n    let (start, end) = if start >", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = std::cmp::max(start1, start2);\n\
    \    let end = std::cmp::min(end1, end2);\n    if start > end {\n        return\
    \ \"NO\".to_string();\n    }\n    let len = end - start + 1;\n    if len == 1\
    \ {\n        return \"NO\".to_string();\n    }\n    let mut is_prime = true;\n\
    \    for i in 2..len {\n        if len % i == 0 {\n            is_prime = false;\n\
    \            break;\n        }\n    }\n    if is_prime {\n        \"YES\".to_string()\n\
    \    } else {\n        \"NO\".to_string()\n    }", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = std::cmp::max(start1, start2);\n\
    \    let end = std::cmp::min(end1, end2);\n    if start > end {\n        return\
    \ \"NO\".to_string();\n    }\n    let len = end - start + 1;\n    if len == 1\
    \ {\n        return \"NO\".to_string();\n    }\n    for i in 2..len {\n      \
    \  if len % i == 0 {\n            return \"NO\".to_string();\n        }\n    }\n\
    \    \"YES\".to_string()", "    let (a, b) = interval1;\n    let (c, d) = interval2;\n\
    \    let (mut start, mut end) = (0, 0);\n    if a <= c && c <= b {\n        start\
    \ = c;\n    } else if c <= a && a <= d {\n        start = a;\n    } else {\n \
    \       return \"NO\".to_string();\n    }\n    if b <= d && d <= b {\n       \
    \ end = b;\n    } else if d <= b && b <= d {\n        end = d;\n    } else {\n\
    \        return \"NO\".to_string();\n    }\n    if start == end {\n        return\
    \ \"NO\".to_string();\n    }\n    let mut count = 0;\n    for i in start..=end\
    \ {\n        count += 1;\n    }\n    if count == 2 {\n        return \"YES\".to_string();\n\
    \    }\n    for i in 2..count {\n        if count % i == 0 {\n            return\
    \ \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (a,\
    \ b) = interval1;\n    let (c, d) = interval2;\n    let (start, end) = if a <\
    \ c {\n        if b < c {\n            return \"NO\".to_string();\n        }\n\
    \        (c, b)\n    } else {\n        if d < a {\n            return \"NO\".to_string();\n\
    \        }\n        (a, d)\n    };\n    let len = end - start + 1;\n    if len\
    \ == 1 {\n        return \"NO\".to_string();\n    }\n    if len == 2 {\n     \
    \   return \"YES\".to_string();\n    }\n    for i in 2..len {\n        if len\
    \ % i == 0 {\n            return \"NO\".to_string();\n        }\n    }\n    \"\
    YES\".to_string()", "    let (a, b) = interval1;\n    let (c, d) = interval2;\n\
    \    let (start, end) = if a > c { (a, b) } else { (c, d) };\n    let (start,\
    \ end) = if start > end { (end, start) } else { (start, end) };\n    let (start,\
    \ end) = if start > end { (end, start) } else { (start, end) };\n    let (start,\
    \ end) = if start > end { (end, start) } else { (start, end) };\n    let (start,\
    \ end) = if start > end { (end, start) } else { (start, end) };\n    let (start,\
    \ end) = if start > end { (end, start) } else { (start, end) };\n    let (start,\
    \ end) = if start > end { (end, start) } else { (start, end) };\n    let (start,\
    \ end) = if start > end { (end, start) } else { (start, end) };\n    let (start,\
    \ end) = if start > end { (end, start) } else { (start, end) };\n    let (start,\
    \ end) = if start > end { (end, start) } else { (start, end) };\n    let (start,\
    \ end) = if start > end { (end, start) } else { (start, end) };\n    let (start,\
    \ end) = if start > end { (end, start) } else { (start, end) };\n    let (start,\
    \ end) = if start > end { (end, start) } else { (start, end) };\n    let (start,\
    \ end) = if start > end { (end, start) } else { (start, end) };\n    let (start,\
    \ end) = if start > end { (end, start) } else { (start, end) };\n    let (start,\
    \ end) = if start > end { (end, start) } else { (start, end) };\n    let (start,\
    \ end) = if start > end { (end, start) } else { (start, end) };\n    let (start,\
    \ end) = if start >", "    let (start1, end1) = interval1;\n    let (start2, end2)\
    \ = interval2;\n    let start = start1.max(start2);\n    let end = end1.min(end2);\n\
    \    if start > end {\n        return \"NO\".to_string();\n    }\n    let length\
    \ = end - start + 1;\n    if length == 1 {\n        return \"NO\".to_string();\n\
    \    }\n    if length == 2 {\n        return \"YES\".to_string();\n    }\n   \
    \ for i in 2..length {\n        if length % i == 0 {\n            return \"NO\"\
    .to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (mut start,\
    \ mut end) = (interval1.0, interval1.1);\n    if interval1.0 > interval2.0 {\n\
    \        start = interval2.0;\n    }\n    if interval1.1 < interval2.1 {\n   \
    \     end = interval2.1;\n    }\n    if start > end {\n        return \"NO\".to_string();\n\
    \    }\n    let mut count = 0;\n    for i in start..end + 1 {\n        if i ==\
    \ 1 {\n            continue;\n        }\n        let mut is_prime = true;\n  \
    \      for j in 2..i {\n            if i % j == 0 {\n                is_prime\
    \ = false;\n                break;\n            }\n        }\n        if is_prime\
    \ {\n            count += 1;\n        }\n    }\n    if count == 0 {\n        return\
    \ \"NO\".to_string();\n    }\n    let mut is_prime = true;\n    for i in 2..count\
    \ {\n        if count % i == 0 {\n            is_prime = false;\n            break;\n\
    \        }\n    }\n    if is_prime {\n        return \"YES\".to_string();\n  \
    \  }\n    \"NO\".to_string()", "    let (a, b) = interval1;\n    let (c, d) =\
    \ interval2;\n    if a > b || c > d {\n        return \"NO\".to_string();\n  \
    \  }\n    let (mut start, mut end) = (a, b);\n    if c > a {\n        start =\
    \ c;\n    }\n    if d < b {\n        end = d;\n    }\n    if start > end {\n \
    \       return \"NO\".to_string();\n    }\n    let len = end - start + 1;\n  \
    \  if len == 1 {\n        return \"NO\".to_string();\n    }\n    if len == 2 {\n\
    \        return \"YES\".to_string();\n    }\n    for i in 2..len {\n        if\
    \ len % i == 0 {\n            return \"NO\".to_string();\n        }\n    }\n \
    \   \"YES\".to_string()", "    let (start1, end1) = interval1;\n    let (start2,\
    \ end2) = interval2;\n    let start = std::cmp::max(start1, start2);\n    let\
    \ end = std::cmp::min(end1, end2);\n    if start > end {\n        return \"NO\"\
    .to_string();\n    }\n    let len = end - start + 1;\n    if len == 1 {\n    \
    \    return \"NO\".to_string();\n    }\n    if len == 2 {\n        return \"YES\"\
    .to_string();\n    }\n    let mut is_prime = true;\n    for i in 2..len {\n  \
    \      if len % i == 0 {\n            is_prime = false;\n            break;\n\
    \        }\n    }\n    if is_prime {\n        \"YES\".to_string()\n    } else\
    \ {\n        \"NO\".to_string()\n    }", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    if start1 > end2 || start2 > end1 {\n\
    \        return \"NO\".to_string();\n    }\n    let start = if start1 > start2\
    \ { start1 } else { start2 };\n    let end = if end1 < end2 { end1 } else { end2\
    \ };\n    let diff = end - start;\n    if diff == 0 {\n        return \"NO\".to_string();\n\
    \    }\n    if diff == 1 {\n        return \"YES\".to_string();\n    }\n    if\
    \ diff == 2 {\n        return \"NO\".to_string();\n    }\n    if diff % 2 == 0\
    \ {\n        return \"NO\".to_string();\n    }\n    for i in 3..diff {\n     \
    \   if diff % i == 0 {\n            return \"NO\".to_string();\n        }\n  \
    \  }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n    let\
    \ (start2, end2) = interval2;\n    let (start, end) = (start1.max(start2), end1.min(end2));\n\
    \    if start > end {\n        return \"NO\".to_string();\n    }\n    let len\
    \ = end - start + 1;\n    if len == 1 {\n        return \"NO\".to_string();\n\
    \    }\n    for i in 2..len {\n        if len % i == 0 {\n            return \"\
    NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if start > end {\n \
    \       return \"NO\".to_string();\n    }\n    let len = end - start + 1;\n  \
    \  if len == 1 {\n        return \"NO\".to_string();\n    }\n    for i in 2..len\
    \ {\n        if len % i == 0 {\n            return \"NO\".to_string();\n     \
    \   }\n    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    if start1 > end2 || start2 > end1 {\n\
    \        return \"NO\".to_string();\n    }\n    let start = std::cmp::max(start1,\
    \ start2);\n    let end = std::cmp::min(end1, end2);\n    if is_prime(end - start)\
    \ {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n \
    \   }", "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\
    \    let start = start1.max(start2);\n    let end = end1.min(end2);\n    if start\
    \ > end {\n        return \"NO\".to_string();\n    }\n    let len = end - start\
    \ + 1;\n    if len == 1 {\n        return \"NO\".to_string();\n    }\n    if len\
    \ == 2 {\n        return \"YES\".to_string();\n    }\n    for i in 2..len {\n\
    \        if len % i == 0 {\n            return \"NO\".to_string();\n        }\n\
    \    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n    let\
    \ (start2, end2) = interval2;\n    let start = start1.max(start2);\n    let end\
    \ = end1.min(end2);\n    if start > end {\n        return \"NO\".to_string();\n\
    \    }\n    let length = end - start + 1;\n    if length == 2 {\n        return\
    \ \"YES\".to_string();\n    }\n    for i in 2..length {\n        if length % i\
    \ == 0 {\n            return \"NO\".to_string();\n        }\n    }\n    \"YES\"\
    .to_string()", "    let (a, b) = interval1;\n    let (c, d) = interval2;\n   \
    \ let mut intersection = (a, b);\n    if a > c {\n        intersection = (c, b);\n\
    \    }\n    if b < d {\n        intersection = (a, d);\n    }\n    if a > d ||\
    \ b < c {\n        return \"NO\".to_string();\n    }\n    let (a, b) = intersection;\n\
    \    let length = b - a + 1;\n    if length <= 1 {\n        return \"NO\".to_string();\n\
    \    }\n    for i in 2..length {\n        if length % i == 0 {\n            return\
    \ \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    let (start, end)\
    \ = (max(start1, start2), min(end1, end2));\n    if start > end {\n        return\
    \ \"NO\".to_string();\n    }\n    let len = end - start + 1;\n    if len == 1\
    \ {\n        return \"NO\".to_string();\n    }\n    for i in 2..len {\n      \
    \  if len % i == 0 {\n            return \"NO\".to_string();\n        }\n    }\n\
    \    \"YES\".to_string()", "    let (start1, end1) = interval1;\n    let (start2,\
    \ end2) = interval2;\n    if start1 > end2 || start2 > end1 {\n        return\
    \ \"NO\".to_string();\n    }\n    let start = std::cmp::max(start1, start2);\n\
    \    let end = std::cmp::min(end1, end2);\n    if is_prime(end - start) {\n  \
    \      \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n    }",
  "    let (a, b) = interval1;\n    let (c, d) = interval2;\n    if a > d || b < c\
    \ {\n        return \"NO\".to_string();\n    }\n    let mut x = c;\n    if a >\
    \ x {\n        x = a;\n    }\n    let mut y = d;\n    if b < y {\n        y =\
    \ b;\n    }\n    if x == y {\n        return \"NO\".to_string();\n    }\n    let\
    \ mut i = 2;\n    while i * i <= y {\n        if x % i == 0 {\n            return\
    \ \"NO\".to_string();\n        }\n        i += 1;\n    }\n    \"YES\".to_string()",
  "    let (mut start, mut end) = (interval1.0, interval1.1);\n    if start > end\
    \ {\n        start = interval1.1;\n        end = interval1.0;\n    }\n    let\
    \ (mut start2, mut end2) = (interval2.0, interval2.1);\n    if start2 > end2 {\n\
    \        start2 = interval2.1;\n        end2 = interval2.0;\n    }\n    if start\
    \ > end2 || start2 > end {\n        return \"NO\".to_string();\n    }\n    let\
    \ (mut start, mut end) = (start.max(start2), end.min(end2));\n    if start > end\
    \ {\n        start = end;\n    }\n    if start == end {\n        return \"NO\"\
    .to_string();\n    }\n    let mut is_prime = true;\n    for i in 2..start {\n\
    \        if start % i == 0 {\n            is_prime = false;\n            break;\n\
    \        }\n    }\n    if is_prime {\n        return \"YES\".to_string();\n  \
    \  }\n    for i in 2..end {\n        if end % i == 0 {\n            is_prime =\
    \ false;\n            break;\n        }\n    }\n    if is_prime {\n        return\
    \ \"YES\".to_string();\n    }\n    for i in 2..(end - start) {\n        if (end\
    \ - start) % i == 0 {\n            is_prime = false;\n            break;\n   \
    \     }\n    }\n    if is_prime {\n        return \"YES\".to_string();\n    }\n\
    \    \"NO\".to_string()", "    let (start1, end1) = interval1;\n    let (start2,\
    \ end2) = interval2;\n    let (start, end) = (max(start1, start2), min(end1, end2));\n\
    \    if start > end {\n        return \"NO\".to_string();\n    }\n    let length\
    \ = end - start + 1;\n    if length == 2 {\n        return \"YES\".to_string();\n\
    \    }\n    for i in 2..length {\n        if length % i == 0 {\n            return\
    \ \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (start1,\
    \ end1) = interval1;\n    let (start2, end2) = interval2;\n    if start1 > end2\
    \ || start2 > end1 {\n        return \"NO\".to_string();\n    }\n    let start\
    \ = if start1 > start2 { start1 } else { start2 };\n    let end = if end1 < end2\
    \ { end1 } else { end2 };\n    let length = end - start + 1;\n    if length <=\
    \ 1 {\n        return \"NO\".to_string();\n    }\n    if length == 2 {\n     \
    \   return \"YES\".to_string();\n    }\n    for i in 2..length {\n        if length\
    \ % i == 0 {\n            return \"NO\".to_string();\n        }\n    }\n    \"\
    YES\".to_string()", "    let (start1, end1) = interval1;\n    let (start2, end2)\
    \ = interval2;\n    let start = start1.max(start2);\n    let end = end1.min(end2);\n\
    \    if start > end {\n        return \"NO\".to_string();\n    }\n    let len\
    \ = end - start + 1;\n    if len == 1 {\n        return \"NO\".to_string();\n\
    \    }\n    if len == 2 {\n        return \"YES\".to_string();\n    }\n    for\
    \ i in 2..len {\n        if len % i == 0 {\n            return \"NO\".to_string();\n\
    \        }\n    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n\
    \    let (start2, end2) = interval2;\n    let start = start1.max(start2);\n  \
    \  let end = end1.min(end2);\n    if start > end {\n        return \"NO\".to_string();\n\
    \    }\n    let len = end - start + 1;\n    if len <= 1 {\n        return \"NO\"\
    .to_string();\n    }\n    if len == 2 {\n        return \"YES\".to_string();\n\
    \    }\n    for i in 2..len {\n        if len % i == 0 {\n            return \"\
    NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (a, b)\
    \ = interval1;\n    let (c, d) = interval2;\n    let (mut start, mut end) = (0,\
    \ 0);\n    if a <= c && c <= b {\n        start = c;\n    } else if c <= a &&\
    \ a <= d {\n        start = a;\n    }\n    if a <= d && d <= b {\n        end\
    \ = d;\n    } else if c <= b && b <= d {\n        end = b;\n    }\n    if start\
    \ == 0 && end == 0 {\n        return \"NO\".to_string();\n    }\n    let len =\
    \ end - start + 1;\n    if len == 1 {\n        return \"NO\".to_string();\n  \
    \  }\n    let mut is_prime = true;\n    for i in 2..len {\n        if len % i\
    \ == 0 {\n            is_prime = false;\n            break;\n        }\n    }\n\
    \    if is_prime {\n        \"YES\".to_string()\n    } else {\n        \"NO\"\
    .to_string()\n    }", "    let (start1, end1) = interval1;\n    let (start2, end2)\
    \ = interval2;\n    if start1 > end2 || start2 > end1 {\n        return \"NO\"\
    .to_string();\n    }\n    let start = std::cmp::max(start1, start2);\n    let\
    \ end = std::cmp::min(end1, end2);\n    let len = end - start + 1;\n    if len\
    \ <= 1 {\n        return \"NO\".to_string();\n    }\n    for i in 2..len {\n \
    \       if len % i == 0 {\n            return \"NO\".to_string();\n        }\n\
    \    }\n    \"YES\".to_string()", "    let (start1, end1) = interval1;\n    let\
    \ (start2, end2) = interval2;\n    let start = start1.max(start2);\n    let end\
    \ = end1.min(end2);\n    if start > end {\n        return \"NO\".to_string();\n\
    \    }\n    let length = end - start + 1;\n    if length == 2 {\n        return\
    \ \"YES\".to_string();\n    }\n    if length % 2 == 0 {\n        return \"NO\"\
    .to_string();\n    }\n    for i in 3..length {\n        if length % i == 0 {\n\
    \            return \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()",
  "    let (a, b) = interval1;\n    let (c, d) = interval2;\n    let mut start = a;\n\
    \    let mut end = b;\n    if a > c {\n        start = c;\n    }\n    if b < d\
    \ {\n        end = d;\n    }\n    if start > end {\n        return \"NO\".to_string();\n\
    \    }\n    let mut length = end - start;\n    if length == 0 {\n        return\
    \ \"NO\".to_string();\n    }\n    if length == 1 {\n        return \"YES\".to_string();\n\
    \    }\n    if length % 2 == 0 {\n        length /= 2;\n    }\n    if length %\
    \ 3 == 0 {\n        length /= 3;\n    }\n    if length % 5 == 0 {\n        length\
    \ /= 5;\n    }\n    if length % 7 == 0 {\n        length /= 7;\n    }\n    if\
    \ length == 1 {\n        return \"YES\".to_string();\n    }\n    \"NO\".to_string()",
  "    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    if\
    \ start1 > end2 || start2 > end1 {\n        return \"NO\".to_string();\n    }\n\
    \    let start = std::cmp::max(start1, start2);\n    let end = std::cmp::min(end1,\
    \ end2);\n    let length = end - start + 1;\n    if length <= 1 {\n        return\
    \ \"NO\".to_string();\n    }\n    if length == 2 {\n        return \"YES\".to_string();\n\
    \    }\n    for i in 2..length {\n        if length % i == 0 {\n            return\
    \ \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()", "    let (a,\
    \ b) = interval1;\n    let (c, d) = interval2;\n    let (a, b) = if a > b { (b,\
    \ a) } else { (a, b) };\n    let (c, d) = if c > d { (d, c) } else { (c, d) };\n\
    \    if a > d || b < c {\n        return \"NO\".to_string();\n    }\n    let (mut\
    \ x, mut y) = (a, b);\n    if x < c {\n        x = c;\n    }\n    if y > d {\n\
    \        y = d;\n    }\n    let len = y - x + 1;\n    if len <= 1 {\n        return\
    \ \"NO\".to_string();\n    }\n    for i in 2..len {\n        if len % i == 0 {\n\
    \            return \"NO\".to_string();\n        }\n    }\n    \"YES\".to_string()"]
stop_tokens:
- "\n}"
