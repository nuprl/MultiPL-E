name: HumanEval_138_is_equal_to_sum_even
language: rust
results:
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpsj7szykx.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 1..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmr96opwy.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut i = 2;\n    let mut j = 2;\n    let mut k = 2;\n    let mut l = 2;\n   \
    \ while i <= n / 4 {\n        while j <= n / 3 {\n            while k <= n / 2\
    \ {\n                while l <= n {\n                    if i + j + k + l == n\
    \ {\n                        result = true;\n                        break;\n\
    \                    }\n                    l += 2;\n                }\n     \
    \           k += 2;\n            }\n            j += 2;\n        }\n        i\
    \ += 2;\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    let mut i = 2;\n    while sum < n && count < 4 {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n            count += 1;\n        }\n  \
    \      i += 1;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_ip84_gf.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    // TODO\n    false\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3abuarz_.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut count = 0;\n    let mut\
    \ i = 2;\n    while i <= n {\n        if n % i == 0 {\n            count += 1;\n\
    \        }\n        i += 2;\n    }\n    count == 4\n}\n\nfn main() {\n    let\
    \ candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n  \
    \  assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n   \
    \ assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n  \
    \  assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n \
    \   assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp70rhsi2x.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp69fl85dy.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpvgashmwe.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmplk7e_ctr.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    let mut i = 2;\n    while sum < n && count < 4 {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n            count += 1;\n        }\n  \
    \      i += 1;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp35237ehq.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut sum = 0;\n    let mut count = 0;\n    for i in 1..n {\n        if i % 2\
    \ == 0 {\n            sum += i;\n            count += 1;\n        }\n        if\
    \ sum == n && count == 4 {\n            result = true;\n            break;\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpytqjjznh.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 0..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5zrb682l.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpuun2gexk.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut sum = 0;\n    let mut count = 0;\n    let mut i = 2;\n    while i <= n {\n\
    \        if i % 2 == 0 {\n            sum += i;\n            count += 1;\n   \
    \     }\n        if sum == n && count == 4 {\n            result = true;\n   \
    \         break;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_jgtg2az.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmptm0nwmv9.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut count = 0;\n    let mut\
    \ i = 2;\n    while i <= n {\n        if n % i == 0 {\n            count += 1;\n\
    \        }\n        i += 2;\n    }\n    count == 4\n}\n\nfn main() {\n    let\
    \ candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n  \
    \  assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n   \
    \ assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n  \
    \  assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n \
    \   assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpltqw6v9v.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpw2jgv8r2.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp1dmgt4ad.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp4mu35xk4.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp1x0553t_.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp9s0sty07.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp5jibvwvf.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 0..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5xwkepfy.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    let mut i = 2;\n    while sum < n && count < 4 {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n            count += 1;\n        }\n  \
    \      i += 1;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpds2dp325.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut sum = 0;\n    let mut count = 0;\n    let mut i = 2;\n    while i <= n {\n\
    \        if i % 2 == 0 {\n            sum += i;\n            count += 1;\n   \
    \     }\n        if sum == n && count == 4 {\n            result = true;\n   \
    \         break;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpt9qkcol3.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut i = 0;\n    while i < n {\n        let mut j = 0;\n        while j < n {\n\
    \            let mut k = 0;\n            while k < n {\n                let mut\
    \ l = 0;\n                while l < n {\n                    if i + j + k + l\
    \ == n && i % 2 == 0 && j % 2 == 0 && k % 2 == 0 && l % 2 == 0 {\n           \
    \             result = true;\n                    }\n                    l +=\
    \ 1;\n                }\n                k += 1;\n            }\n            j\
    \ += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmps0eb9rgf.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut i = 2;\n    let mut j = 2;\n    let mut k = 2;\n    let mut l = 2;\n   \
    \ while i <= n / 4 {\n        j = 2;\n        while j <= n / 3 {\n           \
    \ k = 2;\n            while k <= n / 2 {\n                l = 2;\n           \
    \     while l <= n - 1 {\n                    if i + j + k + l == n {\n      \
    \                  result = true;\n                    }\n                   \
    \ l += 2;\n                }\n                k += 2;\n            }\n       \
    \     j += 2;\n        }\n        i += 2;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 1..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpimabbpqi.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    for\
    \ i in 0..n {\n        for j in 0..n {\n            for k in 0..n {\n        \
    \        for l in 0..n {\n                    if i + j + k + l == n && i % 2 ==\
    \ 0 && j % 2 == 0 && k % 2 == 0 && l % 2 == 0 {\n                        result\
    \ = true;\n                    }\n                }\n            }\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpupren5mn.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut sum = 0;\n    let mut count = 0;\n    for i in 1..n {\n        if i % 2\
    \ == 0 {\n            sum += i;\n            count += 1;\n        }\n        if\
    \ sum == n && count == 4 {\n            result = true;\n            break;\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8pwjrwdc.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpms0wsvbp.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpu_k0tzb2.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    let mut i = 2;\n    while sum < n && count < 4 {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n            count += 1;\n        }\n  \
    \      i += 1;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp2pzi_srg.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut count = 0;\n    let mut\
    \ sum = 0;\n    let mut i = 2;\n    while sum < n {\n        if i % 2 == 0 {\n\
    \            sum += i;\n            count += 1;\n        }\n        i += 1;\n\
    \    }\n    sum == n && count == 4\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpbrhi9irz.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpkxwr_hpt.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    let mut i = 2;\n    while sum < n && count < 4 {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n            count += 1;\n        }\n  \
    \      i += 1;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpf_pfqq8j.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 1..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp2rz35f59.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    let mut i = 2;\n    while sum < n && count < 4 {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n            count += 1;\n        }\n  \
    \      i += 1;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp3h2v4j8e.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    for\
    \ i in 0..n {\n        for j in 0..n {\n            for k in 0..n {\n        \
    \        for l in 0..n {\n                    if i + j + k + l == n && i % 2 ==\
    \ 0 && j % 2 == 0 && k % 2 == 0 && l % 2 == 0 {\n                        result\
    \ = true;\n                    }\n                }\n            }\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmphbxdko8d.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut sum = 0;\n    let mut count = 0;\n    for i in 1..n {\n        if i % 2\
    \ == 0 {\n            sum += i;\n            count += 1;\n        }\n        if\
    \ sum == n && count == 4 {\n            result = true;\n            break;\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdqah1r7y.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpxwn__di8.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut sum = 0;\n    let mut count = 0;\n    let mut i = 2;\n    while i <= n {\n\
    \        if i % 2 == 0 {\n            sum += i;\n            count += 1;\n   \
    \     }\n        if sum == n && count == 4 {\n            result = true;\n   \
    \         break;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0_5a09x1.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpchlievx2.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp5mk3le6q.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut n = n;\n    let mut count\
    \ = 0;\n    while n > 0 {\n        if n % 2 == 0 {\n            count += 1;\n\
    \            n -= 2;\n        } else {\n            n -= 1;\n        }\n    }\n\
    \    count == 4\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphiz7_34v.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    for\
    \ i in 0..n {\n        for j in 0..n {\n            for k in 0..n {\n        \
    \        for l in 0..n {\n                    if i + j + k + l == n && i % 2 ==\
    \ 0 && j % 2 == 0 && k % 2 == 0 && l % 2 == 0 {\n                        result\
    \ = true;\n                    }\n                }\n            }\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmphxbcemg4.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    for\
    \ i in 0..n {\n        for j in 0..n {\n            for k in 0..n {\n        \
    \        for l in 0..n {\n                    if i + j + k + l == n && i % 2 ==\
    \ 0 && j % 2 == 0 && k % 2 == 0 && l % 2 == 0 {\n                        result\
    \ = true;\n                    }\n                }\n            }\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvoa9m6r2.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut count = 0;\n    let mut\
    \ sum = 0;\n    let mut i = 2;\n    while sum < n {\n        if i % 2 == 0 {\n\
    \            sum += i;\n            count += 1;\n        }\n        i += 1;\n\
    \    }\n    if sum == n && count == 4 {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4),\
    \ false);\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11),\
    \ false);\n    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13),\
    \ false);\n    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpgs0m_f42.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    let mut i = 2;\n    while sum < n && count < 4 {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n            count += 1;\n        }\n  \
    \      i += 1;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpzi2esgle.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    let mut i = 2;\n    while count < 4 {\n        if i % 2 == 0\
    \ {\n            sum += i;\n            count += 1;\n        }\n        i += 1;\n\
    \    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6inazuex.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpikuyxuui.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    let mut i = 2;\n    while sum < n && count < 4 {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n            count += 1;\n        }\n  \
    \      i += 1;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp3z31pfw.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpp2xv_66e.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    let mut i = 2;\n    while count < 4 {\n        if i % 2 == 0\
    \ {\n            sum += i;\n            count += 1;\n        }\n        i += 1;\n\
    \    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdm3i9g8q.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut sum = 0;\n    let mut count = 0;\n    for i in 1..n {\n        if i % 2\
    \ == 0 {\n            sum += i;\n            count += 1;\n        }\n        if\
    \ sum == n && count == 4 {\n            result = true;\n            break;\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpyg7k0f02.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 1..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfy9bamme.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    let mut i = 2;\n    while sum < n && count < 4 {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n            count += 1;\n        }\n  \
    \      i += 1;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxvqsd5qf.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 1..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpjdcc3foy.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp7l_1235s.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 1..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9u0gymem.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp4di2v20a.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    let mut i = 2;\n    while sum < n && count < 4 {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n            count += 1;\n        }\n  \
    \      i += 1;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwgtxrof5.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpesmn4fng.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 1..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpp671r7ux.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp9ku8ibzp.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 2..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5m42pd90.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    for\
    \ i in 0..n {\n        for j in 0..n {\n            for k in 0..n {\n        \
    \        for l in 0..n {\n                    if i + j + k + l == n && i % 2 ==\
    \ 0 && j % 2 == 0 && k % 2 == 0 && l % 2 == 0 {\n                        result\
    \ = true;\n                    }\n                }\n            }\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpnjxavz7y.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 1..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpouny5bea.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 1..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpc1l4gmwy.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 1..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpkz46p34e.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut count = 0;\n    let mut\
    \ i = 2;\n    while i <= n {\n        if n % i == 0 {\n            count += 1;\n\
    \        }\n        i += 2;\n    }\n    count == 4\n}\n\nfn main() {\n    let\
    \ candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n  \
    \  assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n   \
    \ assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n  \
    \  assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n \
    \   assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1xvxr65r.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 1..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzpf8atow.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    let mut i = 2;\n    while sum < n && count < 4 {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n            count += 1;\n        }\n  \
    \      i += 1;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxe9h01_7.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    let mut i = 2;\n    while sum < n && count < 4 {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n            count += 1;\n        }\n  \
    \      i += 1;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwfuwb2sd.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpe0clw900.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    let mut i = 2;\n    while count < 4 {\n        if i % 2 == 0\
    \ {\n            sum += i;\n            count += 1;\n        }\n        i += 1;\n\
    \    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp91z8j2tp.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpup62mptd.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    let mut i = 2;\n    while count < 4 {\n        if i % 2 == 0\
    \ {\n            sum += i;\n            count += 1;\n        }\n        i += 1;\n\
    \    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmponhm84uw.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp5taz2ae7.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut sum = 0;\n    let mut count = 0;\n    for i in 0..n {\n        if i % 2\
    \ == 0 {\n            sum += i;\n            count += 1;\n        }\n        if\
    \ sum == n && count == 4 {\n            result = true;\n            break;\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_sy9m9uv.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    let mut i = 2;\n    while sum < n && count < 4 {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n            count += 1;\n        }\n  \
    \      i += 1;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpad7pjb4l.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 1..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpu8kzjk84.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    let mut i = 2;\n    while sum < n && count < 4 {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n            count += 1;\n        }\n  \
    \      i += 1;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmprdjs44n8.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut sum = 0;\n    let mut count = 0;\n    for i in 1..n {\n        if i % 2\
    \ == 0 {\n            sum += i;\n            count += 1;\n        }\n        if\
    \ sum == n && count == 4 {\n            result = true;\n            break;\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpz_5qai1x.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    for\
    \ i in 0..n {\n        for j in 0..n {\n            for k in 0..n {\n        \
    \        for l in 0..n {\n                    if i + j + k + l == n && i % 2 ==\
    \ 0 && j % 2 == 0 && k % 2 == 0 && l % 2 == 0 {\n                        result\
    \ = true;\n                    }\n                }\n            }\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpfx0zqv2z.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    let mut i = 2;\n    while count < 4 {\n        if i % 2 == 0\
    \ {\n            sum += i;\n            count += 1;\n        }\n        i += 1;\n\
    \    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp69wga613.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpk4q4kv2b.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpe844wbwj.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpa6cyrav4.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    let mut i = 2;\n    while sum < n && count < 4 {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n            count += 1;\n        }\n  \
    \      i += 1;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpmjd1l6ni.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut sum = 0;\n    let mut count = 0;\n    for i in 1..n {\n        if i % 2\
    \ == 0 {\n            sum += i;\n            count += 1;\n        }\n        if\
    \ sum == n && count == 4 {\n            result = true;\n            break;\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmppiuuni_k.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 1..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpftassn1b.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 1..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_lqi06rb.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpyyt18yvr.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    let mut i = 2;\n    while sum < n && count < 4 {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n            count += 1;\n        }\n  \
    \      i += 1;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpg6z0a3dd.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 0..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpa4112_3e.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 1..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpufnmgyej.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp3sm6yy52.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    let mut i = 2;\n    while sum < n && count < 4 {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n            count += 1;\n        }\n  \
    \      i += 1;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpki5dfeoh.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmptdxy274l.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 2..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpy_m6hs5x.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut even_numbers = Vec::new();\n\
    \    for i in 1..n {\n        if i % 2 == 0 {\n            even_numbers.push(i);\n\
    \        }\n    }\n    let mut result = false;\n    for i in 0..even_numbers.len()\
    \ {\n        for j in i..even_numbers.len() {\n            for k in j..even_numbers.len()\
    \ {\n                for l in k..even_numbers.len() {\n                    if\
    \ even_numbers[i] + even_numbers[j] + even_numbers[k] + even_numbers[l] == n {\n\
    \                        result = true;\n                    }\n             \
    \   }\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n  \
    \  assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n   \
    \ assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n  \
    \  assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n \
    \   assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp28py7fhh.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut res = false;\n    for\
    \ a in 0..n {\n        for b in 0..n {\n            for c in 0..n {\n        \
    \        for d in 0..n {\n                    if a + b + c + d == n && a % 2 ==\
    \ 0 && b % 2 == 0 && c % 2 == 0 && d % 2 == 0 {\n                        res =\
    \ true;\n                    }\n                }\n            }\n        }\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp5_8enqxe.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 0..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpo9qrijav.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp62rpmb5_.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp4mva1m84.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 2..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpelkxtryc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpviq5n30f.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut sum = 0;\n    let mut count = 0;\n    let mut i = 2;\n    while i <= n {\n\
    \        if i % 2 == 0 {\n            sum += i;\n            count += 1;\n   \
    \     }\n        if sum == n && count == 4 {\n            result = true;\n   \
    \         break;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphtjsv9on.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut res = false;\n    for\
    \ i in 0..n {\n        for j in 0..n {\n            for k in 0..n {\n        \
    \        for l in 0..n {\n                    if i + j + k + l == n && i % 2 ==\
    \ 0 && j % 2 == 0 && k % 2 == 0 && l % 2 == 0 {\n                        res =\
    \ true;\n                    }\n                }\n            }\n        }\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmphd4xex52.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut sum = 0;\n    let mut count = 0;\n    let mut i = 0;\n    while i < n {\n\
    \        if i % 2 == 0 {\n            sum += i;\n            count += 1;\n   \
    \     }\n        if sum == n && count == 4 {\n            result = true;\n   \
    \         break;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpq5szd90a.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp_vc9h_zm.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut sum = 0;\n    let mut count = 0;\n    let mut i = 2;\n    while i <= n {\n\
    \        if i % 2 == 0 {\n            sum += i;\n            count += 1;\n   \
    \     }\n        if sum == n && count == 4 {\n            result = true;\n   \
    \         break;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvhlkeoo_.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut i = 2;\n    let mut j = 2;\n    let mut k = 2;\n    let mut l = 2;\n   \
    \ while i <= n / 4 {\n        while j <= n / 3 {\n            while k <= n / 2\
    \ {\n                while l <= n {\n                    if i + j + k + l == n\
    \ {\n                        result = true;\n                    }\n         \
    \           l += 2;\n                }\n                k += 2;\n            }\n\
    \            j += 2;\n        }\n        i += 2;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 1..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpny3eigxx.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 1..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0_8f0qv9.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpo5qt2nqf.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp03xl7cx5.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n   \
    \ for i in 0..n {\n        for j in 0..n {\n            for k in 0..n {\n    \
    \            for l in 0..n {\n                    if i + j + k + l == n && i %\
    \ 2 == 0 && j % 2 == 0 && k % 2 == 0 && l % 2 == 0 {\n                       \
    \ a = i;\n                        b = j;\n                        c = k;\n   \
    \                     d = l;\n                        result = true;\n       \
    \             }\n                }\n            }\n        }\n    }\n    println!(\"\
    {} + {} + {} + {} = {}\", a, b, c, d, n);\n    result\n}\n\nfn main() {\n    let\
    \ candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n  \
    \  assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n   \
    \ assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n  \
    \  assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n \
    \   assert_eq!(candidate(16), true);\n}\n"
  stdout: "2 + 2 + 0 + 0 = 4\n"
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp5r2ovv1x.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut sum = 0;\n    let mut count = 0;\n    for i in 1..n {\n        if i % 2\
    \ == 0 {\n            sum += i;\n            count += 1;\n        }\n        if\
    \ sum == n && count == 4 {\n            result = true;\n            break;\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmye1yjxl.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 1..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprawtbqyr.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n   \
    \ for a in 0..n {\n        for b in 0..n {\n            for c in 0..n {\n    \
    \            for d in 0..n {\n                    if a + b + c + d == n && a %\
    \ 2 == 0 && b % 2 == 0 && c % 2 == 0 && d % 2 == 0 {\n                       \
    \ result = true;\n                    }\n                }\n            }\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpjx_dh2w3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    let mut i = 2;\n    while sum < n && count < 4 {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n            count += 1;\n        }\n  \
    \      i += 1;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpbqfy4ssj.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpwfdf3jo3.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    let mut i = 2;\n    while sum < n && count < 4 {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n            count += 1;\n        }\n  \
    \      i += 1;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpq9dxycuj.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp3higp9g5.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 1..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpxfhtz8ww.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp7cliuoi2.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 1..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1e7w39fg.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 1..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpds87982l.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpu6cod4vl.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 0..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpngj0nqbt.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp2ocyzsp6.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    // TODO\n    false\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpbi2rcwso.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpb0gfi4ul.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpbk31ukm8.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    let mut i = 2;\n    while sum < n && count < 4 {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n            count += 1;\n        }\n  \
    \      i += 1;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvq6suzy3.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 1..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpsb54lhrw.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmplgyj_ua1.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpfmrgxeb_.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    // TODO\n    false\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6s92olg1.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpknobulvm.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmprztj3t5v.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmprnpuokup.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    let mut i = 2;\n    while count < 4 {\n        if i % 2 == 0\
    \ {\n            sum += i;\n            count += 1;\n        }\n        i += 1;\n\
    \    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_x9hbfj3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 1..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprutet7km.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    for\
    \ a in 0..n {\n        for b in a..n {\n            for c in b..n {\n        \
    \        for d in c..n {\n                    if a + b + c + d == n && a % 2 ==\
    \ 0 && b % 2 == 0 && c % 2 == 0 && d % 2 == 0 {\n                        result\
    \ = true;\n                    }\n                }\n            }\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwqlyo2ky.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    let mut i = 2;\n    while sum < n && count < 4 {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n            count += 1;\n        }\n  \
    \      i += 1;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7hqc1db9.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 0..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp4in9a4pp.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp5p35yq3c.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpplrs9uwl.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp7pb8in5g.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp_w7wb6e5.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp1d644au3.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 1..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpuo805vge.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    for\
    \ a in 0..n {\n        for b in 0..n {\n            for c in 0..n {\n        \
    \        for d in 0..n {\n                    if a + b + c + d == n && a % 2 ==\
    \ 0 && b % 2 == 0 && c % 2 == 0 && d % 2 == 0 {\n                        result\
    \ = true;\n                    }\n                }\n            }\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpjumqd6x9.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    let mut i = 2;\n    while sum < n && count < 4 {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n            count += 1;\n        }\n  \
    \      i += 1;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpy88wjtql.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut sum = 0;\n    let mut count = 0;\n    for i in 1..n {\n        if i % 2\
    \ == 0 {\n            sum += i;\n            count += 1;\n        }\n        if\
    \ sum == n && count == 4 {\n            result = true;\n            break;\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpp90o5pp6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut n = n;\n    let mut count\
    \ = 0;\n    while n > 0 {\n        n -= 2;\n        count += 1;\n    }\n    count\
    \ == 4\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4),\
    \ false);\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11),\
    \ false);\n    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13),\
    \ false);\n    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpiybg97mn.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n   \
    \ for a in 0..n {\n        for b in 0..n {\n            for c in 0..n {\n    \
    \            for d in 0..n {\n                    if a + b + c + d == n && a %\
    \ 2 == 0 && b % 2 == 0 && c % 2 == 0 && d % 2 == 0 {\n                       \
    \ result = true;\n                    }\n                }\n            }\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1ibzml7y.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmptayatsi0.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpvtqt2q63.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp7c3jhrj0.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpd98zujy0.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    let mut i = 2;\n    while sum < n && count < 4 {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n            count += 1;\n        }\n  \
    \      i += 1;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmph3b3zqw5.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpyfxwka94.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpkyyzj1he.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpjqyala6_.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    for\
    \ i in 0..n / 2 {\n        for j in 0..n / 2 {\n            for k in 0..n / 2\
    \ {\n                for l in 0..n / 2 {\n                    if i + j + k + l\
    \ == n {\n                        result = true;\n                    }\n    \
    \            }\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_zbf6iw9.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpc6ftmese.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 1..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpi8g_uq8c.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut sum = 0;\n    let mut count = 0;\n    for i in 0..n {\n        if i % 2\
    \ == 0 {\n            sum += i;\n            count += 1;\n        }\n        if\
    \ sum == n && count == 4 {\n            result = true;\n            break;\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1cweo2j4.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 1..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1q48xdlj.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    for\
    \ i in 0..n {\n        for j in 0..n {\n            for k in 0..n {\n        \
    \        for l in 0..n {\n                    if i + j + k + l == n && i % 2 ==\
    \ 0 && j % 2 == 0 && k % 2 == 0 && l % 2 == 0 {\n                        result\
    \ = true;\n                    }\n                }\n            }\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpyz44c7lu.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpgrg01ak3.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut sum = 0;\n    let mut count = 0;\n    for i in 1..n {\n        if i % 2\
    \ == 0 {\n            sum += i;\n            count += 1;\n        }\n        if\
    \ sum == n && count == 4 {\n            result = true;\n            break;\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp30da017h.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    for\
    \ i in 0..n {\n        for j in 0..n {\n            for k in 0..n {\n        \
    \        for l in 0..n {\n                    if i + j + k + l == n && i % 2 ==\
    \ 0 && j % 2 == 0 && k % 2 == 0 && l % 2 == 0 {\n                        result\
    \ = true;\n                    }\n                }\n            }\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpnz3mb4h_.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut count = 0;\n    let mut\
    \ sum = 0;\n    let mut i = 2;\n    while sum < n {\n        if i % 2 == 0 {\n\
    \            sum += i;\n            count += 1;\n        }\n        i += 1;\n\
    \    }\n    if sum == n && count == 4 {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4),\
    \ false);\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11),\
    \ false);\n    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13),\
    \ false);\n    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp97ttyoop.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    // TODO\n    false\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5niw7uf2.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    let mut i = 2;\n    while sum < n && count < 4 {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n            count += 1;\n        }\n  \
    \      i += 1;\n    }\n    sum == n\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpm0vw93hw.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    for\
    \ i in 2..n {\n        for j in 2..n {\n            for k in 2..n {\n        \
    \        for l in 2..n {\n                    if i + j + k + l == n {\n      \
    \                  result = true;\n                    }\n                }\n\
    \            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10),\
    \ true);\n    assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12),\
    \ true);\n    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16),\
    \ true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmphluu0aud.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp1t_f8jm8.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut sum = 0;\n    let mut count = 0;\n    for i in 1..n {\n        if i % 2\
    \ == 0 {\n            sum += i;\n            count += 1;\n        }\n        if\
    \ sum == n && count == 4 {\n            result = true;\n            break;\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpjr5uobu8.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 2..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3f5wsfxn.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpx9d0ae7q.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpzi96u03q.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 1..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpkgfjxfhk.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp4yh6t4ll.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmppo0a_rh4.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 1..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpa16t1xaw.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 0..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpji3166zh.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpcmtcks10.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpzpqm9ico.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpx5ocz94_.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut sum = 0;\n    let mut\
    \ count = 0;\n    for i in 1..n {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n            count += 1;\n        }\n        if sum == n && count == 4 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpjqr22zhd.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut i = 2;\n    let mut sum\
    \ = 0;\n    let mut count = 0;\n    while i <= n {\n        sum += i;\n      \
    \  count += 1;\n        if sum == n && count == 4 {\n            return true;\n\
    \        }\n        i += 2;\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10),\
    \ true);\n    assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12),\
    \ true);\n    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16),\
    \ true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpcastb7nz.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpbbxar4se.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_equal_to_sum_even;\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), true);\n    assert_eq!(candidate(11), false);\n\
    \    assert_eq!(candidate(12), true);\n    assert_eq!(candidate(13), false);\n\
    \    assert_eq!(candidate(16), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmppkl4uoij.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n/// Example\n/// is_equal_to_sum_even(4) == False\n\
    /// is_equal_to_sum_even(6) == False\n/// is_equal_to_sum_even(8) == True\nfn\
    \ is_equal_to_sum_even(n: isize) -> bool {\n    let mut result = false;\n    for\
    \ a in 0..n {\n        for b in 0..n {\n            for c in 0..n {\n        \
    \        for d in 0..n {\n                    if a + b + c + d == n && a % 2 ==\
    \ 0 && b % 2 == 0 && c % 2 == 0 && d % 2 == 0 {\n                        result\
    \ = true;\n                    }\n                }\n            }\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = is_equal_to_sum_even;\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), true);\n \
    \   assert_eq!(candidate(11), false);\n    assert_eq!(candidate(12), true);\n\
    \    assert_eq!(candidate(13), false);\n    assert_eq!(candidate(16), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmprlzdsdlz.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
