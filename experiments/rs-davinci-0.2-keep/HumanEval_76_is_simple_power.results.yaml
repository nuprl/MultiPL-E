name: HumanEval_76_is_simple_power
language: rust
results:
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 { return true;\
    \ }\n    let mut i = 2;\n    let mut result = n;\n    while result <= x {\n  \
    \      if result == x { return true; }\n        result *= n;\n        i += 1;\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n  \
    \  assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i.pow(n as u32) <= x {\n       \
    \ if i.pow(n as u32) == x {\n            return true;\n        }\n        i +=\
    \ 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpf8o5rh53.rs:16:13\n   |\n16 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n15 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpf8o5rh53.rs:17:14\n\
    \   |\n17 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n15 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 2;\n    let mut result = n;\n    while result\
    \ < x {\n        result *= n;\n        i += 1;\n    }\n    result == x\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i.pow(n as u32) <= x {\n       \
    \ if i.pow(n as u32) == x {\n            return true;\n        }\n        i +=\
    \ 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmp80g1lb3w.rs:16:13\n   |\n16 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n15 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmp80g1lb3w.rs:17:14\n\
    \   |\n17 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n15 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i < x {\n        i *= n;\n    }\n\
    \    i == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    let mut res = n;\n    while res <= x {\n\
    \        if res == x {\n            return true;\n        }\n        i += 1;\n\
    \        res = n.pow(i);\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214,\
    \ 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 2;\n    let mut result = n;\n    while result\
    \ < x {\n        result *= n;\n        i += 1;\n    }\n    result == x\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    while\
    \ i.pow(n as u32) <= x {\n        if i.pow(n as u32) == x {\n            return\
    \ true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214,\
    \ 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmp2c8btsd7.rs:13:13\n   |\n13 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n12 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmp2c8btsd7.rs:14:14\n\
    \   |\n14 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n12 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i < x {\n        i *= n;\n    }\n\
    \    i == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i <= x {\n        if i == x {\n\
    \            return true;\n        }\n        i *= n;\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i < x {\n        i *= n;\n    }\n\
    \    i == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    let mut result = n;\n    while result\
    \ < x {\n        result *= n;\n        i += 1;\n    }\n    result == x\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    if n == 1 {\n        return false;\n    }\n    let mut i =\
    \ 1;\n    while i.pow(n as u32) <= x {\n        if i.pow(n as u32) == x {\n  \
    \          return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpypylg1y1.rs:19:13\n   |\n19 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n18 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpypylg1y1.rs:20:14\n\
    \   |\n20 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n18 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut power = n;\n   \
    \ while power < x {\n        power *= n;\n    }\n    power == x\n}\n\nfn main()\
    \ {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqn5jlaoz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i <= x {\n        if i == x {\n\
    \            return true;\n        }\n        i *= n;\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i <= x {\n        if i == x {\n\
    \            return true;\n        }\n        i *= n;\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i <= x {\n        if i == x {\n\
    \            return true;\n        }\n        i *= n;\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    let mut res = n;\n    while res <= x {\n\
    \        if res == x {\n            return true;\n        }\n        i += 1;\n\
    \        res = n.pow(i);\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214,\
    \ 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    let mut result = n;\n    while result\
    \ <= x {\n        if result == x {\n            return true;\n        }\n    \
    \    i += 1;\n        result = n.pow(i);\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 0;\n    let\
    \ mut result = 1;\n    while result < x {\n        i += 1;\n        result = n.pow(i);\n\
    \    }\n    result == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    if n == 1 {\n        return false;\n    }\n    let mut i =\
    \ 2;\n    let mut result = n;\n    while result < x {\n        result *= n;\n\
    \        i += 1;\n    }\n    result == x\n}\n\nfn main() {\n    let candidate\
    \ = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214,\
    \ 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i < x {\n        i *= n;\n    }\n\
    \    i == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut power = n;\n   \
    \ while power < x {\n        power *= n;\n    }\n    power == x\n}\n\nfn main()\
    \ {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpunexxsgx.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i <= x {\n        if i == x {\n\
    \            return true;\n        }\n        i *= n;\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    if n == 1 {\n        return false;\n    }\n    let mut m =\
    \ n;\n    while m < x {\n        m *= n;\n    }\n    m == x\n}\n\nfn main() {\n\
    \    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    while\
    \ i.pow(n as u32) <= x {\n        if i.pow(n as u32) == x {\n            return\
    \ true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214,\
    \ 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpvqj6gelo.rs:13:13\n   |\n13 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n12 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpvqj6gelo.rs:14:14\n\
    \   |\n14 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n12 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i.pow(n as u32) <= x {\n       \
    \ if i.pow(n as u32) == x {\n            return true;\n        }\n        i +=\
    \ 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmppdoy69za.rs:16:13\n   |\n16 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n15 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmppdoy69za.rs:17:14\n\
    \   |\n17 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n15 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i.pow(n as u32) <= x {\n       \
    \ if i.pow(n as u32) == x {\n            return true;\n        }\n        i +=\
    \ 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpp8mbe4ow.rs:16:13\n   |\n16 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n15 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpp8mbe4ow.rs:17:14\n\
    \   |\n17 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n15 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i < x {\n        i *= n;\n    }\n\
    \    i == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut y = n;\n    while\
    \ y < x {\n        y *= n;\n    }\n    y == x\n}\n\nfn main() {\n    let candidate\
    \ = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214,\
    \ 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp4fblpw6d.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    let mut result = n;\n    while result\
    \ <= x {\n        if result == x {\n            return true;\n        }\n    \
    \    i += 1;\n        result = n.pow(i);\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut res = 1;\n    let\
    \ mut i = 0;\n    while res < x {\n        res *= n;\n        i += 1;\n    }\n\
    \    res == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i <= x {\n        if i == x {\n\
    \            return true;\n        }\n        i *= n;\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    while\
    \ i.pow(n as u32) <= x {\n        if i.pow(n as u32) == x {\n            return\
    \ true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214,\
    \ 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpx_b8jgfp.rs:13:13\n   |\n13 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n12 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpx_b8jgfp.rs:14:14\n\
    \   |\n14 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n12 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    while\
    \ i.pow(n as u32) <= x {\n        if i.pow(n as u32) == x {\n            return\
    \ true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214,\
    \ 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpf46s8dl5.rs:13:13\n   |\n13 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n12 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpf46s8dl5.rs:14:14\n\
    \   |\n14 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n12 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i <= x {\n        if i == x {\n\
    \            return true;\n        }\n        i *= n;\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    let\
    \ mut res = n;\n    while res <= x {\n        if res == x {\n            return\
    \ true;\n        }\n        i += 1;\n        res = n.pow(i);\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6gmwfhie.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i.pow(n as u32) <= x {\n       \
    \ if i.pow(n as u32) == x {\n            return true;\n        }\n        i +=\
    \ 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmppr0aefj_.rs:16:13\n   |\n16 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n15 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmppr0aefj_.rs:17:14\n\
    \   |\n17 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n15 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    while\
    \ i < x {\n        i *= n;\n    }\n    i == x\n}\n\nfn main() {\n    let candidate\
    \ = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214,\
    \ 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 2;\n    let mut result = n;\n    while result\
    \ < x {\n        result *= n;\n        i += 1;\n    }\n    result == x\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    let mut result = n;\n    while result\
    \ <= x {\n        if result == x {\n            return true;\n        }\n    \
    \    i += 1;\n        result = n.pow(i);\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 2;\n    while i <= x {\n        if i == x {\n\
    \            return true;\n        }\n        i *= n;\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpanesvhx6.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 2;\n    let mut result = n;\n    while result\
    \ <= x {\n        if result == x {\n            return true;\n        }\n    \
    \    result *= n;\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214,\
    \ 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i < x {\n        i *= n;\n    }\n\
    \    i == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i <= x {\n        if i == x {\n\
    \            return true;\n        }\n        i *= n;\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut power = n;\n   \
    \ while power < x {\n        power *= n;\n    }\n    power == x\n}\n\nfn main()\
    \ {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmptskgiag3.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 2;\n    while i <= x {\n        if i == x {\n\
    \            return true;\n        }\n        i *= n;\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpahbjc_vq.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    while\
    \ i.pow(n as u32) <= x {\n        if i.pow(n as u32) == x {\n            return\
    \ true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214,\
    \ 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmp7dgftee4.rs:13:13\n   |\n13 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n12 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmp7dgftee4.rs:14:14\n\
    \   |\n14 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n12 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    let mut result = n;\n    while result\
    \ <= x {\n        if result == x {\n            return true;\n        }\n    \
    \    i += 1;\n        result = n.pow(i);\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i.pow(n as u32) <= x {\n       \
    \ if i.pow(n as u32) == x {\n            return true;\n        }\n        i +=\
    \ 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpoe_wqtf4.rs:16:13\n   |\n16 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n15 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpoe_wqtf4.rs:17:14\n\
    \   |\n17 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n15 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 0;\n    let\
    \ mut result = n;\n    while result < x {\n        result *= n;\n        i +=\
    \ 1;\n    }\n    result == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpxnlkv86n.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    let\
    \ mut result = n;\n    while result <= x {\n        if result == x {\n       \
    \     return true;\n        }\n        i += 1;\n        result = n.pow(i);\n \
    \   }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n   \
    \ assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16), false);\n\
    \    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9, 3), true);\n\
    \    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24, 2), false);\n\
    \    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12, 6), false);\n\
    \    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1, 12), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8wreph6h.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    while\
    \ i.pow(n as u32) <= x {\n        if i.pow(n as u32) == x {\n            return\
    \ true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214,\
    \ 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpr4nh8spb.rs:13:13\n   |\n13 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n12 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpr4nh8spb.rs:14:14\n\
    \   |\n14 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n12 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    let mut result = n;\n    while result\
    \ <= x {\n        if result == x {\n            return true;\n        }\n    \
    \    i += 1;\n        result = n.pow(i);\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut power = n;\n    while power < x {\n        power *=\
    \ n;\n    }\n    power == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    if n == 1 {\n        return false;\n    }\n    let mut x =\
    \ x;\n    while x % n == 0 {\n        x /= n;\n    }\n    x == 1\n}\n\nfn main()\
    \ {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut result = n;\n  \
    \  while result < x {\n        result *= n;\n    }\n    result == x\n}\n\nfn main()\
    \ {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqvsgidjj.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i.pow(n as u32) <= x {\n       \
    \ if i.pow(n as u32) == x {\n            return true;\n        }\n        i +=\
    \ 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmppz2y402t.rs:16:13\n   |\n16 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n15 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmppz2y402t.rs:17:14\n\
    \   |\n17 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n15 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    let\
    \ mut result = n;\n    while result < x {\n        result *= n;\n        i +=\
    \ 1;\n    }\n    result == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpr7yfu5qy.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while n.pow(i) <= x {\n        if n.pow(i)\
    \ == x {\n            return true;\n        }\n        i += 1;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    let mut res = n;\n    while res < x {\n\
    \        res *= n;\n        i += 1;\n    }\n    res == x\n}\n\nfn main() {\n \
    \   let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    let mut result = n;\n    while result\
    \ < x {\n        result *= n;\n        i += 1;\n    }\n    result == x\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    let\
    \ mut result = n;\n    while result <= x {\n        if result == x {\n       \
    \     return true;\n        }\n        i += 1;\n        result = n.pow(i);\n \
    \   }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n   \
    \ assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16), false);\n\
    \    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9, 3), true);\n\
    \    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24, 2), false);\n\
    \    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12, 6), false);\n\
    \    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1, 12), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpukxv8cc6.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i < x {\n        i *= n;\n    }\n\
    \    i == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut result = n;\n  \
    \  while result < x {\n        result *= n;\n    }\n    result == x\n}\n\nfn main()\
    \ {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmppaf28kzq.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i < x {\n        i *= n;\n    }\n\
    \    i == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i < x {\n        i *= n;\n    }\n\
    \    i == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    while\
    \ i.pow(n as u32) <= x {\n        if i.pow(n as u32) == x {\n            return\
    \ true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214,\
    \ 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmptch_cnna.rs:13:13\n   |\n13 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n12 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmptch_cnna.rs:14:14\n\
    \   |\n14 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n12 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut result = n;\n  \
    \  while result < x {\n        result *= n;\n    }\n    result == x\n}\n\nfn main()\
    \ {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpaq_jgfy6.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    if n == 1 {\n        return false;\n    }\n    let mut i =\
    \ 1;\n    let mut result = n;\n    while result <= x {\n        if result == x\
    \ {\n            return true;\n        }\n        result *= n;\n        i += 1;\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n  \
    \  assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut result = n;\n  \
    \  while result < x {\n        result *= n;\n    }\n    result == x\n}\n\nfn main()\
    \ {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprs89_eum.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i < x {\n        i *= n;\n    }\n\
    \    i == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i < x {\n        i *= n;\n    }\n\
    \    i == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    let\
    \ mut res = n;\n    while res < x {\n        res *= n;\n        i += 1;\n    }\n\
    \    res == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpgoc1mtwl.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 0;\n    let mut res = 1;\n    while res < x {\n\
    \        i += 1;\n        res = n.pow(i);\n    }\n    res == x\n}\n\nfn main()\
    \ {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i <= x {\n        if i == x {\n\
    \            return true;\n        }\n        i *= n;\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i.pow(n as u32) <= x {\n       \
    \ if i.pow(n as u32) == x {\n            return true;\n        }\n        i +=\
    \ 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmp55w3wm_e.rs:16:13\n   |\n16 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n15 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmp55w3wm_e.rs:17:14\n\
    \   |\n17 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n15 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i.pow(n as u32) <= x {\n       \
    \ if i.pow(n as u32) == x {\n            return true;\n        }\n        i +=\
    \ 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmp0kbphjp5.rs:16:13\n   |\n16 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n15 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmp0kbphjp5.rs:17:14\n\
    \   |\n17 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n15 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i <= x {\n        if i == x {\n\
    \            return true;\n        }\n        i *= n;\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i <= x {\n        if i == x {\n\
    \            return true;\n        }\n        i *= n;\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    while\
    \ i.pow(n as u32) <= x {\n        if i.pow(n as u32) == x {\n            return\
    \ true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214,\
    \ 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmplmgm8fnl.rs:13:13\n   |\n13 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n12 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmplmgm8fnl.rs:14:14\n\
    \   |\n14 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n12 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i <= x {\n        if i == x {\n\
    \            return true;\n        }\n        i *= n;\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 2;\n    let mut result = n;\n    while result\
    \ < x {\n        result *= n;\n        i += 1;\n    }\n    result == x\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i.pow(n as u32) <= x {\n       \
    \ if i.pow(n as u32) == x {\n            return true;\n        }\n        i +=\
    \ 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpqxws_1hn.rs:16:13\n   |\n16 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n15 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpqxws_1hn.rs:17:14\n\
    \   |\n17 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n15 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i < x {\n        i *= n;\n    }\n\
    \    i == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut power = n;\n    while power < x {\n        power *=\
    \ n;\n    }\n    power == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i < x {\n        i *= n;\n    }\n\
    \    i == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    let mut p = n;\n    while p <= x {\n \
    \       if p == x {\n            return true;\n        }\n        i += 1;\n  \
    \      p *= n;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    while\
    \ i.pow(n as u32) <= x {\n        if i.pow(n as u32) == x {\n            return\
    \ true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214,\
    \ 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmp5zohtpkm.rs:13:13\n   |\n13 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n12 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmp5zohtpkm.rs:14:14\n\
    \   |\n14 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n12 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    let\
    \ mut result = n;\n    while result < x {\n        result *= n;\n        i +=\
    \ 1;\n    }\n    result == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpes9u37ce.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i <= x {\n        if i == x {\n\
    \            return true;\n        }\n        i *= n;\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    let mut result = n;\n    while result\
    \ <= x {\n        if result == x {\n            return true;\n        }\n    \
    \    i += 1;\n        result = n.pow(i);\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    let mut result = n;\n    while result\
    \ <= x {\n        if result == x {\n            return true;\n        }\n    \
    \    i += 1;\n        result = n.pow(i);\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut power = n;\n    while power < x {\n        power *=\
    \ n;\n    }\n    power == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    if n == 1 {\n        return false;\n    }\n    let mut i =\
    \ 1;\n    let mut result = n;\n    while result <= x {\n        if result == x\
    \ {\n            return true;\n        }\n        i += 1;\n        result = n.pow(i);\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n  \
    \  assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    let mut result = n;\n    while result\
    \ <= x {\n        if result == x {\n            return true;\n        }\n    \
    \    i += 1;\n        result = n.pow(i);\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 0 {\n        return\
    \ false;\n    }\n    let mut i = 0;\n    let mut res = 1;\n    while res < x {\n\
    \        i += 1;\n        res = n.pow(i);\n    }\n    res == x\n}\n\nfn main()\
    \ {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut power = n;\n   \
    \ while power < x {\n        power *= n;\n    }\n    power == x\n}\n\nfn main()\
    \ {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqxdwtv1u.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    let mut result = n;\n    while result\
    \ <= x {\n        if result == x {\n            return true;\n        }\n    \
    \    i += 1;\n        result = n.pow(i);\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    while\
    \ i.pow(n as u32) <= x {\n        if i.pow(n as u32) == x {\n            return\
    \ true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214,\
    \ 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpzp9234cb.rs:13:13\n   |\n13 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n12 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpzp9234cb.rs:14:14\n\
    \   |\n14 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n12 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut a = n;\n    while\
    \ a < x {\n        a *= n;\n    }\n    a == x\n}\n\nfn main() {\n    let candidate\
    \ = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214,\
    \ 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpz9wgp915.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i.pow(n as u32) <= x {\n       \
    \ if i.pow(n as u32) == x {\n            return true;\n        }\n        i +=\
    \ 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpvy34rmln.rs:16:13\n   |\n16 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n15 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpvy34rmln.rs:17:14\n\
    \   |\n17 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n15 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    let\
    \ mut result = n;\n    while result <= x {\n        if result == x {\n       \
    \     return true;\n        }\n        i += 1;\n        result = n.pow(i);\n \
    \   }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n   \
    \ assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16), false);\n\
    \    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9, 3), true);\n\
    \    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24, 2), false);\n\
    \    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12, 6), false);\n\
    \    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1, 12), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9l6xpk9r.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i <= x {\n        if i == x {\n\
    \            return true;\n        }\n        i *= n;\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while n.pow(i) <= x {\n        if n.pow(i)\
    \ == x {\n            return true;\n        }\n        i += 1;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 2;\n    let mut res = n;\n    while res < x {\n\
    \        res *= n;\n        i += 1;\n    }\n    res == x\n}\n\nfn main() {\n \
    \   let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    while\
    \ i.pow(n as u32) <= x {\n        if i.pow(n as u32) == x {\n            return\
    \ true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214,\
    \ 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmps12qrzr8.rs:13:13\n   |\n13 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n12 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmps12qrzr8.rs:14:14\n\
    \   |\n14 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n12 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut x = x;\n    let\
    \ mut n = n;\n    while x % n == 0 {\n        x /= n;\n    }\n    x == 1\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i.pow(n as u32) <= x {\n       \
    \ if i.pow(n as u32) == x {\n            return true;\n        }\n        i +=\
    \ 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpyrnrzwt6.rs:16:13\n   |\n16 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n15 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpyrnrzwt6.rs:17:14\n\
    \   |\n17 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n15 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut result = n;\n    while result < x {\n        result\
    \ *= n;\n    }\n    result == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i <= x {\n        if i == x {\n\
    \            return true;\n        }\n        i *= n;\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 0;\n    let mut res = n;\n    while res <= x {\n\
    \        if res == x {\n            return true;\n        }\n        i += 1;\n\
    \        res = n.pow(i);\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214,\
    \ 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut result = n;\n  \
    \  while result < x {\n        result *= n;\n    }\n    result == x\n}\n\nfn main()\
    \ {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprhnk9ce4.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 2;\n    let mut res = n;\n    while res < x {\n\
    \        res *= n;\n        i += 1;\n    }\n    res == x\n}\n\nfn main() {\n \
    \   let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    while\
    \ i.pow(n as u32) <= x {\n        if i.pow(n as u32) == x {\n            return\
    \ true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214,\
    \ 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpunv2_2o8.rs:13:13\n   |\n13 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n12 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpunv2_2o8.rs:14:14\n\
    \   |\n14 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n12 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut x = x;\n    let\
    \ mut n = n;\n    while x % n == 0 {\n        x /= n;\n    }\n    x == 1\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    let\
    \ mut x_ = x;\n    while x_ > 1 {\n        x_ /= n;\n        i += 1;\n    }\n\
    \    x == n.pow(i - 1)\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 2;\n    let mut result = n;\n    while result\
    \ < x {\n        result *= n;\n        i += 1;\n    }\n    result == x\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut x = x;\n    let\
    \ mut n = n;\n    while x % n == 0 {\n        x /= n;\n    }\n    x == 1\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 2;\n    let mut result = n;\n    while result\
    \ < x {\n        result *= n;\n        i += 1;\n    }\n    result == x\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    if n == 1 {\n        return false;\n    }\n    let mut i =\
    \ 1;\n    while i < x {\n        i *= n;\n    }\n    i == x\n}\n\nfn main() {\n\
    \    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    let mut result = n;\n    while result\
    \ <= x {\n        if result == x {\n            return true;\n        }\n    \
    \    i += 1;\n        result = n.pow(i);\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut x = x;\n    let\
    \ mut n = n;\n    while x % n == 0 {\n        x /= n;\n    }\n    x == 1\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    let mut result = n;\n    while result\
    \ < x {\n        result *= n;\n        i += 1;\n    }\n    result == x\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut x = x;\n    let mut n = n;\n    while x % n == 0 {\n\
    \        x /= n;\n        if x == 1 {\n            return true;\n        }\n \
    \   }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n   \
    \ assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16), false);\n\
    \    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9, 3), true);\n\
    \    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24, 2), false);\n\
    \    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12, 6), false);\n\
    \    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1, 12), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut result = n;\n  \
    \  while result < x {\n        result *= n;\n    }\n    result == x\n}\n\nfn main()\
    \ {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpcn35mgwl.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i.pow(n as u32) < x {\n        i\
    \ += 1;\n    }\n    i.pow(n as u32) == x\n}\n\nfn main() {\n    let candidate\
    \ = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214,\
    \ 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmp8rmedx4b.rs:16:13\n   |\n16 |     while i.pow(n as u32) < x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n15 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmp8rmedx4b.rs:19:7\n\
    \   |\n19 |     i.pow(n as u32) == x\n   |       ^^^\n   |\nhelp: you must specify\
    \ a type for this binding, like `i32`\n   |\n15 |     let mut i: i32 = 1;\n  \
    \ |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    while\
    \ i.pow(n as u32) <= x {\n        if i.pow(n as u32) == x {\n            return\
    \ true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214,\
    \ 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmphjgy2vv3.rs:13:13\n   |\n13 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n12 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmphjgy2vv3.rs:14:14\n\
    \   |\n14 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n12 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    while\
    \ i.pow(n as u32) <= x {\n        if i.pow(n as u32) == x {\n            return\
    \ true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214,\
    \ 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmp1pfgvinn.rs:13:13\n   |\n13 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n12 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmp1pfgvinn.rs:14:14\n\
    \   |\n14 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n12 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i < x {\n        i *= n;\n    }\n\
    \    i == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i.pow(n as u32) <= x {\n       \
    \ if i.pow(n as u32) == x {\n            return true;\n        }\n        i +=\
    \ 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpb5jo85pl.rs:16:13\n   |\n16 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n15 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpb5jo85pl.rs:17:14\n\
    \   |\n17 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n15 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut result = n;\n  \
    \  while result < x {\n        result *= n;\n    }\n    result == x\n}\n\nfn main()\
    \ {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpigam4xmr.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    let\
    \ mut result = n;\n    while result <= x {\n        if result == x {\n       \
    \     return true;\n        }\n        i += 1;\n        result = n.pow(i);\n \
    \   }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n   \
    \ assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16), false);\n\
    \    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9, 3), true);\n\
    \    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24, 2), false);\n\
    \    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12, 6), false);\n\
    \    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1, 12), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5c9uyznc.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i.pow(n as u32) <= x {\n       \
    \ if i.pow(n as u32) == x {\n            return true;\n        }\n        i +=\
    \ 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpjif8zpz9.rs:16:13\n   |\n16 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n15 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpjif8zpz9.rs:17:14\n\
    \   |\n17 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n15 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut result = n;\n  \
    \  while result < x {\n        result *= n;\n    }\n    result == x\n}\n\nfn main()\
    \ {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpn8_19dto.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 0;\n    let\
    \ mut result = 1;\n    while result < x {\n        i += 1;\n        result = n.pow(i);\n\
    \    }\n    result == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut result = n;\n    while result < x {\n        result\
    \ *= n;\n    }\n    result == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut result = n;\n  \
    \  while result < x {\n        result *= n;\n    }\n    result == x\n}\n\nfn main()\
    \ {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpb8lcl3qq.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    let mut result = n;\n    while result\
    \ <= x {\n        if result == x {\n            return true;\n        }\n    \
    \    i += 1;\n        result = n.pow(i);\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut result = n;\n  \
    \  while result < x {\n        result *= n;\n    }\n    result == x\n}\n\nfn main()\
    \ {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpznuumkiu.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    while\
    \ i.pow(n as u32) < x {\n        i += 1;\n    }\n    i.pow(n as u32) == x\n}\n\
    \nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmppb23fwy6.rs:13:13\n   |\n13 |     while i.pow(n as u32) < x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n12 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmppb23fwy6.rs:16:7\n\
    \   |\n16 |     i.pow(n as u32) == x\n   |       ^^^\n   |\nhelp: you must specify\
    \ a type for this binding, like `i32`\n   |\n12 |     let mut i: i32 = 1;\n  \
    \ |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    let\
    \ mut result = n;\n    while result < x {\n        result *= n;\n        i +=\
    \ 1;\n    }\n    result == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdpkte3bj.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut result = 1;\n  \
    \  let mut i = 1;\n    while result < x {\n        result *= n;\n        i +=\
    \ 1;\n    }\n    result == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i.pow(n as u32) <= x {\n       \
    \ if i.pow(n as u32) == x {\n            return true;\n        }\n        i +=\
    \ 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmps4v1v_uq.rs:16:13\n   |\n16 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n15 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmps4v1v_uq.rs:17:14\n\
    \   |\n17 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n15 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    while\
    \ i.pow(n as u32) <= x {\n        if i.pow(n as u32) == x {\n            return\
    \ true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214,\
    \ 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpkgrpiyhk.rs:13:13\n   |\n13 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n12 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpkgrpiyhk.rs:14:14\n\
    \   |\n14 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n12 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 2;\n    let mut result = n;\n    while result\
    \ < x {\n        result *= n;\n        i += 1;\n    }\n    result == x\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i < x {\n        i *= n;\n    }\n\
    \    i == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    let mut res = n;\n    while res <= x {\n\
    \        if res == x {\n            return true;\n        }\n        i += 1;\n\
    \        res = n.pow(i);\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214,\
    \ 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut result = n;\n  \
    \  while result < x {\n        result *= n;\n    }\n    result == x\n}\n\nfn main()\
    \ {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmppkjycrnn.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i.pow(n as u32) <= x {\n       \
    \ if i.pow(n as u32) == x {\n            return true;\n        }\n        i +=\
    \ 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpl_iq8d04.rs:16:13\n   |\n16 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n15 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpl_iq8d04.rs:17:14\n\
    \   |\n17 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n15 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i.pow(n as u32) <= x {\n       \
    \ if i.pow(n as u32) == x {\n            return true;\n        }\n        i +=\
    \ 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpy7abxolk.rs:16:13\n   |\n16 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n15 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpy7abxolk.rs:17:14\n\
    \   |\n17 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n15 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    let mut result = n;\n    while result\
    \ <= x {\n        if result == x {\n            return true;\n        }\n    \
    \    i += 1;\n        result = n.pow(i);\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    while\
    \ i.pow(n as u32) <= x {\n        if i.pow(n as u32) == x {\n            return\
    \ true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214,\
    \ 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpor0aguxh.rs:13:13\n   |\n13 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n12 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpor0aguxh.rs:14:14\n\
    \   |\n14 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n12 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    let mut result = n;\n    while result\
    \ <= x {\n        if result == x {\n            return true;\n        }\n    \
    \    i += 1;\n        result = n.pow(i);\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i <= x {\n        if i == x {\n\
    \            return true;\n        }\n        i *= n;\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i.pow(n as u32) <= x {\n       \
    \ if i.pow(n as u32) == x {\n            return true;\n        }\n        i +=\
    \ 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpiyiksbbu.rs:16:13\n   |\n16 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n15 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpiyiksbbu.rs:17:14\n\
    \   |\n17 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n15 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 2;\n    let mut res = n;\n    while res < x {\n\
    \        res *= n;\n        i += 1;\n    }\n    res == x\n}\n\nfn main() {\n \
    \   let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    let\
    \ mut result = n;\n    while result <= x {\n        if result == x {\n       \
    \     return true;\n        }\n        i += 1;\n        result = n.pow(i);\n \
    \   }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n   \
    \ assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16), false);\n\
    \    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9, 3), true);\n\
    \    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24, 2), false);\n\
    \    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12, 6), false);\n\
    \    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1, 12), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphkf138aq.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    while\
    \ i.pow(n as u32) < x {\n        i += 1;\n    }\n    i.pow(n as u32) == x\n}\n\
    \nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpqt75kb0a.rs:13:13\n   |\n13 |     while i.pow(n as u32) < x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n12 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpqt75kb0a.rs:16:7\n\
    \   |\n16 |     i.pow(n as u32) == x\n   |       ^^^\n   |\nhelp: you must specify\
    \ a type for this binding, like `i32`\n   |\n12 |     let mut i: i32 = 1;\n  \
    \ |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    if n == 1 {\n        return false;\n    }\n    let mut p =\
    \ n;\n    while p < x {\n        p *= n;\n    }\n    p == x\n}\n\nfn main() {\n\
    \    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i < x {\n        i *= n;\n    }\n\
    \    i == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i <= x {\n        if i == x {\n\
    \            return true;\n        }\n        i *= n;\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut p = n;\n    while p < x {\n        p *= n;\n    }\n\
    \    p == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut res = n;\n    while\
    \ res < x {\n        res *= n;\n    }\n    res == x\n}\n\nfn main() {\n    let\
    \ candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214,\
    \ 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmvn_vbzu.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    let mut result = n;\n    while result\
    \ <= x {\n        if result == x {\n            return true;\n        }\n    \
    \    i += 1;\n        result = n.pow(i);\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    if n == 1 {\n        return false;\n    }\n    let mut i =\
    \ 1;\n    let mut result = n;\n    while result < x {\n        result *= n;\n\
    \        i += 1;\n    }\n    result == x\n}\n\nfn main() {\n    let candidate\
    \ = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214,\
    \ 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 2;\n    let mut res = n;\n    while res < x {\n\
    \        res *= n;\n        i += 1;\n    }\n    res == x\n}\n\nfn main() {\n \
    \   let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i <= x {\n        if i == x {\n\
    \            return true;\n        }\n        i *= n;\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    let mut result = n;\n    while result\
    \ <= x {\n        if result == x {\n            return true;\n        }\n    \
    \    i += 1;\n        result = n.pow(i);\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    while\
    \ i.pow(n as u32) <= x {\n        if i.pow(n as u32) == x {\n            return\
    \ true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214,\
    \ 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmp9g893dll.rs:13:13\n   |\n13 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n12 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmp9g893dll.rs:14:14\n\
    \   |\n14 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n12 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 2;\n    let mut result = n;\n    while result\
    \ < x {\n        result *= n;\n        i += 1;\n    }\n    result == x\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i < x {\n        i *= n;\n    }\n\
    \    i == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    while\
    \ i.pow(n as u32) < x {\n        i += 1;\n    }\n    i.pow(n as u32) == x\n}\n\
    \nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpry03pkr_.rs:13:13\n   |\n13 |     while i.pow(n as u32) < x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n12 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpry03pkr_.rs:16:7\n\
    \   |\n16 |     i.pow(n as u32) == x\n   |       ^^^\n   |\nhelp: you must specify\
    \ a type for this binding, like `i32`\n   |\n12 |     let mut i: i32 = 1;\n  \
    \ |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i <= x {\n        if i == x {\n\
    \            return true;\n        }\n        i *= n;\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i.pow(n as u32) <= x {\n       \
    \ if i.pow(n as u32) == x {\n            return true;\n        }\n        i +=\
    \ 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpra9azy18.rs:16:13\n   |\n16 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n15 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpra9azy18.rs:17:14\n\
    \   |\n17 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n15 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 0;\n    let\
    \ mut result = 1;\n    while result < x {\n        i += 1;\n        result = n.pow(i);\n\
    \    }\n    result == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i.pow(n as u32) <= x {\n       \
    \ if i.pow(n as u32) == x {\n            return true;\n        }\n        i +=\
    \ 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpm4oh41i6.rs:16:13\n   |\n16 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n15 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpm4oh41i6.rs:17:14\n\
    \   |\n17 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n15 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 2;\n    let mut res = n;\n    while res <= x {\n\
    \        if res == x {\n            return true;\n        }\n        res *= n;\n\
    \        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut num = n;\n    while num < x {\n        num *= n;\n\
    \    }\n    num == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i < x {\n        i *= n;\n    }\n\
    \    i == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    while\
    \ i.pow(n as u32) < x {\n        i += 1;\n    }\n    i.pow(n as u32) == x\n}\n\
    \nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmp_od96z95.rs:13:13\n   |\n13 |     while i.pow(n as u32) < x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n12 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmp_od96z95.rs:16:7\n\
    \   |\n16 |     i.pow(n as u32) == x\n   |       ^^^\n   |\nhelp: you must specify\
    \ a type for this binding, like `i32`\n   |\n12 |     let mut i: i32 = 1;\n  \
    \ |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    while\
    \ i.pow(n as u32) < x {\n        i += 1;\n    }\n    i.pow(n as u32) == x\n}\n\
    \nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpct90oqde.rs:13:13\n   |\n13 |     while i.pow(n as u32) < x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n12 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpct90oqde.rs:16:7\n\
    \   |\n16 |     i.pow(n as u32) == x\n   |       ^^^\n   |\nhelp: you must specify\
    \ a type for this binding, like `i32`\n   |\n12 |     let mut i: i32 = 1;\n  \
    \ |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut res = n;\n    while\
    \ res < x {\n        res *= n;\n    }\n    res == x\n}\n\nfn main() {\n    let\
    \ candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214,\
    \ 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpiduamtji.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    let mut result = n;\n    while result\
    \ <= x {\n        if result == x {\n            return true;\n        }\n    \
    \    i += 1;\n        result = n.pow(i);\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i.pow(n as u32) <= x {\n       \
    \ if i.pow(n as u32) == x {\n            return true;\n        }\n        i +=\
    \ 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpn1e6_jy6.rs:16:13\n   |\n16 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n15 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpn1e6_jy6.rs:17:14\n\
    \   |\n17 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n15 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    let mut result = n;\n    while result\
    \ < x {\n        result *= n;\n        i += 1;\n    }\n    result == x\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    let mut result = n;\n    while result\
    \ <= x {\n        if result == x {\n            return true;\n        }\n    \
    \    i += 1;\n        result = n.pow(i);\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    let mut result = n;\n    while result\
    \ <= x {\n        if result == x {\n            return true;\n        }\n    \
    \    i += 1;\n        result = n.pow(i);\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i < x {\n        i *= n;\n    }\n\
    \    i == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut i = 1;\n    while\
    \ i.pow(n as u32) <= x {\n        if i.pow(n as u32) == x {\n            return\
    \ true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214,\
    \ 16), false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmp4nvhwefz.rs:13:13\n   |\n13 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n12 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmp4nvhwefz.rs:14:14\n\
    \   |\n14 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n12 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i.pow(n as u32) <= x {\n       \
    \ if i.pow(n as u32) == x {\n            return true;\n        }\n        i +=\
    \ 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmprmkn7odu.rs:16:13\n   |\n16 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n15 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmprmkn7odu.rs:17:14\n\
    \   |\n17 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n15 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 2;\n    let mut result = n;\n    while result\
    \ < x {\n        result *= n;\n        i += 1;\n    }\n    result == x\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut x = x;\n    let\
    \ mut n = n;\n    while x % n == 0 {\n        x /= n;\n    }\n    x == 1\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    if n == 1 {\n        return false;\n    }\n    let mut i =\
    \ 1;\n    let mut result = n;\n    while result <= x {\n        if result == x\
    \ {\n            return true;\n        }\n        i += 1;\n        result = n.pow(i);\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n  \
    \  assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    let mut power = n;\n   \
    \ while power < x {\n        power *= n;\n    }\n    power == x\n}\n\nfn main()\
    \ {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16, 2), true);\n\
    \    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4, 2),\
    \ true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp2qlh3ns2.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    if n == 1 {\n        return false;\n    }\n    let mut i =\
    \ 1;\n    let mut res = n;\n    while res < x {\n        res *= n;\n        i\
    \ += 1;\n    }\n    res == x\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i.pow(n as u32) <= x {\n       \
    \ if i.pow(n as u32) == x {\n            return true;\n        }\n        i +=\
    \ 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpa5gmnmp_.rs:16:13\n   |\n16 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n15 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpa5gmnmp_.rs:17:14\n\
    \   |\n17 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n15 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i.pow(n as u32) <= x {\n       \
    \ if i.pow(n as u32) == x {\n            return true;\n        }\n        i +=\
    \ 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_simple_power;\n\
    \    assert_eq!(candidate(16, 2), true);\n    assert_eq!(candidate(143214, 16),\
    \ false);\n    assert_eq!(candidate(4, 2), true);\n    assert_eq!(candidate(9,\
    \ 3), true);\n    assert_eq!(candidate(16, 4), true);\n    assert_eq!(candidate(24,\
    \ 2), false);\n    assert_eq!(candidate(128, 4), false);\n    assert_eq!(candidate(12,\
    \ 6), false);\n    assert_eq!(candidate(1, 1), true);\n    assert_eq!(candidate(1,\
    \ 12), true);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpfnc0rvzl.rs:16:13\n   |\n16 |     while i.pow(n as u32) <= x {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n15 |     let mut i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpfnc0rvzl.rs:17:14\n\
    \   |\n17 |         if i.pow(n as u32) == x {\n   |              ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n15 |     let mut\
    \ i: i32 = 1;\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while i <= x {\n        if i == x {\n\
    \            return true;\n        }\n        i *= n;\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Your task is to write a function that returns true if a number x is\
    \ a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    fn is_simple_power(x: isize, n: isize) -> bool {\n    if x == 1 {\n        return\
    \ true;\n    }\n    let mut i = 1;\n    while n.pow(i) <= x {\n        if n.pow(i)\
    \ == x {\n            return true;\n        }\n        i += 1;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = is_simple_power;\n    assert_eq!(candidate(16,\
    \ 2), true);\n    assert_eq!(candidate(143214, 16), false);\n    assert_eq!(candidate(4,\
    \ 2), true);\n    assert_eq!(candidate(9, 3), true);\n    assert_eq!(candidate(16,\
    \ 4), true);\n    assert_eq!(candidate(24, 2), false);\n    assert_eq!(candidate(128,\
    \ 4), false);\n    assert_eq!(candidate(12, 6), false);\n    assert_eq!(candidate(1,\
    \ 1), true);\n    assert_eq!(candidate(1, 12), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
