name: HumanEval_151_double_the_difference
language: rust
results:
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmprqootepg.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp4rq7dma2.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp8j_n8don.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpuzok3eje.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += i.powi(2) as isize;\n            }\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp2ukrkun6.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpnazl25p3.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i\
    \ % 2.0 == 1.0 && i > 0.0 {\n            sum += i as isize * i as isize;\n   \
    \     }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpmoa154q5.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp1yvjzita.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpcfvwfh3p.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += (i * i) as isize;\n            }\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += i.powi(2) as isize;\n            }\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmprlox1dzh.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpluqt1tfs.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpr778k09w.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpcvs19q7_.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += i.powi(2) as isize;\n            }\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += i.powi(2) as isize;\n            }\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += i.powi(2) as isize;\n            }\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            sum += (i as isize).pow(2);\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `41`,\n right: `25`', /tmp/tmpo98i33ds.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp4iu07fgg.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i\
    \ > 0.0 && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n             \
    \   sum += i.powi(2) as isize;\n            }\n        }\n    }\n    sum * 2\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpbgsxqq3s.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += i.powi(2) as isize;\n            }\n        }\n    }\n    sum * 2\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmp12fhuvbj.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp6j8zwti3.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpa9fqosnn.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmps9tso6_i.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i\
    \ % 2.0 == 1.0 {\n            sum += (i * i) as isize;\n        }\n    }\n   \
    \ sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += i.powi(2) as isize;\n            }\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpsc2l6q1y.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.is_integer() {\n            sum += (i * i) as isize;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmphvu3ovtk.rs:11:38\n   |\n11 |         if i.is_sign_positive()\
    \ && i.is_integer() {\n   |                                      ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for x in lst {\n        if x.is_sign_positive()\
    \ && x.fract() == 0.0 {\n            if x % 2.0 == 1.0 {\n                sum\
    \ += x as isize;\n            }\n        }\n    }\n    sum * 2\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmp85ox8o0q.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpci2hub74.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            sum += (i as isize).pow(2);\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `41`,\n right: `25`', /tmp/tmpjl3ffgp9.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmplj7wwda0.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmps43leksl.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i\
    \ % 2.0 != 0.0 && i > 0.0 {\n            sum += (i * i) as isize;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpne14i887.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            sum += (i as isize) * (i as isize);\n   \
    \     }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpu16m91bj.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            sum += (i as isize).pow(2);\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `41`,\n right: `25`', /tmp/tmpatpavtu3.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpqtm0hkff.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if\
    \ num.is_sign_positive() && num.fract() == 0.0 {\n            if num % 2.0 ==\
    \ 1.0 {\n                sum += num.powi(2) as isize;\n            }\n       \
    \ }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp8d1fjwci.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpbjwh4bfk.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpe4mregjr.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpx3olmkon.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpoawrrw2r.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += i.powi(2) as isize;\n            }\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp62medkcz.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i\
    \ % 2.0 != 0.0 && i > 0.0 {\n            sum += (i * i) as isize;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i\
    \ % 2.0 != 0.0 && i > 0.0 {\n            sum += i.powi(2) as isize;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp5wbf8omx.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpt6ds1h3a.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmppnc7otzr.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            sum += (i as isize).pow(2);\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `41`,\n right: `25`', /tmp/tmpom121ce4.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += i.powi(2) as isize;\n            }\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmptiy_xt7w.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp425arkxt.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            sum += (i as isize).pow(2);\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `41`,\n right: `25`', /tmp/tmpdxxtxw53.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            sum += (i as isize) * (i as isize);\n   \
    \     }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `41`,\n right: `25`', /tmp/tmp6is_jk96.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += i.powi(2) as isize;\n            }\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i\
    \ < 0.0 {\n            continue;\n        }\n        if i.fract() != 0.0 {\n \
    \           continue;\n        }\n        if i % 2.0 == 0.0 {\n            continue;\n\
    \        }\n        sum += i as isize;\n    }\n    sum\n}\n\nfn main() {\n   \
    \ let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `25`', /tmp/tmpwdom4whd.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmphbawtxea.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += i.powi(2) as isize;\n            }\n        }\n    }\n    sum * 2\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpl9cdpk81.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i\
    \ > 0.0 && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n             \
    \   sum += i as isize;\n            }\n        }\n    }\n    sum * 2\n}\n\nfn\
    \ main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpkj49kh4x.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmprh4dv5qt.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpyexm_fmm.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp0uecbdn2.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            sum += (i as isize).pow(2);\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `41`,\n right: `25`', /tmp/tmpizgjx686.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpg0q5qflp.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp_8aigxqr.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i\
    \ % 2.0 != 0.0 && i.is_sign_positive() && i.fract() == 0.0 {\n            sum\
    \ += (i * i) as isize;\n        }\n    }\n    sum * 2\n}\n\nfn main() {\n    let\
    \ candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpa0gd3dz3.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += (i * i) as isize;\n            }\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i\
    \ % 2.0 != 0.0 && i > 0.0 && i.floor() == i {\n            sum += i.powi(2) as\
    \ isize;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.is_integer() {\n            if i % 2.0 == 1.0 {\n                sum +=\
    \ (i * i) as isize;\n            }\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp6fh_n5j8.rs:11:38\n   |\n11 |         if i.is_sign_positive()\
    \ && i.is_integer() {\n   |                                      ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpa67izxii.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += (i * i) as isize;\n            }\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += i.powi(2) as isize;\n            }\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            sum += (i as isize).pow(2);\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `41`,\n right: `25`', /tmp/tmpd7djz47a.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpbt413744.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for num in lst {\n        if\
    \ num.is_sign_positive() && num.fract() == 0.0 {\n            if num % 2.0 ==\
    \ 1.0 {\n                sum += (num * num) as isize;\n            }\n       \
    \ }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpjhvdc2ee.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp93zyr8w9.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.is_integer() {\n            if i % 2.0 == 1.0 {\n                sum +=\
    \ i.powi(2) as isize;\n            }\n        }\n    }\n    sum * 2\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp5vn2w3v3.rs:11:38\n   |\n11 |         if i.is_sign_positive()\
    \ && i.is_integer() {\n   |                                      ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmplfapsvdx.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpce0g78wq.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            sum += (i as isize).pow(2);\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `41`,\n right: `25`', /tmp/tmp7gsy1icu.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            sum += (i as isize) * (i as isize);\n   \
    \     }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `41`,\n right: `25`', /tmp/tmpi6ei8kqn.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpp4ooyxaq.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i\
    \ > 0.0 && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n             \
    \   sum += i.powi(2) as isize;\n            }\n        }\n    }\n    sum * 2\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmp4x6vjhta.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpuoo_pvu7.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i\
    \ % 2.0 != 0.0 && i > 0.0 {\n            sum += i as isize;\n        }\n    }\n\
    \    return sum * 2;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmppcl2cc5c.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpbjglogs9.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += (i * i) as isize;\n            }\n        }\n    }\n    sum * 2\n}\n\nfn\
    \ main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpgq208bwx.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpms2_4496.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpn5j2piku.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpxfrothak.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp38pjk311.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpyx3l0pxn.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp37fetgrb.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpcojsk6ef.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.is_integer() {\n            sum += i.powi(2) as isize;\n        }\n   \
    \ }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp23koxini.rs:11:38\n   |\n11 |         if i.is_sign_positive()\
    \ && i.is_integer() {\n   |                                      ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmptvwhtfqx.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i\
    \ % 2.0 == 1.0 {\n            sum += i as isize;\n        }\n    }\n    sum *\
    \ 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmp0rx12z6b.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpag7ppvh4.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += i.powi(2) as isize;\n            }\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp5gfbg_om.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpg7dv6ip9.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += (i * i) as isize;\n            }\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmplsge2cya.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp9cto22gi.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpvqtxx406.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            sum += (i as isize) * (i as isize);\n   \
    \     }\n    }\n    sum * 2\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `82`,\n right: `25`', /tmp/tmpronhaebf.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpvw7yag6x.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += (i * i) as isize;\n            }\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += (i * i) as isize;\n            }\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp94zhvb37.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i\
    \ % 2.0 != 0.0 && i > 0.0 {\n            sum += (i * i) as isize;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            sum += (i as isize).pow(2);\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `41`,\n right: `25`', /tmp/tmpm75a4gsi.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            sum += (i as isize).pow(2);\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `41`,\n right: `25`', /tmp/tmpgj3fm_sq.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            sum += i as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `25`', /tmp/tmpmy99gi1a.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp0xysb5j0.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpr6u8djet.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            sum += (i as isize) * (i as isize);\n   \
    \     }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `41`,\n right: `25`', /tmp/tmp0ud26aso.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpnmvv3gr7.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i\
    \ % 2.0 != 0.0 && i > 0.0 {\n            sum += i.powi(2) as isize;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpgx2v3y53.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i\
    \ > 0.0 && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n             \
    \   sum += i.powi(2) as isize;\n            }\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpld6dwn65.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += i.powi(2) as isize;\n            }\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += (i * i) as isize;\n            }\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpfvmqxdqt.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpf6z_fkq6.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpvekhjnze.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp3mao4ytm.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpshcjnfhm.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmps67gqetf.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            sum += (i as isize).pow(2);\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `41`,\n right: `25`', /tmp/tmpf4eepn8o.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpftb4bj9k.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += i.powi(2) as isize;\n            }\n        }\n    }\n    sum * 2\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpey84fsww.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmplmgi9dex.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpi2zd_qog.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmplnkurzio.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            sum += (i as isize).pow(2);\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `41`,\n right: `25`', /tmp/tmph0w0gual.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpgmqrkwa7.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp4t6nvpp0.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += i.powi(2) as isize;\n            }\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpmfptrugu.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            sum += (i as isize).pow(2);\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `41`,\n right: `25`', /tmp/tmpw_dmm4r2.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp2sg7_f0t.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpjv_e5brt.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp11nznia5.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp1r7gs7kf.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp1_c5r4rb.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmph_deqln1.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpvu3e8y2k.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmps9lu2m16.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp4arja_p4.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpyz28qwft.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpu30eo823.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpsdxrmyxy.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += i.powi(2) as isize;\n            }\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i\
    \ % 2.0 == 1.0 && i > 0.0 {\n            sum += i.powi(2) as isize;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            sum += (i as isize) * (i as isize);\n   \
    \     }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `41`,\n right: `25`', /tmp/tmp20yalnxn.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += i.powi(2) as isize;\n            }\n        }\n    }\n    sum * 2\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmp5ruclf2y.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpy65luycr.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            sum += (i as isize).pow(2);\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `41`,\n right: `25`', /tmp/tmp88x5yval.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i\
    \ > 0.0 && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n             \
    \   sum += i.powi(2) as isize;\n            }\n        }\n    }\n    sum * 2\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpcpleko52.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpx7l_w5i9.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += i.powi(2) as isize;\n            }\n        }\n    }\n    sum * 2\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmp1f0ajxb2.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpsi1s_371.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp1qkl187m.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpz8f748wv.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmprpigsk9e.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += i.powi(2) as isize;\n            }\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp5433nltq.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.is_integer() {\n            sum += i.powi(2) as isize;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n \
    \   assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpndqp5bhl.rs:11:38\n   |\n11 |         if i.is_sign_positive()\
    \ && i.is_integer() {\n   |                                      ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            sum += i as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `25`', /tmp/tmpcvkpgubp.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp3gwub0k9.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpamwvs2s2.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i\
    \ % 2.0 != 0.0 && i > 0.0 {\n            sum += i.powi(2) as isize;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i\
    \ > 0.0 && i.floor() == i {\n            if i % 2.0 == 1.0 {\n               \
    \ sum += (i * i) as isize;\n            }\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += i as isize;\n            }\n        }\n    }\n    sum * 2\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `25`', /tmp/tmpx7t0l4ms.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpks6tr40a.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += (i * i) as isize;\n            }\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i\
    \ % 2.0 != 0.0 && i > 0.0 {\n            sum += i as isize;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `25`', /tmp/tmpi4qlwrux.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            sum += (i as isize).pow(2);\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `41`,\n right: `25`', /tmp/tmphyl902wk.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += i.powi(2) as isize;\n            }\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += i.powi(2) as isize;\n            }\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp6gh7sq61.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmps4748n7y.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp0jts40eb.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += (i * i) as isize;\n            }\n        }\n    }\n    sum * 2\n}\n\nfn\
    \ main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmpvi3oj_z_.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.is_integer() {\n            sum += i.powi(2) as isize;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n \
    \   assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpqe1vr6o6.rs:11:38\n   |\n11 |         if i.is_sign_positive()\
    \ && i.is_integer() {\n   |                                      ^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += (i * i) as isize;\n            }\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i\
    \ % 2.0 != 0.0 && i > 0.0 {\n            sum += (i * i) as isize;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp5w9cuq1n.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            sum += i as isize;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `25`', /tmp/tmphw_v9px1.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += i.powi(2) as isize;\n            }\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfn double_the_difference(lst:\
    \ Vec<f64>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if i.is_sign_positive()\
    \ && i.fract() == 0.0 {\n            if i % 2.0 == 1.0 {\n                sum\
    \ += (i * i) as isize;\n            }\n        }\n    }\n    sum * 2\n}\n\nfn\
    \ main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `25`', /tmp/tmp61dw4ey0.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
