language: rust
name: HumanEval_108_count_nums
results:
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    // TODO: implement this function\n    0\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpa2goae76.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    // TODO\n    0\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpodn7uww9.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    arr.iter().filter(|&x| x.abs() % 10 != 0).count() as isize\n\
    }\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpbtudmnmt.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    arr.iter().filter(|&x| x.abs() % 10 > 0).count() as isize\n\
    }\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp00by6rfq.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817827
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut n = i;\n        if n < 0 {\n            n = -n;\n    \
    \    }\n        while n > 0 {\n            sum += n % 10;\n            n /= 10;\n\
    \        }\n        if sum > 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp2a9ipx_h.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817827
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    arr.iter().filter(|&x| x.abs() % 10 != 0).count() as isize\n\
    }\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpbtudmnmt.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    arr.iter().filter(|x| x.abs() > 9 || x.abs() == 0).count() as\
    \ isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpeupzfnic.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817827
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpujtttw1_.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659817827
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        if i.abs() >\
    \ 9 {\n            let mut sum = 0;\n            let mut num = i.abs();\n    \
    \        while num > 0 {\n                sum += num % 10;\n                num\
    \ /= 10;\n            }\n            if sum > 0 {\n                count += 1;\n\
    \            }\n        } else {\n            if i != 0 {\n                count\
    \ += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp_zca41_h.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817827
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut j = i;\n        if j < 0 {\n            j = -j;\n    \
    \    }\n        while j > 0 {\n            sum += j % 10;\n            j /= 10;\n\
    \        }\n        if sum > 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpmo8ok3kc.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817828
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        while num != 0 {\n            sum +=\
    \ num % 10;\n            num /= 10;\n        }\n        if sum > 0 {\n       \
    \     count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmp4ggabros.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817828
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        if i < 0 {\n\
    \            if i.abs() % 10 != 0 {\n                count += 1;\n           \
    \ }\n        } else {\n            if i % 10 != 0 {\n                count +=\
    \ 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpglcpcbzy.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817828
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    // TODO: implement the function\n    0\n}\n\nfn main() {\n \
    \   let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmp6i0hif_6.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817828
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    arr.iter().filter(|&x| x.abs() % 10 != 0).count() as isize\n\
    }\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpbtudmnmt.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for num in arr {\n        let mut sum\
    \ = 0;\n        let mut n = num;\n        while n != 0 {\n            sum += n.abs()\
    \ % 10;\n            n /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp2_zn7x7t.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817829
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    // TODO\n    0\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpodn7uww9.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmprbh0izn0.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659817829
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    arr.iter().filter(|&x| x.abs() % 10 != 0).count() as isize\n\
    }\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpbtudmnmt.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for num in arr {\n        let mut sum\
    \ = 0;\n        let mut num = num;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp_r2lgqcw.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817829
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    arr.iter().filter(|&x| x.abs() % 10 != 0).count() as isize\n\
    }\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpbtudmnmt.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        if i.abs() %\
    \ 10 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpygn83pbp.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817829
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for num in arr {\n        let mut sum\
    \ = 0;\n        let mut num = num;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp_r2lgqcw.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817829
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        if i < 0 {\n\
    \            if i.abs() % 10 != 0 {\n                count += 1;\n           \
    \ }\n        } else {\n            if i % 10 != 0 {\n                count +=\
    \ 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpglcpcbzy.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817828
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut j = i;\n        if j < 0 {\n            j = -j;\n    \
    \    }\n        while j > 0 {\n            sum += j % 10;\n            j /= 10;\n\
    \        }\n        if sum > 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpmo8ok3kc.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817828
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        if sum_digits(i)\
    \ > 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_digits` in this scope\n  --> /tmp/tmp06e4icog.rs:11:12\n\
    \   |\n11 |         if sum_digits(i) > 0 {\n   |            ^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659817829
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        if i.abs() <\
    \ 10 {\n            if i != 0 {\n                count += 1;\n            }\n\
    \        } else {\n            let mut sum = 0;\n            let mut num = i.abs();\n\
    \            while num > 0 {\n                sum += num % 10;\n             \
    \   num /= 10;\n            }\n            if sum > 0 {\n                count\
    \ += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmph_84nel7.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817830
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for num in arr {\n        if num < 0\
    \ {\n            if num.abs() % 10 != 0 {\n                count += 1;\n     \
    \       }\n        } else {\n            if num % 10 != 0 {\n                count\
    \ += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpelka6f06.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817830
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        while num != 0 {\n            sum +=\
    \ num % 10;\n            num /= 10;\n        }\n        if sum > 0 {\n       \
    \     count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmp4ggabros.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817828
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    arr.iter().filter(|x| x.abs() > 9 || x.abs() == 0).count() as\
    \ isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpeupzfnic.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817827
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    // TODO: Implement this function\n    0\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpiph6w4qn.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817830
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        while num != 0 {\n            sum +=\
    \ num % 10;\n            num /= 10;\n        }\n        if sum > 0 {\n       \
    \     count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmp4ggabros.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817828
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        while num != 0 {\n            sum +=\
    \ num % 10;\n            num /= 10;\n        }\n        if sum > 0 {\n       \
    \     count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmp4ggabros.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817828
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut j = i;\n        if j < 0 {\n            j = -j;\n    \
    \    }\n        while j > 0 {\n            sum += j % 10;\n            j /= 10;\n\
    \        }\n        if sum > 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpmo8ok3kc.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817828
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        while num != 0 {\n            sum +=\
    \ num % 10;\n            num /= 10;\n        }\n        if sum > 0 {\n       \
    \     count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmp4ggabros.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817828
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    arr.iter().filter(|x| x.abs() % 10 != 0).count() as isize\n\
    }\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpyp_nu2uk.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817831
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for num in arr {\n        let mut sum\
    \ = 0;\n        let mut num = num;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp_r2lgqcw.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817829
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    arr.iter().filter(|&x| x.abs() > 9).count() as isize\n}\n\n\
    fn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpl1m3zalz.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817831
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        if i.abs() %\
    \ 10 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpygn83pbp.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817829
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for num in arr {\n        let mut sum\
    \ = 0;\n        let mut num = num;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp_r2lgqcw.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817829
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmprbh0izn0.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659817829
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    arr.iter().filter(|&x| x.abs() > 9 || x.abs() == 0).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpi0_ss0n5.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817831
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for num in arr {\n        let mut sum\
    \ = 0;\n        let mut n = num;\n        if n < 0 {\n            n = -n;\n  \
    \      }\n        while n > 0 {\n            sum += n % 10;\n            n /=\
    \ 10;\n        }\n        if sum > 0 {\n            count += 1;\n        }\n \
    \   }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp4ztzdj4q.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817832
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut j = i;\n        if j < 0 {\n            j = -j;\n    \
    \    }\n        while j > 0 {\n            sum += j % 10;\n            j /= 10;\n\
    \        }\n        if sum > 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpmo8ok3kc.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817828
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmprbh0izn0.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659817829
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    // TODO: Implement this function\n    0\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpiph6w4qn.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817830
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for num in arr {\n        let mut sum\
    \ = 0;\n        let mut n = num;\n        if n < 0 {\n            n = -n;\n  \
    \      }\n        while n > 0 {\n            sum += n % 10;\n            n /=\
    \ 10;\n        }\n        if sum > 0 {\n            count += 1;\n        }\n \
    \   }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp4ztzdj4q.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817832
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    // TODO\n    0\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpodn7uww9.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    arr.iter().filter(|&x| x.abs() % 10 != 0).count() as isize\n\
    }\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpbtudmnmt.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 1
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for num in arr {\n        if sum_digits(num)\
    \ > 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_digits` in this scope\n  --> /tmp/tmpv7tjt0ae.rs:11:12\n\
    \   |\n11 |         if sum_digits(num) > 0 {\n   |            ^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659817831
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    arr.iter().filter(|&n| n.abs() % 10 != 0).count() as isize\n\
    }\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpqofgnw6w.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817832
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    // TODO\n    0\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpodn7uww9.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    arr.iter().filter(|&x| x.abs() % 10 != 0).count() as isize\n\
    }\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpbtudmnmt.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    arr.iter().filter(|&x| x.abs() % 10 != 0).count() as isize\n\
    }\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpbtudmnmt.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    arr.iter().filter(|x| x.abs() > 9 || x.abs() == 0).count() as\
    \ isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpeupzfnic.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817827
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        if i.abs() %\
    \ 10 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpygn83pbp.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817829
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        if i.abs() <\
    \ 10 {\n            if i.abs() > 0 {\n                count += 1;\n          \
    \  }\n        } else {\n            let mut sum = 0;\n            let mut num\
    \ = i.abs();\n            while num > 0 {\n                sum += num % 10;\n\
    \                num /= 10;\n            }\n            if sum > 0 {\n       \
    \         count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp6mdr3okf.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817832
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        while num != 0 {\n            sum +=\
    \ num % 10;\n            num /= 10;\n        }\n        if sum > 0 {\n       \
    \     count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmp4ggabros.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817828
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    // TODO\n    0\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpodn7uww9.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        if i.abs() <\
    \ 10 {\n            if i != 0 {\n                count += 1;\n            }\n\
    \        } else {\n            let mut sum = 0;\n            let mut num = i.abs();\n\
    \            while num > 0 {\n                sum += num % 10;\n             \
    \   num /= 10;\n            }\n            if sum > 0 {\n                count\
    \ += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmph_84nel7.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817830
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmprbh0izn0.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659817829
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    // TODO: implement this function\n    0\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpa2goae76.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    // TODO: Implement me!\n    0\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpncqilulk.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817832
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        if i.abs() <\
    \ 10 {\n            if i != 0 {\n                count += 1;\n            }\n\
    \        } else {\n            let mut sum = 0;\n            let mut j = i.abs();\n\
    \            while j > 0 {\n                sum += j % 10;\n                j\
    \ /= 10;\n            }\n            if sum > 0 {\n                count += 1;\n\
    \            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnzur8mju.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817833
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    // TODO: Implement this function\n    0\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpiph6w4qn.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817830
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmprbh0izn0.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659817829
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for num in arr {\n        let mut sum\
    \ = 0;\n        let mut n = num;\n        if n < 0 {\n            n = -n;\n  \
    \      }\n        while n > 0 {\n            sum += n % 10;\n            n /=\
    \ 10;\n        }\n        if sum > 0 {\n            count += 1;\n        }\n \
    \   }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp4ztzdj4q.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817832
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut j = i;\n        if j < 0 {\n            j = -j;\n    \
    \    }\n        while j > 0 {\n            sum += j % 10;\n            j /= 10;\n\
    \        }\n        if sum > 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpmo8ok3kc.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817828
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    arr.iter().filter(|x| x.abs() > 9 || x.abs() == 0).count() as\
    \ isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpeupzfnic.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817827
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmprbh0izn0.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659817829
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for num in arr {\n        let mut sum\
    \ = 0;\n        let mut n = num;\n        if n < 0 {\n            n = -n;\n  \
    \      }\n        while n > 0 {\n            sum += n % 10;\n            n /=\
    \ 10;\n        }\n        if sum > 0 {\n            count += 1;\n        }\n \
    \   }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp4ztzdj4q.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817832
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    arr.iter().filter(|&x| x.abs() > 9).count() as isize\n}\n\n\
    fn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpl1m3zalz.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817831
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        if i.abs() %\
    \ 10 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpygn83pbp.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817829
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for num in arr {\n        let mut sum\
    \ = 0;\n        let mut n = num;\n        if n < 0 {\n            n = -n;\n  \
    \      }\n        while n > 0 {\n            sum += n % 10;\n            n /=\
    \ 10;\n        }\n        if sum > 0 {\n            count += 1;\n        }\n \
    \   }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp4ztzdj4q.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817832
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    arr.iter().filter(|&x| x.abs() % 10 != 0).count() as isize\n\
    }\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpbtudmnmt.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmprbh0izn0.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659817829
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmprbh0izn0.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659817829
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut j = i;\n        if j < 0 {\n            j = -j;\n    \
    \    }\n        while j > 0 {\n            sum += j % 10;\n            j /= 10;\n\
    \        }\n        if sum > 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpmo8ok3kc.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817828
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        if i.abs() %\
    \ 10 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpygn83pbp.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817829
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut j = i;\n        while j != 0 {\n            sum += j %\
    \ 10;\n            j /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmp4eb6u71h.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817833
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    arr.iter().filter(|&x| x.abs() > 9 || x.abs() == 0).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpi0_ss0n5.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817831
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for num in arr {\n        if num.abs()\
    \ % 10 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp75e09nxd.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817833
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        while num != 0 {\n            sum +=\
    \ num % 10;\n            num /= 10;\n        }\n        if sum > 0 {\n       \
    \     count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmp4ggabros.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817828
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        while num != 0 {\n            sum +=\
    \ num % 10;\n            num /= 10;\n        }\n        if sum > 0 {\n       \
    \     count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmp4ggabros.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817828
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = num\
    \ * -1;\n        }\n        while num > 0 {\n            sum += num % 10;\n  \
    \          num = num / 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpgjd8drqs.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817833
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        if i.abs() %\
    \ 10 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpygn83pbp.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817829
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for num in arr {\n        let mut sum\
    \ = 0;\n        let mut num = num;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp_r2lgqcw.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817829
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        while num != 0 {\n            sum +=\
    \ num % 10;\n            num /= 10;\n        }\n        if sum > 0 {\n       \
    \     count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmp4ggabros.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817828
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for num in arr {\n        let mut sum\
    \ = 0;\n        let mut num = num;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp_r2lgqcw.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817829
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    arr.iter().filter(|&x| x.abs() > 9 || x.abs() == 0).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpi0_ss0n5.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817831
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        while num != 0 {\n            sum +=\
    \ num % 10;\n            num /= 10;\n        }\n        if sum > 0 {\n       \
    \     count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmp4ggabros.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817828
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        if i < 0 {\n\
    \            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpt8yffgym.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817834
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    arr.iter().filter(|&x| x.abs() / 10 + x.abs() % 10 > 0).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpqx2_vvix.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817834
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    arr.iter().filter(|x| x.abs() > 9 || x.abs() == 0).count() as\
    \ isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpeupzfnic.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817827
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for num in arr {\n        let mut sum\
    \ = 0;\n        let mut n = num;\n        while n != 0 {\n            sum += n.abs()\
    \ % 10;\n            n /= 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp2_zn7x7t.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817829
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    arr.iter().filter(|&x| x.abs() > 9 || x.abs() == 0).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpi0_ss0n5.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817831
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        if i.abs() >\
    \ 9 {\n            let mut num = i.abs();\n            let mut sum = 0;\n    \
    \        while num > 0 {\n                sum += num % 10;\n                num\
    \ /= 10;\n            }\n            if sum > 0 {\n                count += 1;\n\
    \            }\n        } else if i.abs() > 0 {\n            count += 1;\n   \
    \     }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpvxhmyw92.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817834
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for num in arr {\n        let mut sum\
    \ = 0;\n        let mut n = num;\n        if n < 0 {\n            n = -n;\n  \
    \      }\n        while n > 0 {\n            sum += n % 10;\n            n /=\
    \ 10;\n        }\n        if sum > 0 {\n            count += 1;\n        }\n \
    \   }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp4ztzdj4q.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817832
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut x = i;\n        if x < 0 {\n            x = -x;\n    \
    \    }\n        while x > 0 {\n            sum += x % 10;\n            x /= 10;\n\
    \        }\n        if sum > 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpig3qgr3z.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817835
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    arr.iter().filter(|x| x.abs() > 9 || x.abs() == 0).count() as\
    \ isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpeupzfnic.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817827
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    arr.iter().filter(|&x| x.abs() % 10 != 0).count() as isize\n\
    }\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpbtudmnmt.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        if i.abs() %\
    \ 10 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpygn83pbp.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817829
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut j = i;\n        if j < 0 {\n            j = -j;\n    \
    \    }\n        while j > 0 {\n            sum += j % 10;\n            j /= 10;\n\
    \        }\n        if sum > 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpmo8ok3kc.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817828
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    // TODO\n    0\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpodn7uww9.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        if i.abs() %\
    \ 10 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpygn83pbp.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817829
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    arr.iter().filter(|&x| x.abs() / 10 > 0).count() as isize\n\
    }\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpoejgupc5.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817835
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    arr.iter().map(|x| x.abs()).filter(|x| x.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum::<u32>() > 0).count() as isize\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpa995wllo.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817835
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        if i.abs() %\
    \ 10 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpygn83pbp.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817829
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for num in arr {\n        let mut sum\
    \ = 0;\n        let mut n = num;\n        if n < 0 {\n            n = -n;\n  \
    \      }\n        while n > 0 {\n            sum += n % 10;\n            n /=\
    \ 10;\n        }\n        if sum > 0 {\n            count += 1;\n        }\n \
    \   }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp4ztzdj4q.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817832
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for num in arr {\n        let mut sum\
    \ = 0;\n        let mut num = num;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp_r2lgqcw.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817829
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = num\
    \ * -1;\n        }\n        while num > 0 {\n            sum += num % 10;\n  \
    \          num = num / 10;\n        }\n        if sum > 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpgjd8drqs.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817833
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmprbh0izn0.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659817829
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    // TODO: Implement this function\n    0\n}\n\nfn main() {\n\
    \    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpiph6w4qn.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817830
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut i = i;\n        if i < 0 {\n            i = -i;\n    \
    \    }\n        while i > 0 {\n            sum += i % 10;\n            i /= 10;\n\
    \        }\n        if sum > 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpq0ed5hpj.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817835
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        while num != 0 {\n            sum +=\
    \ num % 10;\n            num /= 10;\n        }\n        if sum > 0 {\n       \
    \     count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmp4ggabros.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817828
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    arr.iter().filter(|x| x.abs() % 10 != 0).count() as isize\n\
    }\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpyp_nu2uk.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817831
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        while num != 0 {\n            sum +=\
    \ num % 10;\n            num /= 10;\n        }\n        if sum > 0 {\n       \
    \     count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmp4ggabros.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817828
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for num in arr {\n        let mut sum\
    \ = 0;\n        let mut n = num;\n        if n < 0 {\n            n = -n;\n  \
    \      }\n        while n > 0 {\n            sum += n % 10;\n            n /=\
    \ 10;\n        }\n        if sum > 0 {\n            count += 1;\n        }\n \
    \   }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp4ztzdj4q.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817832
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut j = i;\n        if j < 0 {\n            j = -j;\n    \
    \    }\n        while j > 0 {\n            sum += j % 10;\n            j /= 10;\n\
    \        }\n        if sum > 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpmo8ok3kc.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817828
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut x = i;\n        if x < 0 {\n            x = -x;\n    \
    \    }\n        while x > 0 {\n            sum += x % 10;\n            x /= 10;\n\
    \        }\n        if sum > 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpig3qgr3z.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817835
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    arr.iter().filter(|&x| x.abs() > 9 || x.abs() == 0).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpi0_ss0n5.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817831
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    arr.iter().filter(|&x| x.abs() % 10 != 0).count() as isize\n\
    }\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpbtudmnmt.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for num in arr {\n        let mut sum\
    \ = 0;\n        let mut n = num;\n        if n < 0 {\n            n = -n;\n  \
    \      }\n        while n > 0 {\n            sum += n % 10;\n            n /=\
    \ 10;\n        }\n        if sum > 0 {\n            count += 1;\n        }\n \
    \   }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp4ztzdj4q.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817832
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for num in arr {\n        if num.abs()\
    \ % 10 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmp75e09nxd.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817833
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut j = i;\n        if j < 0 {\n            j = -j;\n    \
    \    }\n        while j > 0 {\n            sum += j % 10;\n            j /= 10;\n\
    \        }\n        if sum > 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpmo8ok3kc.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817828
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        if i.abs() %\
    \ 10 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = count_nums;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![-1, -2, 0]), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 2, -2, 3, 4, 5]), 6);\n    assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]),\
    \ 5);\n    assert_eq!(candidate(vec![1, 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12,\
    \ 23, 34, -45, -56, 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpygn83pbp.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817829
- exit_code: 101
  program: "/// Write a function count_nums which takes an array of integers and returns\n\
    /// the number of elements which has a sum of digits > 0.\n/// If a number is\
    \ negative, then its first signed digit will be negative:\n/// e.g. -123 has signed\
    \ digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11,\
    \ -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfn count_nums(arr: Vec<isize>)\
    \ -> isize {\n    let mut count = 0;\n    for i in arr {\n        let mut sum\
    \ = 0;\n        let mut num = i;\n        if num < 0 {\n            num = -num;\n\
    \        }\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_nums;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -2, 0]), 0);\n    assert_eq!(candidate(vec![1, 1, 2, -2, 3, 4, 5]), 6);\n  \
    \  assert_eq!(candidate(vec![1, 6, 9, -6, 0, 1, 5]), 5);\n    assert_eq!(candidate(vec![1,\
    \ 100, 98, -7, 1, -1]), 4);\n    assert_eq!(candidate(vec![12, 23, 34, -45, -56,\
    \ 0]), 5);\n    assert_eq!(candidate(vec![0, 1]), 1);\n    assert_eq!(candidate(vec![1]),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpnka5glaz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659817826
