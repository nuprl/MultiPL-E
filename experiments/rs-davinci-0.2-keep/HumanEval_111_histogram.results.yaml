name: HumanEval_111_histogram
language: rust
results:
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    for word in test.split_whitespace()\
    \ {\n        let count = result.entry(word.to_string()).or_insert(0);\n      \
    \  *count += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"c\": 1, \"a\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpe9msdtkg.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max = 0;\n    for word\
    \ in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (key, value)\
    \ in map {\n        if value == max {\n            result.insert(key, value);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max_count = 0;\n  \
    \  for c in test.split_whitespace() {\n        let count = map.entry(c.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result = HashMap::new();\n    for (k,\
    \ v) in map {\n        if v == max_count {\n            result.insert(k, v);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_value = 0;\n\
    \    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_value {\n            max_value\
    \ = *count;\n        }\n    }\n    let mut final_result = HashMap::new();\n  \
    \  for (key, value) in result {\n        if value == max_value {\n           \
    \ final_result.insert(key, value);\n        }\n    }\n    final_result\n}\n\n\
    fn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max = 0;\n    for word\
    \ in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (key, value)\
    \ in map {\n        if value == max {\n            result.insert(key, value);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max_count = 0;\n  \
    \  for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result = HashMap::new();\n    for (key,\
    \ value) in map {\n        if value == max_count {\n            result.insert(key,\
    \ value);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut final_result = HashMap::new();\n  \
    \  for (key, value) in result {\n        if value == max_count {\n           \
    \ final_result.insert(key, value);\n        }\n    }\n    final_result\n}\n\n\
    fn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut histogram: HashMap<String, isize> = HashMap::new();\n\
    \    let mut max_count: isize = 0;\n    for word in test.split_whitespace() {\n\
    \        let count = histogram.entry(word.to_string()).or_insert(0);\n       \
    \ *count += 1;\n        if *count > max_count {\n            max_count = *count;\n\
    \        }\n    }\n    let mut result: HashMap<String, isize> = HashMap::new();\n\
    \    for (key, value) in histogram {\n        if value == max_count {\n      \
    \      result.insert(key, value);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max_count = 0;\n  \
    \  let mut max_keys = Vec::new();\n\n    for word in test.split_whitespace() {\n\
    \        let count = map.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n\n        if *count > max_count {\n            max_count = *count;\n\
    \            max_keys = vec![word.to_string()];\n        } else if *count == max_count\
    \ {\n            max_keys.push(word.to_string());\n        }\n    }\n\n    let\
    \ mut result = HashMap::new();\n    for key in max_keys {\n        result.insert(key,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut histogram = HashMap::new();\n    let mut max_count = 0;\n\
    \    let mut max_letters = Vec::new();\n\n    for letter in test.split_whitespace()\
    \ {\n        let count = histogram.entry(letter.to_string()).or_insert(0);\n \
    \       *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    let mut max_histogram = HashMap::new();\n    for letter\
    \ in max_letters {\n        max_histogram.insert(letter, max_count);\n    }\n\n\
    \    max_histogram\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    let mut max_letters = Vec::new();\n\n    for letter in test.split_whitespace()\
    \ {\n        let count = result.entry(letter.to_string()).or_insert(0);\n    \
    \    *count += 1;\n\n        if *count > max_count {\n            max_count =\
    \ *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    let mut result_max = HashMap::new();\n    for letter\
    \ in max_letters {\n        result_max.insert(letter, max_count);\n    }\n\n \
    \   result_max\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"c\": 1, \"a\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpq73iysmp.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max = 0;\n    for word\
    \ in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (key, value)\
    \ in map {\n        if value == max {\n            result.insert(key, value);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut histogram = HashMap::new();\n    let mut max_count = 0;\n\
    \    for word in test.split_whitespace() {\n        let count = histogram.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result = HashMap::new();\n    for (key,\
    \ value) in histogram {\n        if value == max_count {\n            result.insert(key,\
    \ value);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut histogram: HashMap<String, isize> = HashMap::new();\n\
    \    let mut max_count: isize = 0;\n    for letter in test.split_whitespace()\
    \ {\n        let count = histogram.entry(letter.to_string()).or_insert(0);\n \
    \       *count += 1;\n        if *count > max_count {\n            max_count =\
    \ *count;\n        }\n    }\n    let mut result: HashMap<String, isize> = HashMap::new();\n\
    \    for (key, value) in histogram {\n        if value == max_count {\n      \
    \      result.insert(key, value);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max_count = 0;\n  \
    \  let mut max_letters = Vec::new();\n\n    for letter in test.split_whitespace()\
    \ {\n        let count = map.entry(letter.to_string()).or_insert(0);\n       \
    \ *count += 1;\n\n        if *count > max_count {\n            max_count = *count;\n\
    \            max_letters = vec![letter.to_string()];\n        } else if *count\
    \ == max_count {\n            max_letters.push(letter.to_string());\n        }\n\
    \    }\n\n    let mut result = HashMap::new();\n    for letter in max_letters\
    \ {\n        result.insert(letter, max_count);\n    }\n\n    result\n}\n\nfn main()\
    \ {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    for word in test.split_whitespace() {\n \
    \       let count = result.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    result.retain(|_, &mut v| v == max_count);\n    result\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    result.retain(|_, &mut v| v == max_count);\n\
    \    result\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result_max = HashMap::new();\n    for\
    \ (key, value) in result {\n        if value == max_count {\n            result_max.insert(key,\
    \ value);\n        }\n    }\n    result_max\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    for letter in test.split_whitespace() {\n\
    \        let count = result.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    result.retain(|_, &mut v| v == max_count);\n    result\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    let mut max_letters = Vec::new();\n\n    for letter in test.split_whitespace()\
    \ {\n        let count = result.entry(letter.to_string()).or_insert(0);\n    \
    \    *count += 1;\n\n        if *count > max_count {\n            max_count =\
    \ *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    let mut result_max = HashMap::new();\n    for letter\
    \ in max_letters {\n        result_max.insert(letter, max_count);\n    }\n\n \
    \   result_max\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    for letter in test.split_whitespace()\
    \ {\n        let count = result.entry(letter.to_string()).or_insert(0);\n    \
    \    *count += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"a\": 2, \"c\": 1}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpwanhnp2h.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"a\": 2, \"c\": 1}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpwzaln812.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 2, \"c\": 1, \"b\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmp8ra73uv9.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max = 0;\n    for word\
    \ in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (key, value)\
    \ in map {\n        if value == max {\n            result.insert(key, value);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result_max = HashMap::new();\n    for\
    \ (key, value) in result {\n        if value == max_count {\n            result_max.insert(key,\
    \ value);\n        }\n    }\n    result_max\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    for c in test.split_whitespace()\
    \ {\n        let counter = map.entry(c.to_string()).or_insert(0);\n        *counter\
    \ += 1;\n    }\n    let mut max = 0;\n    for (_, v) in &map {\n        if *v\
    \ > max {\n            max = *v;\n        }\n    }\n    let mut result = HashMap::new();\n\
    \    for (k, v) in &map {\n        if *v == max {\n            result.insert(k.to_string(),\
    \ *v);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    let mut max_letters = Vec::new();\n\n    for letter in test.split_whitespace()\
    \ {\n        let count = result.entry(letter.to_string()).or_insert(0);\n    \
    \    *count += 1;\n\n        if *count > max_count {\n            max_count =\
    \ *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    let mut result_max = HashMap::new();\n    for letter\
    \ in max_letters {\n        result_max.insert(letter, max_count);\n    }\n\n \
    \   result_max\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_keys: Vec<String> = Vec::new();\n\
    \n    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_keys = vec![word.to_string()];\n        } else if\
    \ *count == max_count {\n            max_keys.push(word.to_string());\n      \
    \  }\n    }\n\n    for key in max_keys {\n        result.insert(key, max_count);\n\
    \    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 2, \"b\": 2, \"c\": 1}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpqiag9g5x.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max = 0;\n    for word\
    \ in test.split(\" \") {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (key, value)\
    \ in map {\n        if value == max {\n            result.insert(key, value);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmphlxn79uz.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut max_letters = HashMap::new();\n   \
    \ for (letter, count) in result {\n        if count == max_count {\n         \
    \   max_letters.insert(letter, count);\n        }\n    }\n    max_letters\n}\n\
    \nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max_count = 0;\n  \
    \  for c in test.split_whitespace() {\n        let count = map.entry(c.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result = HashMap::new();\n    for (k,\
    \ v) in map {\n        if v == max_count {\n            result.insert(k, v);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    for word in test.split_whitespace() {\n \
    \       let count = result.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    result.retain(|_, &mut v| v == max_count);\n    result\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max_key = String::new();\n\
    \    let mut max_value = 0;\n    for word in test.split_whitespace() {\n     \
    \   let count = map.entry(word.to_string()).or_insert(0);\n        *count += 1;\n\
    \        if *count > max_value {\n            max_value = *count;\n          \
    \  max_key = word.to_string();\n        }\n    }\n    let mut result = HashMap::new();\n\
    \    for (key, value) in map {\n        if value == max_value {\n            result.insert(key,\
    \ value);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"c\": 1, \"b\": 2, \"a\": 2}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmp69icjxs2.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut max_words = HashMap::new();\n    for\
    \ (word, count) in result {\n        if count == max_count {\n            max_words.insert(word,\
    \ count);\n        }\n    }\n    max_words\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    for word in test.split_whitespace() {\n \
    \       let count = result.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    result.retain(|_, &mut v| v == max_count);\n    result\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    for letter in test.split_whitespace() {\n\
    \        let count = result.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    result.retain(|_, &mut v| v == max_count);\n    result\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split(\" \") {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"c\": 1, \"a\": 2, \"b\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpzvx08pvx.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max = 0;\n    let\
    \ mut max_letters = Vec::new();\n    let mut letters = test.split_whitespace();\n\
    \    while let Some(letter) = letters.next() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \            max_letters.clear();\n            max_letters.push(letter.to_string());\n\
    \        } else if *count == max {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n    for letter in max_letters {\n        result.insert(letter,\
    \ max);\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"c\": 1, \"b\": 2, \"a\": 2}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpthm9crn1.rs:37:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"c\": 1, \"a\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpj1zdn13w.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut max_words = HashMap::new();\n    for\
    \ (key, value) in result {\n        if value == max_count {\n            max_words.insert(key,\
    \ value);\n        }\n    }\n    max_words\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max_count = 0;\n  \
    \  let mut max_letters = Vec::new();\n\n    for letter in test.split_whitespace()\
    \ {\n        let count = map.entry(letter.to_string()).or_insert(0);\n       \
    \ *count += 1;\n\n        if *count > max_count {\n            max_count = *count;\n\
    \            max_letters = vec![letter.to_string()];\n        } else if *count\
    \ == max_count {\n            max_letters.push(letter.to_string());\n        }\n\
    \    }\n\n    let mut result = HashMap::new();\n    for letter in max_letters\
    \ {\n        result.insert(letter, max_count);\n    }\n\n    result\n}\n\nfn main()\
    \ {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    for letter in test.split(\" \") {\n     \
    \   let count = result.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    let mut result_filtered: HashMap<String, isize> = HashMap::new();\n\
    \    for (key, value) in result {\n        if value == max_count {\n         \
    \   result_filtered.insert(key, value);\n        }\n    }\n    result_filtered\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmp7zqbkvp9.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"c\": 1, \"a\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmp7ypafdxv.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max = 0;\n    let mut\
    \ max_letters = Vec::new();\n    for letter in test.split_whitespace() {\n   \
    \     let count = map.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max {\n            max = *count;\n            max_letters.clear();\n\
    \            max_letters.push(letter.to_string());\n        } else if *count ==\
    \ max {\n            max_letters.push(letter.to_string());\n        }\n    }\n\
    \    let mut result = HashMap::new();\n    for letter in max_letters {\n     \
    \   result.insert(letter, max);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")),\
    \ HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    for letter in test.split_whitespace() {\n\
    \        let count = result.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    result.retain(|_, &mut v| v == max_count);\n    result\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max_count = 0;\n  \
    \  for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result = HashMap::new();\n    for (key,\
    \ value) in map {\n        if value == max_count {\n            result.insert(key,\
    \ value);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut histogram = HashMap::new();\n    let mut max_count = 0;\n\
    \    let mut max_letters = Vec::new();\n\n    for letter in test.split_whitespace()\
    \ {\n        let count = histogram.entry(letter.to_string()).or_insert(0);\n \
    \       *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    let mut result = HashMap::new();\n    for letter in max_letters\
    \ {\n        result.insert(letter, max_count);\n    }\n\n    result\n}\n\nfn main()\
    \ {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"c\": 1, \"a\": 2, \"b\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpm9vj2v_j.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut final_result = HashMap::new();\n  \
    \  for (key, value) in result {\n        if value == max_count {\n           \
    \ final_result.insert(key, value);\n        }\n    }\n    final_result\n}\n\n\
    fn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max = 0;\n    for word\
    \ in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (key, value)\
    \ in map {\n        if value == max {\n            result.insert(key, value);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 2, \"b\": 2, \"c\": 1}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpf3vo4tzs.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letter: String = \"\".to_string();\n\
    \    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letter = letter.to_string();\n        }\n    }\n\
    \    result.retain(|key, value| *value == max_count);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 2, \"c\": 1, \"b\": 2}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpk2nyn1ay.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"c\": 1, \"b\": 2, \"a\": 2}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmp5tr4w2zj.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    for c in test.split_whitespace()\
    \ {\n        let count = map.entry(c.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = 0;\n    for (_, v) in &map {\n        if *v\
    \ > max {\n            max = *v;\n        }\n    }\n    let mut result = HashMap::new();\n\
    \    for (k, v) in &map {\n        if *v == max {\n            result.insert(k.to_string(),\
    \ *v);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut histogram: HashMap<String, isize> = HashMap::new();\n\
    \    let mut max_count: isize = 0;\n    for letter in test.split_whitespace()\
    \ {\n        let count = histogram.entry(letter.to_string()).or_insert(0);\n \
    \       *count += 1;\n        if *count > max_count {\n            max_count =\
    \ *count;\n        }\n    }\n    let mut result: HashMap<String, isize> = HashMap::new();\n\
    \    for (letter, count) in histogram {\n        if count == max_count {\n   \
    \         result.insert(letter, count);\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    for c in test.split_whitespace()\
    \ {\n        let count = map.entry(c.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = 0;\n    for (_, v) in &map {\n        if *v\
    \ > max {\n            max = *v;\n        }\n    }\n    let mut result = HashMap::new();\n\
    \    for (k, v) in &map {\n        if *v == max {\n            result.insert(k.to_string(),\
    \ *v);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"a\": 2, \"c\": 1}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpwd2nei64.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    for letter in test.split_whitespace() {\n\
    \        let count = result.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    result.retain(|_, &mut v| v == max_count);\n    result\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_value: isize = 0;\n    let mut max_key: String = \"\".to_string();\n\
    \    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_value {\n            max_value\
    \ = *count;\n            max_key = word.to_string();\n        }\n    }\n    let\
    \ mut final_result: HashMap<String, isize> = HashMap::new();\n    for (key, value)\
    \ in result {\n        if value == max_value {\n            final_result.insert(key,\
    \ value);\n        }\n    }\n    final_result\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    for word in test.split_whitespace() {\n \
    \       let count = result.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    let mut final_result: HashMap<String, isize> = HashMap::new();\n\
    \    for (key, value) in result {\n        if value == max_count {\n         \
    \   final_result.insert(key, value);\n        }\n    }\n    final_result\n}\n\n\
    fn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_value: isize = 0;\n    let mut max_keys: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_value {\n            max_value\
    \ = *count;\n            max_keys = vec![letter.to_string()];\n        } else\
    \ if *count == max_value {\n            max_keys.push(letter.to_string());\n \
    \       }\n    }\n\n    for key in max_keys {\n        result.insert(key, max_value);\n\
    \    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 2, \"c\": 1, \"b\": 2}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpu35sdx8t.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    for c in test.split_whitespace()\
    \ {\n        let count = map.entry(c.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = 0;\n    for (_, count) in &map {\n        if\
    \ *count > max {\n            max = *count;\n        }\n    }\n    let mut result\
    \ = HashMap::new();\n    for (key, count) in &map {\n        if *count == max\
    \ {\n            result.insert(key.to_string(), *count);\n        }\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    result.retain(|_, &mut v| v == max_count);\n\
    \    result\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut histogram: HashMap<String, isize> = HashMap::new();\n\
    \    let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = histogram.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        histogram.insert(letter,\
    \ max_count);\n    }\n\n    histogram\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"c\": 1, \"b\": 2, \"a\": 2}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmplwf3wmo1.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result_max = HashMap::new();\n    for\
    \ (key, value) in result {\n        if value == max_count {\n            result_max.insert(key,\
    \ value);\n        }\n    }\n    result_max\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    for word in test.split_whitespace() {\n \
    \       let count = result.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    let mut result_max: HashMap<String, isize> = HashMap::new();\n\
    \    for (key, value) in result {\n        if value == max_count {\n         \
    \   result_max.insert(key, value);\n        }\n    }\n    result_max\n}\n\nfn\
    \ main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    for word in test.split_whitespace() {\n \
    \       let count = result.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    result.retain(|_, &mut v| v == max_count);\n    result\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut histogram: HashMap<String, isize> = HashMap::new();\n\
    \    let mut max_value: isize = 0;\n    for word in test.split_whitespace() {\n\
    \        let count = histogram.entry(word.to_string()).or_insert(0);\n       \
    \ *count += 1;\n        if *count > max_value {\n            max_value = *count;\n\
    \        }\n    }\n    let mut result: HashMap<String, isize> = HashMap::new();\n\
    \    for (key, value) in histogram {\n        if value == max_value {\n      \
    \      result.insert(key, value);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max_count = 0;\n  \
    \  for c in test.split_whitespace() {\n        let count = map.entry(c.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result = HashMap::new();\n    for (k,\
    \ v) in map {\n        if v == max_count {\n            result.insert(k, v);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    for letter in test.split(\" \") {\n     \
    \   let count = result.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    result.retain(|_, &mut v| v == max_count);\n    result\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmppxjqj5g7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"a\": 2, \"c\": 1}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmp_3037r74.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_value: isize = 0;\n    let mut max_key: String = \"\".to_string();\n\
    \    for letter in test.split(\" \") {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_value {\n            max_value\
    \ = *count;\n            max_key = letter.to_string();\n        }\n    }\n   \
    \ let mut result_max: HashMap<String, isize> = HashMap::new();\n    for (key,\
    \ value) in result.iter() {\n        if *value == max_value {\n            result_max.insert(key.to_string(),\
    \ value.to_string().parse::<isize>().unwrap());\n        }\n    }\n    result_max\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmpu1sj098p.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result_filtered = HashMap::new();\n\
    \    for (key, value) in result {\n        if value == max_count {\n         \
    \   result_filtered.insert(key, value);\n        }\n    }\n    result_filtered\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    for letter in test.split(\" \") {\n     \
    \   let count = result.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    let mut result_filtered: HashMap<String, isize> = HashMap::new();\n\
    \    for (key, value) in result {\n        if value == max_count {\n         \
    \   result_filtered.insert(key, value);\n        }\n    }\n    result_filtered\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmpmk4rqtet.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    for letter in test.split_whitespace() {\n\
    \        let count = result.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    let mut result_max: HashMap<String, isize> = HashMap::new();\n\
    \    for (letter, count) in result {\n        if count == max_count {\n      \
    \      result_max.insert(letter, count);\n        }\n    }\n    result_max\n}\n\
    \nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    for letter in test.split_whitespace() {\n\
    \        let count = result.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    result.retain(|_, &mut v| v == max_count);\n    result\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"c\": 1, \"b\": 2, \"a\": 2}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpanyq9yx5.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 2, \"c\": 1, \"b\": 2}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpwj1bu3_i.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    for letter in test.split_whitespace() {\n\
    \        let count = result.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    let mut max_letters: HashMap<String, isize> = HashMap::new();\n\
    \    for (letter, count) in result {\n        if count == max_count {\n      \
    \      max_letters.insert(letter, count);\n        }\n    }\n    max_letters\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    let mut max_letters = Vec::new();\n\n    for letter in test.split_whitespace()\
    \ {\n        let count = result.entry(letter.to_string()).or_insert(0);\n    \
    \    *count += 1;\n\n        if *count > max_count {\n            max_count =\
    \ *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    let mut final_result = HashMap::new();\n    for letter\
    \ in max_letters {\n        final_result.insert(letter, max_count);\n    }\n\n\
    \    final_result\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result_max = HashMap::new();\n    for\
    \ (key, value) in result {\n        if value == max_count {\n            result_max.insert(key,\
    \ value);\n        }\n    }\n    result_max\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max = 0;\n    for word\
    \ in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (key, value)\
    \ in map {\n        if value == max {\n            result.insert(key, value);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    for c in test.split_whitespace()\
    \ {\n        let count = map.entry(c.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = 0;\n    for (_, v) in &map {\n        if *v\
    \ > max {\n            max = *v;\n        }\n    }\n    let mut result = HashMap::new();\n\
    \    for (k, v) in &map {\n        if *v == max {\n            result.insert(k.to_string(),\
    \ *v);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max = 0;\n    for word\
    \ in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (key, value)\
    \ in map {\n        if value == max {\n            result.insert(key, value);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letter: String = \"\".to_string();\n\
    \    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letter = letter.to_string();\n        }\n    }\n\
    \    let mut result_max: HashMap<String, isize> = HashMap::new();\n    for (letter,\
    \ count) in result.iter() {\n        if *count == max_count {\n            result_max.insert(letter.to_string(),\
    \ *count);\n        }\n    }\n    result_max\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max_count = 0;\n  \
    \  for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result = HashMap::new();\n    for (key,\
    \ value) in map {\n        if value == max_count {\n            result.insert(key,\
    \ value);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max_count = 0;\n  \
    \  let mut max_letters = Vec::new();\n\n    for letter in test.split_whitespace()\
    \ {\n        let count = map.entry(letter.to_string()).or_insert(0);\n       \
    \ *count += 1;\n\n        if *count > max_count {\n            max_count = *count;\n\
    \            max_letters = vec![letter.to_string()];\n        } else if *count\
    \ == max_count {\n            max_letters.push(letter.to_string());\n        }\n\
    \    }\n\n    let mut result = HashMap::new();\n    for letter in max_letters\
    \ {\n        result.insert(letter, max_count);\n    }\n\n    result\n}\n\nfn main()\
    \ {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max = 0;\n    for word\
    \ in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (key, value)\
    \ in map {\n        if value == max {\n            result.insert(key, value);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result_filtered = HashMap::new();\n\
    \    for (key, value) in result {\n        if value == max_count {\n         \
    \   result_filtered.insert(key, value);\n        }\n    }\n    result_filtered\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result_max = HashMap::new();\n    for\
    \ (key, value) in result {\n        if value == max_count {\n            result_max.insert(key,\
    \ value);\n        }\n    }\n    result_max\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max_value = 0;\n  \
    \  let mut max_keys = Vec::new();\n\n    for word in test.split_whitespace() {\n\
    \        let count = map.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_value {\n            max_value = *count;\n  \
    \          max_keys = vec![word.to_string()];\n        } else if *count == max_value\
    \ {\n            max_keys.push(word.to_string());\n        }\n    }\n\n    let\
    \ mut result = HashMap::new();\n    for key in max_keys {\n        result.insert(key,\
    \ max_value);\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result_max = HashMap::new();\n    for\
    \ (key, value) in result {\n        if value == max_count {\n            result_max.insert(key,\
    \ value);\n        }\n    }\n    result_max\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max = 0;\n    for\
    \ c in test.split_whitespace() {\n        let count = result.entry(c.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    result.retain(|_, &mut v| v == max);\n    result\n}\n\n\
    fn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    for word in test.split_whitespace() {\n \
    \       let count = result.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    result.retain(|_, &mut v| v == max_count);\n    result\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"a\": 2, \"c\": 1}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpxf_50z0c.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max_count = 0;\n  \
    \  for word in test.split(\" \") {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result = HashMap::new();\n    for (key,\
    \ value) in map {\n        if value == max_count {\n            result.insert(key,\
    \ value);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmp991rp6pm.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    for word in test.split_whitespace() {\n \
    \       let count = result.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    result.retain(|_, &mut v| v == max_count);\n    result\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    for ch in test.split_whitespace()\
    \ {\n        let count = result.entry(ch.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 2, \"b\": 2, \"c\": 1}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmp4cevhqfx.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    for letter in test.split_whitespace() {\n\
    \        let count = result.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    let mut final_result: HashMap<String, isize> = HashMap::new();\n\
    \    for (key, value) in result {\n        if value == max_count {\n         \
    \   final_result.insert(key, value);\n        }\n    }\n    final_result\n}\n\n\
    fn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_value: isize = 0;\n    for letter in test.split_whitespace() {\n\
    \        let count = result.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_value {\n            max_value = *count;\n  \
    \      }\n    }\n    let mut final_result: HashMap<String, isize> = HashMap::new();\n\
    \    for (key, value) in result {\n        if value == max_value {\n         \
    \   final_result.insert(key, value);\n        }\n    }\n    final_result\n}\n\n\
    fn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    for c in test.split_whitespace()\
    \ {\n        let count = map.entry(c.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = 0;\n    for (_, v) in &map {\n        if *v\
    \ > max {\n            max = *v;\n        }\n    }\n    let mut result = HashMap::new();\n\
    \    for (k, v) in &map {\n        if *v == max {\n            result.insert(k.to_string(),\
    \ *v);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max_count = 0;\n  \
    \  for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result = HashMap::new();\n    for (key,\
    \ value) in map {\n        if value == max_count {\n            result.insert(key,\
    \ value);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    for word in test.split_whitespace() {\n \
    \       let count = result.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    let mut result_max: HashMap<String, isize> = HashMap::new();\n\
    \    for (key, value) in result {\n        if value == max_count {\n         \
    \   result_max.insert(key, value);\n        }\n    }\n    result_max\n}\n\nfn\
    \ main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max_count = 0;\n  \
    \  for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result = HashMap::new();\n    for (key,\
    \ value) in map {\n        if value == max_count {\n            result.insert(key,\
    \ value);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"c\": 1, \"a\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmph61m1k2t.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    result.retain(|_, &mut v| v == max_count);\n\
    \    result\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"c\": 1, \"a\": 2, \"b\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmp6eiwa53i.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    result.retain(|_, &mut v| v == max_count);\n\
    \    result\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max_count = 0;\n  \
    \  let mut max_letters = Vec::new();\n\n    for letter in test.split_whitespace()\
    \ {\n        let count = map.entry(letter.to_string()).or_insert(0);\n       \
    \ *count += 1;\n\n        if *count > max_count {\n            max_count = *count;\n\
    \            max_letters = vec![letter.to_string()];\n        } else if *count\
    \ == max_count {\n            max_letters.push(letter.to_string());\n        }\n\
    \    }\n\n    let mut result = HashMap::new();\n    for letter in max_letters\
    \ {\n        result.insert(letter, max_count);\n    }\n\n    result\n}\n\nfn main()\
    \ {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max_count = 0;\n  \
    \  for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result = HashMap::new();\n    for (key,\
    \ value) in map {\n        if value == max_count {\n            result.insert(key,\
    \ value);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max = 0;\n    for word\
    \ in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (key, value)\
    \ in map {\n        if value == max {\n            result.insert(key, value);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"c\": 1, \"a\": 2, \"b\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpk3y6r2tp.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max = 0;\n    for word\
    \ in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (key, value)\
    \ in map {\n        if value == max {\n            result.insert(key, value);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result_max = HashMap::new();\n    for\
    \ (key, value) in result {\n        if value == max_count {\n            result_max.insert(key,\
    \ value);\n        }\n    }\n    result_max\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max_count = 0;\n  \
    \  for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result = HashMap::new();\n    for (key,\
    \ value) in map {\n        if value == max_count {\n            result.insert(key,\
    \ value);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 2, \"b\": 2, \"c\": 1}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpnlw888g3.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max_count = 0;\n  \
    \  let mut max_letters = Vec::new();\n\n    for letter in test.split_whitespace()\
    \ {\n        let count = map.entry(letter.to_string()).or_insert(0);\n       \
    \ *count += 1;\n\n        if *count > max_count {\n            max_count = *count;\n\
    \            max_letters = vec![letter.to_string()];\n        } else if *count\
    \ == max_count {\n            max_letters.push(letter.to_string());\n        }\n\
    \    }\n\n    let mut result = HashMap::new();\n    for letter in max_letters\
    \ {\n        result.insert(letter, max_count);\n    }\n\n    result\n}\n\nfn main()\
    \ {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    for letter in test.split_whitespace() {\n\
    \        let count = result.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    result.retain(|_, &mut v| v == max_count);\n    result\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    result.retain(|_, &mut v| v == max_count);\n\
    \    result\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    for word in test.split_whitespace() {\n \
    \       let count = result.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    let mut max_words: HashMap<String, isize> = HashMap::new();\n\
    \    for (key, value) in result {\n        if value == max_count {\n         \
    \   max_words.insert(key, value);\n        }\n    }\n    max_words\n}\n\nfn main()\
    \ {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max = 0;\n    for word\
    \ in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (key, value)\
    \ in map {\n        if value == max {\n            result.insert(key, value);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut histogram = HashMap::new();\n    let mut max_count = 0;\n\
    \    let mut max_letters = Vec::new();\n\n    for letter in test.split_whitespace()\
    \ {\n        let count = histogram.entry(letter.to_string()).or_insert(0);\n \
    \       *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    let mut result = HashMap::new();\n    for letter in max_letters\
    \ {\n        result.insert(letter, max_count);\n    }\n\n    result\n}\n\nfn main()\
    \ {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    let mut max_letters = Vec::new();\n\n    for letter in test.split_whitespace()\
    \ {\n        let count = result.entry(letter.to_string()).or_insert(0);\n    \
    \    *count += 1;\n\n        if *count > max_count {\n            max_count =\
    \ *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    let mut final_result = HashMap::new();\n    for letter\
    \ in max_letters {\n        final_result.insert(letter, max_count);\n    }\n\n\
    \    final_result\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    let mut max_letters = Vec::new();\n\n    for letter in test.split_whitespace()\
    \ {\n        let count = result.entry(letter.to_string()).or_insert(0);\n    \
    \    *count += 1;\n\n        if *count > max_count {\n            max_count =\
    \ *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    let mut result = HashMap::new();\n    for letter in max_letters\
    \ {\n        result.insert(letter, max_count);\n    }\n\n    result\n}\n\nfn main()\
    \ {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max = 0;\n    for letter in test.split_whitespace() {\n        let count\
    \ = result.entry(letter.to_string()).or_insert(0);\n        *count += 1;\n   \
    \     if *count > max {\n            max = *count;\n        }\n    }\n    let\
    \ mut result_max: HashMap<String, isize> = HashMap::new();\n    for (key, value)\
    \ in result {\n        if value == max {\n            result_max.insert(key, value);\n\
    \        }\n    }\n    result_max\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"a\": 2, \"c\": 1}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpmb1hi8x3.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    for c in test.split_whitespace()\
    \ {\n        let count = map.entry(c.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = 0;\n    for (_, v) in &map {\n        if *v\
    \ > max {\n            max = *v;\n        }\n    }\n    let mut result = HashMap::new();\n\
    \    for (k, v) in &map {\n        if *v == max {\n            result.insert(k.to_string(),\
    \ *v);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max = 0;\n    for word\
    \ in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (key, value)\
    \ in map {\n        if value == max {\n            result.insert(key, value);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max = 0;\n    let mut\
    \ max_letters = Vec::new();\n    for letter in test.split_whitespace() {\n   \
    \     let count = map.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max {\n            max = *count;\n            max_letters.clear();\n\
    \            max_letters.push(letter.to_string());\n        } else if *count ==\
    \ max {\n            max_letters.push(letter.to_string());\n        }\n    }\n\
    \    let mut result = HashMap::new();\n    for letter in max_letters {\n     \
    \   result.insert(letter, max);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")),\
    \ HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result_max = HashMap::new();\n    for\
    \ (key, value) in result {\n        if value == max_count {\n            result_max.insert(key,\
    \ value);\n        }\n    }\n    result_max\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    for letter in test.split_whitespace() {\n\
    \        let count = result.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    let mut filtered_result: HashMap<String, isize> = HashMap::new();\n\
    \    for (key, value) in result {\n        if value == max_count {\n         \
    \   filtered_result.insert(key, value);\n        }\n    }\n    filtered_result\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    for word in test.split_whitespace() {\n \
    \       let count = result.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    result.retain(|_, &mut v| v == max_count);\n    result\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"c\": 1, \"b\": 2, \"a\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpawb_99v0.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    for word in test.split(\" \") {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result_filtered = HashMap::new();\n\
    \    for (key, value) in result {\n        if value == max_count {\n         \
    \   result_filtered.insert(key, value);\n        }\n    }\n    result_filtered\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmp166396on.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 2, \"b\": 2, \"c\": 1}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmp99qgjhc9.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut histogram: HashMap<String, isize> = HashMap::new();\n\
    \    let mut max_count: isize = 0;\n    for word in test.split(\" \") {\n    \
    \    let count = histogram.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    let mut result: HashMap<String, isize> = HashMap::new();\n\
    \    for (key, value) in histogram {\n        if value == max_count {\n      \
    \      result.insert(key, value);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmpj2m2q_mz.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max_count = 0;\n  \
    \  let mut max_letters = Vec::new();\n\n    for letter in test.split_whitespace()\
    \ {\n        let count = map.entry(letter.to_string()).or_insert(0);\n       \
    \ *count += 1;\n\n        if *count > max_count {\n            max_count = *count;\n\
    \            max_letters = vec![letter.to_string()];\n        } else if *count\
    \ == max_count {\n            max_letters.push(letter.to_string());\n        }\n\
    \    }\n\n    let mut result = HashMap::new();\n    for letter in max_letters\
    \ {\n        result.insert(letter, max_count);\n    }\n\n    result\n}\n\nfn main()\
    \ {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    for letter in test.split_whitespace() {\n\
    \        let count = result.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    let mut result_max: HashMap<String, isize> = HashMap::new();\n\
    \    for (letter, count) in result {\n        if count == max_count {\n      \
    \      result_max.insert(letter, count);\n        }\n    }\n    result_max\n}\n\
    \nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max = 0;\n    for word\
    \ in test.split(\" \") {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (key, value)\
    \ in map {\n        if value == max {\n            result.insert(key, value);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmp4bfm14dk.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 2, \"c\": 1, \"b\": 2}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmp8mv0d9yh.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_value: isize = 0;\n    for letter in test.split_whitespace() {\n\
    \        let count = result.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_value {\n            max_value = *count;\n  \
    \      }\n    }\n    let mut result_max: HashMap<String, isize> = HashMap::new();\n\
    \    for (key, value) in result {\n        if value == max_value {\n         \
    \   result_max.insert(key, value);\n        }\n    }\n    result_max\n}\n\nfn\
    \ main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    for c in test.split_whitespace()\
    \ {\n        let count = map.entry(c.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = 0;\n    for (_, v) in &map {\n        if *v\
    \ > max {\n            max = *v;\n        }\n    }\n    let mut result = HashMap::new();\n\
    \    for (k, v) in &map {\n        if *v == max {\n            result.insert(k.to_string(),\
    \ *v);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max = 0;\n    for word\
    \ in test.split(\" \") {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (key, value)\
    \ in map {\n        if value == max {\n            result.insert(key, value);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmppfkvbv9g.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max = 0;\n    let mut\
    \ max_letters = Vec::new();\n    for word in test.split_whitespace() {\n     \
    \   let count = map.entry(word.to_string()).or_insert(0);\n        *count += 1;\n\
    \        if *count > max {\n            max = *count;\n            max_letters\
    \ = vec![word.to_string()];\n        } else if *count == max {\n            max_letters.push(word.to_string());\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for letter in max_letters\
    \ {\n        result.insert(letter, max);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"a b b\
    \ a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 2, \"c\": 1, \"b\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpmikyqpjj.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"a\": 2, \"c\": 1}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmp6x0orgof.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    for letter in test.split_whitespace() {\n\
    \        let count = result.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    result.retain(|_, &mut v| v == max_count);\n    result\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    for c in test.split_whitespace()\
    \ {\n        let count = map.entry(c.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = 0;\n    for (_, v) in &map {\n        if *v\
    \ > max {\n            max = *v;\n        }\n    }\n    let mut result = HashMap::new();\n\
    \    for (k, v) in &map {\n        if *v == max {\n            result.insert(k.to_string(),\
    \ *v);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    for letter in test.split_whitespace() {\n\
    \        let count = result.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    let mut result_max: HashMap<String, isize> = HashMap::new();\n\
    \    for (key, value) in result {\n        if value == max_count {\n         \
    \   result_max.insert(key, value);\n        }\n    }\n    result_max\n}\n\nfn\
    \ main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_value: isize = 0;\n    let mut max_keys: Vec<String> = Vec::new();\n\
    \n    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_value {\n            max_value\
    \ = *count;\n            max_keys = vec![word.to_string()];\n        } else if\
    \ *count == max_value {\n            max_keys.push(word.to_string());\n      \
    \  }\n    }\n\n    for key in max_keys {\n        result.insert(key, max_value);\n\
    \    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"c\": 1, \"b\": 2, \"a\": 2}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpd430zok2.rs:38:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max_count = 0;\n  \
    \  for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result = HashMap::new();\n    for (key,\
    \ value) in map {\n        if value == max_count {\n            result.insert(key,\
    \ value);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max = 0;\n    let mut\
    \ result = HashMap::new();\n\n    for word in test.split_whitespace() {\n    \
    \    let count = map.entry(word.to_string()).or_insert(0);\n        *count +=\
    \ 1;\n        if *count > max {\n            max = *count;\n        }\n    }\n\
    \n    for (key, value) in map {\n        if value == max {\n            result.insert(key,\
    \ value);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max = 0;\n    for word\
    \ in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (key, value)\
    \ in map {\n        if value == max {\n            result.insert(key, value);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max = 0;\n    for word\
    \ in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (key, value)\
    \ in map {\n        if value == max {\n            result.insert(key, value);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max = 0;\n    let\
    \ mut max_letters = vec![];\n    for letter in test.split_whitespace() {\n   \
    \     let count = result.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max {\n            max = *count;\n            max_letters\
    \ = vec![letter.to_string()];\n        } else if *count == max {\n           \
    \ max_letters.push(letter.to_string());\n        }\n    }\n    for letter in max_letters\
    \ {\n        result.insert(letter, max);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"a b b\
    \ a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"c\": 1, \"a\": 2, \"b\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmp68jj8kcr.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max = 0;\n    for word\
    \ in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (key, value)\
    \ in map {\n        if value == max {\n            result.insert(key, value);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    for letter in test.split_whitespace() {\n\
    \        let count = result.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    result.retain(|_, &mut v| v == max_count);\n    result\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut histogram = HashMap::new();\n    let mut max_count = 0;\n\
    \    for word in test.split(\" \") {\n        let count = histogram.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result = HashMap::new();\n    for (key,\
    \ value) in histogram {\n        if value == max_count {\n            result.insert(key,\
    \ value);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmpr05ud025.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut histogram: HashMap<String, isize> = HashMap::new();\n\
    \    let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = histogram.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        histogram.insert(letter,\
    \ max_count);\n    }\n\n    histogram\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"c\": 1, \"a\": 2}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpoem2empt.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max_count = 0;\n  \
    \  let mut max_letters = Vec::new();\n\n    for letter in test.split(\" \") {\n\
    \        let count = map.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n\n        if *count > max_count {\n            max_count = *count;\n\
    \            max_letters = vec![letter.to_string()];\n        } else if *count\
    \ == max_count {\n            max_letters.push(letter.to_string());\n        }\n\
    \    }\n\n    let mut result = HashMap::new();\n    for letter in max_letters\
    \ {\n        result.insert(letter, max_count);\n    }\n\n    result\n}\n\nfn main()\
    \ {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmpalyw98xz.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"c\": 1, \"a\": 2, \"b\": 2}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpfl45xapy.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut histogram: HashMap<String, isize> = HashMap::new();\n\
    \    let mut max_count: isize = 0;\n    for letter in test.split_whitespace()\
    \ {\n        let count = histogram.entry(letter.to_string()).or_insert(0);\n \
    \       *count += 1;\n        if *count > max_count {\n            max_count =\
    \ *count;\n        }\n    }\n    let mut result: HashMap<String, isize> = HashMap::new();\n\
    \    for (letter, count) in histogram {\n        if count == max_count {\n   \
    \         result.insert(letter, count);\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max_count = 0;\n  \
    \  for word in test.split(\" \") {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result = HashMap::new();\n    for (key,\
    \ value) in map {\n        if value == max_count {\n            result.insert(key,\
    \ value);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmp88c0vqny.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max_count = 0;\n  \
    \  for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result = HashMap::new();\n    for (key,\
    \ value) in map {\n        if value == max_count {\n            result.insert(key,\
    \ value);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut histogram = HashMap::new();\n    let mut max_count = 0;\n\
    \    for word in test.split_whitespace() {\n        let count = histogram.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result = HashMap::new();\n    for (key,\
    \ value) in histogram {\n        if value == max_count {\n            result.insert(key,\
    \ value);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"c\": 1, \"a\": 2, \"b\": 2}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmp1fz0f06u.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_value: isize = 0;\n    let mut max_keys: Vec<String> = Vec::new();\n\
    \n    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_value {\n            max_value\
    \ = *count;\n            max_keys = vec![word.to_string()];\n        } else if\
    \ *count == max_value {\n            max_keys.push(word.to_string());\n      \
    \  }\n    }\n\n    for key in max_keys {\n        result.insert(key, max_value);\n\
    \    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 2, \"b\": 2, \"c\": 1}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpjwlabvqp.rs:38:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result_max = HashMap::new();\n    for\
    \ (key, value) in result {\n        if value == max_count {\n            result_max.insert(key,\
    \ value);\n        }\n    }\n    result_max\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result_filtered = HashMap::new();\n\
    \    for (key, value) in result {\n        if value == max_count {\n         \
    \   result_filtered.insert(key, value);\n        }\n    }\n    result_filtered\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 2, \"b\": 2, \"c\": 1}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmppbd4uy7e.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max = 0;\n    let mut\
    \ max_letters = Vec::new();\n    for letter in test.split_whitespace() {\n   \
    \     let count = map.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max {\n            max = *count;\n            max_letters.clear();\n\
    \            max_letters.push(letter.to_string());\n        } else if *count ==\
    \ max {\n            max_letters.push(letter.to_string());\n        }\n    }\n\
    \    let mut result = HashMap::new();\n    for letter in max_letters {\n     \
    \   result.insert(letter, max);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")),\
    \ HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max_count = 0;\n  \
    \  for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result = HashMap::new();\n    for (key,\
    \ value) in map {\n        if value == max_count {\n            result.insert(key,\
    \ value);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max_count = 0;\n  \
    \  let mut max_letters = Vec::new();\n\n    for word in test.split_whitespace()\
    \ {\n        let count = map.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n\n        if *count > max_count {\n            max_count = *count;\n\
    \            max_letters = vec![word.to_string()];\n        } else if *count ==\
    \ max_count {\n            max_letters.push(word.to_string());\n        }\n  \
    \  }\n\n    let mut result = HashMap::new();\n    for letter in max_letters {\n\
    \        result.insert(letter, max_count);\n    }\n\n    result\n}\n\nfn main()\
    \ {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: HashMap<String, isize>\
    \ = HashMap::new();\n\n    for letter in test.split_whitespace() {\n        let\
    \ count = result.entry(letter.to_string()).or_insert(0);\n        *count += 1;\n\
    \n        if *count > max_count {\n            max_count = *count;\n         \
    \   max_letters.clear();\n            max_letters.insert(letter.to_string(), *count);\n\
    \        } else if *count == max_count {\n            max_letters.insert(letter.to_string(),\
    \ *count);\n        }\n    }\n\n    max_letters\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max_count = 0;\n  \
    \  for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result = HashMap::new();\n    for (key,\
    \ value) in map {\n        if value == max_count {\n            result.insert(key,\
    \ value);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    let mut max_letters = Vec::new();\n\n    for letter in test.split_whitespace()\
    \ {\n        let count = result.entry(letter.to_string()).or_insert(0);\n    \
    \    *count += 1;\n\n        if *count > max_count {\n            max_count =\
    \ *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    let mut result_max = HashMap::new();\n    for letter\
    \ in max_letters {\n        result_max.insert(letter, max_count);\n    }\n\n \
    \   result_max\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 2, \"c\": 1, \"b\": 2}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpj0xqav82.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    for word in test.split_whitespace() {\n \
    \       let count = result.entry(word.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    let mut result_max: HashMap<String, isize> = HashMap::new();\n\
    \    for (key, value) in result {\n        if value == max_count {\n         \
    \   result_max.insert(key, value);\n        }\n    }\n    result_max\n}\n\nfn\
    \ main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    for letter in test.split_whitespace() {\n\
    \        let count = result.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    let mut result_max: HashMap<String, isize> = HashMap::new();\n\
    \    for (letter, count) in result {\n        if count == max_count {\n      \
    \      result_max.insert(letter, count);\n        }\n    }\n    result_max\n}\n\
    \nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_value: isize = 0;\n    for letter in test.split_whitespace() {\n\
    \        let count = result.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_value {\n            max_value = *count;\n  \
    \      }\n    }\n    result.retain(|_, &mut v| v == max_value);\n    result\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"c\": 1, \"a\": 2, \"b\": 2}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmp6ghmkhuh.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut max_words = HashMap::new();\n    for\
    \ (key, value) in result {\n        if value == max_count {\n            max_words.insert(key,\
    \ value);\n        }\n    }\n    max_words\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    for letter in test.split(\" \") {\n     \
    \   let count = result.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    let mut result_max: HashMap<String, isize> = HashMap::new();\n\
    \    for (key, value) in result {\n        if value == max_count {\n         \
    \   result_max.insert(key, value);\n        }\n    }\n    result_max\n}\n\nfn\
    \ main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmpkh8myozg.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"c\": 1, \"a\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpo3ffgkhp.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result_max = HashMap::new();\n    for\
    \ (key, value) in result {\n        if value == max_count {\n            result_max.insert(key,\
    \ value);\n        }\n    }\n    result_max\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_value: isize = 0;\n    let mut max_key: String = \"\".to_string();\n\
    \    for key in test.split_whitespace() {\n        let count = result.entry(key.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_value {\n            max_value\
    \ = *count;\n            max_key = key.to_string();\n        }\n    }\n    let\
    \ mut result_max: HashMap<String, isize> = HashMap::new();\n    for (key, value)\
    \ in result.iter() {\n        if *value == max_value {\n            result_max.insert(key.to_string(),\
    \ value.clone());\n        }\n    }\n    result_max\n}\n\nfn main() {\n    let\
    \ candidate = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")),\
    \ HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"a\": 2, \"c\": 1}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpif0okue0.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    for c in test.split_whitespace()\
    \ {\n        let count = map.entry(c.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max_count = 0;\n    for (_, count) in map.iter() {\n\
    \        if *count > max_count {\n            max_count = *count;\n        }\n\
    \    }\n    let mut result = HashMap::new();\n    for (key, count) in map.iter()\
    \ {\n        if *count == max_count {\n            result.insert(key.to_string(),\
    \ *count);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max = 0;\n    for word\
    \ in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (key, value)\
    \ in map {\n        if value == max {\n            result.insert(key, value);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_count = 0;\n\
    \    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result_max = HashMap::new();\n    for\
    \ (key, value) in result {\n        if value == max_count {\n            result_max.insert(key,\
    \ value);\n        }\n    }\n    result_max\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_value: isize = 0;\n    let mut max_keys: Vec<String> = Vec::new();\n\
    \n    for letter in test.split(\" \") {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_value {\n            max_value\
    \ = *count;\n            max_keys = vec![letter.to_string()];\n        } else\
    \ if *count == max_value {\n            max_keys.push(letter.to_string());\n \
    \       }\n    }\n\n    for key in max_keys {\n        result.insert(key, max_value);\n\
    \    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 2, \"b\": 2, \"c\": 1}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmptf8m6ivk.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"c\": 1, \"a\": 2, \"b\": 2}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpx2r7fndi.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max_count = 0;\n  \
    \  for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result = HashMap::new();\n    for (key,\
    \ value) in map {\n        if value == max_count {\n            result.insert(key,\
    \ value);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result = HashMap::new();\n    let mut max_value = 0;\n\
    \    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_value {\n            max_value\
    \ = *count;\n        }\n    }\n    let mut result_filtered = HashMap::new();\n\
    \    for (key, value) in result {\n        if value == max_value {\n         \
    \   result_filtered.insert(key, value);\n        }\n    }\n    result_filtered\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut map = HashMap::new();\n    let mut max_count = 0;\n  \
    \  for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result = HashMap::new();\n    for (key,\
    \ value) in map {\n        if value == max_count {\n            result.insert(key,\
    \ value);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_keys: Vec<String> = Vec::new();\n\
    \n    for word in test.split_whitespace() {\n        let count = result.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_keys = vec![word.to_string()];\n        } else if\
    \ *count == max_count {\n            max_keys.push(word.to_string());\n      \
    \  }\n    }\n\n    for key in max_keys {\n        result.insert(key, max_count);\n\
    \    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"c\": 1, \"b\": 2, \"a\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpioputw56.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\n/// histogram('a\
    \ b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n/// histogram('b b b b a')\
    \ == {'b': 4}\n/// histogram('') == {}\nfn histogram(test: String) -> HashMap<String,\
    \ isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n   \
    \ let mut max_count: isize = 0;\n    let mut max_letters: Vec<String> = Vec::new();\n\
    \n    for letter in test.split_whitespace() {\n        let count = result.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n\n        if *count > max_count {\n            max_count\
    \ = *count;\n            max_letters = vec![letter.to_string()];\n        } else\
    \ if *count == max_count {\n            max_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    for letter in max_letters {\n        result.insert(letter,\
    \ max_count);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"c\": 1, \"a\": 2}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmp447hzc81.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
