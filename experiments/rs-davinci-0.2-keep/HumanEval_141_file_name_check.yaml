name: HumanEval_141_file_name_check
language: rust
prompt: "/// Create a function which takes a string representing a file's name, and\
  \ returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  /// A file's name is considered to be valid if and only if all the following conditions\
  \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
  \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// - The\
  \ substring before the dot should not be empty, and it starts with a letter from\
  \ \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after the\
  \ dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// file_name_check(\"\
  example.txt\") # => 'Yes'\n/// file_name_check(\"1example.dll\") # => 'No' (the\
  \ name should start with a latin alphapet letter)\nfn file_name_check(file_name:\
  \ String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!(candidate(String::from(\"\
  example.txt\")), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"\
  1example.dll\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"\
  s1sdf3.asd\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"\
  K.dll\")), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"MY16FILE3.exe\"\
  )), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"His12FILE94.exe\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"_Y.txt\")),\
  \ String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"?aREYA.exe\")),\
  \ String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"/this_is_valid.dll\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"this_is_valid.wow\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"this_is_valid.txt\"\
  )), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"this_is_valid.txtexe\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"#this2_i4s_5valid.ten\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"@this1_is6_valid.exe\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"this_is_12valid.6exe4.txt\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"all.exe.txt\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"I563_No.exe\"\
  )), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"Is3youfault.txt\"\
  )), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"no_one#knows.dll\"\
  )), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"1I563_Yes3.exe\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"I563_Yes3.txtt\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"final..txt\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"final132\")),\
  \ String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"_f4indsartal132.\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\".txt\")), String::from(\"\
  No\"));\n    assert_eq!(candidate(String::from(\"s.\")), String::from(\"No\"));\n\
  }\n"
completions: ["    let mut digits = 0;\n    let mut dot = false;\n    let mut before_dot\
    \ = false;\n    let mut after_dot = false;\n    for c in file_name.chars() {\n\
    \        if c.is_digit(10) {\n            digits += 1;\n        } else if c ==\
    \ '.' {\n            dot = true;\n        } else if dot {\n            after_dot\
    \ = true;\n        } else {\n            before_dot = true;\n        }\n    }\n\
    \    if digits > 3 || !dot || !before_dot || !after_dot {\n        return \"No\"\
    .to_string();\n    }\n    let after_dot = &file_name[file_name.find('.').unwrap()\
    \ + 1..];\n    if after_dot == \"txt\" || after_dot == \"exe\" || after_dot ==\
    \ \"dll\" {\n        return \"Yes\".to_string();\n    }\n    \"No\".to_string()",
  "    let mut digits = 0;\n    let mut dot = false;\n    let mut before_dot = false;\n\
    \    let mut after_dot = false;\n    for c in file_name.chars() {\n        if\
    \ c.is_digit(10) {\n            digits += 1;\n        } else if c == '.' {\n \
    \           dot = true;\n        } else if c.is_alphabetic() {\n            if\
    \ dot {\n                after_dot = true;\n            } else {\n           \
    \     before_dot = true;\n            }\n        }\n    }\n    if digits > 3 ||\
    \ !dot || !before_dot || !after_dot {\n        return \"No\".to_string();\n  \
    \  }\n    let mut after_dot_str = file_name.split('.').collect::<Vec<&str>>()[1];\n\
    \    if after_dot_str.len() != 3 {\n        return \"No\".to_string();\n    }\n\
    \    after_dot_str = after_dot_str.to_lowercase().as_str();\n    if after_dot_str\
    \ != \"txt\" && after_dot_str != \"exe\" && after_dot_str != \"dll\" {\n     \
    \   return \"No\".to_string();\n    }\n    \"Yes\".to_string()", "    let mut\
    \ digits_count = 0;\n    let mut dot_count = 0;\n    let mut extension_count =\
    \ 0;\n    let mut extension_start = 0;\n    let mut extension_end = 0;\n    let\
    \ mut extension_len = 0;\n    let mut extension_str = \"\";\n    let mut extension_str_len\
    \ = 0;\n    let mut extension_str_start = 0;\n    let mut extension_str_end =\
    \ 0;\n    let mut extension_str_len_count = 0;\n    let mut extension_str_start_count\
    \ = 0;\n    let mut extension_str_end_count = 0;\n    let mut extension_str_start_end_count\
    \ = 0;\n    let mut extension_str_start_end_len_count = 0;\n    let mut extension_str_start_end_len_str_count\
    \ = 0;\n    let mut extension_str_start_end_len_str_start_count = 0;\n    let\
    \ mut extension_str_start_end_len_str_end_count = 0;\n    let mut extension_str_start_end_len_str_start_end_count\
    \ = 0;\n    let mut extension_str_start_end_len_str_start_end_len_count = 0;\n\
    \    let mut extension_str_start_end_len_str_start_end_len_str_count = 0;\n  \
    \  let mut extension_str_start_end_len_str_start_end_len_str_start_count = 0;\n\
    \    let mut extension_str_start_end_len_str_start_end_len_str_end_count = 0;\n\
    \    let mut extension_str_start_end_len_str_start_end_len_str_start_end_count\
    \ = 0;\n    let mut extension_str_start_end_len_str_start_end_len_str_start_end_len_count\
    \ = 0;\n    let mut extension_str_start_end_len_str_start_end_len_str_start_end_len_str_count\
    \ = 0;\n    let mut extension_str_start_end_len_str_start_end_len_str_start_",
  "    let mut digits = 0;\n    let mut dot = false;\n    let mut before_dot = false;\n\
    \    let mut after_dot = false;\n    for c in file_name.chars() {\n        if\
    \ c.is_digit(10) {\n            digits += 1;\n        } else if c == '.' {\n \
    \           dot = true;\n        } else if c.is_alphabetic() {\n            if\
    \ dot {\n                after_dot = true;\n            } else {\n           \
    \     before_dot = true;\n            }\n        }\n    }\n    if digits > 3 ||\
    \ !dot || !before_dot || !after_dot {\n        return \"No\".to_string();\n  \
    \  }\n    let ext = &file_name[file_name.find('.').unwrap()+1..];\n    if ext\
    \ == \"txt\" || ext == \"exe\" || ext == \"dll\" {\n        return \"Yes\".to_string();\n\
    \    }\n    \"No\".to_string()", "    let mut count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_digit = false;\n    let mut\
    \ is_letter = false;\n    let mut is_dot = false;\n    let mut is_ext = false;\n\
    \    let mut is_empty = false;\n    let mut is_txt = false;\n    let mut is_exe\
    \ = false;\n    let mut is_dll = false;\n    let mut is_empty_before_dot = false;\n\
    \    let mut is_empty_after_dot = false;\n    let mut is_empty_before_ext = false;\n\
    \    let mut is_empty_after_ext = false;\n    let mut is_empty_before_txt = false;\n\
    \    let mut is_empty_after_txt = false;\n    let mut is_empty_before_exe = false;\n\
    \    let mut is_empty_after_exe = false;\n    let mut is_empty_before_dll = false;\n\
    \    let mut is_empty_after_dll = false;\n    let mut is_empty_before_dot_or_ext\
    \ = false;\n    let mut is_empty_after_dot_or_ext = false;\n    let mut is_empty_before_txt_or_exe_or_dll\
    \ = false;\n    let mut is_empty_after_txt_or_exe_or_dll = false;\n    let mut\
    \ is_empty_before_txt_or_exe = false;\n    let mut is_empty_after_txt_or_exe =\
    \ false;\n    let mut is_empty_before_txt_or_dll = false;\n    let mut is_empty_after_txt_or_dll\
    \ = false;\n    let mut is_empty_before_exe_or_dll = false;\n    let mut is_empty_after_exe_or_dll\
    \ = false;\n    let mut is_empty_before_txt_or_exe_or_dll_or_dot = false;\n  \
    \  let mut is_empty_after_txt_or_exe_or_dll_or_dot = false;\n    let mut is_empty_before_txt_or_exe_or_dot\
    \ = false;\n   ", "    let mut count = 0;\n    let mut dot_count = 0;\n    let\
    \ mut valid = false;\n    let mut extension = String::new();\n    let mut valid_extension\
    \ = false;\n    for c in file_name.chars() {\n        if c == '.' {\n        \
    \    dot_count += 1;\n        }\n        if c.is_numeric() {\n            count\
    \ += 1;\n        }\n        if c.is_alphabetic() {\n            valid = true;\n\
    \        }\n    }\n    if dot_count == 1 && count <= 3 && valid {\n        let\
    \ mut split = file_name.split('.');\n        let first = split.next().unwrap();\n\
    \        let second = split.next().unwrap();\n        if second == \"txt\" ||\
    \ second == \"exe\" || second == \"dll\" {\n            valid_extension = true;\n\
    \        }\n    }\n    if valid && valid_extension {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut num_digits = 0;\n\
    \    let mut dot_found = false;\n    let mut extension_found = false;\n    let\
    \ mut extension = String::new();\n    let mut before_dot = String::new();\n  \
    \  for c in file_name.chars() {\n        if c.is_digit(10) {\n            num_digits\
    \ += 1;\n        }\n        if c == '.' {\n            dot_found = true;\n   \
    \     }\n        if dot_found && !c.is_digit(10) && !c.is_alphabetic() {\n   \
    \         return \"No\".to_string();\n        }\n        if dot_found && c.is_alphabetic()\
    \ {\n            extension.push(c);\n        }\n        if !dot_found && c.is_alphabetic()\
    \ {\n            before_dot.push(c);\n        }\n    }\n    if num_digits > 3\
    \ {\n        return \"No\".to_string();\n    }\n    if !dot_found {\n        return\
    \ \"No\".to_string();\n    }\n    if before_dot.is_empty() {\n        return \"\
    No\".to_string();\n    }\n    if extension == \"txt\" || extension == \"exe\"\
    \ || extension == \"dll\" {\n        extension_found = true;\n    }\n    if extension_found\
    \ {\n        return \"Yes\".to_string();\n    }\n    \"No\".to_string()", "  \
    \  let mut digits = 0;\n    let mut dot = false;\n    let mut start = false;\n\
    \    let mut end = false;\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits += 1;\n        } else if c == '.' {\n            dot =\
    \ true;\n        } else if c.is_alphabetic() {\n            start = true;\n  \
    \      } else if c == 't' || c == 'e' || c == 'd' {\n            end = true;\n\
    \        }\n    }\n    if digits > 3 || !dot || !start || !end {\n        return\
    \ \"No\".to_string();\n    }\n    \"Yes\".to_string()", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut valid_extensions = vec![\"txt\"\
    , \"exe\", \"dll\"];\n    let mut valid_extension = false;\n    let mut valid_name\
    \ = false;\n    let mut valid_name_count = 0;\n    let mut valid_extension_count\
    \ = 0;\n    let mut valid_file_name = false;\n    let mut valid_file_name_count\
    \ = 0;\n    let mut valid_file_name_count_2 = 0;\n    let mut valid_file_name_count_3\
    \ = 0;\n    let mut valid_file_name_count_4 = 0;\n    let mut valid_file_name_count_5\
    \ = 0;\n    let mut valid_file_name_count_6 = 0;\n    let mut valid_file_name_count_7\
    \ = 0;\n    let mut valid_file_name_count_8 = 0;\n    let mut valid_file_name_count_9\
    \ = 0;\n    let mut valid_file_name_count_10 = 0;\n    let mut valid_file_name_count_11\
    \ = 0;\n    let mut valid_file_name_count_12 = 0;\n    let mut valid_file_name_count_13\
    \ = 0;\n    let mut valid_file_name_count_14 = 0;\n    let mut valid_file_name_count_15\
    \ = 0;\n    let mut valid_file_name_count_16 = 0;\n    let mut valid_file_name_count_17\
    \ = 0;\n    let mut valid_file_name_count_18 = 0;\n    let mut valid_file_name_count_19\
    \ = 0;\n    let mut valid_file_name_count_20 = 0;\n    let mut valid_file_name_count_21\
    \ = 0;\n    let mut valid_file_name_count_22 = 0;\n    let mut valid_file_name_count_23\
    \ = 0;\n    let mut valid_file_name_count_24 = 0;\n    let mut valid_file_name_count_25\
    \ = 0;\n    let mut valid_file_name_count_26 = 0", "    let mut count = 0;\n \
    \   let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_digit\
    \ = false;\n    let mut is_letter = false;\n    let mut is_dot = false;\n    let\
    \ mut is_ext = false;\n    let mut is_empty = false;\n    let mut is_ext_valid\
    \ = false;\n    let mut is_ext_empty = false;\n    let mut is_ext_txt = false;\n\
    \    let mut is_ext_exe = false;\n    let mut is_ext_dll = false;\n    let mut\
    \ is_ext_txt_exe_dll = false;\n    let mut is_ext_txt_exe_dll_empty = false;\n\
    \    let mut is_ext_txt_exe_dll_valid = false;\n    let mut is_ext_txt_exe_dll_empty_valid\
    \ = false;\n    let mut is_ext_txt_exe_dll_empty_valid_valid = false;\n    let\
    \ mut is_ext_txt_exe_dll_empty_valid_valid_valid = false;\n    let mut is_ext_txt_exe_dll_empty_valid_valid_valid_valid\
    \ = false;\n    let mut is_ext_txt_exe_dll_empty_valid_valid_valid_valid_valid\
    \ = false;\n    let mut is_ext_txt_exe_dll_empty_valid_valid_valid_valid_valid_valid\
    \ = false;\n    let mut is_ext_txt_exe_dll_empty_valid_valid_valid_valid_valid_valid_valid\
    \ = false;\n    let mut is_ext_txt_exe_dll_empty_valid_valid_valid_valid_valid_valid_valid_valid\
    \ = false;\n    let mut is_ext_txt_exe_dll_empty_valid_valid_valid_valid_valid_valid_valid_valid_valid\
    \ = false;\n    let mut is_ext_txt_exe_dll_empty_valid_valid_valid_valid_valid_valid_valid_valid_valid_valid\
    \ = false;\n    let mut is_ext_txt_exe_dll_empty_valid_valid_valid_valid_valid_valid_valid_valid_",
  "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut valid = true;\n\
    \    let mut dot_index = 0;\n    let mut valid_extension = false;\n    let mut\
    \ valid_name = false;\n    let mut valid_number = true;\n    let mut valid_dot\
    \ = false;\n    let mut valid_extension_count = 0;\n    let mut valid_name_count\
    \ = 0;\n    let mut valid_number_count = 0;\n    let mut valid_dot_count = 0;\n\
    \    let mut valid_extension_index = 0;\n    let mut valid_name_index = 0;\n \
    \   let mut valid_number_index = 0;\n    let mut valid_dot_index = 0;\n    let\
    \ mut valid_extension_index_end = 0;\n    let mut valid_name_index_end = 0;\n\
    \    let mut valid_number_index_end = 0;\n    let mut valid_dot_index_end = 0;\n\
    \    let mut valid_extension_index_start = 0;\n    let mut valid_name_index_start\
    \ = 0;\n    let mut valid_number_index_start = 0;\n    let mut valid_dot_index_start\
    \ = 0;\n    let mut valid_extension_index_start_end = 0;\n    let mut valid_name_index_start_end\
    \ = 0;\n    let mut valid_number_index_start_end = 0;\n    let mut valid_dot_index_start_end\
    \ = 0;\n    let mut valid_extension_index_end_start = 0;\n    let mut valid_name_index_end_start\
    \ = 0;\n    let mut valid_number_index_end_start = 0;\n    let mut valid_dot_index_end_start\
    \ = 0;\n    let mut valid_extension_index_end_end = 0;\n    let mut valid_name_index_end_end\
    \ = 0;\n    let mut valid_number_index_end_end = 0;\n    let mut valid_dot_index_end_end\
    \ = 0;\n    let mut valid_extension_index_start_start = 0;\n    let mut valid_name_index_start",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut first_char\
    \ = true;\n    let mut first_char_is_letter = false;\n    let mut after_dot =\
    \ false;\n    let mut after_dot_is_valid = false;\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            after_dot = true;\n\
    \        }\n        if first_char {\n            first_char = false;\n       \
    \     first_char_is_letter = c.is_alphabetic();\n        }\n        if after_dot\
    \ {\n            if c == 't' {\n                after_dot_is_valid = true;\n \
    \           } else if c == 'x' && after_dot_is_valid {\n                after_dot_is_valid\
    \ = true;\n            } else if c == 'e' && after_dot_is_valid {\n          \
    \      after_dot_is_valid = true;\n            } else if c == 'd' && after_dot_is_valid\
    \ {\n                after_dot_is_valid = true;\n            } else if c == 'l'\
    \ && after_dot_is_valid {\n                after_dot_is_valid = true;\n      \
    \      } else {\n                after_dot_is_valid = false;\n            }\n\
    \        }\n    }\n    if digits_count > 3 || dot_count != 1 || !first_char_is_letter\
    \ || !after_dot_is_valid {\n        return String::from(\"No\");\n    }\n    return\
    \ String::from(\"Yes\");", "    let mut count = 0;\n    let mut dot_count = 0;\n\
    \    let mut is_valid = true;\n    let mut is_valid_extension = false;\n    let\
    \ mut is_valid_name = false;\n    let mut name = String::new();\n    let mut extension\
    \ = String::new();\n    for c in file_name.chars() {\n        if c == '.' {\n\
    \            dot_count += 1;\n            continue;\n        }\n        if dot_count\
    \ == 0 {\n            name.push(c);\n        } else {\n            extension.push(c);\n\
    \        }\n        if c.is_digit(10) {\n            count += 1;\n        }\n\
    \    }\n    if count > 3 {\n        is_valid = false;\n    }\n    if dot_count\
    \ != 1 {\n        is_valid = false;\n    }\n    if name.len() > 0 {\n        if\
    \ name.chars().next().unwrap().is_alphabetic() {\n            is_valid_name =\
    \ true;\n        }\n    }\n    if extension == \"txt\" || extension == \"exe\"\
    \ || extension == \"dll\" {\n        is_valid_extension = true;\n    }\n    if\
    \ is_valid && is_valid_name && is_valid_extension {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digits = 0;\n\
    \    let mut dot = false;\n    let mut latin = false;\n    let mut extension =\
    \ false;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n    \
    \        digits += 1;\n        } else if c == '.' {\n            dot = true;\n\
    \        } else if c.is_alphabetic() {\n            latin = true;\n        } else\
    \ if c == 't' || c == 'e' || c == 'x' || c == 'd' {\n            extension = true;\n\
    \        }\n    }\n    if digits > 3 || !dot || !latin || !extension {\n     \
    \   return String::from(\"No\");\n    }\n    return String::from(\"Yes\");", " \
    \   let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut first_letter\
    \ = false;\n    let mut last_three_letters = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n        }\n        if !first_letter\
    \ && c.is_alphabetic() {\n            first_letter = true;\n        }\n      \
    \  if c.is_alphabetic() {\n            last_three_letters.push(c);\n        }\n\
    \    }\n    if digits_count > 3 || dot_count != 1 || !first_letter || last_three_letters.len()\
    \ < 4 {\n        return String::from(\"No\");\n    }\n    let last_three_letters\
    \ = last_three_letters.chars().rev().take(3).collect::<String>();\n    if last_three_letters\
    \ != \"txt\" && last_three_letters != \"exe\" && last_three_letters != \"dll\"\
    \ {\n        return String::from(\"No\");\n    }\n    return String::from(\"Yes\"\
    );", "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_valid_extension = false;\n    let mut is_valid_substring\
    \ = false;\n    let mut is_valid_substring_count = 0;\n    let mut is_valid_substring_count_dot\
    \ = 0;\n    let mut is_valid_substring_count_dot_count = 0;\n    let mut is_valid_substring_count_dot_count_count\
    \ = 0;\n    let mut is_valid_substring_count_dot_count_count_count = 0;\n    let\
    \ mut is_valid_substring_count_dot_count_count_count_count = 0;\n    let mut is_valid_substring_count_dot_count_count_count_count_count\
    \ = 0;\n    let mut is_valid_substring_count_dot_count_count_count_count_count_count\
    \ = 0;\n    let mut is_valid_substring_count_dot_count_count_count_count_count_count_count\
    \ = 0;\n    let mut is_valid_substring_count_dot_count_count_count_count_count_count_count_count\
    \ = 0;\n    let mut is_valid_substring_count_dot_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    let mut is_valid_substring_count_dot_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    let mut is_valid_substring_count_dot_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    let mut is_valid_substring_count_dot_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    let mut is_valid_substring_count_dot_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    let mut is_valid_substring_count_dot_count_count_count_count_", " \
    \   let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut valid_extension\
    \ = false;\n    let mut valid_name = false;\n    let mut valid_name_start = false;\n\
    \    let mut valid_name_end = false;\n    let mut valid_name_middle = false;\n\
    \    let mut valid_extension_start = false;\n    let mut valid_extension_end =\
    \ false;\n    let mut valid_extension_middle = false;\n    let mut valid_extension_length\
    \ = false;\n    let mut valid_name_length = false;\n    let mut valid_name_length_start\
    \ = false;\n    let mut valid_name_length_end = false;\n    let mut valid_name_length_middle\
    \ = false;\n    let mut valid_extension_length_start = false;\n    let mut valid_extension_length_end\
    \ = false;\n    let mut valid_extension_length_middle = false;\n    let mut valid_name_length_start_count\
    \ = 0;\n    let mut valid_name_length_end_count = 0;\n    let mut valid_name_length_middle_count\
    \ = 0;\n    let mut valid_extension_length_start_count = 0;\n    let mut valid_extension_length_end_count\
    \ = 0;\n    let mut valid_extension_length_middle_count = 0;\n    let mut valid_name_length_start_count_max\
    \ = 0;\n    let mut valid_name_length_end_count_max = 0;\n    let mut valid_name_length_middle_count_max\
    \ = 0;\n    let mut valid_extension_length_start_count_max = 0;\n    let mut valid_extension_length_end_count_max\
    \ = 0;\n    let mut valid_extension_length_middle_count_max = 0;\n    let mut\
    \ valid_name_length_start_count_min = 0;\n    let mut valid_name_length_end_count_min\
    \ = 0;\n    let mut valid_name_length_middle_count_min = 0;\n    let mut valid_extension_length_start_count_min\
    \ = 0;\n", "    let mut digits = 0;\n    let mut dot = false;\n    let mut after_dot\
    \ = false;\n    let mut before_dot = false;\n    let mut before_dot_letter = false;\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits\
    \ += 1;\n        }\n        if c == '.' {\n            dot = true;\n         \
    \   after_dot = true;\n        }\n        if !after_dot {\n            if c.is_alphabetic()\
    \ {\n                before_dot_letter = true;\n            }\n            if\
    \ c != '.' {\n                before_dot = true;\n            }\n        }\n \
    \   }\n    if digits > 3 || !dot || !before_dot || !before_dot_letter {\n    \
    \    return \"No\".to_string();\n    }\n    let after_dot_string = &file_name[file_name.find('.').unwrap()+1..];\n\
    \    if after_dot_string == \"txt\" || after_dot_string == \"exe\" || after_dot_string\
    \ == \"dll\" {\n        return \"Yes\".to_string();\n    }\n    return \"No\"\
    .to_string();", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n \
    \   let mut is_valid = true;\n    let mut is_first_letter = true;\n    let mut\
    \ extension = String::new();\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            is_first_letter = true;\n        }\n     \
    \   if is_first_letter {\n            if c.is_alphabetic() {\n               \
    \ is_first_letter = false;\n            } else {\n                is_valid = false;\n\
    \                break;\n            }\n        }\n        if dot_count == 1 {\n\
    \            extension.push(c);\n        }\n    }\n    if digits_count > 3 ||\
    \ dot_count != 1 || !is_valid || extension != \".txt\" && extension != \".exe\"\
    \ && extension != \".dll\" {\n        return String::from(\"No\");\n    }\n  \
    \  return String::from(\"Yes\");", "    let mut digits_count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut is_valid = true;\n    let mut is_empty = true;\n\
    \    let mut is_latin = false;\n    let mut is_extension = false;\n    let mut\
    \ extension = String::new();\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n        }\n        if c.is_alphabetic() {\n          \
    \  is_empty = false;\n            if c.is_ascii_alphabetic() {\n             \
    \   is_latin = true;\n            }\n        }\n    }\n    if digits_count > 3\
    \ || dot_count != 1 || !is_latin || is_empty {\n        is_valid = false;\n  \
    \  }\n    if is_valid {\n        let mut extension_start = 0;\n        for (i,\
    \ c) in file_name.chars().enumerate() {\n            if c == '.' {\n         \
    \       extension_start = i + 1;\n            }\n        }\n        for c in file_name.chars().skip(extension_start)\
    \ {\n            extension.push(c);\n        }\n        if extension == \"txt\"\
    \ || extension == \"exe\" || extension == \"dll\" {\n            is_extension\
    \ = true;\n        }\n    }\n    if is_valid && is_extension {\n        \"Yes\"\
    .to_string()\n    } else {\n        \"No\".to_string()\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut latin_letter_count = 0;\n    let\
    \ mut latin_letter_index = 0;\n    let mut dot_index = 0;\n    let mut extension\
    \ = String::new();\n    for (i, c) in file_name.chars().enumerate() {\n      \
    \  if c.is_digit(10) {\n            digits_count += 1;\n        } else if c ==\
    \ '.' {\n            dot_count += 1;\n            dot_index = i;\n        } else\
    \ if c.is_alphabetic() {\n            latin_letter_count += 1;\n            latin_letter_index\
    \ = i;\n        }\n    }\n    if digits_count > 3 || dot_count != 1 || latin_letter_count\
    \ != 1 || latin_letter_index == 0 {\n        return String::from(\"No\");\n  \
    \  }\n    extension = file_name.chars().skip(dot_index + 1).collect();\n    if\
    \ extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n   \
    \     return String::from(\"Yes\");\n    }\n    return String::from(\"No\");",
  "    let mut digits = 0;\n    let mut dot = false;\n    let mut latin = false;\n\
    \    let mut extension = false;\n    for c in file_name.chars() {\n        if\
    \ c.is_digit(10) {\n            digits += 1;\n        } else if c == '.' {\n \
    \           dot = true;\n        } else if c.is_alphabetic() {\n            latin\
    \ = true;\n        } else if c == 't' || c == 'e' || c == 'x' || c == 'd' {\n\
    \            extension = true;\n        }\n    }\n    if digits > 3 || !dot ||\
    \ !latin || !extension {\n        \"No\".to_string()\n    } else {\n        \"\
    Yes\".to_string()\n    }", "    let mut count = 0;\n    let mut dot_count = 0;\n\
    \    let mut is_valid = true;\n    let mut is_digit = false;\n    let mut is_alpha\
    \ = false;\n    let mut is_dot = false;\n    let mut is_txt = false;\n    let\
    \ mut is_exe = false;\n    let mut is_dll = false;\n    let mut is_empty = false;\n\
    \    let mut is_empty_after_dot = false;\n    let mut is_empty_before_dot = false;\n\
    \    let mut is_empty_after_dot_count = 0;\n    let mut is_empty_before_dot_count\
    \ = 0;\n    let mut is_empty_count = 0;\n    let mut is_dot_count = 0;\n    let\
    \ mut is_alpha_count = 0;\n    let mut is_digit_count = 0;\n    let mut is_txt_count\
    \ = 0;\n    let mut is_exe_count = 0;\n    let mut is_dll_count = 0;\n    let\
    \ mut is_txt_count_after_dot = 0;\n    let mut is_exe_count_after_dot = 0;\n \
    \   let mut is_dll_count_after_dot = 0;\n    let mut is_txt_count_before_dot =\
    \ 0;\n    let mut is_exe_count_before_dot = 0;\n    let mut is_dll_count_before_dot\
    \ = 0;\n    let mut is_txt_count_after_dot_count = 0;\n    let mut is_exe_count_after_dot_count\
    \ = 0;\n    let mut is_dll_count_after_dot_count = 0;\n    let mut is_txt_count_before_dot_count\
    \ = 0;\n    let mut is_exe_count_before_dot_count = 0;\n    let mut is_dll_count_before_dot_count\
    \ = 0;\n    let mut is_txt_count_after_dot_count_count = 0;\n    let mut is_exe_count_after_dot_count_count\
    \ = 0;\n    let mut is_dll_count_after_dot_count_count = 0;\n    let mut is_",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_before_dot = true;\n    let mut is_after_dot = false;\n\
    \    let mut is_first_letter = true;\n    let mut is_first_letter_valid = false;\n\
    \    let mut is_after_dot_valid = false;\n    let mut is_after_dot_valid_count\
    \ = 0;\n    let mut is_after_dot_valid_txt = false;\n    let mut is_after_dot_valid_exe\
    \ = false;\n    let mut is_after_dot_valid_dll = false;\n    let mut is_after_dot_valid_txt_count\
    \ = 0;\n    let mut is_after_dot_valid_exe_count = 0;\n    let mut is_after_dot_valid_dll_count\
    \ = 0;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n      \
    \      digits_count += 1;\n            if digits_count > 3 {\n               \
    \ is_valid = false;\n                break;\n            }\n        }\n      \
    \  if c == '.' {\n            dot_count += 1;\n            if dot_count > 1 {\n\
    \                is_valid = false;\n                break;\n            }\n  \
    \          is_before_dot = false;\n            is_after_dot = true;\n        }\n\
    \        if is_before_dot {\n            if is_first_letter {\n              \
    \  if c.is_alphabetic() {\n                    is_first_letter_valid = true;\n\
    \                    is_first_letter = false;\n                } else {\n    \
    \                is_valid = false;\n                    break;\n             \
    \   }\n            }\n        }\n        if is_after_dot {\n            if is_after_dot_valid_count\
    \ == 0 {\n                if c == 't' {\n                    is_after_dot_valid_txt\
    \ = true;\n                    is_after_dot_valid_txt_count += 1;\n          \
    \          is_after_dot_valid_count += 1;\n                } else if c == 'e'\
    \ {\n                    is_after_dot_valid_exe =", "    let mut count = 0;\n\
    \    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_digit\
    \ = false;\n    let mut is_letter = false;\n    let mut is_dot = false;\n    let\
    \ mut is_ext = false;\n    let mut is_empty = false;\n    let mut is_txt = false;\n\
    \    let mut is_exe = false;\n    let mut is_dll = false;\n    let mut is_first_letter\
    \ = false;\n    let mut is_first_digit = false;\n    let mut is_first_dot = false;\n\
    \    let mut is_first_ext = false;\n    let mut is_first_empty = false;\n    let\
    \ mut is_first_txt = false;\n    let mut is_first_exe = false;\n    let mut is_first_dll\
    \ = false;\n    let mut is_second_letter = false;\n    let mut is_second_digit\
    \ = false;\n    let mut is_second_dot = false;\n    let mut is_second_ext = false;\n\
    \    let mut is_second_empty = false;\n    let mut is_second_txt = false;\n  \
    \  let mut is_second_exe = false;\n    let mut is_second_dll = false;\n    let\
    \ mut is_third_letter = false;\n    let mut is_third_digit = false;\n    let mut\
    \ is_third_dot = false;\n    let mut is_third_ext = false;\n    let mut is_third_empty\
    \ = false;\n    let mut is_third_txt = false;\n    let mut is_third_exe = false;\n\
    \    let mut is_third_dll = false;\n    let mut is_fourth_letter = false;\n  \
    \  let mut is_fourth_digit = false;\n    let mut is_fourth_dot = false;\n    let\
    \ mut is_fourth_ext = false;\n    let mut is_fourth_empty = false;\n    let mut\
    \ is_fourth_txt = false;\n    let mut is_fourth_exe = false;\n    let mut is_fourth_dll\
    \ = false;\n    let mut is_fifth_letter = false;\n    let mut is_fifth_", "  \
    \  let mut count = 0;\n    let mut dot_count = 0;\n    let mut latin_count = 0;\n\
    \    let mut latin_flag = false;\n    let mut dot_flag = false;\n    let mut latin_flag_after_dot\
    \ = false;\n    let mut latin_count_after_dot = 0;\n    let mut latin_flag_before_dot\
    \ = false;\n    let mut latin_count_before_dot = 0;\n    let mut latin_flag_after_dot_txt\
    \ = false;\n    let mut latin_flag_after_dot_exe = false;\n    let mut latin_flag_after_dot_dll\
    \ = false;\n    let mut latin_count_after_dot_txt = 0;\n    let mut latin_count_after_dot_exe\
    \ = 0;\n    let mut latin_count_after_dot_dll = 0;\n    let mut latin_flag_before_dot_txt\
    \ = false;\n    let mut latin_flag_before_dot_exe = false;\n    let mut latin_flag_before_dot_dll\
    \ = false;\n    let mut latin_count_before_dot_txt = 0;\n    let mut latin_count_before_dot_exe\
    \ = 0;\n    let mut latin_count_before_dot_dll = 0;\n    let mut latin_flag_after_dot_txt_exe\
    \ = false;\n    let mut latin_flag_after_dot_txt_dll = false;\n    let mut latin_flag_after_dot_exe_dll\
    \ = false;\n    let mut latin_count_after_dot_txt_exe = 0;\n    let mut latin_count_after_dot_txt_dll\
    \ = 0;\n    let mut latin_count_after_dot_exe_dll = 0;\n    let mut latin_flag_before_dot_txt_exe\
    \ = false;\n    let mut latin_flag_before_dot_txt_dll = false;\n    let mut latin_flag_before_dot_exe_dll\
    \ = false;\n    let mut latin_count_before_dot_txt_exe = 0;\n    let mut latin_count",
  "    let mut digits = 0;\n    let mut dot = false;\n    let mut before_dot = false;\n\
    \    let mut after_dot = false;\n    for c in file_name.chars() {\n        if\
    \ c.is_digit(10) {\n            digits += 1;\n        } else if c == '.' {\n \
    \           dot = true;\n        } else if c.is_alphabetic() {\n            if\
    \ dot {\n                after_dot = true;\n            } else {\n           \
    \     before_dot = true;\n            }\n        }\n    }\n    if digits > 3 ||\
    \ !dot || !before_dot || !after_dot {\n        return \"No\".to_string();\n  \
    \  }\n    let ext = &file_name[file_name.rfind('.').unwrap() + 1..];\n    if ext\
    \ == \"txt\" || ext == \"exe\" || ext == \"dll\" {\n        return \"Yes\".to_string();\n\
    \    }\n    \"No\".to_string()", "    let mut dot_count = 0;\n    let mut digit_count\
    \ = 0;\n    let mut first_letter = false;\n    let mut extension = false;\n  \
    \  let mut extension_count = 0;\n    let mut extension_str = String::new();\n\
    \    for c in file_name.chars() {\n        if c == '.' {\n            dot_count\
    \ += 1;\n            extension = true;\n        } else if c.is_digit(10) {\n \
    \           digit_count += 1;\n        } else if c.is_alphabetic() {\n       \
    \     if !first_letter {\n                first_letter = true;\n            }\n\
    \            if extension {\n                extension_str.push(c);\n        \
    \        extension_count += 1;\n            }\n        }\n    }\n    if dot_count\
    \ != 1 || digit_count > 3 || !first_letter || extension_count == 0 {\n       \
    \ return String::from(\"No\");\n    }\n    if extension_str == \"txt\" || extension_str\
    \ == \"exe\" || extension_str == \"dll\" {\n        return String::from(\"Yes\"\
    );\n    }\n    return String::from(\"No\");", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut valid_extension = false;\n    let mut\
    \ valid_name = false;\n    let mut name_started = false;\n    let mut extension_started\
    \ = false;\n    let mut extension = String::new();\n    let mut name = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \       extension_started = true;\n        }\n        if c.is_alphabetic() {\n\
    \            name_started = true;\n        }\n        if name_started && !extension_started\
    \ {\n            name.push(c);\n        }\n        if extension_started {\n  \
    \          extension.push(c);\n        }\n    }\n    if digits_count <= 3 && dot_count\
    \ == 1 && name_started && extension_started {\n        valid_name = true;\n  \
    \  }\n    if extension == \".txt\" || extension == \".exe\" || extension == \"\
    .dll\" {\n        valid_extension = true;\n    }\n    if valid_name && valid_extension\
    \ {\n        return \"Yes\".to_string();\n    }\n    return \"No\".to_string();",
  '    unimplemented!()', "    let mut digits = 0;\n    let mut dot = false;\n   \
    \ let mut first_letter = false;\n    let mut extension = false;\n    for c in\
    \ file_name.chars() {\n        if c.is_digit(10) {\n            digits += 1;\n\
    \        } else if c == '.' {\n            dot = true;\n        } else if c.is_alphabetic()\
    \ {\n            if !first_letter {\n                first_letter = true;\n  \
    \          } else {\n                extension = true;\n            }\n      \
    \  }\n    }\n    if digits > 3 || !dot || !first_letter || !extension {\n    \
    \    return \"No\".to_string();\n    }\n    \"Yes\".to_string()", "    let mut\
    \ digits = 0;\n    let mut dot = false;\n    let mut first_letter = false;\n \
    \   let mut extension = false;\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits += 1;\n        } else if c == '.' {\n            dot =\
    \ true;\n        } else if c.is_alphabetic() {\n            if !first_letter {\n\
    \                first_letter = true;\n            } else {\n                extension\
    \ = true;\n            }\n        }\n    }\n    if digits > 3 || !dot || !first_letter\
    \ || !extension {\n        return \"No\".to_string();\n    }\n    \"Yes\".to_string()",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut valid_extension\
    \ = false;\n    let mut valid_name = false;\n    let mut extension = String::new();\n\
    \    let mut name = String::new();\n    for c in file_name.chars() {\n       \
    \ if c.is_digit(10) {\n            digits_count += 1;\n        }\n        if c\
    \ == '.' {\n            dot_count += 1;\n        }\n    }\n    if dot_count ==\
    \ 1 {\n        let mut split = file_name.split('.');\n        name = split.next().unwrap().to_string();\n\
    \        extension = split.next().unwrap().to_string();\n        if name.len()\
    \ > 0 && name.chars().next().unwrap().is_alphabetic() {\n            valid_name\
    \ = true;\n        }\n        if extension == \"txt\" || extension == \"exe\"\
    \ || extension == \"dll\" {\n            valid_extension = true;\n        }\n\
    \    }\n    if digits_count <= 3 && valid_extension && valid_name {\n        return\
    \ \"Yes\".to_string();\n    }\n    \"No\".to_string()", "    let mut digits =\
    \ 0;\n    let mut dot = false;\n    let mut extension = false;\n    let mut latin\
    \ = false;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n  \
    \          digits += 1;\n        } else if c == '.' {\n            dot = true;\n\
    \        } else if c.is_alphabetic() {\n            latin = true;\n        }\n\
    \    }\n    if digits > 3 || !dot || !latin {\n        return \"No\".to_string();\n\
    \    }\n    let mut extension_check = false;\n    for ext in [\"txt\", \"exe\"\
    , \"dll\"].iter() {\n        if file_name.ends_with(ext) {\n            extension_check\
    \ = true;\n        }\n    }\n    if extension_check {\n        return \"Yes\"\
    .to_string();\n    }\n    \"No\".to_string()", "    let mut count = 0;\n    let\
    \ mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_digit = false;\n\
    \    let mut is_dot = false;\n    let mut is_letter = false;\n    let mut is_extension\
    \ = false;\n    let mut is_empty = false;\n    let mut extension = String::new();\n\
    \    let mut file_name_chars = file_name.chars();\n    let mut first_char = file_name_chars.next();\n\
    \    while let Some(c) = first_char {\n        if c.is_digit(10) {\n         \
    \   is_digit = true;\n            count += 1;\n        }\n        if c == '.'\
    \ {\n            is_dot = true;\n            dot_count += 1;\n        }\n    \
    \    if c.is_alphabetic() {\n            is_letter = true;\n        }\n      \
    \  first_char = file_name_chars.next();\n    }\n    if count > 3 {\n        is_valid\
    \ = false;\n    }\n    if dot_count != 1 {\n        is_valid = false;\n    }\n\
    \    if !is_letter {\n        is_valid = false;\n    }\n    if !is_dot {\n   \
    \     is_valid = false;\n    }\n    if !is_digit {\n        is_valid = false;\n\
    \    }\n    if is_valid {\n        let mut file_name_chars = file_name.chars();\n\
    \        let mut first_char = file_name_chars.next();\n        while let Some(c)\
    \ = first_char {\n            if c == '.' {\n                break;\n        \
    \    }\n            first_char = file_name_chars.next();\n        }\n        while\
    \ let Some(c) = first_char {\n            if c == '.' {\n                is_empty\
    \ = true;\n            }\n            extension.push(c);\n            first_char\
    \ = file_name_chars.next();\n        }\n        if is_empty {\n            is_valid\
    \ = false;\n        }\n        if extension == \".txt\" || extension == \".exe\"\
    \ || extension == \".dll\"", "    let mut count = 0;\n    let mut dot_count =\
    \ 0;\n    let mut dot_index = 0;\n    let mut valid = true;\n    let mut valid_extension\
    \ = false;\n    let mut valid_name = false;\n    let mut valid_digits = true;\n\
    \    let mut valid_dot = false;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            count += 1;\n        }\n       \
    \ if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n   \
    \     }\n    }\n    if count > 3 {\n        valid_digits = false;\n    }\n   \
    \ if dot_count == 1 {\n        valid_dot = true;\n    }\n    if dot_index > 0\
    \ {\n        let name = &file_name[0..dot_index];\n        let extension = &file_name[dot_index\
    \ + 1..];\n        if name.chars().next().unwrap().is_alphabetic() {\n       \
    \     valid_name = true;\n        }\n        if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\" {\n            valid_extension = true;\n\
    \        }\n    }\n    if !valid_digits || !valid_dot || !valid_name || !valid_extension\
    \ {\n        valid = false;\n    }\n    if valid {\n        return \"Yes\".to_string();\n\
    \    } else {\n        return \"No\".to_string();\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut latin_letter_count = 0;\n    let\
    \ mut latin_letter_index = 0;\n    let mut dot_index = 0;\n    let mut extension_index\
    \ = 0;\n    let mut extension_length = 0;\n    let mut extension = String::new();\n\
    \    let mut result = String::from(\"No\");\n    let mut i = 0;\n    while i <\
    \ file_name.len() {\n        if file_name.chars().nth(i).unwrap().is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if file_name.chars().nth(i).unwrap()\
    \ == '.' {\n            dot_count += 1;\n            dot_index = i;\n        }\
    \ else if file_name.chars().nth(i).unwrap().is_alphabetic() {\n            latin_letter_count\
    \ += 1;\n            latin_letter_index = i;\n        }\n        i += 1;\n   \
    \ }\n    if digits_count <= 3 && dot_count == 1 && latin_letter_count >= 1 &&\
    \ latin_letter_index == 0 {\n        extension_index = dot_index + 1;\n      \
    \  extension_length = file_name.len() - extension_index;\n        extension =\
    \ file_name.chars().skip(extension_index).take(extension_length).collect();\n\
    \        if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n            result = String::from(\"Yes\");\n        }\n    }\n    result",
  "    let mut digits = 0;\n    let mut dot = false;\n    let mut latin = false;\n\
    \    let mut extension = false;\n    for c in file_name.chars() {\n        if\
    \ c.is_digit(10) {\n            digits += 1;\n        } else if c == '.' {\n \
    \           dot = true;\n        } else if c.is_ascii_alphabetic() {\n       \
    \     latin = true;\n        } else if c == 't' {\n            extension = true;\n\
    \        } else if c == 'x' {\n            extension = true;\n        } else if\
    \ c == 'e' {\n            extension = true;\n        } else if c == 'd' {\n  \
    \          extension = true;\n        } else if c == 'l' {\n            extension\
    \ = true;\n        }\n    }\n    if digits > 3 {\n        return \"No\".to_string();\n\
    \    }\n    if !dot {\n        return \"No\".to_string();\n    }\n    if !latin\
    \ {\n        return \"No\".to_string();\n    }\n    if !extension {\n        return\
    \ \"No\".to_string();\n    }\n    \"Yes\".to_string()", "    let mut digits =\
    \ 0;\n    let mut dot = false;\n    let mut first_letter = false;\n    let mut\
    \ extension = false;\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits += 1;\n        } else if c == '.' {\n            dot =\
    \ true;\n        } else if c.is_alphabetic() {\n            if !first_letter {\n\
    \                first_letter = true;\n            } else {\n                extension\
    \ = true;\n            }\n        }\n    }\n    if digits > 3 || !dot || !first_letter\
    \ || !extension {\n        return \"No\".to_string();\n    }\n    \"Yes\".to_string()",
  "    let mut digits = 0;\n    let mut dot = false;\n    let mut before_dot = false;\n\
    \    let mut after_dot = false;\n    for c in file_name.chars() {\n        if\
    \ c.is_digit(10) {\n            digits += 1;\n        } else if c == '.' {\n \
    \           dot = true;\n        } else if c.is_alphabetic() {\n            if\
    \ dot {\n                after_dot = true;\n            } else {\n           \
    \     before_dot = true;\n            }\n        }\n    }\n    if digits > 3 ||\
    \ !dot || !before_dot || !after_dot {\n        return \"No\".to_string();\n  \
    \  }\n    let mut after_dot_str = String::new();\n    let mut after_dot_str_iter\
    \ = file_name.split('.');\n    after_dot_str_iter.next();\n    after_dot_str =\
    \ after_dot_str_iter.next().unwrap().to_string();\n    if after_dot_str != \"\
    txt\" && after_dot_str != \"exe\" && after_dot_str != \"dll\" {\n        return\
    \ \"No\".to_string();\n    }\n    \"Yes\".to_string()", '    unimplemented!()',
  "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut latin_count = 0;\n\
    \    let mut latin_flag = false;\n    let mut dot_flag = false;\n    let mut latin_flag_after_dot\
    \ = false;\n    let mut latin_count_after_dot = 0;\n    let mut latin_flag_before_dot\
    \ = false;\n    let mut latin_count_before_dot = 0;\n    let mut latin_flag_after_dot_txt\
    \ = false;\n    let mut latin_flag_after_dot_exe = false;\n    let mut latin_flag_after_dot_dll\
    \ = false;\n    let mut latin_count_after_dot_txt = 0;\n    let mut latin_count_after_dot_exe\
    \ = 0;\n    let mut latin_count_after_dot_dll = 0;\n    let mut latin_flag_before_dot_txt\
    \ = false;\n    let mut latin_flag_before_dot_exe = false;\n    let mut latin_flag_before_dot_dll\
    \ = false;\n    let mut latin_count_before_dot_txt = 0;\n    let mut latin_count_before_dot_exe\
    \ = 0;\n    let mut latin_count_before_dot_dll = 0;\n    let mut latin_flag_after_dot_txt_exe\
    \ = false;\n    let mut latin_flag_after_dot_txt_dll = false;\n    let mut latin_flag_after_dot_exe_dll\
    \ = false;\n    let mut latin_count_after_dot_txt_exe = 0;\n    let mut latin_count_after_dot_txt_dll\
    \ = 0;\n    let mut latin_count_after_dot_exe_dll = 0;\n    let mut latin_flag_before_dot_txt_exe\
    \ = false;\n    let mut latin_flag_before_dot_txt_dll = false;\n    let mut latin_flag_before_dot_exe_dll\
    \ = false;\n    let mut latin_count_before_dot_txt_exe = 0;\n    let mut latin_count",
  "    let mut digits = 0;\n    let mut dot = false;\n    let mut has_letter = false;\n\
    \    let mut has_extension = false;\n    for c in file_name.chars() {\n      \
    \  if c.is_digit(10) {\n            digits += 1;\n        } else if c == '.' {\n\
    \            dot = true;\n        } else if c.is_alphabetic() {\n            has_letter\
    \ = true;\n        } else if c == 't' || c == 'e' || c == 'x' || c == 'd' {\n\
    \            has_extension = true;\n        }\n    }\n    if digits > 3 || !dot\
    \ || !has_letter || !has_extension {\n        return String::from(\"No\");\n \
    \   }\n    String::from(\"Yes\")", "    let mut digits_count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut has_letter = false;\n    let mut has_dot = false;\n\
    \    let mut has_extension = false;\n    let mut extension = String::new();\n\
    \    let mut name = String::new();\n    for c in file_name.chars() {\n       \
    \ if c.is_digit(10) {\n            digits_count += 1;\n        } else if c ==\
    \ '.' {\n            dot_count += 1;\n            has_dot = true;\n        } else\
    \ if c.is_alphabetic() {\n            has_letter = true;\n        }\n    }\n \
    \   if has_dot {\n        let parts: Vec<&str> = file_name.split('.').collect();\n\
    \        name = parts[0].to_string();\n        extension = parts[1].to_string();\n\
    \        if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n            has_extension = true;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 || !has_letter || !has_dot || !has_extension {\n     \
    \   return \"No\".to_string();\n    }\n    return \"Yes\".to_string();", "   \
    \ let mut digits = 0;\n    let mut dot = false;\n    let mut valid_extension =\
    \ false;\n    let mut valid_name = false;\n    let mut extension = String::new();\n\
    \    let mut name = String::new();\n    for c in file_name.chars() {\n       \
    \ if c == '.' {\n            dot = true;\n            continue;\n        }\n \
    \       if c.is_digit(10) {\n            digits += 1;\n        }\n        if !dot\
    \ {\n            name.push(c);\n        } else {\n            extension.push(c);\n\
    \        }\n    }\n    if digits > 3 {\n        return String::from(\"No\");\n\
    \    }\n    if !dot {\n        return String::from(\"No\");\n    }\n    if name.is_empty()\
    \ {\n        return String::from(\"No\");\n    }\n    if !name.chars().next().unwrap().is_alphabetic()\
    \ {\n        return String::from(\"No\");\n    }\n    if extension == \"txt\"\
    \ || extension == \"exe\" || extension == \"dll\" {\n        valid_extension =\
    \ true;\n    }\n    if valid_extension {\n        return String::from(\"Yes\"\
    );\n    }\n    return String::from(\"No\");", "    let mut count = 0;\n    let\
    \ mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_digit = false;\n\
    \    let mut is_letter = false;\n    let mut is_dot = false;\n    let mut is_extension\
    \ = false;\n    let mut extension = String::new();\n    let mut name = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            count\
    \ += 1;\n            is_digit = true;\n        }\n        if c == '.' {\n    \
    \        dot_count += 1;\n            is_dot = true;\n        }\n        if c.is_alphabetic()\
    \ {\n            is_letter = true;\n        }\n    }\n    if count > 3 || dot_count\
    \ != 1 || !is_digit || !is_letter || !is_dot {\n        is_valid = false;\n  \
    \  }\n    let mut extension_vec: Vec<&str> = file_name.split('.').collect();\n\
    \    extension = extension_vec.pop().unwrap().to_string();\n    name = extension_vec.pop().unwrap().to_string();\n\
    \    if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \        is_extension = true;\n    }\n    if is_valid && is_extension {\n    \
    \    return \"Yes\".to_string();\n    }\n    \"No\".to_string()", "    let mut\
    \ count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let\
    \ mut is_digit = false;\n    let mut is_letter = false;\n    let mut is_dot =\
    \ false;\n    let mut is_extension = false;\n    let mut extension = String::new();\n\
    \    let mut name = String::new();\n    let mut extension_list = vec![\"txt\"\
    , \"exe\", \"dll\"];\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            count += 1;\n            is_digit = true;\n        }\n      \
    \  if c == '.' {\n            dot_count += 1;\n            is_dot = true;\n  \
    \      }\n        if c.is_alphabetic() {\n            is_letter = true;\n    \
    \    }\n    }\n    if count > 3 || dot_count != 1 || !is_digit || !is_letter ||\
    \ !is_dot {\n        is_valid = false;\n    }\n    if is_valid {\n        let\
    \ mut is_name = true;\n        for c in file_name.chars() {\n            if c\
    \ == '.' {\n                is_name = false;\n            }\n            if is_name\
    \ {\n                name.push(c);\n            } else {\n                extension.push(c);\n\
    \            }\n        }\n        for ext in extension_list {\n            if\
    \ ext == &extension {\n                is_extension = true;\n            }\n \
    \       }\n        if is_extension {\n            return \"Yes\".to_string();\n\
    \        }\n    }\n    \"No\".to_string()", "    let mut count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut first_char = true;\n    let mut first_char_is_letter\
    \ = false;\n    let mut first_char_is_digit = false;\n    let mut after_dot =\
    \ false;\n    let mut after_dot_is_valid = false;\n    for c in file_name.chars()\
    \ {\n        if c == '.' {\n            dot_count += 1;\n            after_dot\
    \ = true;\n            continue;\n        }\n        if after_dot {\n        \
    \    if c == 't' {\n                after_dot_is_valid = true;\n            }\
    \ else if c == 'x' && after_dot_is_valid {\n                after_dot_is_valid\
    \ = true;\n            } else if c == 'e' && after_dot_is_valid {\n          \
    \      after_dot_is_valid = true;\n            } else if c == 'd' && after_dot_is_valid\
    \ {\n                after_dot_is_valid = true;\n            } else if c == 'l'\
    \ && after_dot_is_valid {\n                after_dot_is_valid = true;\n      \
    \      } else {\n                after_dot_is_valid = false;\n            }\n\
    \        }\n        if c.is_digit(10) {\n            count += 1;\n        }\n\
    \        if first_char {\n            first_char = false;\n            if c.is_digit(10)\
    \ {\n                first_char_is_digit = true;\n            } else if c.is_alphabetic()\
    \ {\n                first_char_is_letter = true;\n            }\n        }\n\
    \    }\n    if count > 3 || dot_count != 1 || first_char_is_digit || !first_char_is_letter\
    \ || !after_dot_is_valid {\n        return \"No\".to_string();\n    }\n    \"\
    Yes\".to_string()", "    let mut count = 0;\n    let mut dot_count = 0;\n    let\
    \ mut is_valid = true;\n    let mut is_digit = false;\n    let mut is_letter =\
    \ false;\n    let mut is_dot = false;\n    let mut is_extension = false;\n   \
    \ let mut is_empty = false;\n    let mut is_extension_valid = false;\n    let\
    \ mut is_extension_empty = false;\n    let mut is_extension_txt = false;\n   \
    \ let mut is_extension_exe = false;\n    let mut is_extension_dll = false;\n \
    \   let mut is_extension_txt_exe_dll = false;\n    let mut is_extension_txt_exe_dll_count\
    \ = 0;\n    let mut is_extension_txt_exe_dll_count_max = 0;\n    let mut is_extension_txt_exe_dll_count_min\
    \ = 0;\n    let mut is_extension_txt_exe_dll_count_max_min = false;\n    let mut\
    \ is_extension_txt_exe_dll_count_max_min_count = 0;\n    let mut is_extension_txt_exe_dll_count_max_min_count_max\
    \ = 0;\n    let mut is_extension_txt_exe_dll_count_max_min_count_min = 0;\n  \
    \  let mut is_extension_txt_exe_dll_count_max_min_count_max_min = false;\n   \
    \ let mut is_extension_txt_exe_dll_count_max_min_count_max_min_count = 0;\n  \
    \  let mut is_extension_txt_exe_dll_count_max_min_count_max_min_count_max = 0;\n\
    \    let mut is_extension_txt_exe_dll_count_max_min_count_max_min_count_min =\
    \ 0;\n    let mut is_extension_txt_exe_dll_count_max_min_count_max_min_count_max_min\
    \ = false;\n    let mut is_extension_txt_exe_dll_count_max_min_count_max_min_",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut has_letter\
    \ = false;\n    let mut has_dot = false;\n    let mut has_extension = false;\n\
    \    let mut extension = String::new();\n    let mut name = String::new();\n \
    \   for c in file_name.chars() {\n        if c == '.' {\n            has_dot =\
    \ true;\n            dot_count += 1;\n        } else if c.is_digit(10) {\n   \
    \         digits_count += 1;\n        } else if c.is_alphabetic() {\n        \
    \    has_letter = true;\n        }\n    }\n    if has_dot {\n        let parts:\
    \ Vec<&str> = file_name.split('.').collect();\n        if parts.len() == 2 {\n\
    \            name = parts[0].to_string();\n            extension = parts[1].to_string();\n\
    \            if extension == \"txt\" || extension == \"exe\" || extension == \"\
    dll\" {\n                has_extension = true;\n            }\n        }\n   \
    \ }\n    if digits_count > 3 || dot_count != 1 || !has_letter || !has_dot || !has_extension\
    \ {\n        return \"No\".to_string();\n    }\n    return \"Yes\".to_string();",
  '    unimplemented!()', "    let mut count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut is_valid = true;\n    let mut is_digit = false;\n    let mut is_dot\
    \ = false;\n    let mut is_letter = false;\n    let mut is_ext = false;\n    let\
    \ mut is_empty = false;\n    let mut is_ext_valid = false;\n    let mut is_ext_empty\
    \ = false;\n    let mut is_ext_letter = false;\n    let mut is_ext_digit = false;\n\
    \    let mut is_ext_dot = false;\n    let mut is_ext_count = 0;\n    let mut is_ext_dot_count\
    \ = 0;\n    let mut is_ext_digit_count = 0;\n    let mut is_ext_letter_count =\
    \ 0;\n    let mut is_ext_empty_count = 0;\n    let mut is_empty_count = 0;\n \
    \   let mut is_digit_count = 0;\n    let mut is_dot_count = 0;\n    let mut is_letter_count\
    \ = 0;\n    let mut is_ext_valid_count = 0;\n    let mut is_ext_empty_count =\
    \ 0;\n    let mut is_ext_letter_count = 0;\n    let mut is_ext_digit_count = 0;\n\
    \    let mut is_ext_dot_count = 0;\n    let mut is_ext_count = 0;\n    let mut\
    \ is_ext_dot_count = 0;\n    let mut is_ext_digit_count = 0;\n    let mut is_ext_letter_count\
    \ = 0;\n    let mut is_ext_empty_count = 0;\n    let mut is_empty_count = 0;\n\
    \    let mut is_digit_count = 0;\n    let mut is_dot_count = 0;\n    let mut is_letter_count\
    \ = 0;\n    let mut is_ext_valid_count = 0;\n    let mut is_ext_empty_count =\
    \ 0;\n    let mut is_ext_letter_count = 0;\n    let mut is_ext_digit_count = 0;\n\
    \    let mut is_ext_dot_count = 0;\n   ", "    let mut count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid = true;\n \
    \   for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10) {\n\
    \            count += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n            dot_index = i;\n        }\n    }\n    if count > 3 || dot_count\
    \ != 1 {\n        is_valid = false;\n    }\n    let (prefix, suffix) = file_name.split_at(dot_index);\n\
    \    if prefix.is_empty() || !prefix.chars().next().unwrap().is_alphabetic() {\n\
    \        is_valid = false;\n    }\n    if suffix != \".txt\" && suffix != \".exe\"\
    \ && suffix != \".dll\" {\n        is_valid = false;\n    }\n    if is_valid {\n\
    \        \"Yes\".to_string()\n    } else {\n        \"No\".to_string()\n    }",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut valid_extension\
    \ = false;\n    let mut valid_name = false;\n    let mut extension = String::new();\n\
    \    let mut name = String::new();\n    for c in file_name.chars() {\n       \
    \ if c.is_digit(10) {\n            digits_count += 1;\n        }\n        if c\
    \ == '.' {\n            dot_count += 1;\n        }\n    }\n    if dot_count ==\
    \ 1 {\n        let mut split = file_name.split('.');\n        name = split.next().unwrap().to_string();\n\
    \        extension = split.next().unwrap().to_string();\n        if extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n            valid_extension\
    \ = true;\n        }\n        if name.len() > 0 && name.chars().next().unwrap().is_alphabetic()\
    \ {\n            valid_name = true;\n        }\n    }\n    if digits_count <=\
    \ 3 && valid_extension && valid_name {\n        return \"Yes\".to_string();\n\
    \    }\n    \"No\".to_string()", "    let mut count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut valid = false;\n    let mut valid_ext = false;\n    let mut\
    \ valid_name = false;\n    let mut valid_name_char = false;\n    let mut valid_ext_char\
    \ = false;\n    let mut valid_ext_name = false;\n    let mut valid_name_count\
    \ = false;\n    let mut valid_ext_count = false;\n    let mut valid_ext_name_count\
    \ = false;\n    let mut valid_ext_name_char = false;\n    let mut valid_ext_name_char_count\
    \ = false;\n    let mut valid_ext_name_char_count_count = false;\n    let mut\
    \ valid_ext_name_char_count_count_count = false;\n    let mut valid_ext_name_char_count_count_count_count\
    \ = false;\n    let mut valid_ext_name_char_count_count_count_count_count = false;\n\
    \    let mut valid_ext_name_char_count_count_count_count_count_count = false;\n\
    \    let mut valid_ext_name_char_count_count_count_count_count_count_count = false;\n\
    \    let mut valid_ext_name_char_count_count_count_count_count_count_count_count\
    \ = false;\n    let mut valid_ext_name_char_count_count_count_count_count_count_count_count_count\
    \ = false;\n    let mut valid_ext_name_char_count_count_count_count_count_count_count_count_count_count\
    \ = false;\n    let mut valid_ext_name_char_count_count_count_count_count_count_count_count_count_count_count\
    \ = false;\n    let mut valid_ext_name_char_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = false;\n    let mut valid_ext_name_char_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = false;\n    let mut valid_ext_name_char_count_", '    unimplemented!()', " \
    \   let mut count = 0;\n    let mut dot_count = 0;\n    let mut is_letter = false;\n\
    \    let mut is_valid = false;\n    let mut is_digit = false;\n    let mut is_dot\
    \ = false;\n    let mut is_txt = false;\n    let mut is_exe = false;\n    let\
    \ mut is_dll = false;\n    let mut is_empty = false;\n    let mut is_valid_extension\
    \ = false;\n    let mut is_valid_name = false;\n    let mut is_valid_count = false;\n\
    \    let mut is_valid_dot_count = false;\n    let mut is_valid_letter = false;\n\
    \    let mut is_valid_digit = false;\n    let mut is_valid_dot = false;\n    let\
    \ mut is_valid_txt = false;\n    let mut is_valid_exe = false;\n    let mut is_valid_dll\
    \ = false;\n    let mut is_valid_empty = false;\n    let mut is_valid_valid_extension\
    \ = false;\n    let mut is_valid_valid_name = false;\n    let mut is_valid_valid_count\
    \ = false;\n    let mut is_valid_valid_dot_count = false;\n    let mut is_valid_valid_letter\
    \ = false;\n    let mut is_valid_valid_digit = false;\n    let mut is_valid_valid_dot\
    \ = false;\n    let mut is_valid_valid_txt = false;\n    let mut is_valid_valid_exe\
    \ = false;\n    let mut is_valid_valid_dll = false;\n    let mut is_valid_valid_empty\
    \ = false;\n    let mut is_valid_valid_valid_extension = false;\n    let mut is_valid_valid_valid_name\
    \ = false;\n    let mut is_valid_valid_valid_count = false;\n    let mut is_valid_valid_valid_dot_count\
    \ = false;\n    let mut is_valid_valid_valid_letter = false;\n    let mut is_valid_valid_valid_digit\
    \ = false;\n    let mut is_valid_valid_valid_dot = false;\n    let mut is_valid",
  "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n\
    \    let mut is_digit = false;\n    let mut is_dot = false;\n    let mut is_letter\
    \ = false;\n    let mut is_ext = false;\n    let mut is_empty = false;\n    let\
    \ mut is_txt = false;\n    let mut is_exe = false;\n    let mut is_dll = false;\n\
    \    let mut is_first_letter = false;\n    let mut is_first_dot = false;\n   \
    \ let mut is_first_digit = false;\n    let mut is_first_ext = false;\n    let\
    \ mut is_first_empty = false;\n    let mut is_first_txt = false;\n    let mut\
    \ is_first_exe = false;\n    let mut is_first_dll = false;\n    let mut is_second_letter\
    \ = false;\n    let mut is_second_dot = false;\n    let mut is_second_digit =\
    \ false;\n    let mut is_second_ext = false;\n    let mut is_second_empty = false;\n\
    \    let mut is_second_txt = false;\n    let mut is_second_exe = false;\n    let\
    \ mut is_second_dll = false;\n    let mut is_third_letter = false;\n    let mut\
    \ is_third_dot = false;\n    let mut is_third_digit = false;\n    let mut is_third_ext\
    \ = false;\n    let mut is_third_empty = false;\n    let mut is_third_txt = false;\n\
    \    let mut is_third_exe = false;\n    let mut is_third_dll = false;\n    let\
    \ mut is_fourth_letter = false;\n    let mut is_fourth_dot = false;\n    let mut\
    \ is_fourth_digit = false;\n    let mut is_fourth_ext = false;\n    let mut is_fourth_empty\
    \ = false;\n    let mut is_fourth_txt = false;\n    let mut is_fourth_exe = false;\n\
    \    let mut is_fourth_dll = false;\n    let mut is_fifth_letter = false;\n  \
    \  let mut is_fifth_", "    let mut count = 0;\n    let mut dot_count = 0;\n \
    \   let mut start_with_digit = false;\n    let mut end_with_txt = false;\n   \
    \ let mut end_with_exe = false;\n    let mut end_with_dll = false;\n    let mut\
    \ start_with_letter = false;\n    let mut end_with_dot = false;\n    let mut end_with_empty\
    \ = false;\n    let mut end_with_dot_and_empty = false;\n    let mut end_with_dot_and_txt\
    \ = false;\n    let mut end_with_dot_and_exe = false;\n    let mut end_with_dot_and_dll\
    \ = false;\n    let mut end_with_dot_and_not_txt_exe_dll = false;\n    let mut\
    \ end_with_dot_and_not_empty = false;\n    let mut end_with_not_dot = false;\n\
    \    let mut end_with_not_empty = false;\n    let mut end_with_not_txt_exe_dll\
    \ = false;\n    let mut end_with_not_dot_and_empty = false;\n    let mut end_with_not_dot_and_txt_exe_dll\
    \ = false;\n    let mut end_with_not_dot_and_not_empty = false;\n    let mut end_with_not_dot_and_not_txt_exe_dll\
    \ = false;\n    let mut end_with_not_dot_and_not_empty_and_not_txt_exe_dll = false;\n\
    \    let mut end_with_not_dot_and_not_empty_and_not_txt_exe_dll_and_not_start_with_letter\
    \ = false;\n    let mut end_with_not_dot_and_not_empty_and_not_txt_exe_dll_and_not_start_with_letter_and_more_than_three_digits\
    \ = false;\n    let mut end_with_not_dot_and_not_empty_and_not_txt_exe_dll_and_not_start_with_letter_and_more_than_three_digits_and_more_than_",
  "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut valid = true;\n\
    \    let mut valid_extension = false;\n    let mut extension = String::new();\n\
    \    let mut name = String::new();\n    for c in file_name.chars() {\n       \
    \ if c.is_digit(10) {\n            count += 1;\n        }\n        if c == '.'\
    \ {\n            dot_count += 1;\n        }\n    }\n    if count > 3 || dot_count\
    \ != 1 {\n        valid = false;\n    }\n    let mut split = file_name.split('.');\n\
    \    name = split.next().unwrap().to_string();\n    extension = split.next().unwrap().to_string();\n\
    \    if name.is_empty() || !name.chars().next().unwrap().is_alphabetic() {\n \
    \       valid = false;\n    }\n    if extension == \"txt\" || extension == \"\
    exe\" || extension == \"dll\" {\n        valid_extension = true;\n    }\n    if\
    \ valid && valid_extension {\n        return \"Yes\".to_string();\n    }\n   \
    \ return \"No\".to_string();", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_valid_extension = false;\n\
    \    let mut extension = String::new();\n    let mut is_valid_name = false;\n\
    \    let mut name = String::new();\n    let mut is_valid_name_start = false;\n\
    \    let mut is_valid_name_end = false;\n    let mut is_valid_extension_start\
    \ = false;\n    let mut is_valid_extension_end = false;\n    let mut is_valid_extension_content\
    \ = false;\n    for (i, c) in file_name.chars().enumerate() {\n        if c ==\
    \ '.' {\n            dot_count += 1;\n            is_valid_name_end = true;\n\
    \            is_valid_extension_start = true;\n        } else if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c.is_alphabetic() {\n \
    \           if is_valid_name_start {\n                is_valid_name_end = true;\n\
    \            } else {\n                is_valid_name_start = true;\n         \
    \   }\n            if is_valid_extension_start {\n                is_valid_extension_end\
    \ = true;\n            } else {\n                is_valid_extension_start = true;\n\
    \            }\n        }\n        if is_valid_name_start && is_valid_name_end\
    \ {\n            name.push(c);\n        }\n        if is_valid_extension_start\
    \ && is_valid_extension_end {\n            extension.push(c);\n        }\n   \
    \     if i == file_name.len() - 1 {\n            if is_valid_extension_start &&\
    \ is_valid_extension_end {\n                is_valid_extension_content = true;\n\
    \            }\n        }\n    }\n    if digits_count > 3 {\n        is_valid\
    \ = false;\n    }\n    if dot_count != 1 {\n        is_valid = false;\n    }\n\
    \    if is_valid_name_start && is_valid_name", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut letter_count = 0;\n    let mut extension_count\
    \ = 0;\n    let mut extension_start = 0;\n    let mut extension_end = 0;\n   \
    \ let mut extension_string = String::new();\n    let mut extension_vec = vec![\"\
    txt\", \"exe\", \"dll\"];\n    for (i, c) in file_name.chars().enumerate() {\n\
    \        if c.is_digit(10) {\n            digits_count += 1;\n        }\n    \
    \    if c == '.' {\n            dot_count += 1;\n            extension_start =\
    \ i + 1;\n        }\n        if c.is_alphabetic() {\n            letter_count\
    \ += 1;\n        }\n        if i == file_name.len() - 1 {\n            extension_end\
    \ = i + 1;\n        }\n    }\n    extension_string = file_name[extension_start..extension_end].to_string();\n\
    \    for i in extension_vec.iter() {\n        if extension_string == *i {\n  \
    \          extension_count += 1;\n        }\n    }\n    if digits_count <= 3 &&\
    \ dot_count == 1 && letter_count >= 1 && extension_count == 1 {\n        \"Yes\"\
    .to_string()\n    } else {\n        \"No\".to_string()\n    }", "    let mut digits\
    \ = 0;\n    let mut dot = false;\n    let mut latin = false;\n    let mut ext\
    \ = false;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n  \
    \          digits += 1;\n        } else if c == '.' {\n            dot = true;\n\
    \        } else if c.is_alphabetic() {\n            latin = true;\n        } else\
    \ if c == 't' || c == 'e' || c == 'x' || c == 'd' {\n            ext = true;\n\
    \        }\n    }\n    if digits > 3 || !dot || !latin || !ext {\n        \"No\"\
    .to_string()\n    } else {\n        \"Yes\".to_string()\n    }", "    let mut\
    \ digits_count = 0;\n    let mut dot_count = 0;\n    let mut valid_extension =\
    \ false;\n    let mut valid_name = false;\n    let mut valid_name_start = false;\n\
    \    let mut valid_name_end = false;\n    let mut name_start = 0;\n    let mut\
    \ name_end = 0;\n    let mut extension_start = 0;\n    let mut extension_end =\
    \ 0;\n    let mut extension_length = 0;\n    let mut name_length = 0;\n    let\
    \ mut extension_start_found = false;\n    let mut name_end_found = false;\n  \
    \  let mut name_start_found = false;\n    let mut extension_end_found = false;\n\
    \    let mut extension_start_index = 0;\n    let mut name_end_index = 0;\n   \
    \ let mut name_start_index = 0;\n    let mut extension_end_index = 0;\n    let\
    \ mut extension_start_found_index = 0;\n    let mut name_end_found_index = 0;\n\
    \    let mut name_start_found_index = 0;\n    let mut extension_end_found_index\
    \ = 0;\n    let mut extension_start_found_index_2 = 0;\n    let mut name_end_found_index_2\
    \ = 0;\n    let mut name_start_found_index_2 = 0;\n    let mut extension_end_found_index_2\
    \ = 0;\n    let mut extension_start_found_index_3 = 0;\n    let mut name_end_found_index_3\
    \ = 0;\n    let mut name_start_found_index_3 = 0;\n    let mut extension_end_found_index_3\
    \ = 0;\n    let mut extension_start_found_index_4 = 0;\n    let mut name_end_found_index_4\
    \ = 0;\n    let mut name_start_found_index_4 = 0;\n    let mut extension_end_found_index_4\
    \ = 0;\n    let mut extension_start_found_index_5 = 0;\n    let mut name_end_found_index_5\
    \ = 0;\n    let mut name_start_found_index", "    if file_name.chars().filter(|&c|\
    \ c.is_digit(10)).count() > 3 {\n        return \"No\".to_string();\n    }\n \
    \   if file_name.chars().filter(|&c| c == '.').count() != 1 {\n        return\
    \ \"No\".to_string();\n    }\n    let parts: Vec<&str> = file_name.split('.').collect();\n\
    \    if parts[0].is_empty() || !parts[0].chars().next().unwrap().is_alphabetic()\
    \ {\n        return \"No\".to_string();\n    }\n    if parts[1] != \"txt\" &&\
    \ parts[1] != \"exe\" && parts[1] != \"dll\" {\n        return \"No\".to_string();\n\
    \    }\n    \"Yes\".to_string()", "    let mut count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut valid = false;\n    let mut valid_extension = false;\n   \
    \ let mut extension = String::new();\n    let mut name = String::new();\n    for\
    \ c in file_name.chars() {\n        if c.is_digit(10) {\n            count +=\
    \ 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n        }\n\
    \    }\n    if count > 3 || dot_count != 1 {\n        return String::from(\"No\"\
    );\n    }\n    let mut split = file_name.split('.');\n    name = split.next().unwrap().to_string();\n\
    \    extension = split.next().unwrap().to_string();\n    if name.is_empty() {\n\
    \        return String::from(\"No\");\n    }\n    for c in name.chars() {\n  \
    \      if c.is_alphabetic() {\n            valid = true;\n            break;\n\
    \        }\n    }\n    if !valid {\n        return String::from(\"No\");\n   \
    \ }\n    if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n        valid_extension = true;\n    }\n    if valid_extension {\n      \
    \  return String::from(\"Yes\");\n    }\n    return String::from(\"No\");", '    unimplemented!()',
  "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n\
    \    let mut is_valid = true;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            count += 1;\n        }\n       \
    \ if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n   \
    \     }\n    }\n    if count > 3 || dot_count != 1 {\n        is_valid = false;\n\
    \    }\n    if is_valid {\n        let (before_dot, after_dot) = file_name.split_at(dot_index);\n\
    \        if before_dot.is_empty() || !before_dot.chars().next().unwrap().is_alphabetic()\
    \ {\n            is_valid = false;\n        }\n        if after_dot != \".txt\"\
    \ && after_dot != \".exe\" && after_dot != \".dll\" {\n            is_valid =\
    \ false;\n        }\n    }\n    if is_valid {\n        \"Yes\".to_string()\n \
    \   } else {\n        \"No\".to_string()\n    }", "    let mut digits = 0;\n \
    \   let mut dot = false;\n    let mut first_letter = false;\n    let mut last_three\
    \ = String::new();\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits += 1;\n        } else if c == '.' {\n            dot =\
    \ true;\n        } else if c.is_alphabetic() {\n            first_letter = true;\n\
    \        }\n        last_three.push(c);\n        if last_three.len() > 3 {\n \
    \           last_three.remove(0);\n        }\n    }\n    if digits > 3 || !dot\
    \ || !first_letter || last_three != \"txt\" && last_three != \"exe\" && last_three\
    \ != \"dll\" {\n        return String::from(\"No\");\n    }\n    return String::from(\"\
    Yes\");", "    let mut digits = 0;\n    let mut dot = false;\n    let mut prefix\
    \ = false;\n    let mut suffix = false;\n    for c in file_name.chars() {\n  \
    \      if c.is_digit(10) {\n            digits += 1;\n        } else if c == '.'\
    \ {\n            dot = true;\n        } else if !prefix && c.is_alphabetic() {\n\
    \            prefix = true;\n        } else if dot && !suffix && c.is_alphabetic()\
    \ {\n            suffix = true;\n        }\n    }\n    if digits > 3 || !dot ||\
    \ !prefix || !suffix {\n        return \"No\".to_string();\n    }\n    let suffix\
    \ = file_name.split('.').last().unwrap();\n    if suffix != \"txt\" && suffix\
    \ != \"exe\" && suffix != \"dll\" {\n        return \"No\".to_string();\n    }\n\
    \    \"Yes\".to_string()", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut first_part = String::new();\n    let mut second_part = String::new();\n\
    \    let mut valid_extensions = vec![\"txt\", \"exe\", \"dll\"];\n    let mut\
    \ valid_extension = false;\n\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n        }\n        if dot_count\
    \ == 1 {\n            first_part = file_name[..i].to_string();\n            second_part\
    \ = file_name[i+1..].to_string();\n        }\n    }\n\n    for extension in valid_extensions\
    \ {\n        if second_part == extension {\n            valid_extension = true;\n\
    \        }\n    }\n\n    if digits_count > 3 || dot_count != 1 || first_part.is_empty()\
    \ || !first_part.chars().next().unwrap().is_alphabetic() || !valid_extension {\n\
    \        return \"No\".to_string();\n    }\n\n    return \"Yes\".to_string();",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut has_letter\
    \ = false;\n    let mut has_extension = false;\n    let mut extension = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        } else if c == '.' {\n            dot_count += 1;\n        }\
    \ else if c.is_alphabetic() {\n            has_letter = true;\n        } else\
    \ if c.is_alphanumeric() {\n            extension.push(c);\n        }\n    }\n\
    \    has_extension = extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\";\n    if digits_count > 3 || dot_count != 1 || !has_letter || !has_extension\
    \ {\n        return String::from(\"No\");\n    }\n    return String::from(\"Yes\"\
    );", "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_digit = false;\n    let mut is_letter = false;\n   \
    \ let mut is_dot = false;\n    let mut is_extension = false;\n    let mut is_empty\
    \ = false;\n    let mut is_extension_valid = false;\n    let mut is_extension_empty\
    \ = false;\n    let mut is_extension_letter = false;\n    let mut is_extension_digit\
    \ = false;\n    let mut is_extension_dot = false;\n    let mut is_extension_dot_count\
    \ = 0;\n    let mut is_extension_letter_count = 0;\n    let mut is_extension_digit_count\
    \ = 0;\n    let mut is_extension_empty_count = 0;\n    let mut is_empty_count\
    \ = 0;\n    let mut is_dot_count = 0;\n    let mut is_letter_count = 0;\n    let\
    \ mut is_digit_count = 0;\n    let mut is_valid_count = 0;\n    let mut is_valid_count_2\
    \ = 0;\n    let mut is_valid_count_3 = 0;\n    let mut is_valid_count_4 = 0;\n\
    \    let mut is_valid_count_5 = 0;\n    let mut is_valid_count_6 = 0;\n    let\
    \ mut is_valid_count_7 = 0;\n    let mut is_valid_count_8 = 0;\n    let mut is_valid_count_9\
    \ = 0;\n    let mut is_valid_count_10 = 0;\n    let mut is_valid_count_11 = 0;\n\
    \    let mut is_valid_count_12 = 0;\n    let mut is_valid_count_13 = 0;\n    let\
    \ mut is_valid_count_14 = 0;\n    let mut is_valid_count_15 = 0;\n    let mut\
    \ is_valid_count_16 = 0;\n    let mut is_valid_count_17 = 0;\n    let mut is_valid_count_18\
    \ = 0;\n    let mut is_valid_count_", "    let mut count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut dot_index = 0;\n    let mut is_valid = true;\n    for (i,\
    \ c) in file_name.chars().enumerate() {\n        if c.is_digit(10) {\n       \
    \     count += 1;\n        }\n        if c == '.' {\n            dot_count +=\
    \ 1;\n            dot_index = i;\n        }\n    }\n    if count > 3 || dot_count\
    \ != 1 {\n        is_valid = false;\n    }\n    if !is_valid {\n        return\
    \ \"No\".to_string();\n    }\n    let (before_dot, after_dot) = file_name.split_at(dot_index);\n\
    \    if before_dot.is_empty() || !before_dot.chars().next().unwrap().is_alphabetic()\
    \ {\n        is_valid = false;\n    }\n    if !is_valid {\n        return \"No\"\
    .to_string();\n    }\n    if after_dot != \".txt\" && after_dot != \".exe\" &&\
    \ after_dot != \".dll\" {\n        is_valid = false;\n    }\n    if is_valid {\n\
    \        return \"Yes\".to_string();\n    }\n    \"No\".to_string()", "    let\
    \ mut digits = 0;\n    let mut dot = false;\n    let mut before_dot = false;\n\
    \    let mut after_dot = false;\n    for c in file_name.chars() {\n        if\
    \ c.is_digit(10) {\n            digits += 1;\n        } else if c == '.' {\n \
    \           dot = true;\n        } else if c.is_alphabetic() {\n            if\
    \ dot {\n                after_dot = true;\n            } else {\n           \
    \     before_dot = true;\n            }\n        }\n    }\n    if digits > 3 ||\
    \ !dot || !before_dot || !after_dot {\n        return \"No\".to_string();\n  \
    \  }\n    let ext = &file_name[file_name.find('.').unwrap() + 1..];\n    if ext\
    \ == \"txt\" || ext == \"exe\" || ext == \"dll\" {\n        return \"Yes\".to_string();\n\
    \    }\n    \"No\".to_string()", "    let mut digits = 0;\n    let mut dot = false;\n\
    \    let mut dot_index = 0;\n    let mut first_letter = false;\n    let mut first_letter_index\
    \ = 0;\n    let mut last_letter = false;\n    let mut last_letter_index = 0;\n\
    \    let mut last_letter_index_before_dot = 0;\n    let mut last_letter_index_after_dot\
    \ = 0;\n    let mut last_letter_index_before_dot_valid = false;\n    let mut last_letter_index_after_dot_valid\
    \ = false;\n    let mut valid_extension = false;\n    let mut valid_extension_index\
    \ = 0;\n    let mut valid_extension_index_after_dot = 0;\n    let mut valid_extension_index_after_dot_valid\
    \ = false;\n    let mut valid_extension_index_before_dot = 0;\n    let mut valid_extension_index_before_dot_valid\
    \ = false;\n    let mut valid_extension_index_before_dot_valid_index = 0;\n  \
    \  let mut valid_extension_index_after_dot_valid_index = 0;\n    let mut valid_extension_index_valid\
    \ = false;\n    let mut valid_extension_index_valid_index = 0;\n    let mut valid_extension_index_valid_index_after_dot\
    \ = 0;\n    let mut valid_extension_index_valid_index_after_dot_valid = false;\n\
    \    let mut valid_extension_index_valid_index_before_dot = 0;\n    let mut valid_extension_index_valid_index_before_dot_valid\
    \ = false;\n    let mut valid_extension_index_valid_index_before_dot_valid_index\
    \ = 0;\n    let mut valid_extension_index_valid_index_after_dot_valid_index =\
    \ 0;\n    let mut valid_extension_index_valid_index_valid = false;\n    let mut\
    \ valid_extension_index_valid_index_valid_index = 0;\n    let mut valid_extension_index_valid_index_valid_index_after_dot\
    \ = 0;\n", "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut dot_index\
    \ = 0;\n    let mut is_valid = true;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            count += 1;\n        }\n       \
    \ if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n   \
    \     }\n    }\n    if count > 3 || dot_count != 1 {\n        is_valid = false;\n\
    \    }\n    if is_valid {\n        let (before_dot, after_dot) = file_name.split_at(dot_index);\n\
    \        if before_dot.is_empty() || !before_dot.chars().next().unwrap().is_alphabetic()\
    \ {\n            is_valid = false;\n        }\n        if !(after_dot == \".txt\"\
    \ || after_dot == \".exe\" || after_dot == \".dll\") {\n            is_valid =\
    \ false;\n        }\n    }\n    if is_valid {\n        \"Yes\".to_string()\n \
    \   } else {\n        \"No\".to_string()\n    }", "    let mut count = 0;\n  \
    \  let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut valid = true;\n\
    \    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            count += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n            dot_index = i;\n        }\n    }\n    if count > 3 || dot_count\
    \ != 1 {\n        valid = false;\n    }\n    if !file_name[..dot_index].chars().next().unwrap().is_alphabetic()\
    \ {\n        valid = false;\n    }\n    let file_type = &file_name[dot_index+1..];\n\
    \    if file_type != \"txt\" && file_type != \"exe\" && file_type != \"dll\" {\n\
    \        valid = false;\n    }\n    if valid {\n        \"Yes\".to_string()\n\
    \    } else {\n        \"No\".to_string()\n    }", "    let mut digits = 0;\n\
    \    let mut dot = false;\n    let mut extension = false;\n    let mut start =\
    \ false;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n    \
    \        digits += 1;\n        } else if c == '.' {\n            dot = true;\n\
    \        } else if c.is_alphabetic() {\n            if !start {\n            \
    \    start = true;\n            }\n        } else {\n            return \"No\"\
    .to_string();\n        }\n    }\n    if digits > 3 {\n        return \"No\".to_string();\n\
    \    }\n    if !dot {\n        return \"No\".to_string();\n    }\n    if !start\
    \ {\n        return \"No\".to_string();\n    }\n    let ext = file_name.split('.').last().unwrap();\n\
    \    if ext == \"txt\" || ext == \"exe\" || ext == \"dll\" {\n        return \"\
    Yes\".to_string();\n    }\n    \"No\".to_string()", "    let mut count = 0;\n\
    \    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid\
    \ = true;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            count += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n            dot_index = i;\n        }\n    }\n    if count > 3 || dot_count\
    \ != 1 {\n        is_valid = false;\n    }\n    let (before_dot, after_dot) =\
    \ file_name.split_at(dot_index);\n    if before_dot.is_empty() || !before_dot.chars().next().unwrap().is_alphabetic()\
    \ {\n        is_valid = false;\n    }\n    if after_dot != \".txt\" && after_dot\
    \ != \".exe\" && after_dot != \".dll\" {\n        is_valid = false;\n    }\n \
    \   if is_valid {\n        return \"Yes\".to_string();\n    }\n    \"No\".to_string()",
  "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut valid = false;\n\
    \    let mut valid_ext = false;\n    let mut valid_name = false;\n    let mut\
    \ valid_count = false;\n    let mut valid_dot = false;\n    let mut valid_ext_count\
    \ = false;\n    let mut valid_ext_name = false;\n    let mut valid_ext_dot = false;\n\
    \    let mut valid_ext_count_name = false;\n    let mut valid_ext_count_dot =\
    \ false;\n    let mut valid_ext_name_dot = false;\n    let mut valid_ext_count_name_dot\
    \ = false;\n    let mut valid_ext_count_dot_name = false;\n    let mut valid_ext_name_dot_count\
    \ = false;\n    let mut valid_ext_dot_name_count = false;\n    let mut valid_ext_dot_count_name\
    \ = false;\n    let mut valid_ext_name_count_dot = false;\n    let mut valid_ext_count_name_dot_count\
    \ = false;\n    let mut valid_ext_count_dot_name_count = false;\n    let mut valid_ext_name_dot_count_count\
    \ = false;\n    let mut valid_ext_dot_name_count_count = false;\n    let mut valid_ext_dot_count_name_count\
    \ = false;\n    let mut valid_ext_name_count_dot_count = false;\n    let mut valid_ext_count_name_dot_count_count\
    \ = false;\n    let mut valid_ext_count_dot_name_count_count = false;\n    let\
    \ mut valid_ext_name_dot_count_count_count = false;\n    let mut valid_ext_dot_name_count_count_count\
    \ = false;\n    let mut valid_ext_dot_count_name_count_count = false;\n    let\
    \ mut valid_ext_name_count_dot_count_count = false;\n    let mut valid_ext_count_name_dot_count_count_count\
    \ = false;\n    let mut valid_ext_count_dot_name_count_count_count = false;",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut valid_extension\
    \ = false;\n    let mut valid_name = false;\n    let mut name_start = false;\n\
    \    let mut extension_start = false;\n    let mut extension_end = false;\n  \
    \  let mut extension_start_index = 0;\n    let mut extension_end_index = 0;\n\
    \    let mut name_start_index = 0;\n    let mut name_end_index = 0;\n    for (i,\
    \ c) in file_name.chars().enumerate() {\n        if c.is_digit(10) {\n       \
    \     digits_count += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n            extension_start = true;\n            extension_start_index\
    \ = i + 1;\n        }\n        if c.is_alphabetic() {\n            if !name_start\
    \ {\n                name_start = true;\n                name_start_index = i;\n\
    \            }\n            name_end_index = i;\n        }\n        if extension_start\
    \ && !extension_end {\n            if c == 't' || c == 'e' || c == 'd' {\n   \
    \             extension_end = true;\n                extension_end_index = i;\n\
    \            }\n        }\n    }\n    if digits_count <= 3 && dot_count == 1 &&\
    \ name_start_index != name_end_index {\n        let extension = &file_name[extension_start_index..extension_end_index\
    \ + 1];\n        if extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\" {\n            valid_extension = true;\n        }\n        if valid_extension\
    \ {\n            valid_name = true;\n        }\n    }\n    if valid_name {\n \
    \       return \"Yes\".to_string();\n    }\n    return \"No\".to_string();", " \
    \   let mut digits = 0;\n    let mut dot = false;\n    let mut before_dot = false;\n\
    \    let mut after_dot = false;\n    for c in file_name.chars() {\n        if\
    \ c.is_digit(10) {\n            digits += 1;\n        } else if c == '.' {\n \
    \           dot = true;\n        } else if c.is_alphabetic() {\n            if\
    \ dot {\n                after_dot = true;\n            } else {\n           \
    \     before_dot = true;\n            }\n        }\n    }\n    if digits > 3 ||\
    \ !dot || !before_dot || !after_dot {\n        return \"No\".to_string();\n  \
    \  }\n    let after_dot = file_name.split('.').last().unwrap();\n    if after_dot\
    \ == \"txt\" || after_dot == \"exe\" || after_dot == \"dll\" {\n        return\
    \ \"Yes\".to_string();\n    }\n    \"No\".to_string()", "    let mut count = 0;\n\
    \    let mut dot_count = 0;\n    let mut flag = false;\n    let mut flag2 = false;\n\
    \    let mut flag3 = false;\n    let mut flag4 = false;\n    let mut flag5 = false;\n\
    \    let mut flag6 = false;\n    let mut flag7 = false;\n    let mut flag8 = false;\n\
    \    let mut flag9 = false;\n    let mut flag10 = false;\n    let mut flag11 =\
    \ false;\n    let mut flag12 = false;\n    let mut flag13 = false;\n    let mut\
    \ flag14 = false;\n    let mut flag15 = false;\n    let mut flag16 = false;\n\
    \    let mut flag17 = false;\n    let mut flag18 = false;\n    let mut flag19\
    \ = false;\n    let mut flag20 = false;\n    let mut flag21 = false;\n    let\
    \ mut flag22 = false;\n    let mut flag23 = false;\n    let mut flag24 = false;\n\
    \    let mut flag25 = false;\n    let mut flag26 = false;\n    let mut flag27\
    \ = false;\n    let mut flag28 = false;\n    let mut flag29 = false;\n    let\
    \ mut flag30 = false;\n    let mut flag31 = false;\n    let mut flag32 = false;\n\
    \    let mut flag33 = false;\n    let mut flag34 = false;\n    let mut flag35\
    \ = false;\n    let mut flag36 = false;\n    let mut flag37 = false;\n    let\
    \ mut flag38 = false;\n    let mut flag39 = false;\n    let mut flag40 = false;\n\
    \    let mut flag41 = false;\n    let mut flag42 = false;\n    let mut flag43\
    \ = false;\n    let mut flag44 = false;\n    let mut flag45 = false;\n    let\
    \ mut flag46 = false;\n    let mut flag47 = false;\n    let mut flag48 = false;\n\
    \    let mut flag49 = false;\n    let mut flag50 = false;\n    let mut flag51\
    \ = false;\n    let mut flag52 = false;\n    let mut flag53 = false;\n    let\
    \ mut flag54 = false;\n    let mut flag55 = false;", "    let mut count = 0;\n\
    \    let mut dot_count = 0;\n    let mut latin_count = 0;\n    let mut latin_flag\
    \ = false;\n    let mut dot_flag = false;\n    let mut latin_flag_2 = false;\n\
    \    let mut dot_flag_2 = false;\n    let mut latin_flag_3 = false;\n    let mut\
    \ dot_flag_3 = false;\n    let mut latin_flag_4 = false;\n    let mut dot_flag_4\
    \ = false;\n    let mut latin_flag_5 = false;\n    let mut dot_flag_5 = false;\n\
    \    let mut latin_flag_6 = false;\n    let mut dot_flag_6 = false;\n    let mut\
    \ latin_flag_7 = false;\n    let mut dot_flag_7 = false;\n    let mut latin_flag_8\
    \ = false;\n    let mut dot_flag_8 = false;\n    let mut latin_flag_9 = false;\n\
    \    let mut dot_flag_9 = false;\n    let mut latin_flag_10 = false;\n    let\
    \ mut dot_flag_10 = false;\n    let mut latin_flag_11 = false;\n    let mut dot_flag_11\
    \ = false;\n    let mut latin_flag_12 = false;\n    let mut dot_flag_12 = false;\n\
    \    let mut latin_flag_13 = false;\n    let mut dot_flag_13 = false;\n    let\
    \ mut latin_flag_14 = false;\n    let mut dot_flag_14 = false;\n    let mut latin_flag_15\
    \ = false;\n    let mut dot_flag_15 = false;\n    let mut latin_flag_16 = false;\n\
    \    let mut dot_flag_16 = false;\n    let mut latin_flag_17 = false;\n    let\
    \ mut dot_flag_17 = false;\n    let mut latin_flag_18 = false;\n    let mut dot_flag_18\
    \ = false;\n    let mut latin_flag_19 = false;\n    let mut dot_flag_19 = false;\n\
    \    let mut latin_flag_20 = false", "    let mut digits = 0;\n    let mut dot\
    \ = false;\n    let mut before_dot = false;\n    let mut after_dot = false;\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits\
    \ += 1;\n        } else if c == '.' {\n            dot = true;\n        } else\
    \ if dot {\n            after_dot = true;\n        } else {\n            before_dot\
    \ = true;\n        }\n    }\n    if digits > 3 || !dot || !before_dot || !after_dot\
    \ {\n        return \"No\".to_string();\n    }\n    let after_dot = file_name.split('.').last().unwrap();\n\
    \    if after_dot != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\" {\n\
    \        return \"No\".to_string();\n    }\n    \"Yes\".to_string()", "    let\
    \ mut count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n \
    \   let mut is_digit = false;\n    let mut is_letter = false;\n    let mut is_extension\
    \ = false;\n    let mut extension = String::new();\n    let mut file_name_without_extension\
    \ = String::new();\n    for c in file_name.chars() {\n        if c == '.' {\n\
    \            dot_count += 1;\n            continue;\n        }\n        if c.is_digit(10)\
    \ {\n            count += 1;\n            is_digit = true;\n        }\n      \
    \  if c.is_alphabetic() {\n            is_letter = true;\n        }\n    }\n \
    \   if count > 3 {\n        is_valid = false;\n    }\n    if dot_count != 1 {\n\
    \        is_valid = false;\n    }\n    if !is_digit {\n        is_valid = false;\n\
    \    }\n    if !is_letter {\n        is_valid = false;\n    }\n    if is_valid\
    \ {\n        let mut is_extension_valid = false;\n        for (i, c) in file_name.chars().enumerate()\
    \ {\n            if c == '.' {\n                for j in i + 1..file_name.len()\
    \ {\n                    extension.push(file_name.chars().nth(j).unwrap());\n\
    \                }\n                for j in 0..i {\n                    file_name_without_extension.push(file_name.chars().nth(j).unwrap());\n\
    \                }\n                break;\n            }\n        }\n       \
    \ if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \            is_extension_valid = true;\n        }\n        if !is_extension_valid\
    \ {\n            is_valid = false;\n        }\n    }\n    if is_valid {\n    \
    \    return \"Yes\".to_string();\n    }\n    return \"No\".to_string();", "  \
    \  let mut count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n\
    \    let mut is_digit = false;\n    let mut is_letter = false;\n    let mut is_dot\
    \ = false;\n    let mut is_extension = false;\n    let mut is_empty = false;\n\
    \    let mut is_txt = false;\n    let mut is_exe = false;\n    let mut is_dll\
    \ = false;\n    let mut extension = String::new();\n    let mut name = String::new();\n\
    \    let mut dot_index = 0;\n    for (i, c) in file_name.chars().enumerate() {\n\
    \        if c.is_digit(10) {\n            count += 1;\n            is_digit =\
    \ true;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \       is_dot = true;\n            dot_index = i;\n        }\n        if c.is_alphabetic()\
    \ {\n            is_letter = true;\n        }\n    }\n    if dot_count == 1 {\n\
    \        if count <= 3 {\n            if is_digit && is_letter {\n           \
    \     if dot_index != 0 {\n                    if dot_index != file_name.len()\
    \ - 1 {\n                        is_extension = true;\n                      \
    \  extension = file_name.split_at(dot_index).1.to_string();\n                \
    \        name = file_name.split_at(dot_index).0.to_string();\n               \
    \     }\n                }\n            }\n        }\n    }\n    if name.len()\
    \ == 0 {\n        is_empty = true;\n    }\n    if extension == \"txt\".to_string()\
    \ {\n        is_txt = true;\n    }\n    if extension == \"exe\".to_string() {\n\
    \        is_exe = true;\n    }\n    if extension == \"dll\".to_string() {\n  \
    \      is_dll = true;\n    }\n    if !is_extension || is_empty || !is_txt && !is_exe\
    \ && !is_dll {\n        is_valid = false;\n    }\n    if is_valid {\n        return\
    \ \"", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ is_valid = true;\n    let mut is_first_letter = true;\n    let mut is_after_dot\
    \ = false;\n    let mut is_before_dot = true;\n    let mut is_after_dot_valid\
    \ = false;\n    let mut is_before_dot_valid = false;\n    let mut is_before_dot_empty\
    \ = true;\n    let mut is_after_dot_empty = true;\n    let mut is_before_dot_start_with_letter\
    \ = false;\n    let mut is_after_dot_start_with_letter = false;\n    let mut before_dot_string\
    \ = String::new();\n    let mut after_dot_string = String::new();\n    for c in\
    \ file_name.chars() {\n        if c == '.' {\n            dot_count += 1;\n  \
    \          is_after_dot = true;\n            is_before_dot = false;\n        }\
    \ else if c.is_digit(10) {\n            digits_count += 1;\n        } else if\
    \ c.is_alphabetic() {\n            if is_after_dot {\n                is_after_dot_empty\
    \ = false;\n                if is_first_letter {\n                    is_after_dot_start_with_letter\
    \ = true;\n                    is_first_letter = false;\n                }\n \
    \               after_dot_string.push(c);\n            } else {\n            \
    \    is_before_dot_empty = false;\n                if is_first_letter {\n    \
    \                is_before_dot_start_with_letter = true;\n                   \
    \ is_first_letter = false;\n                }\n                before_dot_string.push(c);\n\
    \            }\n        }\n    }\n    if digits_count > 3 {\n        is_valid\
    \ = false;\n    }\n    if dot_count != 1 {\n        is_valid = false;\n    }\n\
    \    if is_before_dot_empty {\n        is_valid = false;\n    }\n    if !is_before_dot_start_with_letter\
    \ {\n        is_valid = false;\n    }\n    if is_after", "    let mut count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_valid_ext\
    \ = false;\n    let mut is_valid_name = false;\n    let mut is_valid_count = true;\n\
    \    let mut is_valid_dot = false;\n    let mut is_valid_name_start = false;\n\
    \    let mut is_valid_name_end = false;\n    let mut is_valid_ext_start = false;\n\
    \    let mut is_valid_ext_end = false;\n    let mut is_valid_ext_end_txt = false;\n\
    \    let mut is_valid_ext_end_exe = false;\n    let mut is_valid_ext_end_dll =\
    \ false;\n    let mut is_valid_ext_end_txt_count = 0;\n    let mut is_valid_ext_end_exe_count\
    \ = 0;\n    let mut is_valid_ext_end_dll_count = 0;\n    let mut is_valid_ext_end_txt_count_max\
    \ = 3;\n    let mut is_valid_ext_end_exe_count_max = 3;\n    let mut is_valid_ext_end_dll_count_max\
    \ = 3;\n    let mut is_valid_ext_end_txt_count_min = 3;\n    let mut is_valid_ext_end_exe_count_min\
    \ = 3;\n    let mut is_valid_ext_end_dll_count_min = 3;\n    let mut is_valid_ext_end_txt_count_max_check\
    \ = false;\n    let mut is_valid_ext_end_exe_count_max_check = false;\n    let\
    \ mut is_valid_ext_end_dll_count_max_check = false;\n    let mut is_valid_ext_end_txt_count_min_check\
    \ = false;\n    let mut is_valid_ext_end_exe_count_min_check = false;\n    let\
    \ mut is_valid_ext_end_dll_count_min_check = false;\n    let mut is_valid_ext_end_txt_count_max_check_count\
    \ = 0;\n   ", '    unimplemented!()', "    let mut is_valid = true;\n    let mut\
    \ digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_first_letter =\
    \ true;\n    let mut is_extension_valid = false;\n    let mut extension_start_index\
    \ = 0;\n    let mut extension_end_index = 0;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n           \
    \ if digits_count > 3 {\n                is_valid = false;\n                break;\n\
    \            }\n        } else if c == '.' {\n            dot_count += 1;\n  \
    \          if dot_count > 1 {\n                is_valid = false;\n           \
    \     break;\n            }\n            extension_start_index = i + 1;\n    \
    \    } else if c.is_alphabetic() {\n            if is_first_letter {\n       \
    \         is_first_letter = false;\n            }\n        } else {\n        \
    \    is_valid = false;\n            break;\n        }\n        extension_end_index\
    \ = i + 1;\n    }\n    if is_valid {\n        let extension = &file_name[extension_start_index..extension_end_index];\n\
    \        if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n            is_extension_valid = true;\n        }\n    }\n    if is_valid\
    \ && is_extension_valid && !is_first_letter {\n        \"Yes\".to_string()\n \
    \   } else {\n        \"No\".to_string()\n    }", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut has_letter = false;\n    let mut\
    \ has_dot = false;\n    let mut has_extension = false;\n    let mut extension\
    \ = String::new();\n    let mut name = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        } else\
    \ if c == '.' {\n            dot_count += 1;\n            has_dot = true;\n  \
    \      } else if c.is_alphabetic() {\n            has_letter = true;\n       \
    \ }\n    }\n    if has_dot {\n        let parts: Vec<&str> = file_name.split('.').collect();\n\
    \        name = parts[0].to_string();\n        extension = parts[1].to_string();\n\
    \        if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n            has_extension = true;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 || !has_letter || !has_dot || !has_extension {\n     \
    \   return \"No\".to_string();\n    }\n    return \"Yes\".to_string();", "   \
    \ let mut digits = 0;\n    let mut dot = false;\n    let mut ext = false;\n  \
    \  let mut start = false;\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits += 1;\n        } else if c == '.' {\n            dot =\
    \ true;\n        } else if c.is_alphabetic() {\n            start = true;\n  \
    \      } else if c == 'e' {\n            ext = true;\n        }\n    }\n    if\
    \ digits > 3 || !dot || !start || !ext {\n        return \"No\".to_string();\n\
    \    }\n    \"Yes\".to_string()", "    let mut count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut is_valid = true;\n    for c in file_name.chars() {\n     \
    \   if c.is_digit(10) {\n            count += 1;\n        }\n        if c == '.'\
    \ {\n            dot_count += 1;\n        }\n    }\n    if count > 3 || dot_count\
    \ != 1 {\n        is_valid = false;\n    }\n    let mut file_name_split = file_name.split('.');\n\
    \    let first_part = file_name_split.next().unwrap();\n    let second_part =\
    \ file_name_split.next().unwrap();\n    if first_part.len() == 0 || !first_part.chars().next().unwrap().is_alphabetic()\
    \ {\n        is_valid = false;\n    }\n    if second_part != \"txt\" && second_part\
    \ != \"exe\" && second_part != \"dll\" {\n        is_valid = false;\n    }\n \
    \   if is_valid {\n        return \"Yes\".to_string();\n    }\n    return \"No\"\
    .to_string();", "    let mut dot_count = 0;\n    let mut digit_count = 0;\n  \
    \  let mut first_char = true;\n    let mut first_char_is_letter = false;\n   \
    \ let mut last_char_is_letter = false;\n    let mut last_char_is_digit = false;\n\
    \    let mut last_char_is_dot = false;\n    let mut last_char_is_slash = false;\n\
    \    let mut last_char_is_backslash = false;\n    let mut last_char_is_underscore\
    \ = false;\n    let mut last_char_is_hyphen = false;\n    let mut last_char_is_space\
    \ = false;\n    let mut last_char_is_colon = false;\n    let mut last_char_is_semicolon\
    \ = false;\n    let mut last_char_is_comma = false;\n    let mut last_char_is_question_mark\
    \ = false;\n    let mut last_char_is_exclamation_mark = false;\n    let mut last_char_is_left_parenthesis\
    \ = false;\n    let mut last_char_is_right_parenthesis = false;\n    let mut last_char_is_left_bracket\
    \ = false;\n    let mut last_char_is_right_bracket = false;\n    let mut last_char_is_left_brace\
    \ = false;\n    let mut last_char_is_right_brace = false;\n    let mut last_char_is_left_angle_bracket\
    \ = false;\n    let mut last_char_is_right_angle_bracket = false;\n    let mut\
    \ last_char_is_ampersand = false;\n    let mut last_char_is_at_sign = false;\n\
    \    let mut last_char_is_hash = false;\n    let mut last_char_is_dollar = false;\n\
    \    let mut last_char_is_percent = false;\n    let mut last_char_is_caret = false;\n\
    \    let mut last_char_is_tilde = false;\n    let mut last_char_is_backtick =\
    \ false;\n    let mut last_char_is_vertical_bar =", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut has_letter = false;\n    let mut\
    \ has_dot = false;\n    let mut has_extension = false;\n    let mut extension\
    \ = String::new();\n    let mut name = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        } else\
    \ if c == '.' {\n            dot_count += 1;\n            has_dot = true;\n  \
    \      } else if c.is_alphabetic() {\n            has_letter = true;\n       \
    \ }\n    }\n    if has_dot {\n        let parts: Vec<&str> = file_name.split('.').collect();\n\
    \        name = parts[0].to_string();\n        extension = parts[1].to_string();\n\
    \        if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n            has_extension = true;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 || !has_letter || !has_dot || !has_extension {\n     \
    \   return \"No\".to_string();\n    }\n    return \"Yes\".to_string();", "   \
    \ let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_first_letter = true;\n    let mut is_first_dot = true;\n\
    \    let mut is_after_dot = false;\n    let mut is_before_dot = true;\n    let\
    \ mut is_valid_extension = false;\n    let mut extension = String::new();\n  \
    \  for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n            if digits_count > 3 {\n                is_valid = false;\n\
    \                break;\n            }\n        }\n        if c == '.' {\n   \
    \         dot_count += 1;\n            if dot_count > 1 {\n                is_valid\
    \ = false;\n                break;\n            }\n            is_after_dot =\
    \ true;\n            is_before_dot = false;\n            continue;\n        }\n\
    \        if is_after_dot {\n            extension.push(c);\n            if extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n             \
    \   is_valid_extension = true;\n            }\n        }\n        if is_before_dot\
    \ {\n            if is_first_letter {\n                if !c.is_alphabetic() {\n\
    \                    is_valid = false;\n                    break;\n         \
    \       }\n                is_first_letter = false;\n            }\n        }\n\
    \    }\n    if !is_valid_extension {\n        is_valid = false;\n    }\n    if\
    \ is_valid {\n        return String::from(\"Yes\");\n    }\n    String::from(\"\
    No\")", "    let mut num_digits = 0;\n    let mut dot_found = false;\n    let\
    \ mut extension_found = false;\n    let mut extension_start = 0;\n    let mut\
    \ extension_end = 0;\n    let mut extension_len = 0;\n    let mut extension_str\
    \ = \"\";\n    let mut extension_str_len = 0;\n    let mut extension_str_start\
    \ = 0;\n    let mut extension_str_end = 0;\n    let mut extension_str_len_valid\
    \ = false;\n    let mut extension_str_valid = false;\n    let mut extension_valid\
    \ = false;\n    let mut extension_valid_str = \"\";\n    let mut extension_valid_str_len\
    \ = 0;\n    let mut extension_valid_str_start = 0;\n    let mut extension_valid_str_end\
    \ = 0;\n    let mut extension_valid_str_len_valid = false;\n    let mut extension_valid_str_valid\
    \ = false;\n    let mut extension_valid_str_valid_str = \"\";\n    let mut extension_valid_str_valid_str_len\
    \ = 0;\n    let mut extension_valid_str_valid_str_start = 0;\n    let mut extension_valid_str_valid_str_end\
    \ = 0;\n    let mut extension_valid_str_valid_str_len_valid = false;\n    let\
    \ mut extension_valid_str_valid_str_valid = false;\n    let mut extension_valid_str_valid_str_valid_str\
    \ = \"\";\n    let mut extension_valid_str_valid_str_valid_str_len = 0;\n    let\
    \ mut extension_valid_str_valid_str_valid_str_start = 0;\n    let mut extension_valid_str_valid_str_valid_str_end\
    \ = 0;\n    let mut extension_valid_str_valid_str_valid_str_len_valid = false;\n\
    \    let mut extension_valid_str_valid_str_valid_str_valid = false;\n    let mut\
    \ extension_valid_str_valid_str_valid_str_valid_str = \"\";\n    let mut extension_valid_str_valid_str_valid_str_valid_str",
  "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n\
    \    let mut is_valid = true;\n    let mut is_digit = false;\n    let mut is_letter\
    \ = false;\n    let mut is_extension = false;\n    let mut is_empty = false;\n\
    \    let mut is_start_with_letter = false;\n    let mut is_end_with_extension\
    \ = false;\n    let mut is_more_than_three_digits = false;\n    let mut is_more_than_one_dot\
    \ = false;\n    let mut is_extension_valid = false;\n    let mut is_substring_empty\
    \ = false;\n    let mut is_substring_start_with_letter = false;\n    let mut is_substring_end_with_extension\
    \ = false;\n    let mut is_substring_more_than_three_digits = false;\n    let\
    \ mut is_substring_more_than_one_dot = false;\n    let mut is_substring_extension_valid\
    \ = false;\n    let mut is_substring_empty_after_dot = false;\n    let mut is_substring_empty_before_dot\
    \ = false;\n    let mut is_substring_start_with_letter_after_dot = false;\n  \
    \  let mut is_substring_start_with_letter_before_dot = false;\n    let mut is_substring_end_with_extension_after_dot\
    \ = false;\n    let mut is_substring_end_with_extension_before_dot = false;\n\
    \    let mut is_substring_more_than_three_digits_after_dot = false;\n    let mut\
    \ is_substring_more_than_three_digits_before_dot = false;\n    let mut is_substring_more_than_one_dot_after_dot\
    \ = false;\n    let mut is_substring_more_than_one_dot_before_dot = false;\n \
    \   let mut is_substring_extension_valid_after_dot = false;\n    let mut is_substring_extension_valid_before_dot\
    \ = false;\n", "    let mut digits = 0;\n    let mut dot = false;\n    let mut\
    \ latin = false;\n    let mut extension = false;\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        } else if\
    \ c == '.' {\n            dot = true;\n        } else if c.is_alphabetic() {\n\
    \            latin = true;\n        } else if c == 't' || c == 'e' || c == 'x'\
    \ || c == 'd' {\n            extension = true;\n        }\n    }\n    if digits\
    \ > 3 || !dot || !latin || !extension {\n        return String::from(\"No\");\n\
    \    }\n    return String::from(\"Yes\");", "    let mut digits = 0;\n    let\
    \ mut dot = false;\n    let mut extension = false;\n    let mut start = false;\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits\
    \ += 1;\n        } else if c == '.' {\n            dot = true;\n        } else\
    \ if c.is_alphabetic() {\n            if !start {\n                start = true;\n\
    \            }\n        } else {\n            return \"No\".to_string();\n   \
    \     }\n    }\n    if digits > 3 {\n        return \"No\".to_string();\n    }\n\
    \    if !dot {\n        return \"No\".to_string();\n    }\n    if !start {\n \
    \       return \"No\".to_string();\n    }\n    let mut ext = file_name.split('.').last().unwrap();\n\
    \    if ext == \"txt\" || ext == \"exe\" || ext == \"dll\" {\n        return \"\
    Yes\".to_string();\n    }\n    \"No\".to_string()", "    let mut count = 0;\n\
    \    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_number = false;\n    let mut is_letter = false;\n  \
    \  let mut is_extension = false;\n    let mut extension = String::new();\n   \
    \ let mut file_name = file_name.chars();\n    for (index, c) in file_name.enumerate()\
    \ {\n        if c.is_numeric() {\n            count += 1;\n            is_number\
    \ = true;\n        }\n        if c == '.' {\n            dot_count += 1;\n   \
    \         dot_index = index;\n        }\n        if c.is_alphabetic() {\n    \
    \        is_letter = true;\n        }\n    }\n    if count > 3 || dot_count !=\
    \ 1 || !is_letter || dot_index == 0 {\n        is_valid = false;\n    } else {\n\
    \        extension = file_name.clone().skip(dot_index + 1).collect();\n      \
    \  if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \            is_extension = true;\n        }\n    }\n    if is_valid && is_extension\
    \ {\n        return String::from(\"Yes\");\n    } else {\n        return String::from(\"\
    No\");\n    }", "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ is_valid = true;\n    let mut is_valid_ext = false;\n    let mut is_valid_name\
    \ = false;\n    let mut ext = String::new();\n    let mut name = String::new();\n\
    \    for c in file_name.chars() {\n        if c == '.' {\n            dot_count\
    \ += 1;\n            is_valid_name = true;\n        } else if c.is_digit(10) {\n\
    \            count += 1;\n        } else if c.is_alphabetic() {\n            is_valid_name\
    \ = true;\n        }\n    }\n    if count > 3 || dot_count != 1 || !is_valid_name\
    \ {\n        is_valid = false;\n    } else {\n        let mut parts = file_name.split('.');\n\
    \        name = parts.next().unwrap().to_string();\n        ext = parts.next().unwrap().to_string();\n\
    \        if ext == \"txt\" || ext == \"exe\" || ext == \"dll\" {\n           \
    \ is_valid_ext = true;\n        }\n    }\n    if is_valid && is_valid_ext {\n\
    \        \"Yes\".to_string()\n    } else {\n        \"No\".to_string()\n    }",
  "    let mut digits = 0;\n    let mut dot = false;\n    let mut valid_extension\
    \ = false;\n    let mut valid_name = false;\n    let mut extension = String::new();\n\
    \    let mut name = String::new();\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        }\n      \
    \  if c == '.' {\n            dot = true;\n            extension = file_name[i+1..].to_string();\n\
    \            name = file_name[..i].to_string();\n        }\n    }\n    if digits\
    \ > 3 {\n        return \"No\".to_string();\n    }\n    if !dot {\n        return\
    \ \"No\".to_string();\n    }\n    if name.is_empty() {\n        return \"No\"\
    .to_string();\n    }\n    if !name.chars().next().unwrap().is_alphabetic() {\n\
    \        return \"No\".to_string();\n    }\n    if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\" {\n        valid_extension = true;\n    }\n\
    \    if valid_extension {\n        return \"Yes\".to_string();\n    }\n    \"\
    No\".to_string()", "    let mut count = 0;\n    let mut dot_count = 0;\n    let\
    \ mut is_valid = true;\n    let mut is_digit = false;\n    let mut is_letter =\
    \ false;\n    let mut is_dot = false;\n    let mut is_ext = false;\n    let mut\
    \ ext = String::new();\n    let mut name = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            count += 1;\n            is_digit\
    \ = true;\n        }\n        if c == '.' {\n            dot_count += 1;\n   \
    \         is_dot = true;\n        }\n        if c.is_alphabetic() {\n        \
    \    is_letter = true;\n        }\n    }\n    if dot_count != 1 {\n        is_valid\
    \ = false;\n    }\n    if count > 3 {\n        is_valid = false;\n    }\n    if\
    \ !is_digit {\n        is_valid = false;\n    }\n    if !is_letter {\n       \
    \ is_valid = false;\n    }\n    if !is_dot {\n        is_valid = false;\n    }\n\
    \    let mut split = file_name.split('.');\n    let mut vec: Vec<&str> = split.collect();\n\
    \    name = vec[0].to_string();\n    ext = vec[1].to_string();\n    if ext ==\
    \ \"txt\" || ext == \"exe\" || ext == \"dll\" {\n        is_ext = true;\n    }\n\
    \    if is_valid && is_ext {\n        return \"Yes\".to_string();\n    } else\
    \ {\n        return \"No\".to_string();\n    }", "    let mut count = 0;\n   \
    \ let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut first_letter\
    \ = false;\n    let mut last_three = String::new();\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            count += 1;\n        }\n       \
    \ if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n   \
    \     }\n        if i == 0 && c.is_alphabetic() {\n            first_letter =\
    \ true;\n        }\n    }\n    if count > 3 || dot_count != 1 || !first_letter\
    \ {\n        return String::from(\"No\");\n    }\n    for c in file_name.chars().skip(dot_index\
    \ + 1) {\n        last_three.push(c);\n    }\n    if last_three == \"txt\" ||\
    \ last_three == \"exe\" || last_three == \"dll\" {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digits = 0;\n\
    \    let mut dot = false;\n    let mut before_dot = false;\n    let mut after_dot\
    \ = false;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n  \
    \          digits += 1;\n        } else if c == '.' {\n            dot = true;\n\
    \        } else if c.is_alphabetic() {\n            if dot {\n               \
    \ after_dot = true;\n            } else {\n                before_dot = true;\n\
    \            }\n        }\n    }\n    if digits > 3 || !dot || !before_dot ||\
    \ !after_dot {\n        return \"No\".to_string();\n    }\n    let after_dot =\
    \ &file_name[file_name.find('.').unwrap() + 1..];\n    if after_dot == \"txt\"\
    \ || after_dot == \"exe\" || after_dot == \"dll\" {\n        return \"Yes\".to_string();\n\
    \    }\n    \"No\".to_string()", "    let mut count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_digit = false;\n    let mut\
    \ is_letter = false;\n    let mut is_dot = false;\n    let mut is_txt = false;\n\
    \    let mut is_exe = false;\n    let mut is_dll = false;\n    let mut is_empty\
    \ = false;\n    let mut is_empty_before_dot = false;\n    let mut is_empty_after_dot\
    \ = false;\n    let mut is_empty_before_dot_count = 0;\n    let mut is_empty_after_dot_count\
    \ = 0;\n    let mut is_empty_before_dot_count_2 = 0;\n    let mut is_empty_after_dot_count_2\
    \ = 0;\n    let mut is_empty_before_dot_count_3 = 0;\n    let mut is_empty_after_dot_count_3\
    \ = 0;\n    let mut is_empty_before_dot_count_4 = 0;\n    let mut is_empty_after_dot_count_4\
    \ = 0;\n    let mut is_empty_before_dot_count_5 = 0;\n    let mut is_empty_after_dot_count_5\
    \ = 0;\n    let mut is_empty_before_dot_count_6 = 0;\n    let mut is_empty_after_dot_count_6\
    \ = 0;\n    let mut is_empty_before_dot_count_7 = 0;\n    let mut is_empty_after_dot_count_7\
    \ = 0;\n    let mut is_empty_before_dot_count_8 = 0;\n    let mut is_empty_after_dot_count_8\
    \ = 0;\n    let mut is_empty_before_dot_count_9 = 0;\n    let mut is_empty_after_dot_count_9\
    \ = 0;\n    let mut is_empty_before_dot_count_10 = 0;\n    let mut is_empty_after_dot_count_10\
    \ = 0;\n    let mut is_empty_before_dot_count_11 = 0;\n    let mut is_empty_after_dot_",
  "    let mut digits = 0;\n    let mut dot = false;\n    let mut before_dot = false;\n\
    \    let mut after_dot = false;\n    for c in file_name.chars() {\n        if\
    \ c.is_digit(10) {\n            digits += 1;\n        } else if c == '.' {\n \
    \           dot = true;\n        } else if c.is_alphabetic() {\n            if\
    \ dot {\n                after_dot = true;\n            } else {\n           \
    \     before_dot = true;\n            }\n        }\n    }\n    if digits > 3 ||\
    \ !dot || !before_dot || !after_dot {\n        return \"No\".to_string();\n  \
    \  }\n    let mut after_dot_str = \"\".to_string();\n    for c in file_name.chars().rev()\
    \ {\n        if c == '.' {\n            break;\n        }\n        after_dot_str.push(c);\n\
    \    }\n    after_dot_str = after_dot_str.chars().rev().collect();\n    if after_dot_str\
    \ != \"txt\" && after_dot_str != \"exe\" && after_dot_str != \"dll\" {\n     \
    \   return \"No\".to_string();\n    }\n    \"Yes\".to_string()", "    let mut\
    \ digits = 0;\n    let mut dot = false;\n    let mut first_letter = false;\n \
    \   let mut extension = false;\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits += 1;\n        } else if c == '.' {\n            dot =\
    \ true;\n        } else if c.is_alphabetic() {\n            if !first_letter {\n\
    \                first_letter = true;\n            } else {\n                extension\
    \ = true;\n            }\n        }\n    }\n    if digits > 3 || !dot || !first_letter\
    \ || !extension {\n        return \"No\".to_string();\n    }\n    \"Yes\".to_string()",
  "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n\
    \    let mut is_valid_ext = false;\n    let mut ext = String::new();\n    let\
    \ mut name = String::new();\n    for c in file_name.chars() {\n        if c ==\
    \ '.' {\n            dot_count += 1;\n            continue;\n        }\n     \
    \   if dot_count == 0 {\n            if c.is_digit(10) {\n                count\
    \ += 1;\n            }\n            if !c.is_alphabetic() {\n                is_valid\
    \ = false;\n                break;\n            }\n            name.push(c);\n\
    \        } else {\n            ext.push(c);\n        }\n    }\n    if count >\
    \ 3 {\n        is_valid = false;\n    }\n    if dot_count != 1 {\n        is_valid\
    \ = false;\n    }\n    if name.is_empty() {\n        is_valid = false;\n    }\n\
    \    if ext == \"txt\" || ext == \"exe\" || ext == \"dll\" {\n        is_valid_ext\
    \ = true;\n    }\n    if is_valid && is_valid_ext {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut count = 0;\n \
    \   let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid =\
    \ true;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            count += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n            dot_index = i;\n        }\n    }\n    if count > 3 || dot_count\
    \ != 1 {\n        is_valid = false;\n    }\n    let mut sub_str = file_name.get(..dot_index).unwrap();\n\
    \    if sub_str.len() == 0 || !sub_str.chars().next().unwrap().is_alphabetic()\
    \ {\n        is_valid = false;\n    }\n    sub_str = file_name.get(dot_index +\
    \ 1..).unwrap();\n    if sub_str != \"txt\" && sub_str != \"exe\" && sub_str !=\
    \ \"dll\" {\n        is_valid = false;\n    }\n    if is_valid {\n        return\
    \ \"Yes\".to_string();\n    }\n    return \"No\".to_string();", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_before_dot = true;\n    let mut is_after_dot = false;\n    let mut after_dot\
    \ = String::new();\n    for c in file_name.chars() {\n        if c == '.' {\n\
    \            dot_count += 1;\n            is_before_dot = false;\n           \
    \ is_after_dot = true;\n        } else if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        } else if is_before_dot && !c.is_alphabetic() {\n           \
    \ is_valid = false;\n            break;\n        } else if is_after_dot {\n  \
    \          after_dot.push(c);\n        }\n    }\n    if digits_count > 3 || dot_count\
    \ != 1 || !is_valid || after_dot != \"txt\" && after_dot != \"exe\" && after_dot\
    \ != \"dll\" {\n        return String::from(\"No\");\n    }\n    return String::from(\"\
    Yes\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let\
    \ mut first_letter = false;\n    let mut extension = false;\n    let mut extension_str\
    \ = String::new();\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c == '.' {\n          \
    \  dot_count += 1;\n        } else if c.is_alphabetic() {\n            if !first_letter\
    \ {\n                first_letter = true;\n            } else {\n            \
    \    extension_str.push(c);\n            }\n        }\n    }\n    if digits_count\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    if dot_count != 1 {\n\
    \        return String::from(\"No\");\n    }\n    if !first_letter {\n       \
    \ return String::from(\"No\");\n    }\n    if extension_str == \"txt\" || extension_str\
    \ == \"exe\" || extension_str == \"dll\" {\n        extension = true;\n    }\n\
    \    if extension {\n        return String::from(\"Yes\");\n    }\n    return\
    \ String::from(\"No\");", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_empty = true;\n    let mut\
    \ is_letter = false;\n    let mut is_extension = false;\n    let mut extension\
    \ = String::new();\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n        }\n        if c.is_alphabetic() {\n          \
    \  is_letter = true;\n        }\n        if c != '.' {\n            is_empty =\
    \ false;\n        }\n    }\n    if !is_empty && is_letter && dot_count == 1 &&\
    \ digits_count <= 3 {\n        extension = file_name.split('.').collect::<Vec<&str>>()[1].to_string();\n\
    \        if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n            is_extension = true;\n        }\n    }\n    if is_valid && is_extension\
    \ {\n        \"Yes\".to_string()\n    } else {\n        \"No\".to_string()\n \
    \   }", "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut dot_index\
    \ = 0;\n    let mut valid = false;\n    let mut valid_extension = false;\n   \
    \ let mut valid_name = false;\n    let mut valid_digit = true;\n    let mut valid_dot\
    \ = true;\n    let mut valid_extension_list = vec![\"txt\", \"exe\", \"dll\"];\n\
    \    let mut valid_extension_list_iter = valid_extension_list.iter();\n    for\
    \ (index, c) in file_name.chars().enumerate() {\n        if c.is_digit(10) {\n\
    \            count += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n            dot_index = index;\n        }\n    }\n    if count > 3 {\n\
    \        valid_digit = false;\n    }\n    if dot_count != 1 {\n        valid_dot\
    \ = false;\n    }\n    if valid_digit && valid_dot {\n        let name = &file_name[0..dot_index];\n\
    \        let extension = &file_name[dot_index + 1..];\n        if name.len() >\
    \ 0 {\n            if name.chars().next().unwrap().is_alphabetic() {\n       \
    \         valid_name = true;\n            }\n        }\n        for ext in valid_extension_list_iter\
    \ {\n            if ext == extension {\n                valid_extension = true;\n\
    \            }\n        }\n    }\n    if valid_digit && valid_dot && valid_name\
    \ && valid_extension {\n        valid = true;\n    }\n    if valid {\n       \
    \ return \"Yes\".to_string();\n    } else {\n        return \"No\".to_string();\n\
    \    }", "    let mut digits = 0;\n    let mut dot = false;\n    let mut before_dot\
    \ = false;\n    let mut after_dot = false;\n    for c in file_name.chars() {\n\
    \        if c.is_digit(10) {\n            digits += 1;\n        } else if c ==\
    \ '.' {\n            dot = true;\n        } else if c.is_alphabetic() {\n    \
    \        if dot {\n                after_dot = true;\n            } else {\n \
    \               before_dot = true;\n            }\n        }\n    }\n    if digits\
    \ > 3 || !dot || !before_dot || !after_dot {\n        return \"No\".to_string();\n\
    \    }\n    let ext = file_name.split('.').last().unwrap();\n    if ext == \"\
    txt\" || ext == \"exe\" || ext == \"dll\" {\n        return \"Yes\".to_string();\n\
    \    }\n    \"No\".to_string()", "    let mut dot_count = 0;\n    let mut digit_count\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_first_letter = true;\n  \
    \  let mut is_extension_valid = false;\n    let mut extension = String::new();\n\
    \    for c in file_name.chars() {\n        if c == '.' {\n            dot_count\
    \ += 1;\n            is_first_letter = true;\n        } else if c.is_digit(10)\
    \ {\n            digit_count += 1;\n        } else if is_first_letter {\n    \
    \        is_first_letter = false;\n            if !c.is_alphabetic() {\n     \
    \           is_valid = false;\n                break;\n            }\n       \
    \ } else if dot_count == 1 {\n            extension.push(c);\n        }\n    }\n\
    \    if is_valid && dot_count == 1 && digit_count <= 3 {\n        if extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n            is_extension_valid\
    \ = true;\n        }\n    }\n    if is_valid && is_extension_valid {\n       \
    \ \"Yes\".to_string()\n    } else {\n        \"No\".to_string()\n    }", "   \
    \ if file_name.chars().filter(|c| c.is_digit(10)).count() > 3 {\n        return\
    \ \"No\".to_string();\n    }\n    let mut parts = file_name.split('.');\n    let\
    \ first = parts.next().unwrap();\n    let second = parts.next().unwrap();\n  \
    \  if first.is_empty() || !first.chars().next().unwrap().is_alphabetic() {\n \
    \       return \"No\".to_string();\n    }\n    if second != \"txt\" && second\
    \ != \"exe\" && second != \"dll\" {\n        return \"No\".to_string();\n    }\n\
    \    \"Yes\".to_string()", "    let mut digits = 0;\n    let mut dot = false;\n\
    \    let mut before_dot = false;\n    let mut after_dot = false;\n    for c in\
    \ file_name.chars() {\n        if c.is_digit(10) {\n            digits += 1;\n\
    \        } else if c == '.' {\n            dot = true;\n        } else if c.is_alphabetic()\
    \ {\n            if dot {\n                after_dot = true;\n            } else\
    \ {\n                before_dot = true;\n            }\n        }\n    }\n   \
    \ if digits > 3 || !dot || !before_dot || !after_dot {\n        return \"No\"\
    .to_string();\n    }\n    let mut after_dot_str = \"\";\n    for c in file_name.chars().rev()\
    \ {\n        if c == '.' {\n            break;\n        }\n        after_dot_str\
    \ = &format!(\"{}{}\", c, after_dot_str);\n    }\n    if after_dot_str == \"txt\"\
    \ || after_dot_str == \"exe\" || after_dot_str == \"dll\" {\n        return \"\
    Yes\".to_string();\n    }\n    \"No\".to_string()", "    let mut count = 0;\n\
    \    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut first_char\
    \ = true;\n    let mut first_char_valid = false;\n    let mut last_char_valid\
    \ = false;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            count += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n            dot_index = i;\n        }\n        if first_char {\n    \
    \        if c.is_alphabetic() {\n                first_char_valid = true;\n  \
    \          }\n            first_char = false;\n        }\n    }\n    let last_chars\
    \ = &file_name[dot_index+1..];\n    if last_chars == \"txt\" || last_chars ==\
    \ \"exe\" || last_chars == \"dll\" {\n        last_char_valid = true;\n    }\n\
    \    if count > 3 || dot_count != 1 || !first_char_valid || !last_char_valid {\n\
    \        return \"No\".to_string();\n    }\n    \"Yes\".to_string()", "    let\
    \ mut count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n \
    \   let mut is_valid_extension = false;\n    let mut is_valid_prefix = false;\n\
    \    let mut extension = String::new();\n    let mut prefix = String::new();\n\
    \    for c in file_name.chars() {\n        if c == '.' {\n            dot_count\
    \ += 1;\n            continue;\n        }\n        if dot_count == 0 {\n     \
    \       if c.is_alphabetic() {\n                is_valid_prefix = true;\n    \
    \        }\n            prefix.push(c);\n        } else {\n            extension.push(c);\n\
    \        }\n        if c.is_numeric() {\n            count += 1;\n        }\n\
    \    }\n    if count > 3 {\n        is_valid = false;\n    }\n    if dot_count\
    \ != 1 {\n        is_valid = false;\n    }\n    if !is_valid_prefix {\n      \
    \  is_valid = false;\n    }\n    if extension == \"txt\" || extension == \"exe\"\
    \ || extension == \"dll\" {\n        is_valid_extension = true;\n    }\n    if\
    \ !is_valid_extension {\n        is_valid = false;\n    }\n    if is_valid {\n\
    \        return String::from(\"Yes\");\n    }\n    return String::from(\"No\"\
    );", "    let mut digits = 0;\n    let mut dot = false;\n    let mut before_dot\
    \ = false;\n    let mut after_dot = false;\n    for c in file_name.chars() {\n\
    \        if c.is_digit(10) {\n            digits += 1;\n        } else if c ==\
    \ '.' {\n            dot = true;\n        } else if dot {\n            after_dot\
    \ = true;\n        } else {\n            before_dot = true;\n        }\n    }\n\
    \    if digits > 3 || !dot || !before_dot || !after_dot {\n        return \"No\"\
    .to_string();\n    }\n    let ext = &file_name[file_name.find('.').unwrap() +\
    \ 1..];\n    if ext == \"txt\" || ext == \"exe\" || ext == \"dll\" {\n       \
    \ return \"Yes\".to_string();\n    }\n    \"No\".to_string()", "    let mut count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut valid = false;\n    let mut valid_ext\
    \ = false;\n    let mut valid_name = false;\n    let mut valid_num = true;\n \
    \   let mut ext = String::new();\n    let mut name = String::new();\n    for c\
    \ in file_name.chars() {\n        if c == '.' {\n            dot_count += 1;\n\
    \            count = 0;\n        } else if c.is_digit(10) {\n            count\
    \ += 1;\n        }\n    }\n    if dot_count == 1 && count <= 3 {\n        valid_num\
    \ = true;\n    } else {\n        valid_num = false;\n    }\n    let mut iter =\
    \ file_name.split('.');\n    name = iter.next().unwrap().to_string();\n    ext\
    \ = iter.next().unwrap().to_string();\n    if !name.is_empty() && name.chars().next().unwrap().is_alphabetic()\
    \ {\n        valid_name = true;\n    } else {\n        valid_name = false;\n \
    \   }\n    if ext == \"txt\" || ext == \"exe\" || ext == \"dll\" {\n        valid_ext\
    \ = true;\n    } else {\n        valid_ext = false;\n    }\n    if valid_num &&\
    \ valid_name && valid_ext {\n        valid = true;\n    } else {\n        valid\
    \ = false;\n    }\n    if valid {\n        return \"Yes\".to_string();\n    }\
    \ else {\n        return \"No\".to_string();\n    }", '    unimplemented!()',
  "    let mut digits = 0;\n    let mut dot = false;\n    let mut latin = false;\n\
    \    let mut extension = false;\n    for c in file_name.chars() {\n        if\
    \ c.is_digit(10) {\n            digits += 1;\n        } else if c == '.' {\n \
    \           dot = true;\n        } else if c.is_alphabetic() {\n            latin\
    \ = true;\n        } else if c == 't' || c == 'e' || c == 'x' || c == 'd' {\n\
    \            extension = true;\n        }\n    }\n    if digits > 3 || !dot ||\
    \ !latin || !extension {\n        return String::from(\"No\");\n    }\n    return\
    \ String::from(\"Yes\");", "    let mut count = 0;\n    let mut dot_count = 0;\n\
    \    let mut valid = false;\n    let mut valid_extension = false;\n    let mut\
    \ extension = String::new();\n    let mut valid_name = false;\n    let mut name\
    \ = String::new();\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            count += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n        }\n    }\n    if count <= 3 && dot_count == 1 {\n        valid\
    \ = true;\n    }\n    let mut iter = file_name.split('.');\n    name = iter.next().unwrap().to_string();\n\
    \    extension = iter.next().unwrap().to_string();\n    if name.len() > 0 && name.chars().next().unwrap().is_alphabetic()\
    \ {\n        valid_name = true;\n    }\n    if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\" {\n        valid_extension = true;\n    }\n\
    \    if valid && valid_name && valid_extension {\n        return \"Yes\".to_string();\n\
    \    }\n    return \"No\".to_string();", "    let mut digits = 0;\n    let mut\
    \ dot = false;\n    let mut latin = false;\n    let mut extension = false;\n \
    \   for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits\
    \ += 1;\n        } else if c == '.' {\n            dot = true;\n        } else\
    \ if c.is_alphabetic() {\n            latin = true;\n        } else if c == 't'\
    \ {\n            extension = true;\n        } else if c == 'x' {\n           \
    \ extension = true;\n        } else if c == 'e' {\n            extension = true;\n\
    \        } else if c == 'd' {\n            extension = true;\n        } else if\
    \ c == 'l' {\n            extension = true;\n        }\n    }\n    if digits >\
    \ 3 || !dot || !latin || !extension {\n        return String::from(\"No\");\n\
    \    }\n    return String::from(\"Yes\");", "    let mut count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut is_valid = true;\n    let mut is_valid_extension\
    \ = false;\n    let mut is_valid_name = false;\n    let mut is_valid_number =\
    \ true;\n    let mut is_valid_dot = false;\n    let mut is_valid_extension_length\
    \ = false;\n    let mut is_valid_name_length = false;\n    let mut is_valid_number_length\
    \ = true;\n    let mut is_valid_dot_length = false;\n    let mut extension = String::new();\n\
    \    let mut name = String::new();\n    let mut number = String::new();\n    let\
    \ mut dot = String::new();\n    for c in file_name.chars() {\n        if c ==\
    \ '.' {\n            dot_count += 1;\n            if dot_count == 1 {\n      \
    \          is_valid_dot = true;\n            }\n            if dot_count > 1 {\n\
    \                is_valid_dot_length = true;\n            }\n        }\n     \
    \   if c.is_digit(10) {\n            count += 1;\n            if count > 3 {\n\
    \                is_valid_number_length = false;\n            }\n        }\n \
    \       if c.is_alphabetic() {\n            if c.is_lowercase() {\n          \
    \      is_valid_name = true;\n            }\n            if c.is_uppercase() {\n\
    \                is_valid_name = true;\n            }\n        }\n        if c\
    \ == '.' {\n            is_valid_dot = true;\n        }\n        if c == '.' {\n\
    \            if count == 0 {\n                is_valid_dot_length = true;\n  \
    \          }\n        }\n        if c == '.' {\n            if is_valid_name ==\
    \ false {\n                is_valid_dot_length = true;\n            }\n      \
    \  }\n        if c == '.' {\n            if is_valid_name == true {\n        \
    \        is_valid_dot_length = false;\n            }\n        }\n        if c\
    \ == '.' {\n            if is_valid_name == true {\n                is_valid_dot",
  "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut extension = String::new();\n\
    \    let mut valid_extensions = vec![\"txt\", \"exe\", \"dll\"];\n    for c in\
    \ file_name.chars() {\n        if c.is_digit(10) {\n            count += 1;\n\
    \        }\n        if c == '.' {\n            dot_count += 1;\n        }\n  \
    \  }\n    if count > 3 || dot_count != 1 {\n        return String::from(\"No\"\
    );\n    }\n    let mut split = file_name.split('.');\n    let first = split.next().unwrap();\n\
    \    let second = split.next().unwrap();\n    if first.len() == 0 || !first.chars().next().unwrap().is_alphabetic()\
    \ {\n        return String::from(\"No\");\n    }\n    if !valid_extensions.contains(&second)\
    \ {\n        return String::from(\"No\");\n    }\n    return String::from(\"Yes\"\
    );", "    let mut digits = 0;\n    let mut dot = false;\n    let mut before_dot\
    \ = false;\n    let mut after_dot = false;\n    for c in file_name.chars() {\n\
    \        if c.is_digit(10) {\n            digits += 1;\n        } else if c ==\
    \ '.' {\n            dot = true;\n        } else if c.is_alphabetic() {\n    \
    \        if dot {\n                after_dot = true;\n            } else {\n \
    \               before_dot = true;\n            }\n        }\n    }\n    if digits\
    \ > 3 || !dot || !before_dot || !after_dot {\n        return \"No\".to_string();\n\
    \    }\n    let after_dot_str = &file_name[file_name.find('.').unwrap() + 1..];\n\
    \    if after_dot_str == \"txt\" || after_dot_str == \"exe\" || after_dot_str\
    \ == \"dll\" {\n        return \"Yes\".to_string();\n    }\n    \"No\".to_string()",
  "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n\
    \    let mut is_valid_extension = false;\n    let mut is_valid_prefix = false;\n\
    \    let mut is_valid_digit = true;\n    let mut is_valid_dot = true;\n    let\
    \ mut is_valid_length = true;\n    let mut is_valid_first_char = true;\n    let\
    \ mut is_valid_last_char = true;\n    let mut is_valid_extension_length = true;\n\
    \    let mut is_valid_prefix_length = true;\n    let mut is_valid_extension_char\
    \ = true;\n    let mut is_valid_prefix_char = true;\n    let mut is_valid_extension_first_char\
    \ = true;\n    let mut is_valid_prefix_first_char = true;\n    let mut is_valid_extension_last_char\
    \ = true;\n    let mut is_valid_prefix_last_char = true;\n    let mut is_valid_extension_digit\
    \ = true;\n    let mut is_valid_prefix_digit = true;\n    let mut is_valid_extension_dot\
    \ = true;\n    let mut is_valid_prefix_dot = true;\n    let mut extension = String::new();\n\
    \    let mut prefix = String::new();\n    let mut extension_length = 0;\n    let\
    \ mut prefix_length = 0;\n    let mut extension_first_char = ' ';\n    let mut\
    \ prefix_first_char = ' ';\n    let mut extension_last_char = ' ';\n    let mut\
    \ prefix_last_char = ' ';\n    let mut extension_digit_count = 0;\n    let mut\
    \ prefix_digit_count = 0;\n    let mut extension_dot_count = 0;\n    let mut prefix_dot_count\
    \ = 0;\n    let mut extension_char_count = 0;\n    let mut prefix_char_count =\
    \ 0;\n    let mut extension_char_list = vec![' '; 3];\n    let mut prefix_char_list\
    \ = vec![' '; 3];\n    let mut extension_digit_list = vec![' ';", "    let mut\
    \ count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let\
    \ mut is_first_letter = true;\n    let mut is_first_letter_valid = false;\n  \
    \  let mut is_extension_valid = false;\n    let mut extension = String::new();\n\
    \    for c in file_name.chars() {\n        if c == '.' {\n            dot_count\
    \ += 1;\n            is_first_letter = true;\n        } else if c.is_numeric()\
    \ {\n            count += 1;\n        } else if is_first_letter {\n          \
    \  is_first_letter = false;\n            is_first_letter_valid = c.is_alphabetic();\n\
    \        } else {\n            extension.push(c);\n        }\n    }\n    is_extension_valid\
    \ = extension == \"txt\" || extension == \"exe\" || extension == \"dll\";\n  \
    \  is_valid = count <= 3 && dot_count == 1 && is_first_letter_valid && is_extension_valid;\n\
    \    if is_valid {\n        \"Yes\".to_string()\n    } else {\n        \"No\"\
    .to_string()\n    }", "    let mut dot_count = 0;\n    let mut digit_count = 0;\n\
    \    let mut first_letter = false;\n    let mut last_three = String::new();\n\
    \    for c in file_name.chars() {\n        if c == '.' {\n            dot_count\
    \ += 1;\n        } else if c.is_digit(10) {\n            digit_count += 1;\n \
    \       } else if c.is_alphabetic() {\n            if !first_letter {\n      \
    \          first_letter = true;\n            }\n            last_three.push(c);\n\
    \        }\n    }\n    if dot_count == 1 && digit_count <= 3 && first_letter &&\
    \ last_three.len() >= 4 {\n        let last_three = last_three.chars().rev().take(3).collect::<String>();\n\
    \        if last_three == \"txt\" || last_three == \"exe\" || last_three == \"\
    dll\" {\n            return \"Yes\".to_string();\n        }\n    }\n    \"No\"\
    .to_string()", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut has_letter = false;\n    let mut has_extension = false;\n    let mut\
    \ extension = String::new();\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c == '.' {\n          \
    \  dot_count += 1;\n        } else if c.is_alphabetic() {\n            has_letter\
    \ = true;\n        }\n    }\n    if dot_count == 1 {\n        let mut parts =\
    \ file_name.split('.');\n        let part = parts.next().unwrap();\n        if\
    \ part.len() > 0 {\n            extension = parts.next().unwrap().to_string();\n\
    \            if extension == \"txt\" || extension == \"exe\" || extension == \"\
    dll\" {\n                has_extension = true;\n            }\n        }\n   \
    \ }\n    if digits_count <= 3 && has_letter && has_extension {\n        return\
    \ \"Yes\".to_string();\n    }\n    return \"No\".to_string();", "    let mut dot_count\
    \ = 0;\n    let mut digit_count = 0;\n    let mut first_char_is_letter = false;\n\
    \    let mut last_three_chars = String::new();\n    for c in file_name.chars()\
    \ {\n        if c == '.' {\n            dot_count += 1;\n        } else if c.is_digit(10)\
    \ {\n            digit_count += 1;\n        } else if c.is_alphabetic() {\n  \
    \          first_char_is_letter = true;\n        }\n        last_three_chars.push(c);\n\
    \        if last_three_chars.len() > 3 {\n            last_three_chars.remove(0);\n\
    \        }\n    }\n    if dot_count != 1 || digit_count > 3 || !first_char_is_letter\
    \ || \n        !(last_three_chars == \"txt\" || last_three_chars == \"exe\" ||\
    \ last_three_chars == \"dll\") {\n        return String::from(\"No\");\n    }\n\
    \    return String::from(\"Yes\");", '    unimplemented!()', "    let mut count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut latin_count = 0;\n    let mut\
    \ extension = String::new();\n    let mut valid_extension = false;\n    let mut\
    \ valid_name = false;\n    let mut valid_digit = false;\n    let mut valid_latin\
    \ = false;\n    let mut valid_dot = false;\n    let mut valid_extension_count\
    \ = false;\n    let mut valid_latin_count = false;\n    let mut valid_digit_count\
    \ = false;\n    let mut valid_dot_count = false;\n    let mut valid_name_count\
    \ = false;\n    let mut valid_name_latin = false;\n    let mut valid_name_dot\
    \ = false;\n    let mut valid_name_extension = false;\n    let mut valid_name_digit\
    \ = false;\n    let mut valid_name_extension_count = false;\n    let mut valid_name_latin_count\
    \ = false;\n    let mut valid_name_digit_count = false;\n    let mut valid_name_dot_count\
    \ = false;\n    let mut valid_name_extension_latin = false;\n    let mut valid_name_extension_digit\
    \ = false;\n    let mut valid_name_extension_dot = false;\n    let mut valid_name_extension_latin_count\
    \ = false;\n    let mut valid_name_extension_digit_count = false;\n    let mut\
    \ valid_name_extension_dot_count = false;\n    let mut valid_name_extension_latin_dot\
    \ = false;\n    let mut valid_name_extension_latin_digit = false;\n    let mut\
    \ valid_name_extension_latin_dot_count = false;\n    let mut valid_name_extension_latin_digit_count\
    \ = false;\n    let mut valid_name_extension_latin_dot_digit = false;\n    let\
    \ mut valid_name_extension_latin_dot_digit_count = false;\n    let mut valid_name_extension_latin_dot_digit_extension\
    \ = false;\n    let mut valid_name_extension_l", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut latin_letter_count = 0;\n    let mut\
    \ valid_extension = false;\n    let mut extension_start_index = 0;\n    let mut\
    \ extension_end_index = 0;\n    let mut extension = String::new();\n    let mut\
    \ valid_name = false;\n    let mut name_start_index = 0;\n    let mut name_end_index\
    \ = 0;\n    let mut name = String::new();\n    let mut valid_file_name = false;\n\
    \    let mut file_name_start_index = 0;\n    let mut file_name_end_index = 0;\n\
    \    let mut file_name = file_name;\n    let mut file_name_length = file_name.len();\n\
    \    let mut file_name_char_vec: Vec<char> = file_name.chars().collect();\n  \
    \  let mut file_name_char_vec_length = file_name_char_vec.len();\n    let mut\
    \ file_name_char_vec_index = 0;\n    let mut file_name_char_vec_index_end = file_name_char_vec_length\
    \ - 1;\n    let mut file_name_char_vec_index_start = 0;\n    let mut file_name_char_vec_index_middle\
    \ = file_name_char_vec_length / 2;\n    let mut file_name_char_vec_index_middle_end\
    \ = file_name_char_vec_index_middle + 1;\n    let mut file_name_char_vec_index_middle_start\
    \ = file_name_char_vec_index_middle - 1;\n    let mut file_name_char_vec_index_middle_start_end\
    \ = file_name_char_vec_index_middle_start + 1;\n    let mut file_name_char_vec_index_middle_start_start\
    \ = file_name_char_vec_index_middle_start - 1;\n    let mut file_name_char_vec_index_middle_end_end\
    \ = file_name_char_vec_index_middle_end + 1;\n    let mut file_name_char_", " \
    \   let mut digits = 0;\n    let mut dot = false;\n    let mut before_dot = String::new();\n\
    \    let mut after_dot = String::new();\n    for c in file_name.chars() {\n  \
    \      if c.is_digit(10) {\n            digits += 1;\n        } else if c == '.'\
    \ {\n            dot = true;\n        } else if dot {\n            after_dot.push(c);\n\
    \        } else {\n            before_dot.push(c);\n        }\n    }\n    if digits\
    \ > 3 || !dot || before_dot.is_empty() || !before_dot.chars().next().unwrap().is_alphabetic()\
    \ {\n        return String::from(\"No\");\n    }\n    if after_dot == \"txt\"\
    \ || after_dot == \"exe\" || after_dot == \"dll\" {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digits = 0;\n\
    \    let mut dot = false;\n    let mut before_dot = false;\n    let mut after_dot\
    \ = false;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n  \
    \          digits += 1;\n        } else if c == '.' {\n            dot = true;\n\
    \        } else if c.is_alphabetic() {\n            if dot {\n               \
    \ after_dot = true;\n            } else {\n                before_dot = true;\n\
    \            }\n        }\n    }\n    if digits > 3 || !dot || !before_dot ||\
    \ !after_dot {\n        return \"No\".to_string();\n    }\n    let mut after_dot_str\
    \ = \"\";\n    for c in file_name.chars().rev() {\n        if c == '.' {\n   \
    \         break;\n        }\n        after_dot_str = &format!(\"{}{}\", c, after_dot_str);\n\
    \    }\n    if after_dot_str == \"txt\" || after_dot_str == \"exe\" || after_dot_str\
    \ == \"dll\" {\n        return \"Yes\".to_string();\n    }\n    \"No\".to_string()",
  "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n\
    \    let mut is_digit = false;\n    let mut is_letter = false;\n    let mut is_dot\
    \ = false;\n    let mut is_extension = false;\n    let mut is_empty = false;\n\
    \    let mut is_txt = false;\n    let mut is_exe = false;\n    let mut is_dll\
    \ = false;\n    let mut is_valid_extension = false;\n    let mut is_valid_name\
    \ = false;\n    let mut is_valid_count = false;\n    let mut is_valid_dot_count\
    \ = false;\n    let mut is_valid_empty = false;\n    let mut is_valid_txt = false;\n\
    \    let mut is_valid_exe = false;\n    let mut is_valid_dll = false;\n    let\
    \ mut is_valid_extension_count = false;\n    let mut is_valid_name_count = false;\n\
    \    let mut is_valid_count_count = false;\n    let mut is_valid_dot_count_count\
    \ = false;\n    let mut is_valid_empty_count = false;\n    let mut is_valid_txt_count\
    \ = false;\n    let mut is_valid_exe_count = false;\n    let mut is_valid_dll_count\
    \ = false;\n    let mut is_valid_extension_count_count = false;\n    let mut is_valid_name_count_count\
    \ = false;\n    let mut is_valid_count_count_count = false;\n    let mut is_valid_dot_count_count_count\
    \ = false;\n    let mut is_valid_empty_count_count = false;\n    let mut is_valid_txt_count_count\
    \ = false;\n    let mut is_valid_exe_count_count = false;\n    let mut is_valid_dll_count_count\
    \ = false;\n    let mut is_valid_extension_count_count_count = false;\n    let\
    \ mut is_valid_name_count_count_count = false;\n    let mut is_valid_count_count_count_count\
    \ = false;\n    let", "    let mut dot_count = 0;\n    let mut digit_count = 0;\n\
    \    let mut is_valid = true;\n    let mut is_first_char = true;\n    let mut\
    \ is_first_char_valid = false;\n    let mut is_extension_valid = false;\n    let\
    \ mut extension = String::new();\n    for c in file_name.chars() {\n        if\
    \ c == '.' {\n            dot_count += 1;\n            is_first_char = true;\n\
    \        } else if c.is_digit(10) {\n            digit_count += 1;\n        }\
    \ else if is_first_char {\n            is_first_char = false;\n            is_first_char_valid\
    \ = c.is_alphabetic();\n        } else {\n            extension.push(c);\n   \
    \     }\n    }\n    is_extension_valid = extension == \"txt\" || extension ==\
    \ \"exe\" || extension == \"dll\";\n    is_valid = is_first_char_valid && is_extension_valid\
    \ && dot_count == 1 && digit_count <= 3;\n    if is_valid {\n        \"Yes\".to_string()\n\
    \    } else {\n        \"No\".to_string()\n    }", "    let mut count = 0;\n \
    \   let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_digit\
    \ = false;\n    let mut is_letter = false;\n    let mut is_dot = false;\n    let\
    \ mut is_extension = false;\n    let mut extension = String::new();\n    let mut\
    \ name = String::new();\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            count += 1;\n            is_digit = true;\n        }\n      \
    \  if c == '.' {\n            dot_count += 1;\n            is_dot = true;\n  \
    \      }\n        if c.is_alphabetic() {\n            is_letter = true;\n    \
    \    }\n    }\n    if count > 3 || dot_count != 1 || !is_letter || !is_dot {\n\
    \        is_valid = false;\n    }\n    if is_valid {\n        let mut split =\
    \ file_name.split('.');\n        name = split.next().unwrap().to_string();\n \
    \       extension = split.next().unwrap().to_string();\n        if extension ==\
    \ \"txt\" || extension == \"exe\" || extension == \"dll\" {\n            is_extension\
    \ = true;\n        }\n    }\n    if is_valid && is_extension {\n        return\
    \ \"Yes\".to_string();\n    }\n    return \"No\".to_string();", "    let mut digits\
    \ = 0;\n    let mut dot = false;\n    let mut prefix = false;\n    let mut suffix\
    \ = false;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n  \
    \          digits += 1;\n        } else if c == '.' {\n            dot = true;\n\
    \        } else if !prefix && c.is_alphabetic() {\n            prefix = true;\n\
    \        } else if dot && !suffix && c.is_alphabetic() {\n            suffix =\
    \ true;\n        }\n    }\n    if digits > 3 || !dot || !prefix || !suffix {\n\
    \        return \"No\".to_string();\n    }\n    let suffix = &file_name[file_name.find('.').unwrap()\
    \ + 1..];\n    if suffix != \"txt\" && suffix != \"exe\" && suffix != \"dll\"\
    \ {\n        return \"No\".to_string();\n    }\n    \"Yes\".to_string()", "  \
    \  let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut latin_letter_count\
    \ = 0;\n    let mut latin_letter_index = 0;\n    let mut dot_index = 0;\n    let\
    \ mut extension_index = 0;\n    let mut extension_length = 0;\n    let mut extension\
    \ = String::new();\n    let mut valid = true;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n\
    \        }\n        if c.is_alphabetic() {\n            latin_letter_count +=\
    \ 1;\n            latin_letter_index = i;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 || latin_letter_count != 1 {\n        valid = false;\n\
    \    }\n    if valid {\n        extension_index = dot_index + 1;\n        extension_length\
    \ = file_name.len() - extension_index;\n        extension = file_name[extension_index..].to_string();\n\
    \        if extension != \"txt\" && extension != \"exe\" && extension != \"dll\"\
    \ {\n            valid = false;\n        }\n    }\n    if valid {\n        return\
    \ \"Yes\".to_string();\n    }\n    return \"No\".to_string();", "    let mut count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_digit = false;\n    let mut is_letter = false;\n    let mut is_dot = false;\n\
    \    let mut is_extension = false;\n    let mut extension = String::new();\n \
    \   let mut name = String::new();\n    for c in file_name.chars() {\n        if\
    \ c.is_digit(10) {\n            count += 1;\n            is_digit = true;\n  \
    \      }\n        if c == '.' {\n            dot_count += 1;\n            is_dot\
    \ = true;\n        }\n        if c.is_alphabetic() {\n            is_letter =\
    \ true;\n        }\n    }\n    if count > 3 || dot_count != 1 || !is_letter ||\
    \ !is_dot {\n        is_valid = false;\n    }\n    if is_valid {\n        let\
    \ mut split = file_name.split('.');\n        name = split.next().unwrap().to_string();\n\
    \        extension = split.next().unwrap().to_string();\n        if extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n            is_extension\
    \ = true;\n        }\n    }\n    if is_valid && is_extension {\n        return\
    \ \"Yes\".to_string();\n    }\n    return \"No\".to_string();", "    let mut count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut valid\
    \ = true;\n    let mut valid_extension = false;\n    let mut valid_name = false;\n\
    \    let mut valid_number = true;\n    let mut valid_dot = false;\n    for (i,\
    \ c) in file_name.chars().enumerate() {\n        if c.is_digit(10) {\n       \
    \     count += 1;\n        }\n        if c == '.' {\n            dot_count +=\
    \ 1;\n            dot_index = i;\n        }\n    }\n    if count > 3 {\n     \
    \   valid_number = false;\n    }\n    if dot_count == 1 {\n        valid_dot =\
    \ true;\n    }\n    if valid_dot {\n        let name = &file_name[..dot_index];\n\
    \        let extension = &file_name[dot_index + 1..];\n        if name.len() >\
    \ 0 {\n            if name.chars().next().unwrap().is_alphabetic() {\n       \
    \         valid_name = true;\n            }\n        }\n        if extension ==\
    \ \"txt\" || extension == \"exe\" || extension == \"dll\" {\n            valid_extension\
    \ = true;\n        }\n    }\n    if valid_number && valid_dot && valid_name &&\
    \ valid_extension {\n        valid = true;\n    } else {\n        valid = false;\n\
    \    }\n    if valid {\n        return \"Yes\".to_string();\n    } else {\n  \
    \      return \"No\".to_string();\n    }", "    let mut count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut valid = false;\n    let mut valid_ext = false;\n\
    \    let mut valid_name = false;\n    let mut valid_count = false;\n    for c\
    \ in file_name.chars() {\n        if c.is_digit(10) {\n            count += 1;\n\
    \        }\n        if c == '.' {\n            dot_count += 1;\n        }\n  \
    \  }\n    if count <= 3 {\n        valid_count = true;\n    }\n    if dot_count\
    \ == 1 {\n        valid = true;\n    }\n    let mut split = file_name.split('.');\n\
    \    let name = split.next().unwrap();\n    let ext = split.next().unwrap();\n\
    \    if name.chars().next().unwrap().is_alphabetic() {\n        valid_name = true;\n\
    \    }\n    if ext == \"txt\" || ext == \"exe\" || ext == \"dll\" {\n        valid_ext\
    \ = true;\n    }\n    if valid && valid_count && valid_name && valid_ext {\n \
    \       return \"Yes\".to_string();\n    }\n    \"No\".to_string()", "    let\
    \ mut count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n \
    \   let mut is_digit = false;\n    let mut is_letter = false;\n    let mut is_dot\
    \ = false;\n    let mut is_extension = false;\n    let mut is_empty = false;\n\
    \    let mut is_txt = false;\n    let mut is_exe = false;\n    let mut is_dll\
    \ = false;\n    let mut is_substring = false;\n    let mut is_substring_empty\
    \ = false;\n    let mut is_substring_letter = false;\n    let mut is_substring_digit\
    \ = false;\n    let mut is_substring_dot = false;\n    let mut is_substring_extension\
    \ = false;\n    let mut is_substring_txt = false;\n    let mut is_substring_exe\
    \ = false;\n    let mut is_substring_dll = false;\n    let mut is_substring_empty_after_dot\
    \ = false;\n    let mut is_substring_letter_after_dot = false;\n    let mut is_substring_digit_after_dot\
    \ = false;\n    let mut is_substring_dot_after_dot = false;\n    let mut is_substring_extension_after_dot\
    \ = false;\n    let mut is_substring_txt_after_dot = false;\n    let mut is_substring_exe_after_dot\
    \ = false;\n    let mut is_substring_dll_after_dot = false;\n    let mut is_substring_empty_before_dot\
    \ = false;\n    let mut is_substring_letter_before_dot = false;\n    let mut is_substring_digit_before_dot\
    \ = false;\n    let mut is_substring_dot_before_dot = false;\n    let mut is_substring_extension_before_dot\
    \ = false;\n    let mut is_substring_txt_before_dot = false;\n    let mut is_substring_exe_before_dot\
    \ = false;\n    let mut is_substring_dll_before_dot = false;\n    let mut is_substring_empty_after_",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_empty = true;\n    let mut is_letter = false;\n    let\
    \ mut is_extension = false;\n    let mut extension = String::new();\n    for c\
    \ in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \   }\n        if c.is_alphabetic() {\n            is_letter = true;\n       \
    \ }\n        if c == '.' {\n            is_empty = false;\n        }\n    }\n\
    \    if digits_count > 3 || dot_count != 1 || !is_letter || is_empty {\n     \
    \   is_valid = false;\n    }\n    if is_valid {\n        for c in file_name.chars()\
    \ {\n            if c == '.' {\n                is_extension = true;\n       \
    \     }\n            if is_extension {\n                extension.push(c);\n \
    \           }\n        }\n        if extension != \".txt\" && extension != \"\
    .exe\" && extension != \".dll\" {\n            is_valid = false;\n        }\n\
    \    }\n    if is_valid {\n        return \"Yes\".to_string();\n    }\n    return\
    \ \"No\".to_string();", "    let mut count = 0;\n    let mut dot_count = 0;\n\
    \    let mut valid = true;\n    let mut valid_ext = false;\n    let mut valid_name\
    \ = false;\n    let mut valid_digits = true;\n    let mut valid_dot = false;\n\
    \    let mut valid_ext_count = 0;\n    let mut valid_name_count = 0;\n    let\
    \ mut valid_dot_count = 0;\n    let mut valid_digits_count = 0;\n    let mut valid_ext_arr\
    \ = vec![\"txt\", \"exe\", \"dll\"];\n    let mut valid_name_arr = vec!['a', 'b',\
    \ 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',\
    \ 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\
    \ 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\
    \ 'Y', 'Z'];\n    let mut valid_digits_arr = vec!['0', '1', '2', '3', '4', '5',\
    \ '6', '7', '8', '9'];\n    let mut valid_dot_arr = vec!['.'];\n    for i in file_name.chars()\
    \ {\n        if valid_ext_arr.contains(&i) {\n            valid_ext_count += 1;\n\
    \        }\n        if valid_name_arr.contains(&i) {\n            valid_name_count\
    \ += 1;\n        }\n        if valid_dot_arr.contains(&i) {\n            valid_dot_count\
    \ += 1;\n        }\n        if valid_digits_arr.contains(&i) {\n            valid_digits_count\
    \ += 1;\n        }\n    }\n    if valid_ext_count == 3 {\n        valid_ext",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_before_dot = true;\n    let mut is_after_dot = false;\n\
    \    let mut is_after_dot_valid = false;\n    let mut is_before_dot_valid = false;\n\
    \    let mut is_before_dot_empty = true;\n    let mut is_after_dot_empty = true;\n\
    \    let mut is_before_dot_started = false;\n    let mut is_after_dot_started\
    \ = false;\n    for c in file_name.chars() {\n        if c == '.' {\n        \
    \    dot_count += 1;\n            is_before_dot = false;\n            is_after_dot\
    \ = true;\n            continue;\n        }\n        if is_before_dot {\n    \
    \        if c.is_alphabetic() {\n                is_before_dot_started = true;\n\
    \                is_before_dot_empty = false;\n            }\n            if is_before_dot_started\
    \ && !c.is_alphanumeric() {\n                is_valid = false;\n             \
    \   break;\n            }\n        }\n        if is_after_dot {\n            if\
    \ c.is_alphabetic() {\n                is_after_dot_started = true;\n        \
    \        is_after_dot_empty = false;\n            }\n            if is_after_dot_started\
    \ && !c.is_alphanumeric() {\n                is_valid = false;\n             \
    \   break;\n            }\n        }\n        if c.is_digit(10) {\n          \
    \  digits_count += 1;\n        }\n    }\n    if digits_count > 3 {\n        is_valid\
    \ = false;\n    }\n    if dot_count != 1 {\n        is_valid = false;\n    }\n\
    \    if is_before_dot_empty {\n        is_valid = false;\n    }\n    if is_after_dot_empty\
    \ {\n        is_valid = false;\n    }\n    if is_valid {\n        let mut after_dot\
    \ = String::new();\n        let mut before_dot = String::new();\n        for c\
    \ in", "    let mut dot_count = 0;\n    let mut digit_count = 0;\n    let mut\
    \ first_char = true;\n    let mut first_char_is_letter = false;\n    let mut after_dot\
    \ = false;\n    let mut after_dot_is_valid = false;\n    for c in file_name.chars()\
    \ {\n        if c == '.' {\n            dot_count += 1;\n            after_dot\
    \ = true;\n        } else if c.is_digit(10) {\n            digit_count += 1;\n\
    \        } else if c.is_alphabetic() {\n            if first_char {\n        \
    \        first_char_is_letter = true;\n                first_char = false;\n \
    \           }\n            if after_dot {\n                after_dot_is_valid\
    \ = true;\n            }\n        }\n    }\n    if dot_count != 1 || digit_count\
    \ > 3 || !first_char_is_letter || !after_dot_is_valid {\n        return \"No\"\
    .to_string();\n    }\n    \"Yes\".to_string()", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid\
    \ = true;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c == '.' {\n          \
    \  dot_count += 1;\n            dot_index = i;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 {\n        is_valid = false;\n    } else {\n        let\
    \ (before_dot, after_dot) = file_name.split_at(dot_index);\n        if before_dot.is_empty()\
    \ || !before_dot.chars().next().unwrap().is_alphabetic() {\n            is_valid\
    \ = false;\n        } else if after_dot != \".txt\" && after_dot != \".exe\" &&\
    \ after_dot != \".dll\" {\n            is_valid = false;\n        }\n    }\n \
    \   if is_valid {\n        \"Yes\".to_string()\n    } else {\n        \"No\".to_string()\n\
    \    }", "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_digit = false;\n    let mut is_letter = false;\n   \
    \ let mut is_dot = false;\n    let mut is_extension = false;\n    let mut extension\
    \ = String::new();\n    let mut name = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            count += 1;\n            is_digit\
    \ = true;\n        } else if c.is_alphabetic() {\n            is_letter = true;\n\
    \        } else if c == '.' {\n            dot_count += 1;\n            is_dot\
    \ = true;\n        } else {\n            is_valid = false;\n        }\n    }\n\
    \    if dot_count == 1 && count <= 3 && is_digit && is_letter && is_dot {\n  \
    \      let mut split = file_name.split('.');\n        name = split.next().unwrap().to_string();\n\
    \        extension = split.next().unwrap().to_string();\n        if extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n            is_extension\
    \ = true;\n        }\n    }\n    if is_valid && is_extension {\n        return\
    \ \"Yes\".to_string();\n    }\n    return \"No\".to_string();", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut letter_found\
    \ = false;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c == '.' {\n          \
    \  dot_count += 1;\n            dot_index = i;\n        } else if c.is_alphabetic()\
    \ {\n            letter_found = true;\n        }\n    }\n    if digits_count >\
    \ 3 || dot_count != 1 || !letter_found {\n        return \"No\".to_string();\n\
    \    }\n    let ext = &file_name[dot_index + 1..];\n    if ext == \"txt\" || ext\
    \ == \"exe\" || ext == \"dll\" {\n        return \"Yes\".to_string();\n    }\n\
    \    \"No\".to_string()", "    let mut num_digits = 0;\n    let mut dot_found\
    \ = false;\n    let mut first_char_found = false;\n    let mut extension_found\
    \ = false;\n    let mut extension = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            num_digits += 1;\n        } else\
    \ if c == '.' {\n            dot_found = true;\n        } else if !first_char_found\
    \ {\n            first_char_found = c.is_alphabetic();\n        } else if dot_found\
    \ {\n            extension.push(c);\n        }\n    }\n    if num_digits > 3 ||\
    \ !dot_found || !first_char_found {\n        return String::from(\"No\");\n  \
    \  }\n    if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut valid\
    \ = false;\n    let mut valid_extension = false;\n    let mut extension = String::new();\n\
    \    let mut name = String::new();\n    for c in file_name.chars() {\n       \
    \ if c.is_digit(10) {\n            count += 1;\n        }\n        if c == '.'\
    \ {\n            dot_count += 1;\n        }\n    }\n    if count > 3 || dot_count\
    \ != 1 {\n        return String::from(\"No\");\n    }\n    let mut split = file_name.split('.');\n\
    \    name = split.next().unwrap().to_string();\n    extension = split.next().unwrap().to_string();\n\
    \    if name.len() > 0 && name.chars().next().unwrap().is_alphabetic() {\n   \
    \     valid = true;\n    }\n    if extension == \"txt\" || extension == \"exe\"\
    \ || extension == \"dll\" {\n        valid_extension = true;\n    }\n    if valid\
    \ && valid_extension {\n        return String::from(\"Yes\");\n    }\n    return\
    \ String::from(\"No\");", "    let mut digits = 0;\n    let mut dot = false;\n\
    \    let mut before_dot = false;\n    let mut after_dot = false;\n    for c in\
    \ file_name.chars() {\n        if c.is_digit(10) {\n            digits += 1;\n\
    \        } else if c == '.' {\n            dot = true;\n        } else if c.is_alphabetic()\
    \ {\n            if dot {\n                after_dot = true;\n            } else\
    \ {\n                before_dot = true;\n            }\n        }\n    }\n   \
    \ if digits > 3 || !dot || !before_dot || !after_dot {\n        return \"No\"\
    .to_string();\n    }\n    let after_dot = file_name.split('.').last().unwrap();\n\
    \    if after_dot == \"txt\" || after_dot == \"exe\" || after_dot == \"dll\" {\n\
    \        return \"Yes\".to_string();\n    }\n    \"No\".to_string()", "    let\
    \ mut count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n \
    \   let mut is_valid_ext = false;\n    let mut is_valid_name = false;\n    let\
    \ mut is_valid_num = true;\n    let mut is_valid_dot = false;\n    let mut is_valid_ext_count\
    \ = false;\n    let mut is_valid_name_count = false;\n    let mut is_valid_num_count\
    \ = true;\n    let mut is_valid_dot_count = false;\n    let mut is_valid_name_start\
    \ = false;\n    let mut is_valid_ext_start = false;\n    let mut is_valid_ext_end\
    \ = false;\n    let mut is_valid_name_end = false;\n    let mut is_valid_num_end\
    \ = true;\n    let mut is_valid_dot_end = false;\n    let mut is_valid_name_start_end\
    \ = false;\n    let mut is_valid_ext_start_end = false;\n    let mut is_valid_ext_end_end\
    \ = false;\n    let mut is_valid_name_end_end = false;\n    let mut is_valid_num_end_end\
    \ = true;\n    let mut is_valid_dot_end_end = false;\n    let mut is_valid_name_start_end_end\
    \ = false;\n    let mut is_valid_ext_start_end_end = false;\n    let mut is_valid_ext_end_end_end\
    \ = false;\n    let mut is_valid_name_end_end_end = false;\n    let mut is_valid_num_end_end_end\
    \ = true;\n    let mut is_valid_dot_end_end_end = false;\n    let mut is_valid_name_start_end_end_end\
    \ = false;\n    let mut is_valid_ext_start_end_end_end = false;\n    let mut is_valid_ext_end_end_end_end\
    \ = false;\n    let mut is_valid_name_end_end_end_end = false;\n    let mut is_valid_num_end_",
  "    let mut dot_count = 0;\n    let mut digit_count = 0;\n    let mut has_letter\
    \ = false;\n    let mut has_extension = false;\n    let mut extension_is_valid\
    \ = false;\n    let mut extension_start_index = 0;\n    let mut extension_end_index\
    \ = 0;\n    let mut extension_length = 0;\n    let mut extension_is_empty = true;\n\
    \    let mut extension_has_letter = false;\n    let mut extension_has_digit =\
    \ false;\n    let mut extension_has_dot = false;\n    let mut extension_has_underscore\
    \ = false;\n    let mut extension_has_dash = false;\n    let mut extension_has_space\
    \ = false;\n    let mut extension_has_special_char = false;\n    let mut extension_has_other_char\
    \ = false;\n    let mut extension_has_other_char_count = 0;\n    let mut extension_has_other_char_index\
    \ = 0;\n    let mut extension_has_other_char_char = ' ';\n    let mut extension_has_other_char_char_count\
    \ = 0;\n    let mut extension_has_other_char_char_index = 0;\n    let mut extension_has_other_char_char_char\
    \ = ' ';\n    let mut extension_has_other_char_char_char_count = 0;\n    let mut\
    \ extension_has_other_char_char_char_index = 0;\n    let mut extension_has_other_char_char_char_char\
    \ = ' ';\n    let mut extension_has_other_char_char_char_char_count = 0;\n   \
    \ let mut extension_has_other_char_char_char_char_index = 0;\n    let mut extension_has_other_char_char_char_char_char\
    \ = ' ';\n    let mut extension_has_other_char_char_char_char_char_count = 0;\n\
    \    let mut extension_has_other_char_char_char_char_char_index = 0;\n    let\
    \ mut extension_has_other_char_char_char_char_char_char = ' ';\n    let mut extension_has",
  "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut first_letter =\
    \ false;\n    let mut last_three = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            count += 1;\n        }\n       \
    \ if c == '.' {\n            dot_count += 1;\n        }\n        if !first_letter\
    \ && c.is_alphabetic() {\n            first_letter = true;\n        }\n    }\n\
    \    if count > 3 || dot_count != 1 || !first_letter {\n        return String::from(\"\
    No\");\n    }\n    for c in file_name.chars().rev() {\n        if c == '.' {\n\
    \            break;\n        }\n        last_three.push(c);\n    }\n    last_three\
    \ = last_three.chars().rev().collect();\n    if last_three == \"txt\" || last_three\
    \ == \"exe\" || last_three == \"dll\" {\n        return String::from(\"Yes\");\n\
    \    }\n    return String::from(\"No\");", "    let mut digits = 0;\n    let mut\
    \ dot = false;\n    let mut prefix = false;\n    let mut suffix = false;\n   \
    \ for c in file_name.chars() {\n        match c {\n            '0'..='9' => digits\
    \ += 1,\n            '.' => dot = true,\n            'a'..='z' | 'A'..='Z' =>\
    \ prefix = true,\n            _ => (),\n        }\n    }\n    if digits > 3 {\n\
    \        return \"No\".to_string();\n    }\n    if !dot {\n        return \"No\"\
    .to_string();\n    }\n    if !prefix {\n        return \"No\".to_string();\n \
    \   }\n    let suffix_str = &file_name[file_name.find('.').unwrap() + 1..];\n\
    \    if suffix_str == \"txt\" || suffix_str == \"exe\" || suffix_str == \"dll\"\
    \ {\n        suffix = true;\n    }\n    if suffix {\n        return \"Yes\".to_string();\n\
    \    }\n    \"No\".to_string()", "    let mut digits = 0;\n    let mut dot = false;\n\
    \    let mut latin = false;\n    let mut ext = false;\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        } else if\
    \ c == '.' {\n            dot = true;\n        } else if c.is_alphabetic() {\n\
    \            latin = true;\n        } else if c == 't' || c == 'e' || c == 'x'\
    \ || c == 'd' {\n            ext = true;\n        }\n    }\n    if digits > 3\
    \ || !dot || !latin || !ext {\n        \"No\".to_string()\n    } else {\n    \
    \    \"Yes\".to_string()\n    }", "    let mut digits = 0;\n    let mut dot =\
    \ false;\n    let mut before_dot = false;\n    let mut after_dot = false;\n  \
    \  for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits\
    \ += 1;\n        } else if c == '.' {\n            dot = true;\n        } else\
    \ if c.is_alphabetic() {\n            if dot {\n                after_dot = true;\n\
    \            } else {\n                before_dot = true;\n            }\n   \
    \     }\n    }\n    if digits > 3 || !dot || !before_dot || !after_dot {\n   \
    \     return \"No\".to_string();\n    }\n    let after_dot = file_name.split('.').last().unwrap();\n\
    \    if after_dot == \"txt\" || after_dot == \"exe\" || after_dot == \"dll\" {\n\
    \        return \"Yes\".to_string();\n    }\n    \"No\".to_string()", "    let\
    \ mut digits = 0;\n    let mut dot = false;\n    let mut before_dot = false;\n\
    \    let mut after_dot = false;\n    for c in file_name.chars() {\n        if\
    \ c.is_digit(10) {\n            digits += 1;\n        } else if c == '.' {\n \
    \           dot = true;\n        } else if c.is_alphabetic() {\n            if\
    \ dot {\n                after_dot = true;\n            } else {\n           \
    \     before_dot = true;\n            }\n        }\n    }\n    if digits > 3 ||\
    \ !dot || !before_dot || !after_dot {\n        return \"No\".to_string();\n  \
    \  }\n    let ext = file_name.split('.').last().unwrap();\n    if ext == \"txt\"\
    \ || ext == \"exe\" || ext == \"dll\" {\n        return \"Yes\".to_string();\n\
    \    }\n    \"No\".to_string()", "    let mut count_digits = 0;\n    let mut count_dots\
    \ = 0;\n    let mut first_char_is_letter = false;\n    let mut last_char_is_letter\
    \ = false;\n    let mut last_char_is_dot = false;\n    let mut last_char_is_txt\
    \ = false;\n    let mut last_char_is_exe = false;\n    let mut last_char_is_dll\
    \ = false;\n    let mut last_char_is_txt_exe_dll = false;\n    let mut last_char_is_txt_exe_dll_dot\
    \ = false;\n    let mut last_char_is_txt_exe_dll_dot_letter = false;\n    let\
    \ mut last_char_is_txt_exe_dll_dot_letter_digit = false;\n    let mut last_char_is_txt_exe_dll_dot_letter_digit_letter\
    \ = false;\n    let mut last_char_is_txt_exe_dll_dot_letter_digit_letter_digit\
    \ = false;\n    let mut last_char_is_txt_exe_dll_dot_letter_digit_letter_digit_letter\
    \ = false;\n    let mut last_char_is_txt_exe_dll_dot_letter_digit_letter_digit_letter_digit\
    \ = false;\n    let mut last_char_is_txt_exe_dll_dot_letter_digit_letter_digit_letter_digit_letter\
    \ = false;\n    let mut last_char_is_txt_exe_dll_dot_letter_digit_letter_digit_letter_digit_letter_digit\
    \ = false;\n    let mut last_char_is_txt_exe_dll_dot_letter_digit_letter_digit_letter_digit_letter_digit_letter\
    \ = false;\n    let mut last_char_is_txt_exe_dll_dot_letter_digit_letter_digit_letter_digit_letter_digit_letter_digit\
    \ = false;\n    let mut last_char_is_txt_exe_dll_dot_letter_digit_letter_digit_letter_digit_letter_digit_letter_digit_letter\
    \ = false;\n    let mut last_char_is_txt_exe_dll_", "    let mut digits = 0;\n\
    \    let mut dot = false;\n    let mut first_letter = false;\n    let mut extension\
    \ = false;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n  \
    \          digits += 1;\n        } else if c == '.' {\n            dot = true;\n\
    \        } else if c.is_alphabetic() {\n            if !first_letter {\n     \
    \           first_letter = true;\n            } else {\n                extension\
    \ = true;\n            }\n        }\n    }\n    if digits > 3 || !dot || !first_letter\
    \ || !extension {\n        return \"No\".to_string();\n    }\n    \"Yes\".to_string()",
  "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n\
    \    let mut is_valid = true;\n    let mut is_valid_extension = false;\n    let\
    \ mut is_valid_name = false;\n    let mut is_valid_number = true;\n    let mut\
    \ is_valid_dot = false;\n    let mut is_valid_first_char = false;\n    let mut\
    \ is_valid_last_char = false;\n    let mut is_valid_length = false;\n    let mut\
    \ is_valid_extension_length = false;\n    let mut is_valid_name_length = false;\n\
    \    let mut is_valid_name_first_char = false;\n    let mut is_valid_name_last_char\
    \ = false;\n    let mut is_valid_extension_first_char = false;\n    let mut is_valid_extension_last_char\
    \ = false;\n    let mut is_valid_extension_char = false;\n    let mut is_valid_name_char\
    \ = false;\n    let mut is_valid_extension_count = false;\n    let mut is_valid_name_count\
    \ = false;\n    let mut is_valid_name_dot = false;\n    let mut is_valid_extension_dot\
    \ = false;\n    let mut is_valid_name_dot_count = false;\n    let mut is_valid_extension_dot_count\
    \ = false;\n    let mut is_valid_name_dot_index = false;\n    let mut is_valid_extension_dot_index\
    \ = false;\n    let mut is_valid_name_dot_index_value = false;\n    let mut is_valid_extension_dot_index_value\
    \ = false;\n    let mut is_valid_name_dot_index_value_first_char = false;\n  \
    \  let mut is_valid_extension_dot_index_value_first_char = false;\n    let mut\
    \ is_valid_name_dot_index_value_last_char = false;\n    let mut is_valid_extension_dot_index_value_last_char\
    \ = false;\n    let mut is_valid_name_", "    let mut digits = 0;\n    let mut\
    \ dot = false;\n    let mut before_dot = false;\n    let mut after_dot = false;\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits\
    \ += 1;\n        } else if c == '.' {\n            dot = true;\n        } else\
    \ if !dot {\n            before_dot = c.is_alphabetic();\n        } else {\n \
    \           after_dot = c == 't' || c == 'e' || c == 'x';\n        }\n    }\n\
    \    if digits > 3 || !dot || !before_dot || !after_dot {\n        \"No\".to_string()\n\
    \    } else {\n        \"Yes\".to_string()\n    }", "    let mut count = 0;\n\
    \    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut first_char\
    \ = true;\n    let mut first_char_is_letter = false;\n    let mut last_char_is_letter\
    \ = false;\n    let mut last_char_is_digit = false;\n    let mut last_char_is_dot\
    \ = false;\n    let mut last_char_is_txt = false;\n    let mut last_char_is_exe\
    \ = false;\n    let mut last_char_is_dll = false;\n    let mut last_char_is_slash\
    \ = false;\n    let mut last_char_is_backslash = false;\n    let mut last_char_is_colon\
    \ = false;\n    let mut last_char_is_asterisk = false;\n    let mut last_char_is_question_mark\
    \ = false;\n    let mut last_char_is_quotation_mark = false;\n    let mut last_char_is_less_than\
    \ = false;\n    let mut last_char_is_greater_than = false;\n    let mut last_char_is_pipe\
    \ = false;\n    let mut last_char_is_space = false;\n    let mut last_char_is_tab\
    \ = false;\n    let mut last_char_is_newline = false;\n    let mut last_char_is_carriage_return\
    \ = false;\n    let mut last_char_is_form_feed = false;\n    let mut last_char_is_vertical_tab\
    \ = false;\n    let mut last_char_is_backspace = false;\n    let mut last_char_is_delete\
    \ = false;\n    let mut last_char_is_null = false;\n    let mut last_char_is_bell\
    \ = false;\n    let mut last_char_is_escape = false;\n    let mut last_char_is_control_z\
    \ = false;\n    let mut last_char_is_control_y = false;\n    let mut last_char_is_control_x\
    \ = false;\n    let mut last_char_is_control_w = false;\n    let mut last_char",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut latin_letter_count\
    \ = 0;\n    let mut latin_letter_index = 0;\n    let mut dot_index = 0;\n    let\
    \ mut extension = \"\";\n    for (i, c) in file_name.chars().enumerate() {\n \
    \       if c.is_digit(10) {\n            digits_count += 1;\n        } else if\
    \ c == '.' {\n            dot_count += 1;\n            dot_index = i;\n      \
    \  } else if c.is_alphabetic() {\n            latin_letter_count += 1;\n     \
    \       latin_letter_index = i;\n        }\n    }\n    if digits_count > 3 ||\
    \ dot_count != 1 || latin_letter_count == 0 || latin_letter_index > dot_index\
    \ {\n        return \"No\".to_string();\n    }\n    extension = &file_name[dot_index+1..];\n\
    \    if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \        return \"Yes\".to_string();\n    }\n    return \"No\".to_string();",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_first_letter = true;\n    let mut is_first_dot = true;\n\
    \    let mut is_after_dot = false;\n    let mut is_after_first_letter = false;\n\
    \    let mut is_after_first_dot = false;\n    let mut is_before_dot = true;\n\
    \    let mut is_before_first_dot = true;\n    let mut is_before_first_letter =\
    \ true;\n    let mut is_before_first_digit = true;\n    let mut is_before_second_digit\
    \ = true;\n    let mut is_before_third_digit = true;\n    let mut is_after_first_digit\
    \ = false;\n    let mut is_after_second_digit = false;\n    let mut is_after_third_digit\
    \ = false;\n    let mut is_after_second_letter = false;\n    let mut is_after_third_letter\
    \ = false;\n    let mut is_after_fourth_letter = false;\n    let mut is_after_fifth_letter\
    \ = false;\n    let mut is_after_sixth_letter = false;\n    let mut is_after_seventh_letter\
    \ = false;\n    let mut is_after_eighth_letter = false;\n    let mut is_after_ninth_letter\
    \ = false;\n    let mut is_after_tenth_letter = false;\n    let mut is_after_eleventh_letter\
    \ = false;\n    let mut is_after_twelfth_letter = false;\n    let mut is_after_thirteenth_letter\
    \ = false;\n    let mut is_after_fourteenth_letter = false;\n    let mut is_after_fifteenth_letter\
    \ = false;\n    let mut is_after_sixteenth_letter = false;\n    let mut is_after_seventeenth_letter\
    \ = false;\n    let mut is_after_eighteenth_letter = false;\n    let mut is_after_nineteenth_letter\
    \ = false;\n    let mut is_after_twentieth_letter = false;\n    let mut is_after_twenty",
  "    let mut digits = 0;\n    let mut dot = false;\n    let mut before_dot = false;\n\
    \    let mut after_dot = false;\n    for c in file_name.chars() {\n        if\
    \ c.is_digit(10) {\n            digits += 1;\n        } else if c == '.' {\n \
    \           dot = true;\n        } else if c.is_alphabetic() {\n            if\
    \ dot {\n                after_dot = true;\n            } else {\n           \
    \     before_dot = true;\n            }\n        }\n    }\n    if digits > 3 ||\
    \ !dot || !before_dot || !after_dot {\n        return \"No\".to_string();\n  \
    \  }\n    let file_type = file_name.split('.').collect::<Vec<&str>>()[1];\n  \
    \  if file_type == \"txt\" || file_type == \"exe\" || file_type == \"dll\" {\n\
    \        return \"Yes\".to_string();\n    }\n    \"No\".to_string()", "    let\
    \ mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut valid_extension\
    \ = false;\n    let mut valid_name = false;\n    let mut name_start = false;\n\
    \    let mut extension_start = false;\n    let mut extension_end = false;\n  \
    \  let mut name_end = false;\n    let mut extension = String::new();\n    let\
    \ mut name = String::new();\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            extension_start = true;\n            name_end\
    \ = true;\n        }\n        if c.is_alphabetic() {\n            if !name_start\
    \ {\n                name_start = true;\n            }\n            if !extension_end\
    \ {\n                extension_end = true;\n            }\n        }\n       \
    \ if extension_start && !extension_end {\n            extension.push(c);\n   \
    \     }\n        if name_start && !name_end {\n            name.push(c);\n   \
    \     }\n    }\n    if extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\" {\n        valid_extension = true;\n    }\n    if name.len() > 0\
    \ {\n        valid_name = true;\n    }\n    if digits_count <= 3 && dot_count\
    \ == 1 && valid_extension && valid_name {\n        return \"Yes\".to_string();\n\
    \    }\n    return \"No\".to_string();", "    let mut digits = 0;\n    let mut\
    \ dot = false;\n    let mut extension = false;\n    let mut extension_list = [\"\
    txt\", \"exe\", \"dll\"];\n    let mut extension_index = 0;\n    let mut extension_index_list\
    \ = [0, 0, 0];\n    let mut extension_index_list_index = 0;\n    let mut extension_index_list_index_list\
    \ = [0, 0, 0];\n    let mut extension_index_list_index_list_index = 0;\n    let\
    \ mut extension_index_list_index_list_index_list = [0, 0, 0];\n    let mut extension_index_list_index_list_index_list_index\
    \ = 0;\n    let mut extension_index_list_index_list_index_list_index_list = [0,\
    \ 0, 0];\n    let mut extension_index_list_index_list_index_list_index_list_index\
    \ = 0;\n    let mut extension_index_list_index_list_index_list_index_list_index_list\
    \ = [0, 0, 0];\n    let mut extension_index_list_index_list_index_list_index_list_index_list_index\
    \ = 0;\n    let mut extension_index_list_index_list_index_list_index_list_index_list_index_list\
    \ = [0, 0, 0];\n    let mut extension_index_list_index_list_index_list_index_list_index_list_index_list_index\
    \ = 0;\n    let mut extension_index_list_index_list_index_list_index_list_index_list_index_list_index_list\
    \ = [0, 0, 0];\n    let mut extension_index_list_index_list_index_list_index_list_index_list_index_list_index_list_index\
    \ = 0;\n    let mut extension_index_list_index_list_index_list_index_list_index_list_index_list_index_list_index_list\
    \ = [0, 0, 0];\n    let mut extension_index_list_index_list_index_list_index_list_index_list_index_list_",
  "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n\
    \    let mut is_digit = false;\n    let mut is_letter = false;\n    let mut is_dot\
    \ = false;\n    let mut is_extension = false;\n    let mut extension = String::new();\n\
    \    let mut name = String::new();\n    for c in file_name.chars() {\n       \
    \ if c.is_digit(10) {\n            count += 1;\n            is_digit = true;\n\
    \        }\n        if c == '.' {\n            dot_count += 1;\n            is_dot\
    \ = true;\n        }\n        if c.is_alphabetic() {\n            is_letter =\
    \ true;\n        }\n    }\n    if count > 3 || dot_count != 1 || !is_digit ||\
    \ !is_letter || !is_dot {\n        is_valid = false;\n    }\n    if is_valid {\n\
    \        let mut split = file_name.split('.');\n        name = split.next().unwrap().to_string();\n\
    \        extension = split.next().unwrap().to_string();\n        if extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n            is_extension\
    \ = true;\n        }\n    }\n    if is_valid && is_extension {\n        return\
    \ \"Yes\".to_string();\n    }\n    \"No\".to_string()", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut first_char = true;\n    let mut\
    \ first_char_is_letter = false;\n    let mut after_dot = false;\n    let mut after_dot_is_valid\
    \ = false;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n  \
    \          digits_count += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n            after_dot = true;\n        }\n        if first_char {\n \
    \           first_char = false;\n            first_char_is_letter = c.is_alphabetic();\n\
    \        }\n        if after_dot {\n            if c == 't' {\n              \
    \  after_dot_is_valid = true;\n            } else if c == 'x' && after_dot_is_valid\
    \ {\n                after_dot_is_valid = true;\n            } else if c == 'e'\
    \ && after_dot_is_valid {\n                after_dot_is_valid = true;\n      \
    \      } else if c == 'd' && after_dot_is_valid {\n                after_dot_is_valid\
    \ = true;\n            } else if c == 'l' && after_dot_is_valid {\n          \
    \      after_dot_is_valid = true;\n            } else {\n                after_dot_is_valid\
    \ = false;\n            }\n        }\n    }\n    if digits_count > 3 || dot_count\
    \ != 1 || !first_char_is_letter || !after_dot_is_valid {\n        return \"No\"\
    .to_string();\n    }\n    \"Yes\".to_string()", "    let mut count = 0;\n    let\
    \ mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut first_letter = false;\n\
    \    let mut second_part = false;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            count += 1;\n        }\n       \
    \ if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n   \
    \     }\n        if c.is_alphabetic() {\n            first_letter = true;\n  \
    \      }\n        if i > dot_index {\n            if c == 't' || c == 'e' || c\
    \ == 'x' || c == 'd' {\n                second_part = true;\n            }\n \
    \       }\n    }\n    if count > 3 || dot_count != 1 || !first_letter || !second_part\
    \ {\n        return String::from(\"No\");\n    }\n    return String::from(\"Yes\"\
    );", "    let mut digits = 0;\n    let mut dot = false;\n    let mut latin = false;\n\
    \    let mut extension = false;\n    for c in file_name.chars() {\n        if\
    \ c.is_digit(10) {\n            digits += 1;\n        } else if c == '.' {\n \
    \           dot = true;\n        } else if c.is_alphabetic() {\n            latin\
    \ = true;\n        } else if c == 't' || c == 'e' || c == 'x' || c == 'd' {\n\
    \            extension = true;\n        }\n    }\n    if digits > 3 || !dot ||\
    \ !latin || !extension {\n        return String::from(\"No\");\n    }\n    return\
    \ String::from(\"Yes\");", "    let mut count = 0;\n    let mut dot_count = 0;\n\
    \    let mut is_valid = true;\n    let mut is_digit = false;\n    let mut is_letter\
    \ = false;\n    let mut is_dot = false;\n    let mut is_ext = false;\n    let\
    \ mut is_empty = false;\n    let mut is_ext_valid = false;\n    let mut is_ext_empty\
    \ = false;\n    let mut is_ext_letter = false;\n    let mut is_ext_digit = false;\n\
    \    let mut is_ext_dot = false;\n    let mut is_ext_count = 0;\n    let mut is_ext_dot_count\
    \ = 0;\n    let mut is_ext_letter_count = 0;\n    let mut is_ext_digit_count =\
    \ 0;\n    let mut is_ext_empty_count = 0;\n    let mut is_ext_dot_count_count\
    \ = 0;\n    let mut is_ext_letter_count_count = 0;\n    let mut is_ext_digit_count_count\
    \ = 0;\n    let mut is_ext_empty_count_count = 0;\n    let mut is_ext_dot_count_count_count\
    \ = 0;\n    let mut is_ext_letter_count_count_count = 0;\n    let mut is_ext_digit_count_count_count\
    \ = 0;\n    let mut is_ext_empty_count_count_count = 0;\n    let mut is_ext_dot_count_count_count_count\
    \ = 0;\n    let mut is_ext_letter_count_count_count_count = 0;\n    let mut is_ext_digit_count_count_count_count\
    \ = 0;\n    let mut is_ext_empty_count_count_count_count = 0;\n    let mut is_ext_dot_count_count_count_count_count\
    \ = 0;\n    let mut is_ext_letter_count_count_count_count_count = 0;\n    let\
    \ mut is_ext_digit_count_count_count_count_count = 0;\n    let mut is_ext_empty_count_count_count_count_count\
    \ = 0;\n   ", "    let mut digits = 0;\n    let mut dot = false;\n    let mut\
    \ before_dot = false;\n    let mut after_dot = false;\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        } else if\
    \ c == '.' {\n            dot = true;\n        } else if c.is_alphabetic() {\n\
    \            if dot {\n                after_dot = true;\n            } else {\n\
    \                before_dot = true;\n            }\n        }\n    }\n    if digits\
    \ > 3 || !dot || !before_dot || !after_dot {\n        return \"No\".to_string();\n\
    \    }\n    let after_dot = &file_name[file_name.find('.').unwrap() + 1..];\n\
    \    if after_dot == \"txt\" || after_dot == \"exe\" || after_dot == \"dll\" {\n\
    \        return \"Yes\".to_string();\n    }\n    \"No\".to_string()", "    let\
    \ mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n\
    \    let mut is_empty = true;\n    let mut is_latin = false;\n    let mut is_extension\
    \ = false;\n    let mut extension = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n        }\n        if c.is_alphabetic()\
    \ {\n            is_empty = false;\n            if c.is_ascii_alphabetic() {\n\
    \                is_latin = true;\n            }\n        }\n    }\n    if digits_count\
    \ > 3 {\n        is_valid = false;\n    }\n    if dot_count != 1 {\n        is_valid\
    \ = false;\n    }\n    if is_empty {\n        is_valid = false;\n    }\n    if\
    \ !is_latin {\n        is_valid = false;\n    }\n    if is_valid {\n        let\
    \ mut parts = file_name.split('.');\n        extension = parts.next_back().unwrap().to_string();\n\
    \        if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n            is_extension = true;\n        }\n    }\n    if is_valid && is_extension\
    \ {\n        return \"Yes\".to_string();\n    }\n    return \"No\".to_string();",
  "    let mut valid = true;\n    let mut digits = 0;\n    let mut dot = false;\n\
    \    let mut before_dot = false;\n    let mut after_dot = false;\n    for c in\
    \ file_name.chars() {\n        if c.is_digit(10) {\n            digits += 1;\n\
    \        } else if c == '.' {\n            dot = true;\n        } else if c.is_alphabetic()\
    \ {\n            if dot {\n                after_dot = true;\n            } else\
    \ {\n                before_dot = true;\n            }\n        }\n    }\n   \
    \ if digits > 3 || !dot || !before_dot || !after_dot {\n        valid = false;\n\
    \    }\n    if valid {\n        \"Yes\".to_string()\n    } else {\n        \"\
    No\".to_string()\n    }", "    let mut digits = 0;\n    let mut dot = false;\n\
    \    let mut before_dot = false;\n    let mut after_dot = false;\n    for c in\
    \ file_name.chars() {\n        if c.is_digit(10) {\n            digits += 1;\n\
    \        } else if c == '.' {\n            dot = true;\n        } else if dot\
    \ {\n            after_dot = true;\n        } else {\n            before_dot =\
    \ true;\n        }\n    }\n    if digits > 3 || !dot || !before_dot || !after_dot\
    \ {\n        return \"No\".to_string();\n    }\n    let file_name_parts: Vec<&str>\
    \ = file_name.split('.').collect();\n    if file_name_parts.len() != 2 {\n   \
    \     return \"No\".to_string();\n    }\n    let file_extension = file_name_parts[1];\n\
    \    if file_extension != \"txt\" && file_extension != \"exe\" && file_extension\
    \ != \"dll\" {\n        return \"No\".to_string();\n    }\n    \"Yes\".to_string()",
  "    let mut digits = 0;\n    let mut dot = 0;\n    let mut valid = false;\n   \
    \ let mut valid_extension = false;\n    let mut valid_name = false;\n    let mut\
    \ valid_dot = false;\n    let mut valid_digits = false;\n    let mut valid_extension_length\
    \ = false;\n    let mut valid_name_length = false;\n    let mut name_length =\
    \ 0;\n    let mut extension_length = 0;\n    let mut extension = String::new();\n\
    \    let mut name = String::new();\n    let mut extension_start = 0;\n    let\
    \ mut extension_end = 0;\n    let mut name_start = 0;\n    let mut name_end =\
    \ 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut\
    \ l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let\
    \ mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n   \
    \ let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n\
    \    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n\
    \    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n\
    \    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut ii =\
    \ 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut\
    \ mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n   \
    \ let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt =\
    \ 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let",
  "    let mut digits = 0;\n    let mut dot = false;\n    let mut before_dot = false;\n\
    \    let mut after_dot = false;\n    for c in file_name.chars() {\n        if\
    \ c.is_digit(10) {\n            digits += 1;\n        } else if c == '.' {\n \
    \           dot = true;\n        } else if c.is_alphabetic() {\n            if\
    \ dot {\n                after_dot = true;\n            } else {\n           \
    \     before_dot = true;\n            }\n        }\n    }\n    if digits > 3 ||\
    \ !dot || !before_dot || !after_dot {\n        return \"No\".to_string();\n  \
    \  }\n    let file_extension = &file_name[file_name.find('.').unwrap() + 1..];\n\
    \    if file_extension == \"txt\" || file_extension == \"exe\" || file_extension\
    \ == \"dll\" {\n        return \"Yes\".to_string();\n    }\n    \"No\".to_string()",
  "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut valid = false;\n\
    \    let mut valid_extension = false;\n    let mut extension = String::new();\n\
    \    let mut first_char = true;\n    for c in file_name.chars() {\n        if\
    \ c.is_digit(10) {\n            count += 1;\n        }\n        if c == '.' {\n\
    \            dot_count += 1;\n        }\n        if first_char {\n           \
    \ if c.is_alphabetic() {\n                valid = true;\n            }\n     \
    \       first_char = false;\n        }\n    }\n    if dot_count == 1 {\n     \
    \   let mut split = file_name.split('.');\n        extension = split.next_back().unwrap().to_string();\n\
    \        if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n            valid_extension = true;\n        }\n    }\n    if count <= 3\
    \ && valid && valid_extension {\n        return \"Yes\".to_string();\n    }\n\
    \    return \"No\".to_string();", "    let mut count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_digit = false;\n    let mut\
    \ is_letter = false;\n    let mut is_extension = false;\n    let mut extension\
    \ = String::new();\n    let mut name = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            count += 1;\n            is_digit\
    \ = true;\n        }\n        if c == '.' {\n            dot_count += 1;\n   \
    \     }\n        if c.is_alphabetic() {\n            is_letter = true;\n     \
    \   }\n    }\n    if count > 3 || dot_count != 1 || !is_letter || !is_digit {\n\
    \        is_valid = false;\n    }\n    let mut split = file_name.split('.');\n\
    \    name = split.next().unwrap().to_string();\n    extension = split.next().unwrap().to_string();\n\
    \    if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \        is_extension = true;\n    }\n    if is_valid && is_extension {\n    \
    \    return \"Yes\".to_string();\n    }\n    return \"No\".to_string();", "  \
    \  let mut count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            count\
    \ += 1;\n        } else if c == '.' {\n            dot_count += 1;\n        }\n\
    \    }\n    if count > 3 || dot_count != 1 {\n        is_valid = false;\n    }\n\
    \    if is_valid {\n        let mut is_valid = false;\n        let mut dot_index\
    \ = 0;\n        for (i, c) in file_name.chars().enumerate() {\n            if\
    \ c == '.' {\n                dot_index = i;\n                break;\n       \
    \     }\n        }\n        let sub_str = &file_name[..dot_index];\n        if\
    \ sub_str.len() > 0 && sub_str.chars().next().unwrap().is_alphabetic() {\n   \
    \         let sub_str = &file_name[dot_index + 1..];\n            if sub_str ==\
    \ \"txt\" || sub_str == \"exe\" || sub_str == \"dll\" {\n                is_valid\
    \ = true;\n            }\n        }\n        if is_valid {\n            return\
    \ \"Yes\".to_string();\n        }\n    }\n    \"No\".to_string()", "    let mut\
    \ count = 0;\n    let mut dot_count = 0;\n    let mut valid = false;\n    let\
    \ mut valid_extension = false;\n    let mut extension = String::new();\n    let\
    \ mut file_name_without_extension = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_numeric() {\n            count += 1;\n        }\n       \
    \ if c == '.' {\n            dot_count += 1;\n        }\n    }\n    if count >\
    \ 3 || dot_count != 1 {\n        return String::from(\"No\");\n    }\n    let\
    \ mut split = file_name.split('.');\n    file_name_without_extension = split.next().unwrap().to_string();\n\
    \    extension = split.next().unwrap().to_string();\n    if file_name_without_extension.len()\
    \ == 0 {\n        return String::from(\"No\");\n    }\n    for c in file_name_without_extension.chars()\
    \ {\n        if c.is_alphabetic() {\n            valid = true;\n            break;\n\
    \        }\n    }\n    if !valid {\n        return String::from(\"No\");\n   \
    \ }\n    if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n        valid_extension = true;\n    }\n    if valid_extension {\n      \
    \  return String::from(\"Yes\");\n    }\n    return String::from(\"No\");", " \
    \   let mut count = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n\
    \    let mut is_valid = true;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            count += 1;\n        }\n       \
    \ if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n   \
    \     }\n    }\n    if count > 3 || dot_count != 1 {\n        is_valid = false;\n\
    \    }\n    if is_valid {\n        let (before_dot, after_dot) = file_name.split_at(dot_index);\n\
    \        if before_dot.is_empty() || !before_dot.chars().next().unwrap().is_alphabetic()\
    \ {\n            is_valid = false;\n        }\n        if after_dot != \".txt\"\
    \ && after_dot != \".exe\" && after_dot != \".dll\" {\n            is_valid =\
    \ false;\n        }\n    }\n    if is_valid {\n        \"Yes\".to_string()\n \
    \   } else {\n        \"No\".to_string()\n    }", "    let mut count = 0;\n  \
    \  let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_digit\
    \ = false;\n    let mut is_letter = false;\n    let mut is_dot = false;\n    let\
    \ mut is_extension = false;\n    let mut extension = String::new();\n    let mut\
    \ name = String::new();\n    let mut is_empty = true;\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            is_digit = true;\n            count\
    \ += 1;\n        }\n        if c.is_alphabetic() {\n            is_letter = true;\n\
    \        }\n        if c == '.' {\n            is_dot = true;\n            dot_count\
    \ += 1;\n        }\n        if c == '.' && is_empty {\n            is_valid =\
    \ false;\n        }\n        if c == '.' && !is_empty {\n            is_extension\
    \ = true;\n        }\n        if is_extension {\n            extension.push(c);\n\
    \        }\n        if !is_extension {\n            name.push(c);\n        }\n\
    \        if c != '.' {\n            is_empty = false;\n        }\n    }\n    if\
    \ count > 3 || dot_count != 1 || !is_digit || !is_letter || !is_dot {\n      \
    \  is_valid = false;\n    }\n    if extension != \".txt\" && extension != \".exe\"\
    \ && extension != \".dll\" {\n        is_valid = false;\n    }\n    if is_valid\
    \ {\n        return \"Yes\".to_string();\n    }\n    \"No\".to_string()", "  \
    \  let mut digits = 0;\n    let mut dot = false;\n    let mut prefix = false;\n\
    \    let mut suffix = false;\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits += 1;\n        } else if c == '.' {\n            dot =\
    \ true;\n        } else if c.is_alphabetic() {\n            prefix = true;\n \
    \       } else if c == 't' || c == 'e' || c == 'x' || c == 'd' {\n           \
    \ suffix = true;\n        }\n    }\n    if digits > 3 || !dot || !prefix || !suffix\
    \ {\n        return \"No\".to_string();\n    }\n    \"Yes\".to_string()", "  \
    \  let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut latin_letter_count\
    \ = 0;\n    let mut latin_letter_index = 0;\n    let mut dot_index = 0;\n    let\
    \ mut extension_index = 0;\n    let mut extension = \"\";\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        } else\
    \ if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n   \
    \     } else if c.is_alphabetic() {\n            latin_letter_count += 1;\n  \
    \          latin_letter_index = i;\n        }\n    }\n    if digits_count > 3\
    \ || dot_count != 1 || latin_letter_count == 0 || latin_letter_index != 0 {\n\
    \        return \"No\".to_string();\n    }\n    extension_index = dot_index +\
    \ 1;\n    extension = &file_name[extension_index..];\n    if extension == \"txt\"\
    \ || extension == \"exe\" || extension == \"dll\" {\n        return \"Yes\".to_string();\n\
    \    }\n    return \"No\".to_string();", "    let mut digits = 0;\n    let mut\
    \ dot = false;\n    let mut before_dot = false;\n    let mut after_dot = false;\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits\
    \ += 1;\n        } else if c == '.' {\n            dot = true;\n        } else\
    \ if c.is_alphabetic() {\n            if dot {\n                after_dot = true;\n\
    \            } else {\n                before_dot = true;\n            }\n   \
    \     }\n    }\n    if digits > 3 || !dot || !before_dot || !after_dot {\n   \
    \     return \"No\".to_string();\n    }\n    let file_type = file_name.split('.').last().unwrap();\n\
    \    if file_type == \"txt\" || file_type == \"exe\" || file_type == \"dll\" {\n\
    \        return \"Yes\".to_string();\n    }\n    \"No\".to_string()", "    let\
    \ mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n\
    \    let mut is_before_dot = true;\n    let mut is_after_dot = false;\n    let\
    \ mut is_after_dot_valid = false;\n    let mut is_before_dot_valid = false;\n\
    \    let mut is_before_dot_started = false;\n    let mut is_after_dot_started\
    \ = false;\n    let mut is_before_dot_started_with_letter = false;\n    let mut\
    \ is_after_dot_started_with_letter = false;\n    let mut is_after_dot_started_with_number\
    \ = false;\n    let mut is_before_dot_started_with_number = false;\n    let mut\
    \ is_after_dot_started_with_letter_or_number = false;\n    let mut is_before_dot_started_with_letter_or_number\
    \ = false;\n    let mut is_after_dot_started_with_letter_or_number_or_underscore\
    \ = false;\n    let mut is_before_dot_started_with_letter_or_number_or_underscore\
    \ = false;\n    let mut is_after_dot_started_with_letter_or_number_or_underscore_or_dash\
    \ = false;\n    let mut is_before_dot_started_with_letter_or_number_or_underscore_or_dash\
    \ = false;\n    let mut is_after_dot_started_with_letter_or_number_or_underscore_or_dash_or_dot\
    \ = false;\n    let mut is_before_dot_started_with_letter_or_number_or_underscore_or_dash_or_dot\
    \ = false;\n    let mut is_after_dot_started_with_letter_or_number_or_underscore_or_dash_or_dot_or_slash\
    \ = false;\n    let mut is_before_dot_started_with_letter_or_number_or_underscore_or_dash_or_dot_or_slash\
    \ = false;\n    let mut is_after_dot_started_with_letter_or_number_", "    let\
    \ mut count = 0;\n    let mut dot_count = 0;\n    let mut first_char = true;\n\
    \    let mut first_char_valid = false;\n    let mut last_char_valid = false;\n\
    \    let mut valid_ext = false;\n    for c in file_name.chars() {\n        if\
    \ c.is_digit(10) {\n            count += 1;\n        }\n        if c == '.' {\n\
    \            dot_count += 1;\n        }\n        if first_char {\n           \
    \ if c.is_alphabetic() {\n                first_char_valid = true;\n         \
    \   }\n            first_char = false;\n        }\n        if c == '.' {\n   \
    \         if file_name.ends_with(\"txt\") || file_name.ends_with(\"exe\") || file_name.ends_with(\"\
    dll\") {\n                last_char_valid = true;\n            }\n        }\n\
    \    }\n    if count <= 3 && dot_count == 1 && first_char_valid && last_char_valid\
    \ {\n        return \"Yes\".to_string();\n    }\n    return \"No\".to_string();"]
stop_tokens:
- "\n}"
