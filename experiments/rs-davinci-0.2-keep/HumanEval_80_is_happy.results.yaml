name: HumanEval_80_is_happy
language: rust
results:
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut last = chars.next();\n\
    \    let mut last_last = chars.next();\n    for c in chars {\n        if last\
    \ == last_last && last == Some(c) {\n            return false;\n        }\n  \
    \      last_last = last;\n        last = Some(c);\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpo96ihezg.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut curr =\
    \ chars.next().unwrap();\n    let mut next = chars.next().unwrap();\n    while\
    \ chars.next().is_some() {\n        if prev == curr || curr == next || prev ==\
    \ next {\n            return false;\n        }\n        prev = curr;\n       \
    \ curr = next;\n        next = chars.next().unwrap();\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmp6xzblf8c.rs:25:29\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|x|\
    \ x[0] != x[1] && x[1] != x[2] && x[0] != x[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvaqvaatb.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpevbzykuw.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut prev_prev\
    \ = chars.next().unwrap();\n    for c in chars {\n        if c == prev || c ==\
    \ prev_prev {\n            return false;\n        }\n        prev_prev = prev;\n\
    \        prev = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|x|\
    \ x[0] != x[1] && x[1] != x[2] && x[0] != x[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut next = chars.next();\n    let mut next_next = chars.next();\n   \
    \ while let (Some(p), Some(n), Some(nn)) = (prev, next, next_next) {\n       \
    \ if p == n || n == nn || p == nn {\n            return false;\n        }\n  \
    \      prev = next;\n        next = next_next;\n        next_next = chars.next();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpkz732tc_.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8qqn3qhh.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpcnrht2kc.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut next = chars.next();\n    let mut next_next = chars.next();\n   \
    \ while let (Some(p), Some(n), Some(nn)) = (prev, next, next_next) {\n       \
    \ if p == n || n == nn || p == nn {\n            return false;\n        }\n  \
    \      prev = next;\n        next = next_next;\n        next_next = chars.next();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp2j8q1nwu.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut last_char = chars.next();\n\
    \    let mut last_last_char = chars.next();\n    let mut last_last_last_char =\
    \ chars.next();\n    while let Some(c) = last_last_last_char {\n        if last_char\
    \ == last_last_char && last_last_char == last_last_last_char {\n            return\
    \ false;\n        }\n        last_last_last_char = last_last_char;\n        last_last_char\
    \ = last_char;\n        last_char = Some(c);\n    }\n    return true;\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpcrb20br7.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if c ==\
    \ prev.unwrap() || c == prev_prev.unwrap() {\n            return false;\n    \
    \    }\n        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpnba6apb7.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut happy = true;\n    let mut chars = s.chars();\n    let\
    \ mut prev = chars.next();\n    let mut prev_prev = chars.next();\n    for c in\
    \ chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n            happy\
    \ = false;\n            break;\n        }\n        prev_prev = prev;\n       \
    \ prev = Some(c);\n    }\n    happy\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp5dvy42cx.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    if chars.clone().count() < 3\
    \ {\n        return false;\n    }\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.chars().collect::<Vec<char>>().windows(3).all(|w| w[0] != w[1]\
    \ && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxtj19s57.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.chars().collect::<Vec<char>>().windows(3).all(|w| w[0] != w[1]\
    \ && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmphxd49qbk.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev2 = chars.next();\n    for c in chars {\n        if prev == Some(c)\
    \ || prev2 == Some(c) {\n            return false;\n        }\n        prev2 =\
    \ prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpnycefxap.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp5whym4_n.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|x|\
    \ x[0] != x[1] && x[1] != x[2] && x[0] != x[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpq055gqlb.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut prev_prev\
    \ = chars.next().unwrap();\n    for c in chars {\n        if c == prev || c ==\
    \ prev_prev {\n            return false;\n        }\n        prev_prev = prev;\n\
    \        prev = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev_chars = vec![];\n\
    \    while let Some(c) = chars.next() {\n        prev_chars.push(c);\n       \
    \ if prev_chars.len() >= 3 {\n            if prev_chars[0] == prev_chars[1] &&\
    \ prev_chars[1] == prev_chars[2] {\n                return false;\n          \
    \  }\n            prev_chars.remove(0);\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpi3wyn5ru.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1fm_aduq.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut first = chars.next().unwrap();\n    let mut second\
    \ = chars.next().unwrap();\n    for c in chars {\n        if first == second ||\
    \ second == c || first == c {\n            return false;\n        }\n        first\
    \ = second;\n        second = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut result = true;\n    let mut i = 0;\n    let mut j = 1;\n\
    \    let mut k = 2;\n    let mut chars = s.chars();\n    let mut char_vec: Vec<char>\
    \ = Vec::new();\n    for c in chars {\n        char_vec.push(c);\n    }\n    while\
    \ k < char_vec.len() {\n        if char_vec[i] == char_vec[j] || char_vec[i] ==\
    \ char_vec[k] || char_vec[j] == char_vec[k] {\n            result = false;\n \
    \           break;\n        }\n        i += 1;\n        j += 1;\n        k +=\
    \ 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_happy;\n   \
    \ assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpyyz2l3kb.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd4v9oqcj.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    if chars.clone().count() < 3\
    \ {\n        return false;\n    }\n    let mut first = chars.next().unwrap();\n\
    \    let mut second = chars.next().unwrap();\n    let mut third = chars.next().unwrap();\n\
    \    while chars.clone().count() > 0 {\n        if first == second || second ==\
    \ third || first == third {\n            return false;\n        }\n        first\
    \ = second;\n        second = third;\n        third = chars.next().unwrap();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpo71b5wrw.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut curr =\
    \ chars.next().unwrap();\n    let mut next = chars.next().unwrap();\n    while\
    \ chars.next().is_some() {\n        if prev == curr || curr == next || prev ==\
    \ next {\n            return false;\n        }\n        prev = curr;\n       \
    \ curr = next;\n        next = chars.next().unwrap();\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpph8jfn0x.rs:25:29\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7fzwj4zl.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwzyh21cw.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpis43qtga.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut happy = true;\n    let mut chars = s.chars();\n    let\
    \ mut prev = chars.next();\n    let mut prev_prev = chars.next();\n    for c in\
    \ chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n            happy\
    \ = false;\n            break;\n        }\n        prev_prev = prev;\n       \
    \ prev = Some(c);\n    }\n    happy\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp277tm3r5.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    if chars.clone().count() < 3\
    \ {\n        return false;\n    }\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvno0l26y.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpdsmf3q89.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1qwy4s1a.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpjhv4dbrg.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut result = true;\n    let mut chars = s.chars();\n    let\
    \ mut prev = chars.next();\n    let mut next = chars.next();\n    let mut next_next\
    \ = chars.next();\n    while let Some(c) = next_next {\n        if prev == Some(c)\
    \ {\n            result = false;\n            break;\n        }\n        prev\
    \ = next;\n        next = next_next;\n        next_next = chars.next();\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp54eerf6z.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpnad5kg4f.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8oymjo07.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpite60om_.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpetche2qv.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxugbfwqx.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|x|\
    \ x[0] != x[1] && x[1] != x[2] && x[0] != x[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().zip(s.chars().skip(1)).zip(s.chars().skip(2)).all(|((a,\
    \ b), c)| a != b && b != c && a != c)\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut prev_prev\
    \ = chars.next().unwrap();\n    for c in chars {\n        if c == prev || c ==\
    \ prev_prev {\n            return false;\n        }\n        prev_prev = prev;\n\
    \        prev = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut v = s.chars().collect::<Vec<char>>();\n    v.sort();\n\
    \    v.dedup();\n    v.len() >= 3\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp9ynloqeu.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp9q4_bnh2.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if c ==\
    \ prev || c == prev_prev {\n            return false;\n        }\n        prev_prev\
    \ = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n\
    \    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyridjw_z.rs:16:17\n   |\n\
    16 |         if c == prev || c == prev_prev {\n   |                 ^^^^ expected\
    \ `char`, found enum `Option`\n   |\n   = note: expected type `char`\n       \
    \       found enum `Option<char>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyridjw_z.rs:16:30\n\
    \   |\n16 |         if c == prev || c == prev_prev {\n   |                   \
    \           ^^^^^^^^^ expected `char`, found enum `Option`\n   |\n   = note: expected\
    \ type `char`\n              found enum `Option<char>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6y5cxfb8.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut prev_prev\
    \ = chars.next().unwrap();\n    for c in chars {\n        if c == prev || c ==\
    \ prev_prev {\n            return false;\n        }\n        prev_prev = prev;\n\
    \        prev = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|x|\
    \ x[0] != x[1] && x[1] != x[2] && x[0] != x[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpztvm_o7q.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp2egll82p.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut result = true;\n    let mut i = 0;\n    while i < s.len()\
    \ - 2 {\n        if s.chars().nth(i) == s.chars().nth(i + 1) || s.chars().nth(i)\
    \ == s.chars().nth(i + 2)\n            || s.chars().nth(i + 1) == s.chars().nth(i\
    \ + 2)\n        {\n            result = false;\n            break;\n        }\n\
    \        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpynm9hdex.rs:14:15\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|x|\
    \ x[0] != x[1] && x[1] != x[2] && x[0] != x[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1ewc2882.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpmw2axunl.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut prev_prev\
    \ = chars.next().unwrap();\n    for c in chars {\n        if c == prev || c ==\
    \ prev_prev {\n            return false;\n        }\n        prev_prev = prev;\n\
    \        prev = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpejvta0d8.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    if chars.len() < 3 {\n      \
    \  return false;\n    }\n    let mut last = chars.next().unwrap();\n    let mut\
    \ last_last = chars.next().unwrap();\n    for c in chars {\n        if c == last\
    \ || c == last_last {\n            return false;\n        }\n        last_last\
    \ = last;\n        last = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for struct `Chars` in the current\
    \ scope\n  --> /tmp/tmpm0ybzkwt.rs:13:14\n   |\n13 |     if chars.len() < 3 {\n\
    \   |              ^^^ method not found in `Chars<'_>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7j0frfgh.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpckoh0a9t.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4hl2jnvj.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut result = true;\n    let mut chars = s.chars();\n    let\
    \ mut prev = chars.next();\n    let mut next = chars.next();\n    let mut next_next\
    \ = chars.next();\n    while next_next.is_some() {\n        if prev == next ||\
    \ next == next_next || prev == next_next {\n            result = false;\n    \
    \        break;\n        }\n        prev = next;\n        next = next_next;\n\
    \        next_next = chars.next();\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n\
    \    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpym394d9x.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut next = chars.next();\n    let mut next_next = chars.next();\n   \
    \ while next_next.is_some() {\n        if prev == next || next == next_next ||\
    \ prev == next_next {\n            return false;\n        }\n        prev = next;\n\
    \        next = next_next;\n        next_next = chars.next();\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpj8ehsxag.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut result = true;\n    let mut chars = s.chars();\n    let\
    \ mut prev = chars.next();\n    let mut prev_prev = chars.next();\n    for c in\
    \ chars {\n        if prev == Some(c) || prev_prev == Some(c) {\n            result\
    \ = false;\n            break;\n        }\n        prev_prev = prev;\n       \
    \ prev = Some(c);\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp618rpvpz.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|x|\
    \ x[0] != x[1] && x[1] != x[2] && x[0] != x[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp9epatz5r.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpotxy05ao.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpkzxmhafy.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpx2r1j_bn.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.chars().collect::<Vec<char>>().windows(3).all(|w| w[0] != w[1]\
    \ && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7syunecq.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().zip(s.chars().skip(1)).zip(s.chars().skip(2)).all(|((a,\
    \ b), c)| a != b && b != c && a != c)\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7f72oagu.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut prev_prev\
    \ = chars.next().unwrap();\n    for c in chars {\n        if c == prev || c ==\
    \ prev_prev {\n            return false;\n        }\n        prev_prev = prev;\n\
    \        prev = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmplbd1gf1o.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6frvwqfi.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut next = chars.next();\n    let mut next_next = chars.next();\n   \
    \ while let (Some(p), Some(n), Some(nn)) = (prev, next, next_next) {\n       \
    \ if p == n || n == nn || p == nn {\n            return false;\n        }\n  \
    \      prev = next;\n        next = next_next;\n        next_next = chars.next();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp33jc0ckp.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut prev_prev\
    \ = chars.next().unwrap();\n    for c in chars {\n        if c == prev || c ==\
    \ prev_prev {\n            return false;\n        }\n        prev_prev = prev;\n\
    \        prev = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut last = chars.next();\n\
    \    let mut last_last = chars.next();\n    let mut last_last_last = chars.next();\n\
    \    while let Some(c) = last_last_last {\n        if last == last_last || last\
    \ == Some(c) || last_last == Some(c) {\n            return false;\n        }\n\
    \        last = last_last;\n        last_last = last_last_last;\n        last_last_last\
    \ = chars.next();\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpu9h1j_1e.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8mas77v6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut curr =\
    \ chars.next().unwrap();\n    for c in chars {\n        if prev == curr && curr\
    \ == c {\n            return false;\n        }\n        prev = curr;\n       \
    \ curr = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpt1p6dp9s.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7dtn25hg.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().zip(s.chars().skip(1)).zip(s.chars().skip(2)).all(|((a,\
    \ b), c)| a != b && b != c && a != c)\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut prev_prev\
    \ = chars.next().unwrap();\n    for c in chars {\n        if c == prev || c ==\
    \ prev_prev {\n            return false;\n        }\n        prev_prev = prev;\n\
    \        prev = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut prev_prev\
    \ = chars.next().unwrap();\n    for c in chars {\n        if c == prev || c ==\
    \ prev_prev {\n            return false;\n        }\n        prev_prev = prev;\n\
    \        prev = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpk7mvzzke.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpbrexy3dq.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgj72m6x1.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpbung6hbu.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut last = chars.next();\n\
    \    let mut last_last = chars.next();\n    for c in chars {\n        if c ==\
    \ last.unwrap() || c == last_last.unwrap() {\n            return false;\n    \
    \    }\n        last_last = last;\n        last = Some(c);\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp25vaz0p6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpua5mozbv.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut prev_prev\
    \ = chars.next().unwrap();\n    for c in chars {\n        if c == prev || c ==\
    \ prev_prev {\n            return false;\n        }\n        prev_prev = prev;\n\
    \        prev = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut first = chars.next();\n\
    \    let mut second = chars.next();\n    let mut third = chars.next();\n    while\
    \ let Some(f) = first {\n        if let Some(s) = second {\n            if let\
    \ Some(t) = third {\n                if f == s || s == t || f == t {\n       \
    \             return false;\n                }\n            }\n        }\n   \
    \     first = second;\n        second = third;\n        third = chars.next();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpguuu6mmn.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut next = chars.next();\n    let mut next_next = chars.next();\n   \
    \ while let (Some(p), Some(n), Some(nn)) = (prev, next, next_next) {\n       \
    \ if p == n || n == nn || p == nn {\n            return false;\n        }\n  \
    \      prev = next;\n        next = next_next;\n        next_next = chars.next();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpbw6kvd9y.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut next =\
    \ chars.next().unwrap();\n    let mut next_next = chars.next().unwrap();\n   \
    \ while next_next != '\\0' {\n        if prev == next || next == next_next ||\
    \ prev == next_next {\n            return false;\n        }\n        prev = next;\n\
    \        next = next_next;\n        next_next = chars.next().unwrap_or('\\0');\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpqamshr0r.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().zip(s.chars().skip(1)).zip(s.chars().skip(2)).all(|((a,\
    \ b), c)| a != b && b != c && a != c)\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut prev_prev\
    \ = chars.next().unwrap();\n    for c in chars {\n        if c == prev || c ==\
    \ prev_prev {\n            return false;\n        }\n        prev_prev = prev;\n\
    \        prev = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd1zerslg.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpi6ahf_61.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpys3xyius.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp79cr4ews.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().zip(s.chars().skip(1)).zip(s.chars().skip(2)).all(|((a,\
    \ b), c)| a != b && b != c && a != c)\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let s = s.as_str();\n    if s.len() < 3 {\n        return false;\n\
    \    }\n    for i in 0..s.len() - 2 {\n        if s.chars().nth(i) == s.chars().nth(i\
    \ + 1)\n            || s.chars().nth(i) == s.chars().nth(i + 2)\n            ||\
    \ s.chars().nth(i + 1) == s.chars().nth(i + 2)\n        {\n            return\
    \ false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut curr =\
    \ chars.next().unwrap();\n    let mut next = chars.next().unwrap();\n    while\
    \ let Some(c) = chars.next() {\n        if prev == curr || curr == next || prev\
    \ == next {\n            return false;\n        }\n        prev = curr;\n    \
    \    curr = next;\n        next = c;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n\
    \    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp90ysnbbe.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut prev_prev\
    \ = chars.next().unwrap();\n    for c in chars {\n        if c == prev || c ==\
    \ prev_prev {\n            return false;\n        }\n        prev_prev = prev;\n\
    \        prev = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut last = chars.next();\n\
    \    let mut last_last = chars.next();\n    let mut last_last_last = chars.next();\n\
    \    while let Some(c) = last_last_last {\n        if c == *last || c == *last_last\
    \ {\n            return false;\n        }\n        last = last_last;\n       \
    \ last_last = last_last_last;\n        last_last_last = chars.next();\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0614]: type `Option<char>` cannot be dereferenced\n  --> /tmp/tmpludrc24o.rs:17:17\n\
    \   |\n17 |         if c == *last || c == *last_last {\n   |                 ^^^^^\n\
    \nerror[E0614]: type `Option<char>` cannot be dereferenced\n  --> /tmp/tmpludrc24o.rs:17:31\n\
    \   |\n17 |         if c == *last || c == *last_last {\n   |                 \
    \              ^^^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0614`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut last = chars.next();\n\
    \    let mut second_last = chars.next();\n    let mut third_last = chars.next();\n\
    \    while let Some(c) = third_last {\n        if last == second_last || second_last\
    \ == third_last || last == third_last {\n            return false;\n        }\n\
    \        last = second_last;\n        second_last = third_last;\n        third_last\
    \ = chars.next();\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpy6j3na7_.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxtitf_2s.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp5s1du_ql.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp9ohmczpt.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut last = chars.next();\n\
    \    let mut last_last = chars.next();\n    for c in chars {\n        if last\
    \ == last_last && last == Some(c) {\n            return false;\n        }\n  \
    \      last_last = last;\n        last = Some(c);\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpisrehbfe.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|x|\
    \ x[0] != x[1] && x[1] != x[2] && x[0] != x[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut happy = true;\n    let mut chars = s.chars();\n    let\
    \ mut prev = chars.next();\n    let mut curr = chars.next();\n    let mut next\
    \ = chars.next();\n    while happy && next.is_some() {\n        happy = prev !=\
    \ curr && curr != next && prev != next;\n        prev = curr;\n        curr =\
    \ next;\n        next = chars.next();\n    }\n    happy\n}\n\nfn main() {\n  \
    \  let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n\
    \    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp2169b455.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmppokd06ik.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpmngbpeej.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut curr =\
    \ chars.next().unwrap();\n    for c in chars {\n        if prev == curr && curr\
    \ == c {\n            return false;\n        }\n        prev = curr;\n       \
    \ curr = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptr2evyum.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp157tahno.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpmmwmih5v.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev.unwrap()\
    \ == c || prev_prev.unwrap() == c {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp9_qins5n.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpif72owmf.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if c ==\
    \ prev.unwrap() || c == prev_prev.unwrap() {\n            return false;\n    \
    \    }\n        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpahmanoiu.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut prev_prev\
    \ = chars.next().unwrap();\n    for c in chars {\n        if c == prev || c ==\
    \ prev_prev {\n            return false;\n        }\n        prev_prev = prev;\n\
    \        prev = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpb7g9v10v.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpibv_g9pl.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp48ea4dqq.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpojgg_f4y.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    let mut prev_prev_prev = chars.next();\n\
    \    while let Some(c) = prev_prev_prev {\n        if prev == Some(c) || prev_prev\
    \ == Some(c) {\n            return false;\n        }\n        prev = prev_prev;\n\
    \        prev_prev = prev_prev_prev;\n        prev_prev_prev = chars.next();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpdu6l5h18.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut next = chars.next();\n    let mut next_next = chars.next();\n   \
    \ while let (Some(p), Some(n), Some(nn)) = (prev, next, next_next) {\n       \
    \ if p == n || n == nn || p == nn {\n            return false;\n        }\n  \
    \      prev = next;\n        next = next_next;\n        next_next = chars.next();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpyt8kbriy.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|x|\
    \ x[0] != x[1] && x[1] != x[2] && x[0] != x[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw7yaavqt.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwkiqrkqy.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut curr =\
    \ chars.next().unwrap();\n    let mut next = chars.next().unwrap();\n    while\
    \ next != '\\0' {\n        if prev == curr || curr == next || prev == next {\n\
    \            return false;\n        }\n        prev = curr;\n        curr = next;\n\
    \        next = chars.next().unwrap();\n    }\n    true\n}\n\nfn main() {\n  \
    \  let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n\
    \    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpt1aod5p2.rs:25:29\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvogescrp.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|x|\
    \ x[0] != x[1] && x[1] != x[2] && x[0] != x[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7j2g8lep.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpv41sntjy.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgfny7dau.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|x|\
    \ x[0] != x[1] && x[1] != x[2] && x[0] != x[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let len = s.len();\n    if len < 3 {\n        return false;\n\
    \    }\n    for i in 0..len - 2 {\n        if s.chars().nth(i) == s.chars().nth(i\
    \ + 1) || s.chars().nth(i) == s.chars().nth(i + 2)\n            || s.chars().nth(i\
    \ + 1) == s.chars().nth(i + 2)\n        {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|x|\
    \ x[0] != x[1] && x[1] != x[2] && x[0] != x[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpt2xlbyu_.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpez5dzwm6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpl3hud65d.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpeifhonj3.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.chars().collect::<Vec<char>>().windows(3).all(|w| w[0] != w[1]\
    \ && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp9y20o2zy.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev2 = chars.next();\n    for c in chars {\n        if prev == Some(c)\
    \ || prev2 == Some(c) {\n            return false;\n        }\n        prev2 =\
    \ prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpczu3_yd4.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut last = chars.next().unwrap();\n    let mut last_last\
    \ = chars.next().unwrap();\n    for c in chars {\n        if c == last || c ==\
    \ last_last {\n            return false;\n        }\n        last_last = last;\n\
    \        last = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvx4jhlz9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpc0fal0kl.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev_chars = [None, None];\n\
    \    while let Some(c) = chars.next() {\n        if prev_chars[0] == Some(c) {\n\
    \            return false;\n        }\n        prev_chars[0] = prev_chars[1];\n\
    \        prev_chars[1] = Some(c);\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n\
    \    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4h8kphx1.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpc_skvkde.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpqlv3inpt.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut last = chars.next();\n\
    \    let mut last_last = chars.next();\n    for c in chars {\n        if last\
    \ == last_last && last == Some(c) {\n            return false;\n        }\n  \
    \      last_last = last;\n        last = Some(c);\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8q_0i7d_.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|x|\
    \ x[0] != x[1] && x[1] != x[2] && x[0] != x[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw7m3sq49.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    if chars.len() < 3 {\n      \
    \  return false;\n    }\n    let mut prev = chars.next().unwrap();\n    let mut\
    \ next = chars.next().unwrap();\n    for c in chars {\n        if prev == next\
    \ || next == c || prev == c {\n            return false;\n        }\n        prev\
    \ = next;\n        next = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `len` found for struct `Chars` in the current\
    \ scope\n  --> /tmp/tmpdo4hwc2g.rs:13:14\n   |\n13 |     if chars.len() < 3 {\n\
    \   |              ^^^ method not found in `Chars<'_>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0tr_vvq3.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0smxdma8.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|x|\
    \ x[0] != x[1] && x[1] != x[2] && x[0] != x[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpkkupjlhy.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp5ouga1e.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut next = chars.next();\n    let mut next_next = chars.next();\n   \
    \ while let (Some(p), Some(n), Some(nn)) = (prev, next, next_next) {\n       \
    \ if p == n || n == nn || p == nn {\n            return false;\n        }\n  \
    \      prev = next;\n        next = next_next;\n        next_next = chars.next();\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpt3fu5_on.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut prev_prev\
    \ = chars.next().unwrap();\n    for c in chars {\n        if c == prev || c ==\
    \ prev_prev {\n            return false;\n        }\n        prev_prev = prev;\n\
    \        prev = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmprbsugby8.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|w|\
    \ w[0] != w[1] && w[1] != w[2] && w[0] != w[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|x|\
    \ x[0] != x[1] && x[1] != x[2] && x[0] != x[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    let mut prev = chars.next();\n\
    \    let mut prev_prev = chars.next();\n    for c in chars {\n        if prev\
    \ == Some(c) || prev_prev == Some(c) {\n            return false;\n        }\n\
    \        prev_prev = prev;\n        prev = Some(c);\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpcc6nn118.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut prev_prev\
    \ = chars.next().unwrap();\n    for c in chars {\n        if c == prev || c ==\
    \ prev_prev {\n            return false;\n        }\n        prev_prev = prev;\n\
    \        prev = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut curr =\
    \ chars.next().unwrap();\n    for c in chars {\n        if prev == curr && curr\
    \ == c {\n            return false;\n        }\n        prev = curr;\n       \
    \ curr = c;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7e2ydbsb.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars\
    \ = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut next =\
    \ chars.next().unwrap();\n    let mut next_next = chars.next().unwrap();\n   \
    \ while next_next != '\\0' {\n        if prev == next || next == next_next ||\
    \ prev == next_next {\n            return false;\n        }\n        prev = next;\n\
    \        next = next_next;\n        next_next = chars.next().unwrap_or('\\0');\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
    a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    s.len() >= 3 && s.chars().collect::<Vec<char>>().windows(3).all(|x|\
    \ x[0] != x[1] && x[1] != x[2] && x[0] != x[2])\n}\n\nfn main() {\n    let candidate\
    \ = is_happy;\n    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    for i in\
    \ 0..s.len() - 2 {\n        if s.chars().nth(i) == s.chars().nth(i + 1) || s.chars().nth(i)\
    \ == s.chars().nth(i + 2) ||\n           s.chars().nth(i + 1) == s.chars().nth(i\
    \ + 2) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\"\
    )), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut chars = s.chars();\n    if chars.clone().count() < 3\
    \ {\n        return false;\n    }\n    let mut prev = chars.next().unwrap();\n\
    \    let mut prev_prev = chars.next().unwrap();\n    for c in chars {\n      \
    \  if c == prev || c == prev_prev {\n            return false;\n        }\n  \
    \      prev_prev = prev;\n        prev = c;\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"a\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n\
    \    assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
    xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
    \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfn is_happy(s: String)\
    \ -> bool {\n    let mut happy = true;\n    let mut i = 0;\n    let mut j = i\
    \ + 1;\n    let mut k = j + 1;\n    let mut l = k + 1;\n    let mut m = l + 1;\n\
    \    let mut n = m + 1;\n    let mut o = n + 1;\n    let mut p = o + 1;\n    let\
    \ mut q = p + 1;\n    let mut r = q + 1;\n    let mut s = r + 1;\n    let mut\
    \ t = s + 1;\n    let mut u = t + 1;\n    let mut v = u + 1;\n    let mut w =\
    \ v + 1;\n    let mut x = w + 1;\n    let mut y = x + 1;\n    let mut z = y +\
    \ 1;\n    let mut aa = z + 1;\n    let mut ab = aa + 1;\n    let mut ac = ab +\
    \ 1;\n    let mut ad = ac + 1;\n    let mut ae = ad + 1;\n    let mut af = ae\
    \ + 1;\n    let mut ag = af + 1;\n    let mut ah = ag + 1;\n    let mut ai = ah\
    \ + 1;\n    let mut aj = ai + 1;\n    let mut ak = aj + 1;\n    let mut al = ak\
    \ + 1;\n    let mut am = al + 1;\n    let mut an = am + 1;\n    let mut ao = an\
    \ + 1;\n    let mut ap = ao + 1;\n    let mut aq = ap + 1;\n    let mut ar = aq\
    \ + 1;\n    let mut as_ = ar + 1;\n    let mut at = as_ + 1;\n    let mut au =\
    \ at + 1;\n    let mut av = au + 1;\n    let mut aw = av + 1;\n    let mut ax\
    \ = aw + 1;\n    let mut ay = ax + 1;\n    let mut az = ay + 1;\n    let mut ba\
    \ = az + 1;\n    let mut bb = ba + 1;\n    let mut bc = bb + 1;\n    let mut bd\
    \ = bc + 1;\n    let mut be = bd +\n}\n\nfn main() {\n    let candidate = is_happy;\n\
    \    assert_eq!(candidate(String::from(\"a\")), false);\n    assert_eq!(candidate(String::from(\"\
    aa\")), false);\n    assert_eq!(candidate(String::from(\"abcd\")), true);\n  \
    \  assert_eq!(candidate(String::from(\"aabb\")), false);\n    assert_eq!(candidate(String::from(\"\
    adb\")), true);\n    assert_eq!(candidate(String::from(\"xyy\")), false);\n  \
    \  assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n    assert_eq!(candidate(String::from(\"\
    iopaxioi\")), false);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpjufxgx54.rs:62:1\n\
    \   |\n62 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
