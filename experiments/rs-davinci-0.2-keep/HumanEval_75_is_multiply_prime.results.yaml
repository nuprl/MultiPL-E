name: HumanEval_75_is_multiply_prime
language: rust
results:
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    let mut i = 0;\n    while i < primes.len()\
    \ {\n        let mut j = i + 1;\n        while j < primes.len() {\n          \
    \  let mut k = j + 1;\n            while k < primes.len() {\n                if\
    \ a == primes[i] * primes[j] * primes[k] {\n                    result = true;\n\
    \                    break;\n                }\n                k += 1;\n    \
    \        }\n            j += 1;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpjautkxo3.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for i in primes.iter() {\n       \
    \ if a % i == 0 {\n            result = true;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpz53xaqdb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut prime_numbers: Vec<isize>\
    \ = Vec::new();\n    let mut i = 2;\n    while i <= a {\n        if is_prime(i)\
    \ {\n            prime_numbers.push(i);\n        }\n        i += 1;\n    }\n \
    \   let mut result = false;\n    for i in 0..prime_numbers.len() {\n        for\
    \ j in i..prime_numbers.len() {\n            for k in j..prime_numbers.len() {\n\
    \                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k] ==\
    \ a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpmyp132rg.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut primes\
    \ = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i == 0 {\n\
    \            primes.push(i);\n            a /= i;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut b = a;\n    let mut c =\
    \ 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut\
    \ g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let\
    \ mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n   \
    \ let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n\
    \    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n\
    \    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n\
    \    let mut aa = 0;\n    let mut ab = 0;\n    let mut ac = 0;\n    let mut ad\
    \ = 0;\n    let mut ae = 0;\n    let mut af = 0;\n    let mut ag = 0;\n    let\
    \ mut ah = 0;\n    let mut ai = 0;\n    let mut aj = 0;\n    let mut ak = 0;\n\
    \    let mut al = 0;\n    let mut am = 0;\n    let mut an = 0;\n    let mut ao\
    \ = 0;\n    let mut ap = 0;\n    let mut aq = 0;\n    let mut ar = 0;\n    let\
    \ mut as_ = 0;\n    let mut at = 0;\n    let mut au = 0;\n    let mut av = 0;\n\
    \    let mut aw = 0;\n    let mut ax = 0;\n    let mut ay = 0;\n    let mut az\
    \ = 0;\n    let mut ba = 0;\n    let mut bb = 0;\n    let mut bc = 0;\n    let\
    \ mut bd = 0;\n    let mut be = 0;\n    let mut bf = 0;\n    let mut bg = 0;\n\
    \    let mut bh = 0;\n    let mut bi = 0;\n    let mut bj = 0;\n    let mut bk\
    \ = 0;\n   \n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdirp1hol.rs:7:35\n  |\n7 |\
    \ fn is_multiply_prime(a: isize) -> bool {\n  |    -----------------         \
    \     ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut b = a;\n    let mut c =\
    \ 0;\n    let mut d = 0;\n    let mut e = 0;\n    while b > 1 {\n        if is_prime(b)\
    \ {\n            if c == 0 {\n                c = b;\n            } else if d\
    \ == 0 {\n                d = b;\n            } else if e == 0 {\n           \
    \     e = b;\n            }\n        }\n        b -= 1;\n    }\n    if c * d *\
    \ e == a {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp_yx_5zcw.rs:13:12\n\
    \   |\n13 |         if is_prime(b) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut primes\
    \ = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i == 0 {\n\
    \            primes.push(i);\n            a /= i;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut prime_numbers: Vec<isize>\
    \ = vec![];\n    let mut i = 2;\n    while i <= a {\n        if is_prime(i) {\n\
    \            prime_numbers.push(i);\n        }\n        i += 1;\n    }\n    let\
    \ mut j = 0;\n    while j < prime_numbers.len() {\n        let mut k = j + 1;\n\
    \        while k < prime_numbers.len() {\n            let mut l = k + 1;\n   \
    \         while l < prime_numbers.len() {\n                if prime_numbers[j]\
    \ * prime_numbers[k] * prime_numbers[l] == a {\n                    return true;\n\
    \                }\n                l += 1;\n            }\n            k += 1;\n\
    \        }\n        j += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpmnsxu4ah.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut i = 0;\n    while i < primes.len()\
    \ {\n        let mut j = i + 1;\n        while j < primes.len() {\n          \
    \  let mut k = j + 1;\n            while k < primes.len() {\n                if\
    \ primes[i] * primes[j] * primes[k] == a {\n                    result = true;\n\
    \                    break;\n                }\n                k += 1;\n    \
    \        }\n            j += 1;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphmedcqan.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = vec![];\n    let mut a = a;\n    for i in primes\
    \ {\n        if a % i == 0 {\n            result.push(i);\n            a = a /\
    \ i;\n        }\n    }\n    if result.len() == 3 {\n        return true;\n   \
    \ }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n   \
    \ assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n   \
    \ assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n   \
    \ assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n \
    \   assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvy54asih.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut primes\
    \ = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i == 0 {\n\
    \            a /= i;\n            primes.push(i);\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut b = a;\n    let mut c =\
    \ 0;\n    let mut d = 0;\n    let mut e = 0;\n    for i in 2..a {\n        if\
    \ a % i == 0 {\n            b = a / i;\n            for j in 2..b {\n        \
    \        if b % j == 0 {\n                    c = b / j;\n                   \
    \ for k in 2..c {\n                        if c % k == 0 {\n                 \
    \           d = c / k;\n                            for l in 2..d {\n        \
    \                        if d % l == 0 {\n                                   \
    \ e = d / l;\n                                    for m in 2..e {\n          \
    \                              if e % m == 0 {\n                             \
    \               return false;\n                                        }\n   \
    \                                 }\n                                }\n     \
    \                       }\n                        }\n                    }\n\
    \                }\n            }\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpb_so19zb.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n    let\
    \ mut i = 2;\n    while i <= a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n        i += 1;\n    }\n    let mut j = 0;\n    let mut k = 0;\n \
    \   let mut l = 0;\n    while j < primes.len() {\n        while k < primes.len()\
    \ {\n            while l < primes.len() {\n                if primes[j] * primes[k]\
    \ * primes[l] == a {\n                    return true;\n                }\n  \
    \              l += 1;\n            }\n            k += 1;\n        }\n      \
    \  j += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpyqfwn76x.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpm8u6glx2.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpdjyn3ll3.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut primes\
    \ = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i == 0 {\n\
    \            primes.push(i);\n            a /= i;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = vec![];\n    let mut i = 0;\n    while i < primes.len()\
    \ {\n        if a % primes[i] == 0 {\n            result.push(primes[i]);\n  \
    \          a /= primes[i];\n        } else {\n            i += 1;\n        }\n\
    \    }\n    if result.len() == 3 {\n        return true;\n    }\n    return false;\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpdk7h2yc8.rs:8:9\n\
    \  |\n8 |     let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  |         ----^^^^^^\n\
    \  |         |\n  |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0384]: cannot assign to immutable argument `a`\n  -->\
    \ /tmp/tmpdk7h2yc8.rs:14:13\n   |\n7  | fn is_multiply_prime(a: isize) -> bool\
    \ {\n   |                      - help: consider making this binding mutable: `mut\
    \ a`\n...\n14 |             a /= primes[i];\n   |             ^^^^^^^^^^^^^^ cannot\
    \ assign to immutable argument\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut i = 2;\n    let mut a =\
    \ a;\n    let mut count = 0;\n    while i < a {\n        if a % i == 0 {\n   \
    \         a = a / i;\n            count += 1;\n        } else {\n            i\
    \ += 1;\n        }\n    }\n    count == 2\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes: Vec<isize> = Vec::new();\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n    }\n    for i in 0..primes.len() {\n        for j in i..primes.len()\
    \ {\n            for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true;\n                }\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpyhh39qaj.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut i = 0;\n    let mut b = a;\n    let mut c = 0;\n    let\
    \ mut d = 0;\n    let mut e = 0;\n    while b > 1 {\n        if b % primes[i]\
    \ == 0 {\n            b = b / primes[i];\n            c = primes[i];\n       \
    \     d = d + 1;\n            if d == 3 {\n                e = c;\n          \
    \  }\n        } else {\n            i = i + 1;\n        }\n    }\n    if d ==\
    \ 3 && e == c {\n        return true;\n    } else {\n        return false;\n \
    \   }\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n    for\
    \ i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n       \
    \ }\n    }\n    let mut sum = 0;\n    for i in 0..primes.len() {\n        for\
    \ j in i..primes.len() {\n            for k in j..primes.len() {\n           \
    \     sum = primes[i] * primes[j] * primes[k];\n                if sum == a {\n\
    \                    return true;\n                }\n            }\n        }\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmptpgxwj86.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpcptgur9v.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    let mut i = 0;\n    while i < primes.len()\
    \ && a > 1 {\n        if a % primes[i] == 0 {\n            a /= primes[i];\n \
    \           result = true;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpk4d84x2n.rs:8:9\n\
    \  |\n8 |     let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  |         ----^^^^^^\n\
    \  |         |\n  |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0384]: cannot assign to immutable argument `a`\n  -->\
    \ /tmp/tmpk4d84x2n.rs:13:13\n   |\n7  | fn is_multiply_prime(a: isize) -> bool\
    \ {\n   |                      - help: consider making this binding mutable: `mut\
    \ a`\n...\n13 |             a /= primes[i];\n   |             ^^^^^^^^^^^^^^ cannot\
    \ assign to immutable argument\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut primes\
    \ = vec![];\n    let mut i = 2;\n    while a > 1 {\n        while a % i == 0 {\n\
    \            primes.push(i);\n            a /= i;\n        }\n        i += 1;\n\
    \    }\n    primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut result\
    \ = 1;\n    for i in 2..a {\n        if a % i == 0 {\n            result *= i;\n\
    \            a /= i;\n        }\n        if result == a {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdbs7dp5m.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpbhev9oce.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut n = a;\n    let mut result\
    \ = Vec::new();\n    while n > 1 {\n        let mut i = 2;\n        while n %\
    \ i != 0 {\n            i += 1;\n        }\n        result.push(i);\n        n\
    \ /= i;\n    }\n    result.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut primes\
    \ = vec![];\n    let mut i = 2;\n    while a > 1 {\n        while a % i == 0 {\n\
    \            primes.push(i);\n            a /= i;\n        }\n        i += 1;\n\
    \    }\n    primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n    let\
    \ mut i = 2;\n    while i < a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n        i += 1;\n    }\n    for i in 0..primes.len() {\n        for\
    \ j in i..primes.len() {\n            for k in j..primes.len() {\n           \
    \     if primes[i] * primes[j] * primes[k] == a {\n                    return\
    \ true;\n                }\n            }\n        }\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpqzsagkei.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    for i in 0..primes.len() {\n    \
    \    for j in i..primes.len() {\n            for k in j..primes.len() {\n    \
    \            if primes[i] * primes[j] * primes[k] == a {\n                   \
    \ result = true;\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp8yth2nuv.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    let mut i = 0;\n    while i < primes.len()\
    \ {\n        let mut j = i + 1;\n        while j < primes.len() {\n          \
    \  let mut k = j + 1;\n            while k < primes.len() {\n                if\
    \ primes[i] * primes[j] * primes[k] == a {\n                    result = true;\n\
    \                    break;\n                }\n                k += 1;\n    \
    \        }\n            j += 1;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3fsb324q.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut primes:\
    \ Vec<isize> = Vec::new();\n    let mut i = 2;\n    while a > 1 {\n        if\
    \ a % i == 0 {\n            primes.push(i);\n            a /= i;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut primes\
    \ = vec![];\n    let mut i = 2;\n    while a > 1 {\n        while a % i == 0 {\n\
    \            primes.push(i);\n            a /= i;\n        }\n        i += 1;\n\
    \    }\n    primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpx3ho4odj.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    for i in 0..primes.len() {\n    \
    \    for j in i..primes.len() {\n            for k in j..primes.len() {\n    \
    \            if primes[i] * primes[j] * primes[k] == a {\n                   \
    \ result = true;\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    if a < 6 {\n        return false;\n\
    \    }\n    let mut a = a;\n    let mut primes = vec![2, 3, 5];\n    for i in\
    \ primes.iter() {\n        if a % i == 0 {\n            a /= i;\n        }\n \
    \   }\n    if a == 1 {\n        return true;\n    }\n    let mut i = 7;\n    while\
    \ i <= a {\n        let mut is_prime = true;\n        for j in primes.iter() {\n\
    \            if i % j == 0 {\n                is_prime = false;\n            \
    \    break;\n            }\n        }\n        if is_prime {\n            primes.push(i);\n\
    \            if a % i == 0 {\n                a /= i;\n            }\n       \
    \ }\n        i += 2;\n    }\n    a == 1\n}\n\nfn main() {\n    let candidate =\
    \ is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphhchfc0h.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut prime_numbers: Vec<isize>\
    \ = vec![];\n    let mut i = 2;\n    while i < a {\n        if is_prime(i) {\n\
    \            prime_numbers.push(i);\n        }\n        i += 1;\n    }\n    let\
    \ mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    while j < prime_numbers.len()\
    \ {\n        while k < prime_numbers.len() {\n            while l < prime_numbers.len()\
    \ {\n                if prime_numbers[j] * prime_numbers[k] * prime_numbers[l]\
    \ == a {\n                    return true;\n                }\n              \
    \  l += 1;\n            }\n            k += 1;\n        }\n        j += 1;\n \
    \   }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n \
    \   assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n \
    \   assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n \
    \   assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp1xyfj2qg.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    for i in 0..primes.len() {\n    \
    \    for j in i..primes.len() {\n            for k in j..primes.len() {\n    \
    \            if a == primes[i] * primes[j] * primes[k] {\n                   \
    \ result = true;\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut primes = vec![];\n    for i in 2..a {\n        if is_prime(i) {\n      \
    \      primes.push(i);\n        }\n    }\n    for i in 0..primes.len() {\n   \
    \     for j in i..primes.len() {\n            for k in j..primes.len() {\n   \
    \             if primes[i] * primes[j] * primes[k] == a {\n                  \
    \  result = true;\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp395lhee6.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    let mut i = 0;\n    while i < primes.len()\
    \ {\n        let mut j = i + 1;\n        while j < primes.len() {\n          \
    \  let mut k = j + 1;\n            while k < primes.len() {\n                if\
    \ a == primes[i] * primes[j] * primes[k] {\n                    result = true;\n\
    \                    break;\n                }\n                k += 1;\n    \
    \        }\n            j += 1;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0wtb5do4.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    for i in 0..primes.len() {\n    \
    \    for j in i..primes.len() {\n            for k in j..primes.len() {\n    \
    \            if primes[i] * primes[j] * primes[k] == a {\n                   \
    \ result = true;\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut primes\
    \ = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i == 0 {\n\
    \            primes.push(i);\n            a /= i;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    if primes.len() == 3 {\n        true\n   \
    \ } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    for i in 0..primes.len() {\n    \
    \    for j in i..primes.len() {\n            for k in j..primes.len() {\n    \
    \            if primes[i] * primes[j] * primes[k] == a {\n                   \
    \ result = true;\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut i = 2;\n    let mut num\
    \ = a;\n    let mut count = 0;\n    while i <= num {\n        if num % i == 0\
    \ {\n            num /= i;\n            count += 1;\n        } else {\n      \
    \      i += 1;\n        }\n    }\n    if count == 3 {\n        return true;\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut primes\
    \ = vec![];\n    let mut i = 2;\n    while a != 1 {\n        if a % i == 0 {\n\
    \            primes.push(i);\n            a /= i;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes: Vec<isize> = Vec::new();\n\
    \    let mut i = 2;\n    while i <= a {\n        if is_prime(i) {\n          \
    \  primes.push(i);\n        }\n        i += 1;\n    }\n    let mut j = 0;\n  \
    \  let mut k = 0;\n    let mut l = 0;\n    while j < primes.len() {\n        while\
    \ k < primes.len() {\n            while l < primes.len() {\n                if\
    \ primes[j] * primes[k] * primes[l] == a {\n                    return true;\n\
    \                }\n                l += 1;\n            }\n            k += 1;\n\
    \        }\n        j += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpgv4cf3zn.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n    let\
    \ mut i = 2;\n    while i < a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n        i += 1;\n    }\n    let mut result = false;\n    for i in\
    \ 0..primes.len() {\n        for j in i..primes.len() {\n            for k in\
    \ j..primes.len() {\n                if primes[i] * primes[j] * primes[k] == a\
    \ {\n                    result = true;\n                }\n            }\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpsdlgg4af.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n    for\
    \ i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n       \
    \ }\n    }\n    for i in 0..primes.len() {\n        for j in 0..primes.len() {\n\
    \            for k in 0..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true;\n                }\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpv_jf48wl.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut i = 2;\n    let mut j = 2;\n    let mut k = 2;\n    while i < a {\n    \
    \    while j < a {\n            while k < a {\n                if i * j * k ==\
    \ a {\n                    result = true;\n                }\n               \
    \ k += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n \
    \   assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n \
    \   assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n \
    \   assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpjmdfkdp2.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    if a < 2 {\n        return false;\n\
    \    }\n    let mut a = a;\n    let mut primes = vec![];\n    let mut i = 2;\n\
    \    while a > 1 {\n        if a % i == 0 {\n            primes.push(i);\n   \
    \         a /= i;\n        } else {\n            i += 1;\n        }\n    }\n \
    \   primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    for i in 0..primes.len() {\n    \
    \    for j in i..primes.len() {\n            for k in j..primes.len() {\n    \
    \            if primes[i] * primes[j] * primes[k] == a {\n                   \
    \ result = true;\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n    for\
    \ i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n       \
    \ }\n    }\n    let mut result = false;\n    for i in 0..primes.len() {\n    \
    \    for j in i..primes.len() {\n            for k in j..primes.len() {\n    \
    \            if primes[i] * primes[j] * primes[k] == a {\n                   \
    \ result = true;\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpf7xiajrf.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n    for\
    \ i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n       \
    \ }\n    }\n    for i in 0..primes.len() {\n        for j in i..primes.len() {\n\
    \            for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true;\n                }\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpw212az77.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    for i in 0..primes.len() {\n    \
    \    for j in i..primes.len() {\n            for k in j..primes.len() {\n    \
    \            if primes[i] * primes[j] * primes[k] == a {\n                   \
    \ result = true;\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut i = 0;\n    let mut j = 0;\n\
    \    let mut k = 0;\n    for i in 0..primes.len() {\n        for j in 0..primes.len()\
    \ {\n            for k in 0..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    result = true;\n                }\n\
    \            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut primes = vec![];\n    for i in 2..a {\n        if is_prime(i) {\n      \
    \      primes.push(i);\n        }\n    }\n    for i in 0..primes.len() {\n   \
    \     for j in i..primes.len() {\n            for k in j..primes.len() {\n   \
    \             if primes[i] * primes[j] * primes[k] == a {\n                  \
    \  result = true;\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpblme57o3.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpr5dbu9in.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut prime_numbers = Vec::new();\n\
    \    let mut i = 2;\n    while i <= a {\n        if is_prime(i) {\n          \
    \  prime_numbers.push(i);\n        }\n        i += 1;\n    }\n    let mut result\
    \ = Vec::new();\n    for i in &prime_numbers {\n        if a % i == 0 {\n    \
    \        result.push(i);\n        }\n    }\n    if result.len() == 3 {\n     \
    \   return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmps6ij4jaz.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut n = a;\n    let mut primes\
    \ = vec![];\n    for i in 2..n {\n        if is_prime(i) {\n            while\
    \ n % i == 0 {\n                primes.push(i);\n                n /= i;\n   \
    \         }\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvcy0u32b.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n    let\
    \ mut i = 2;\n    while i <= a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n        i += 1;\n    }\n    let mut j = 0;\n    let mut k = 0;\n \
    \   let mut l = 0;\n    while j < primes.len() {\n        while k < primes.len()\
    \ {\n            while l < primes.len() {\n                if primes[j] * primes[k]\
    \ * primes[l] == a {\n                    return true;\n                }\n  \
    \              l += 1;\n            }\n            k += 1;\n        }\n      \
    \  j += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp6jd8x5ng.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n    for\
    \ i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n       \
    \ }\n    }\n    for i in 0..primes.len() {\n        for j in i..primes.len() {\n\
    \            for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true;\n                }\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmptu7n9074.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut primes = vec![];\n    for i in 2..a {\n        if is_prime(i) {\n      \
    \      primes.push(i);\n        }\n    }\n    for i in 0..primes.len() {\n   \
    \     for j in 0..primes.len() {\n            for k in 0..primes.len() {\n   \
    \             if primes[i] * primes[j] * primes[k] == a {\n                  \
    \  result = true;\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpg94hwj69.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut i = 0;\n    let mut result = 1;\n    while i < primes.len()\
    \ {\n        if a % primes[i] == 0 {\n            result *= primes[i];\n     \
    \   }\n        if result == a {\n            return true;\n        }\n       \
    \ i += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1n0v0myf.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut prime_numbers = vec![2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n    let mut result = false;\n    let mut i = 0;\n    while\
    \ i < prime_numbers.len() {\n        if a % prime_numbers[i] == 0 {\n        \
    \    let b = a / prime_numbers[i];\n            let mut j = 0;\n            while\
    \ j < prime_numbers.len() {\n                if b % prime_numbers[j] == 0 {\n\
    \                    let c = b / prime_numbers[j];\n                    let mut\
    \ k = 0;\n                    while k < prime_numbers.len() {\n              \
    \          if c % prime_numbers[k] == 0 {\n                            result\
    \ = true;\n                            break;\n                        }\n   \
    \                     k += 1;\n                    }\n                    break;\n\
    \                }\n                j += 1;\n            }\n            break;\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpsxjt5a_m.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut primes\
    \ = vec![];\n    let mut i = 2;\n    while a > 1 {\n        while a % i == 0 {\n\
    \            primes.push(i);\n            a /= i;\n        }\n        i += 1;\n\
    \    }\n    primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut i = 0;\n    while i < primes.len()\
    \ {\n        let mut j = i + 1;\n        while j < primes.len() {\n          \
    \  let mut k = j + 1;\n            while k < primes.len() {\n                if\
    \ a == primes[i] * primes[j] * primes[k] {\n                    result = true;\n\
    \                    break;\n                }\n                k += 1;\n    \
    \        }\n            j += 1;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpu36bw1bu.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut primes\
    \ = vec![];\n    let mut i = 2;\n    while a > 1 {\n        while a % i == 0 {\n\
    \            primes.push(i);\n            a /= i;\n        }\n        i += 1;\n\
    \    }\n    primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    for i in 0..primes.len() {\n    \
    \    for j in 0..primes.len() {\n            for k in 0..primes.len() {\n    \
    \            if primes[i] * primes[j] * primes[k] == a {\n                   \
    \ result = true;\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut primes\
    \ = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i == 0 {\n\
    \            primes.push(i);\n            a /= i;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut result\
    \ = 1;\n    let mut i = 2;\n    while a > 1 {\n        if a % i == 0 {\n     \
    \       result *= i;\n            a /= i;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    result == a\n}\n\nfn main() {\n    let candidate =\
    \ is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzi4d_ni1.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let\
    \ mut result = false;\n    while i < primes.len() {\n        j = i + 1;\n    \
    \    while j < primes.len() {\n            k = j + 1;\n            while k < primes.len()\
    \ {\n                if primes[i] * primes[j] * primes[k] == a {\n           \
    \         result = true;\n                    break;\n                }\n    \
    \            k += 1;\n            }\n            j += 1;\n        }\n        i\
    \ += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpweswdt26.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut prime_numbers = vec![];\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            prime_numbers.push(i);\n\
    \        }\n    }\n    let mut result = false;\n    for i in 0..prime_numbers.len()\
    \ {\n        for j in i..prime_numbers.len() {\n            for k in j..prime_numbers.len()\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp8x5_ux8_.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n    for\
    \ i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n       \
    \ }\n    }\n    for i in 0..primes.len() {\n        for j in i..primes.len() {\n\
    \            for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true;\n                }\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpx15llbce.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    for i in 0..primes.len() {\n    \
    \    for j in 0..primes.len() {\n            for k in 0..primes.len() {\n    \
    \            if primes[i] * primes[j] * primes[k] == a {\n                   \
    \ result = true;\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpqra6agr9.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    let mut i = 0;\n    while i < primes.len()\
    \ {\n        let mut j = i + 1;\n        while j < primes.len() {\n          \
    \  let mut k = j + 1;\n            while k < primes.len() {\n                if\
    \ primes[i] * primes[j] * primes[k] == a {\n                    result = true;\n\
    \                    break;\n                }\n                k += 1;\n    \
    \        }\n            j += 1;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1vxha40a.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    let mut i = 0;\n    while i < primes.len()\
    \ {\n        let mut j = i + 1;\n        while j < primes.len() {\n          \
    \  let mut k = j + 1;\n            while k < primes.len() {\n                if\
    \ primes[i] * primes[j] * primes[k] == a {\n                    result = true;\n\
    \                    break;\n                }\n                k += 1;\n    \
    \        }\n            j += 1;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8kwoc6dv.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    for i in 0..primes.len() {\n    \
    \    for j in i..primes.len() {\n            for k in j..primes.len() {\n    \
    \            if primes[i] * primes[j] * primes[k] == a {\n                   \
    \ result = true;\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut primes\
    \ = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i == 0 {\n\
    \            primes.push(i);\n            a /= i;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut prime_numbers = vec![];\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            prime_numbers.push(i);\n\
    \        }\n    }\n    let mut result = false;\n    for i in 0..prime_numbers.len()\
    \ {\n        for j in i..prime_numbers.len() {\n            for k in j..prime_numbers.len()\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmplv_6014u.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpxpg6w1cp.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n    for\
    \ i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n       \
    \ }\n    }\n    for i in 0..primes.len() {\n        for j in i..primes.len() {\n\
    \            for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true;\n                }\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp1l6om5rz.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut primes\
    \ = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i == 0 {\n\
    \            primes.push(i);\n            a /= i;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpt2cjwpu8.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n    for\
    \ i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n       \
    \ }\n    }\n    let mut result = false;\n    for i in 0..primes.len() {\n    \
    \    for j in i..primes.len() {\n            for k in j..primes.len() {\n    \
    \            if primes[i] * primes[j] * primes[k] == a {\n                   \
    \ result = true;\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp3fxif2du.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    let mut i = 0;\n    while i < primes.len()\
    \ {\n        if a % primes[i] == 0 {\n            let b = a / primes[i];\n   \
    \         let mut j = 0;\n            while j < primes.len() {\n             \
    \   if b % primes[j] == 0 {\n                    let c = b / primes[j];\n    \
    \                let mut k = 0;\n                    while k < primes.len() {\n\
    \                        if c % primes[k] == 0 {\n                           \
    \ result = true;\n                            break;\n                       \
    \ }\n                        k += 1;\n                    }\n                \
    \    break;\n                }\n                j += 1;\n            }\n     \
    \       break;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpr7sjcn8w.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut factors = Vec::new();\n\
    \    let mut num = a;\n    for i in 2..a {\n        if num % i == 0 {\n      \
    \      factors.push(i);\n            num /= i;\n        }\n    }\n    factors.len()\
    \ == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp991mqt5d.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    for i in 0..primes.len() {\n    \
    \    for j in 0..primes.len() {\n            for k in 0..primes.len() {\n    \
    \            if primes[i] * primes[j] * primes[k] == a {\n                   \
    \ result = true;\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    let mut i = 0;\n    while i < primes.len()\
    \ {\n        if a % primes[i] == 0 {\n            result = true;\n           \
    \ break;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpnifvumdt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut primes: Vec<isize> = Vec::new();\n    let mut i = 2;\n    while i < a {\n\
    \        if is_prime(i) {\n            primes.push(i);\n        }\n        i +=\
    \ 1;\n    }\n    for i in 0..primes.len() {\n        for j in i..primes.len()\
    \ {\n            for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    result = true;\n                }\n\
    \            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmppc6aozj4.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    let mut i = 0;\n    while i < primes.len()\
    \ {\n        if a % primes[i] == 0 {\n            let b = a / primes[i];\n   \
    \         let mut j = 0;\n            while j < primes.len() {\n             \
    \   if b % primes[j] == 0 {\n                    let c = b / primes[j];\n    \
    \                let mut k = 0;\n                    while k < primes.len() {\n\
    \                        if c % primes[k] == 0 {\n                           \
    \ result = true;\n                            break;\n                       \
    \ }\n                        k += 1;\n                    }\n                \
    \    break;\n                }\n                j += 1;\n            }\n     \
    \       break;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpplvbjnjk.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp5i_dc12w.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = vec![];\n    let mut a = a;\n    while a > 1\
    \ {\n        for i in primes.iter() {\n            if a % i == 0 {\n         \
    \       result.push(*i);\n                a = a / i;\n                break;\n\
    \            }\n        }\n    }\n    result.len() == 3\n}\n\nfn main() {\n  \
    \  let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut primes = vec![];\n    for i in 2..a {\n        if is_prime(i) {\n      \
    \      primes.push(i);\n        }\n    }\n    for i in 0..primes.len() {\n   \
    \     for j in i..primes.len() {\n            for k in j..primes.len() {\n   \
    \             if primes[i] * primes[j] * primes[k] == a {\n                  \
    \  result = true;\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp5_ayud9m.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut result\
    \ = true;\n    let mut i = 2;\n    while a > 1 {\n        if a % i == 0 {\n  \
    \          a /= i;\n            if !is_prime(i) {\n                result = false;\n\
    \                break;\n            }\n        } else {\n            i += 1;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp6kf9i18b.rs:14:17\n\
    \   |\n14 |             if !is_prime(i) {\n   |                 ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    let mut i = 0;\n    while i < primes.len()\
    \ {\n        let mut j = i + 1;\n        while j < primes.len() {\n          \
    \  let mut k = j + 1;\n            while k < primes.len() {\n                if\
    \ a == primes[i] * primes[j] * primes[k] {\n                    result = true;\n\
    \                    break;\n                }\n                k += 1;\n    \
    \        }\n            j += 1;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp4kym3_6l.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    let mut i = 0;\n    while i < primes.len()\
    \ {\n        if a % primes[i] == 0 {\n            result = true;\n           \
    \ break;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxjifgzxv.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut prime_numbers = vec![2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n    let mut result = false;\n    for i in 0..prime_numbers.len()\
    \ {\n        for j in i..prime_numbers.len() {\n            for k in j..prime_numbers.len()\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    for i in 0..primes.len() {\n    \
    \    for j in 0..primes.len() {\n            for k in 0..primes.len() {\n    \
    \            if primes[i] * primes[j] * primes[k] == a {\n                   \
    \ result = true;\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n    let\
    \ mut num = a;\n    for i in 2..a {\n        if is_prime(i) {\n            while\
    \ num % i == 0 {\n                primes.push(i);\n                num /= i;\n\
    \            }\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n  \
    \  let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpgpusnkm1.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    for i in 0..primes.len() {\n    \
    \    for j in 0..primes.len() {\n            for k in 0..primes.len() {\n    \
    \            if primes[i] * primes[j] * primes[k] == a {\n                   \
    \ result = true;\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut i = 0;\n    let mut result = false;\n    while i < primes.len()\
    \ {\n        if a % primes[i] == 0 {\n            result = true;\n           \
    \ break;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw3vh_u6p.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpwo0tyby5.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    let mut i = 0;\n    let mut j = 0;\n\
    \    let mut k = 0;\n    for i in 0..primes.len() {\n        for j in 0..primes.len()\
    \ {\n            for k in 0..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    result = true;\n                }\n\
    \            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp_iho4gve.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpw34ycm_k.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut i = 0;\n    while i < primes.len()\
    \ {\n        let mut j = i + 1;\n        while j < primes.len() {\n          \
    \  let mut k = j + 1;\n            while k < primes.len() {\n                if\
    \ a == primes[i] * primes[j] * primes[k] {\n                    result = true;\n\
    \                    break;\n                }\n                k += 1;\n    \
    \        }\n            j += 1;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpt555hj6w.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpt1c2723d.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n    for\
    \ i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n       \
    \ }\n    }\n    let mut result = false;\n    for i in 0..primes.len() {\n    \
    \    for j in i..primes.len() {\n            for k in j..primes.len() {\n    \
    \            if primes[i] * primes[j] * primes[k] == a {\n                   \
    \ result = true;\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp9uczjp1s.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut primes\
    \ = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if is_prime(i) {\n\
    \            while a % i == 0 {\n                primes.push(i);\n           \
    \     a /= i;\n            }\n        }\n        i += 1;\n    }\n    primes.len()\
    \ == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmplfjsksvq.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut primes\
    \ = vec![];\n    let mut i = 2;\n    while a > 1 {\n        while a % i == 0 {\n\
    \            primes.push(i);\n            a /= i;\n        }\n        i += 1;\n\
    \    }\n    primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut i = 2;\n    let mut j = 2;\n    let mut k = 2;\n    while i < a {\n    \
    \    while j < a {\n            while k < a {\n                if i * j * k ==\
    \ a {\n                    result = true;\n                }\n               \
    \ k += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n \
    \   assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n \
    \   assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n \
    \   assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp225m95w1.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    for i in 0..primes.len() {\n    \
    \    for j in 0..primes.len() {\n            for k in 0..primes.len() {\n    \
    \            if primes[i] * primes[j] * primes[k] == a {\n                   \
    \ result = true;\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut primes = vec![];\n    let mut counter = 0;\n    for i in 2..a {\n      \
    \  if is_prime(i) {\n            primes.push(i);\n        }\n    }\n    for i\
    \ in 0..primes.len() {\n        for j in i..primes.len() {\n            for k\
    \ in j..primes.len() {\n                if primes[i] * primes[j] * primes[k] ==\
    \ a {\n                    counter += 1;\n                }\n            }\n \
    \       }\n    }\n    if counter > 0 {\n        result = true;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp4z4iyl8z.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut i = 2;\n    let mut j = 2;\n    let mut k = 2;\n    while i < 100 {\n  \
    \      while j < 100 {\n            while k < 100 {\n                if i * j\
    \ * k == a {\n                    result = true;\n                }\n        \
    \        k += 1;\n            }\n            j += 1;\n        }\n        i +=\
    \ 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpn67wle7j.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut primes\
    \ = vec![];\n    let mut divider = 2;\n    while a > 1 {\n        if a % divider\
    \ == 0 {\n            primes.push(divider);\n            a /= divider;\n     \
    \   } else {\n            divider += 1;\n        }\n    }\n    primes.len() ==\
    \ 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    for i in 0..primes.len() {\n    \
    \    for j in i..primes.len() {\n            for k in j..primes.len() {\n    \
    \            if primes[i] * primes[j] * primes[k] == a {\n                   \
    \ result = true;\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut i = 0;\n    let mut result = false;\n    while i < primes.len()\
    \ {\n        if a % primes[i] == 0 {\n            result = true;\n           \
    \ break;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvfmamu3f.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmplvxc8wlg.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = vec![];\n    let mut i = 0;\n    while a > 1\
    \ {\n        if a % primes[i] == 0 {\n            result.push(primes[i]);\n  \
    \          a /= primes[i];\n        } else {\n            i += 1;\n        }\n\
    \    }\n    if result.len() == 3 {\n        true\n    } else {\n        false\n\
    \    }\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmp0pb7zbcd.rs:8:9\n\
    \  |\n8 |     let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  |         ----^^^^^^\n\
    \  |         |\n  |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0384]: cannot assign to immutable argument `a`\n  -->\
    \ /tmp/tmp0pb7zbcd.rs:14:13\n   |\n7  | fn is_multiply_prime(a: isize) -> bool\
    \ {\n   |                      - help: consider making this binding mutable: `mut\
    \ a`\n...\n14 |             a /= primes[i];\n   |             ^^^^^^^^^^^^^^ cannot\
    \ assign to immutable argument\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n    let\
    \ mut i = 2;\n    while i <= a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n        i += 1;\n    }\n    let mut result = false;\n    for i in\
    \ 0..primes.len() {\n        for j in i+1..primes.len() {\n            for k in\
    \ j+1..primes.len() {\n                if primes[i] * primes[j] * primes[k] ==\
    \ a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpfo5kwxhf.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n    let\
    \ mut i = 2;\n    while i < a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n        i += 1;\n    }\n    let mut result = false;\n    for i in\
    \ 0..primes.len() {\n        for j in i..primes.len() {\n            for k in\
    \ j..primes.len() {\n                if primes[i] * primes[j] * primes[k] == a\
    \ {\n                    result = true;\n                }\n            }\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpfitc7w7z.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut primes\
    \ = vec![];\n    for i in 2..a {\n        if is_prime(i) {\n            while\
    \ a % i == 0 {\n                a /= i;\n                primes.push(i);\n   \
    \         }\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpt5lwiyjq.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n    for\
    \ i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n       \
    \ }\n    }\n    for i in 0..primes.len() {\n        for j in 0..primes.len() {\n\
    \            for k in 0..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true;\n                }\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvh9xand3.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp7kc454mm.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    let mut i = 0;\n    while i < primes.len()\
    \ {\n        if a % primes[i] == 0 {\n            let mut tmp = a / primes[i];\n\
    \            let mut j = 0;\n            while j < primes.len() {\n          \
    \      if tmp % primes[j] == 0 {\n                    let tmp2 = tmp / primes[j];\n\
    \                    let mut k = 0;\n                    while k < primes.len()\
    \ {\n                        if tmp2 % primes[k] == 0 {\n                    \
    \        result = true;\n                            break;\n                \
    \        }\n                        k += 1;\n                    }\n         \
    \           break;\n                }\n                j += 1;\n            }\n\
    \            break;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6jdk6h54.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut primes\
    \ = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i == 0 {\n\
    \            primes.push(i);\n            a /= i;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    for i in 0..primes.len() {\n    \
    \    for j in 0..primes.len() {\n            for k in 0..primes.len() {\n    \
    \            if primes[i] * primes[j] * primes[k] == a {\n                   \
    \ result = true;\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for i in 0..primes.len() {\n     \
    \   for j in 0..primes.len() {\n            for k in 0..primes.len() {\n     \
    \           if primes[i] * primes[j] * primes[k] == a {\n                    result\
    \ = true;\n                }\n            }\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut primes\
    \ = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i == 0 {\n\
    \            primes.push(i);\n            a /= i;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut i = 0;\n    while i < primes.len()\
    \ {\n        let mut j = i + 1;\n        while j < primes.len() {\n          \
    \  let mut k = j + 1;\n            while k < primes.len() {\n                if\
    \ a == primes[i] * primes[j] * primes[k] {\n                    result = true;\n\
    \                    break;\n                }\n                k += 1;\n    \
    \        }\n            j += 1;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpf8c9ghq6.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut primes\
    \ = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i == 0 {\n\
    \            primes.push(i);\n            a /= i;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    for i in 0..primes.len() {\n    \
    \    for j in i..primes.len() {\n            for k in j..primes.len() {\n    \
    \            if primes[i] * primes[j] * primes[k] == a {\n                   \
    \ result = true;\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    let mut i = 0;\n    while i < primes.len()\
    \ {\n        let mut j = i + 1;\n        while j < primes.len() {\n          \
    \  let mut k = j + 1;\n            while k < primes.len() {\n                if\
    \ primes[i] * primes[j] * primes[k] == a {\n                    result = true;\n\
    \                    break;\n                }\n                k += 1;\n    \
    \        }\n            j += 1;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqy4uqmgc.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    let mut i = 0;\n    while i < primes.len()\
    \ {\n        if a % primes[i] == 0 {\n            let b = a / primes[i];\n   \
    \         let mut j = 0;\n            while j < primes.len() {\n             \
    \   if b % primes[j] == 0 {\n                    let c = b / primes[j];\n    \
    \                let mut k = 0;\n                    while k < primes.len() {\n\
    \                        if c % primes[k] == 0 {\n                           \
    \ result = true;\n                            break;\n                       \
    \ }\n                        k += 1;\n                    }\n                \
    \    break;\n                }\n                j += 1;\n            }\n     \
    \       break;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6plx3w0o.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut result\
    \ = true;\n    let mut i = 2;\n    while a > 1 {\n        if a % i == 0 {\n  \
    \          a /= i;\n            if !is_prime(i) {\n                result = false;\n\
    \                break;\n            }\n        } else {\n            i += 1;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpa4fieggn.rs:14:17\n\
    \   |\n14 |             if !is_prime(i) {\n   |                 ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes: Vec<isize> = vec![];\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n    }\n    for i in 0..primes.len() {\n        for j in i..primes.len()\
    \ {\n            for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true;\n                }\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpxf8oh0nn.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut primes\
    \ = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i == 0 {\n\
    \            primes.push(i);\n            a /= i;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut prime_numbers = vec![];\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            prime_numbers.push(i);\n\
    \        }\n    }\n    let mut result = false;\n    for i in 0..prime_numbers.len()\
    \ {\n        for j in i..prime_numbers.len() {\n            for k in j..prime_numbers.len()\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpdp323fnj.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut primes = vec![];\n    for i in 2..a {\n        if is_prime(i) {\n      \
    \      primes.push(i);\n        }\n    }\n    for i in 0..primes.len() {\n   \
    \     for j in i..primes.len() {\n            for k in j..primes.len() {\n   \
    \             if primes[i] * primes[j] * primes[k] == a {\n                  \
    \  result = true;\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpgepd5_eo.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    if a == 1 {\n        return false;\n\
    \    }\n    for i in primes.iter() {\n        if a % i == 0 {\n            result\
    \ = true;\n            break;\n        }\n    }\n    if result {\n        return\
    \ true;\n    }\n    for i in primes.iter() {\n        for j in primes.iter() {\n\
    \            if a % (i * j) == 0 {\n                result = true;\n         \
    \       break;\n            }\n        }\n    }\n    if result {\n        return\
    \ true;\n    }\n    for i in primes.iter() {\n        for j in primes.iter() {\n\
    \            for k in primes.iter() {\n                if a % (i * j * k) == 0\
    \ {\n                    result = true;\n                    break;\n        \
    \        }\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpuv30dahp.rs:48:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut is_prime = true;\n    let\
    \ mut i = 2;\n    while i < a {\n        if a % i == 0 {\n            is_prime\
    \ = false;\n            break;\n        }\n        i += 1;\n    }\n    if is_prime\
    \ {\n        return false;\n    }\n    let mut i = 2;\n    while i < a {\n   \
    \     if a % i == 0 {\n            let mut j = 2;\n            while j < a {\n\
    \                if a % j == 0 {\n                    let mut k = 2;\n       \
    \             while k < a {\n                        if a % k == 0 {\n       \
    \                     if i * j * k == a {\n                                return\
    \ true;\n                            }\n                        }\n          \
    \              k += 1;\n                    }\n                }\n           \
    \     j += 1;\n            }\n        }\n        i += 1;\n    }\n    false\n}\n\
    \nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgtis7nj5.rs:52:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    let mut i = 0;\n    while i < primes.len()\
    \ {\n        if a % primes[i] == 0 {\n            result = true;\n           \
    \ let mut j = i + 1;\n            while j < primes.len() {\n                if\
    \ a % primes[j] == 0 {\n                    result = true;\n                 \
    \   let mut k = j + 1;\n                    while k < primes.len() {\n       \
    \                 if a % primes[k] == 0 {\n                            result\
    \ = true;\n                            if a == primes[i] * primes[j] * primes[k]\
    \ {\n                                return result;\n                        \
    \    } else {\n                                result = false;\n             \
    \               }\n                        }\n                        k += 1;\n\
    \                    }\n                }\n                j += 1;\n         \
    \   }\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpl52taflt.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut is_multiply_prime\
    \ = true;\n    let mut prime_numbers = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut i\
    \ = 0;\n    while a != 1 && i < prime_numbers.len() {\n        if a % prime_numbers[i]\
    \ == 0 {\n            a /= prime_numbers[i];\n        } else {\n            i\
    \ += 1;\n        }\n    }\n    if a != 1 {\n        is_multiply_prime = false;\n\
    \    }\n    is_multiply_prime\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpf2zjw60o.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes: Vec<isize> = vec![];\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n    }\n    for i in 0..primes.len() {\n        for j in i..primes.len()\
    \ {\n            for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true;\n                }\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpr1spbloh.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut primes\
    \ = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i == 0 {\n\
    \            primes.push(i);\n            a /= i;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n    for\
    \ i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n       \
    \ }\n    }\n    let mut result = false;\n    for i in 0..primes.len() {\n    \
    \    for j in i..primes.len() {\n            for k in j..primes.len() {\n    \
    \            if primes[i] * primes[j] * primes[k] == a {\n                   \
    \ result = true;\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpijv3ru89.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp_rn2ns0k.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut primes\
    \ = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i == 0 {\n\
    \            primes.push(i);\n            a /= i;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut result\
    \ = true;\n    let mut i = 2;\n    while a > 1 {\n        if a % i == 0 {\n  \
    \          a /= i;\n            if !is_prime(i) {\n                result = false;\n\
    \                break;\n            }\n        } else {\n            i += 1;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp1mk4fyw8.rs:14:17\n\
    \   |\n14 |             if !is_prime(i) {\n   |                 ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut primes\
    \ = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i == 0 {\n\
    \            primes.push(i);\n            a /= i;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut primes\
    \ = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i == 0 {\n\
    \            primes.push(i);\n            a /= i;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n    for\
    \ i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n       \
    \ }\n    }\n    for i in 0..primes.len() {\n        for j in i..primes.len() {\n\
    \            for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true;\n                }\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpz891nc2p.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut prime_numbers = vec![];\n\
    \    let mut i = 2;\n    while i <= a {\n        if is_prime(i) {\n          \
    \  prime_numbers.push(i);\n        }\n        i += 1;\n    }\n    let mut result\
    \ = false;\n    for i in 0..prime_numbers.len() {\n        for j in 0..prime_numbers.len()\
    \ {\n            for k in 0..prime_numbers.len() {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    result = true;\n\
    \                }\n            }\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmppl6oszqv.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpk406ce8d.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    for i in 0..primes.len() {\n    \
    \    for j in i..primes.len() {\n            for k in j..primes.len() {\n    \
    \            if primes[i] * primes[j] * primes[k] == a {\n                   \
    \ result = true;\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut num = a;\n    let mut primes:\
    \ Vec<isize> = Vec::new();\n    let mut i = 2;\n    while num > 1 {\n        if\
    \ num % i == 0 {\n            primes.push(i);\n            num /= i;\n       \
    \ } else {\n            i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\n\
    fn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmphdtlzwtg.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut i = 0;\n    while i < primes.len()\
    \ {\n        let mut j = i + 1;\n        while j < primes.len() {\n          \
    \  let mut k = j + 1;\n            while k < primes.len() {\n                if\
    \ primes[i] * primes[j] * primes[k] == a {\n                    result = true;\n\
    \                    break;\n                }\n                k += 1;\n    \
    \        }\n            j += 1;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpkv04898k.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut primes = vec![];\n    let mut i = 2;\n    while i < a {\n        if is_prime(i)\
    \ {\n            primes.push(i);\n        }\n        i += 1;\n    }\n    for i\
    \ in 0..primes.len() {\n        for j in i..primes.len() {\n            for k\
    \ in j..primes.len() {\n                if primes[i] * primes[j] * primes[k] ==\
    \ a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpsillelv8.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut primes\
    \ = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if is_prime(i) {\n\
    \            while a % i == 0 {\n                primes.push(i);\n           \
    \     a /= i;\n            }\n        }\n        i += 1;\n    }\n    primes.len()\
    \ == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpqqu279g5.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut primes\
    \ = vec![];\n    while a > 1 {\n        let mut i = 2;\n        while a % i !=\
    \ 0 {\n            i += 1;\n        }\n        primes.push(i);\n        a /= i;\n\
    \    }\n    primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut i = 0;\n    let mut result = false;\n    while i < primes.len()\
    \ {\n        let mut j = i + 1;\n        while j < primes.len() {\n          \
    \  let mut k = j + 1;\n            while k < primes.len() {\n                if\
    \ primes[i] * primes[j] * primes[k] == a {\n                    result = true;\n\
    \                }\n                k += 1;\n            }\n            j += 1;\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpae6m1z7u.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpfa6y51fu.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut prime_numbers = vec![2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n    let mut result = false;\n    let mut i = 0;\n    while\
    \ i < prime_numbers.len() {\n        let prime_number = prime_numbers[i];\n  \
    \      if a % prime_number == 0 {\n            let b = a / prime_number;\n   \
    \         if is_prime(b) {\n                let c = b / prime_number;\n      \
    \          if is_prime(c) {\n                    result = true;\n            \
    \        break;\n                }\n            }\n        }\n        i += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpylyvu4al.rs:15:16\n\
    \   |\n15 |             if is_prime(b) {\n   |                ^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `is_prime` in this scope\n\
    \  --> /tmp/tmpylyvu4al.rs:17:20\n   |\n17 |                 if is_prime(c) {\n\
    \   |                    ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut b = a;\n    let mut c =\
    \ 0;\n    let mut d = 0;\n    let mut e = 0;\n    while b > 1 {\n        if is_prime(b)\
    \ {\n            if c == 0 {\n                c = b;\n            } else if d\
    \ == 0 {\n                d = b;\n            } else if e == 0 {\n           \
    \     e = b;\n            }\n        }\n        b -= 1;\n    }\n    if c * d *\
    \ e == a {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpt_0k1i9o.rs:13:12\n\
    \   |\n13 |         if is_prime(b) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpdwrswngg.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n    let\
    \ mut i = 2;\n    while i < a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n        i += 1;\n    }\n    for i in 0..primes.len() {\n        for\
    \ j in i..primes.len() {\n            for k in j..primes.len() {\n           \
    \     if primes[i] * primes[j] * primes[k] == a {\n                    return\
    \ true;\n                }\n            }\n        }\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpio6uyjn9.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpb8n2cnpn.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    let mut i = 0;\n    while i < primes.len()\
    \ {\n        if a % primes[i] == 0 {\n            let mut temp = a / primes[i];\n\
    \            let mut j = 0;\n            while j < primes.len() {\n          \
    \      if temp % primes[j] == 0 {\n                    let mut temp2 = temp /\
    \ primes[j];\n                    let mut k = 0;\n                    while k\
    \ < primes.len() {\n                        if temp2 % primes[k] == 0 {\n    \
    \                        result = true;\n                            break;\n\
    \                        }\n                        k += 1;\n                \
    \    }\n                    break;\n                }\n                j += 1;\n\
    \            }\n            break;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpuz7hy_v3.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n    let\
    \ mut i = 2;\n    while i < a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n        i += 1;\n    }\n    let mut result = false;\n    for i in\
    \ 0..primes.len() {\n        for j in i..primes.len() {\n            for k in\
    \ j..primes.len() {\n                if primes[i] * primes[j] * primes[k] == a\
    \ {\n                    result = true;\n                }\n            }\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp3wwwg790.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp2ls5i004.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes: Vec<isize> = vec![];\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n    }\n    for i in 0..primes.len() {\n        for j in i..primes.len()\
    \ {\n            for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true;\n                }\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpcnvsn04i.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n    for\
    \ i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n       \
    \ }\n    }\n    for i in 0..primes.len() {\n        for j in i..primes.len() {\n\
    \            for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true;\n                }\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp5wbsk_th.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut i = 0;\n    while i < primes.len()\
    \ {\n        let mut j = i + 1;\n        while j < primes.len() {\n          \
    \  let mut k = j + 1;\n            while k < primes.len() {\n                if\
    \ a == primes[i] * primes[j] * primes[k] {\n                    result = true;\n\
    \                    break;\n                }\n                k += 1;\n    \
    \        }\n            j += 1;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8oet7uw1.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n    for\
    \ i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n       \
    \ }\n    }\n    for i in 0..primes.len() {\n        for j in i..primes.len() {\n\
    \            for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true;\n                }\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp8uzobex0.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut count\
    \ = 0;\n    let mut primes = vec![];\n    for i in 2..a {\n        if is_prime(i)\
    \ {\n            primes.push(i);\n        }\n    }\n    for i in primes.iter()\
    \ {\n        if a % i == 0 {\n            count += 1;\n            a /= i;\n \
    \       }\n    }\n    if count == 3 {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpklyfhmz7.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    let mut i = 0;\n    while i < primes.len()\
    \ {\n        if a % primes[i] == 0 {\n            result = true;\n           \
    \ break;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpbik1vuti.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n    for\
    \ i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n       \
    \ }\n    }\n    let mut result = false;\n    for i in 0..primes.len() {\n    \
    \    for j in i..primes.len() {\n            for k in j..primes.len() {\n    \
    \            if primes[i] * primes[j] * primes[k] == a {\n                   \
    \ result = true;\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmppb9cfh4y.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    let mut i = 0;\n    let mut j = 0;\n\
    \    let mut k = 0;\n    for i in 0..primes.len() {\n        for j in 0..primes.len()\
    \ {\n            for k in 0..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    result = true;\n                }\n\
    \            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    let mut i = 0;\n    while i < primes.len()\
    \ {\n        if a % primes[i] == 0 {\n            result = true;\n           \
    \ let mut temp = a / primes[i];\n            let mut j = 0;\n            while\
    \ j < primes.len() {\n                if temp % primes[j] == 0 {\n           \
    \         temp = temp / primes[j];\n                    if temp == 1 {\n     \
    \                   return result;\n                    }\n                }\n\
    \                j += 1;\n            }\n        }\n        i += 1;\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpevy4cn3y.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    let mut i = 0;\n    while i < primes.len()\
    \ {\n        if a % primes[i] == 0 {\n            result = true;\n           \
    \ break;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpj80z6fl0.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut primes\
    \ = vec![];\n    let mut i = 2;\n    while a > 1 {\n        if a % i == 0 {\n\
    \            primes.push(i);\n            a /= i;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut primes = vec![];\n    let mut num = a;\n    for i in 2..a {\n        if\
    \ is_prime(i) {\n            primes.push(i);\n        }\n    }\n    for i in 0..primes.len()\
    \ {\n        if num % primes[i] == 0 {\n            num = num / primes[i];\n \
    \           if num == 1 {\n                result = true;\n                break;\n\
    \            }\n            if is_prime(num) {\n                result = true;\n\
    \                break;\n            }\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmppjh4o34x.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `is_prime` in this scope\n  -->\
    \ /tmp/tmppjh4o34x.rs:23:16\n   |\n23 |             if is_prime(num) {\n   | \
    \               ^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut i = 0;\n    while i < primes.len()\
    \ {\n        let mut j = i + 1;\n        while j < primes.len() {\n          \
    \  let mut k = j + 1;\n            while k < primes.len() {\n                if\
    \ a == primes[i] * primes[j] * primes[k] {\n                    result = true;\n\
    \                    break;\n                }\n                k += 1;\n    \
    \        }\n            j += 1;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0khks0mq.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut i = 0;\n    let mut result = false;\n    while i < primes.len()\
    \ {\n        let mut j = i + 1;\n        while j < primes.len() {\n          \
    \  let mut k = j + 1;\n            while k < primes.len() {\n                if\
    \ primes[i] * primes[j] * primes[k] == a {\n                    result = true;\n\
    \                }\n                k += 1;\n            }\n            j += 1;\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1llolk21.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut primes = vec![];\n    let mut i = 2;\n    while i <= a {\n        if is_prime(i)\
    \ {\n            primes.push(i);\n        }\n        i += 1;\n    }\n    for i\
    \ in 0..primes.len() {\n        for j in i..primes.len() {\n            for k\
    \ in j..primes.len() {\n                if primes[i] * primes[j] * primes[k] ==\
    \ a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpt4s16q3t.rs:12:12\n\
    \   |\n12 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut i = 2;\n    let mut j = 2;\n    let mut k = 2;\n    while i < a {\n    \
    \    while j < a {\n            while k < a {\n                if i * j * k ==\
    \ a {\n                    result = true;\n                }\n               \
    \ k += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n \
    \   assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n \
    \   assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n \
    \   assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvn5diwdl.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n    let\
    \ mut n = a;\n    for i in 2..n {\n        if n % i == 0 {\n            primes.push(i);\n\
    \            n /= i;\n        }\n    }\n    primes.len() == 3\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp584ul2bi.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut primes = vec![];\n    for i in 2..a {\n        if is_prime(i) {\n      \
    \      primes.push(i);\n        }\n    }\n    for i in 0..primes.len() {\n   \
    \     for j in i+1..primes.len() {\n            for k in j+1..primes.len() {\n\
    \                if primes[i] * primes[j] * primes[k] == a {\n               \
    \     result = true;\n                }\n            }\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpn4tt2fmp.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut a = a;\n    let mut primes\
    \ = vec![];\n    while a > 1 {\n        let mut i = 2;\n        while a % i !=\
    \ 0 {\n            i += 1;\n        }\n        primes.push(i);\n        a /= i;\n\
    \    }\n    primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n    for\
    \ i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n       \
    \ }\n    }\n    let mut result = false;\n    for i in 0..primes.len() {\n    \
    \    for j in i..primes.len() {\n            for k in j..primes.len() {\n    \
    \            if primes[i] * primes[j] * primes[k] == a {\n                   \
    \ result = true;\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpyo78byhs.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n    for\
    \ i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n       \
    \ }\n    }\n    for i in 0..primes.len() {\n        for j in 0..primes.len() {\n\
    \            for k in 0..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true;\n                }\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpu0pgz9az.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut result = false;\n    let\
    \ mut i = 2;\n    let mut j = 2;\n    let mut k = 2;\n    while i < 100 {\n  \
    \      while j < 100 {\n            while k < 100 {\n                if i * j\
    \ * k == a {\n                    result = true;\n                }\n        \
    \        k += 1;\n            }\n            j += 1;\n        }\n        i +=\
    \ 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmps5dh2pig.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n    let\
    \ mut i = 2;\n    while i <= a {\n        if a % i == 0 {\n            primes.push(i);\n\
    \            a /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `a`\n  --> /tmp/tmp_s2is3f7.rs:13:13\n\
    \   |\n7  | fn is_multiply_prime(a: isize) -> bool {\n   |                   \
    \   - help: consider making this binding mutable: `mut a`\n...\n13 |         \
    \    a /= i;\n   |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    for i in 0..primes.len() {\n    \
    \    for j in i..primes.len() {\n            for k in j..primes.len() {\n    \
    \            if primes[i] * primes[j] * primes[k] == a {\n                   \
    \ result = true;\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = false;\n    for i in 0..primes.len() {\n    \
    \    for j in i..primes.len() {\n            for k in j..primes.len() {\n    \
    \            if primes[i] * primes[j] * primes[k] == a {\n                   \
    \ result = true;\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut result = vec![];\n    for i in primes {\n        if a\
    \ % i == 0 {\n            result.push(i);\n        }\n    }\n    if result.len()\
    \ == 3 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfbnwfr8w.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    fn is_multiply_prime(a: isize) -> bool {\n    let mut primes = vec![];\n    for\
    \ i in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n       \
    \ }\n    }\n    for i in 0..primes.len() {\n        for j in i..primes.len() {\n\
    \            for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true;\n                }\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpcj4u33zl.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
