name: HumanEval_133_sum_squares
language: rust
results:
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        let x = i.ceil()\
    \ as isize;\n        sum += x * x;\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum: isize = 0;\n    for i in lst {\n        sum +=\
    \ (i.ceil() as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        let mut i = i.ceil();\n\
    \        sum += i * i;\n    }\n    sum as isize\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpd0koqeis.rs:14:13\n\
    \   |\n14 |         sum += i * i;\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp0o3rh5d6.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp9aimwulr.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum: isize = 0;\n    for i in lst {\n        sum +=\
    \ (i.ceil() as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x*x).sum()\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum: isize = 0;\n    for i in lst {\n        sum +=\
    \ (i.ceil() as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    lst.iter().map(|x| (x.ceil() as isize).pow(2)).sum()\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of numbers.\n/// You need to return the sum of\
    \ squared numbers in the given list,\n/// round each element in the list to the\
    \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
    \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfn sum_squares(lst: Vec<f64>)\
    \ -> isize {\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil()\
    \ as isize).pow(2);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
