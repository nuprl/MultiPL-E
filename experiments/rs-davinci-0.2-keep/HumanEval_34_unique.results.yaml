name: HumanEval_34_unique
language: rust
results:
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = l;\n    res.sort();\n    res.dedup();\n    res\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    let mut res = Vec::new();\n\
    \    for i in l {\n        if res.len() == 0 || res[res.len() - 1] != i {\n  \
    \          res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]),\
    \ vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    let mut res = Vec::new();\n\
    \    let mut last = None;\n    for &x in l.iter() {\n        if last != Some(x)\
    \ {\n            res.push(x);\n            last = Some(x);\n        }\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v = l;\n    v.sort();\n    v.dedup();\n    v\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    let mut last = None;\n\
    \    let mut res = Vec::new();\n    for i in l {\n        if last != Some(i) {\n\
    \            res.push(i);\n            last = Some(i);\n        }\n    }\n   \
    \ res\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
