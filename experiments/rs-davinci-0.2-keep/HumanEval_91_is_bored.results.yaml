name: HumanEval_91_is_bored
language: rust
results:
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n \
    \       }\n        if is_bored {\n            boredoms += 1;\n        }\n    \
    \    if c == 'I' {\n            is_bored = true;\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmpp_szrb8a.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp3esrafhz.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n \
    \       } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmp_yvsz_2h.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp18vrpbsm.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n \
    \       } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmpydej_lj9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == 'I' {\n            is_bored = true;\n        } else if c == '.'\
    \ || c == '?' || c == '!' {\n            if is_bored {\n                boredoms\
    \ += 1;\n            }\n            is_bored = false;\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpuyyvce6r.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n \
    \       } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmp_2pdxcqg.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpymxm5577.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpe13_k3b2.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpjzzo_d12.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n \
    \       } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmp4zj3c92y.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence_start = true;\n    for word in S.split_whitespace()\
    \ {\n        if sentence_start && word == \"I\" {\n            boredoms += 1;\n\
    \        }\n        sentence_start = word.ends_with('.') || word.ends_with('?')\
    \ || word.ends_with('!');\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp9kkk5fv1.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpnugt7tud.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n \
    \       } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmpplr0av_m.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmput_axzo9.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == 'I' {\n            is_bored = true;\n        } else if is_bored\
    \ && c == ' ' {\n            boredoms += 1;\n            is_bored = false;\n \
    \       } else if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n\
    \        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp7mwik1di.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp15oqz0nk.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpco8em4z0.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp1410e3ud.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == 'I' {\n            is_bored = true;\n        } else if c == '.'\
    \ || c == '?' || c == '!' {\n            if is_bored {\n                boredoms\
    \ += 1;\n            }\n            is_bored = false;\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpvkglsgn_.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpw0r76ex3.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp3hihkap2.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n \
    \       } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmp1k96tzcf.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpm62sjzd3.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut i = 0;\n    let mut is_bored = false;\n    let mut\
    \ is_first_word = true;\n    let mut is_first_letter = true;\n    let mut is_first_sentence\
    \ = true;\n    let mut is_sentence_end = false;\n    let mut is_word_end = false;\n\
    \    let mut is_letter_end = false;\n    let mut is_letter_start = false;\n  \
    \  let mut is_word_start = false;\n    let mut is_sentence_start = false;\n  \
    \  let mut is_letter_i = false;\n    let mut is_letter_i_end = false;\n    let\
    \ mut is_letter_i_start = false;\n    let mut is_word_i = false;\n    let mut\
    \ is_word_i_end = false;\n    let mut is_word_i_start = false;\n    let mut is_sentence_i\
    \ = false;\n    let mut is_sentence_i_end = false;\n    let mut is_sentence_i_start\
    \ = false;\n    let mut is_letter_i_first = false;\n    let mut is_word_i_first\
    \ = false;\n    let mut is_sentence_i_first = false;\n    let mut is_letter_i_first_end\
    \ = false;\n    let mut is_word_i_first_end = false;\n    let mut is_sentence_i_first_end\
    \ = false;\n    let mut is_letter_i_first_start = false;\n    let mut is_word_i_first_start\
    \ = false;\n    let mut is_sentence_i_first_start = false;\n    let mut is_letter_i_first_end_end\
    \ = false;\n    let mut is_word_i_first_end_end = false;\n    let mut is_sentence_i_first_end_end\
    \ = false;\n    let mut is_letter_i_first_start_start = false;\n    let mut is_word_i_first_start_start\
    \ = false;\n    let mut is_sentence_i_first_start_start = false\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpl016zd29.rs:45:52\n   |\n\
    45 |     let mut is_sentence_i_first_start_start = false\n   |               \
    \                                     ^ help: add `;` here\n46 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpl016zd29.rs:9:27\n  |\n\
    9 | fn is_bored(S: String) -> isize {\n  |    --------               ^^^^^ expected\
    \ `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has\
    \ no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpbiel68h3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == 'I' {\n            is_bored = true;\n        }\n        if c ==\
    \ '.' || c == '?' || c == '!' {\n            if is_bored {\n                boredoms\
    \ += 1;\n            }\n            is_bored = false;\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpasoakmhx.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpyzgb8pz7.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp2k08e6o4.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence_start = true;\n    for word in S.split_whitespace()\
    \ {\n        if sentence_start && word == \"I\" {\n            boredoms += 1;\n\
    \        }\n        sentence_start = word.ends_with('.') || word.ends_with('?')\
    \ || word.ends_with('!');\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpvtm12fpx.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpvcillvtm.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpq2j7rlmh.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == 'I' {\n            is_bored = true;\n        }\n        if c ==\
    \ '.' || c == '?' || c == '!' {\n            if is_bored {\n                boredoms\
    \ += 1;\n            }\n            is_bored = false;\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpqwuk7c3x.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp5l49if2s.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        let mut words = word.split_whitespace();\n\
    \        if words.next() == Some(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n \
    \       } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmpuioxf029.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp8myrjqqf.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n \
    \       } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmpkrtfno1a.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence_start = true;\n    for word in S.split_whitespace()\
    \ {\n        if sentence_start && word == \"I\" {\n            boredoms += 1;\n\
    \        }\n        sentence_start = word.ends_with('.') || word.ends_with('?')\
    \ || word.ends_with('!');\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpab05mcu7.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        let mut chars = word.chars();\n\
    \        if let Some(c) = chars.next() {\n            if c == 'I' {\n        \
    \        boredoms += 1;\n            }\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmph95ynvzb.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        let mut chars = word.split_whitespace();\n\
    \        if let Some(first) = chars.next() {\n            if first == \"I\" {\n\
    \                boredoms += 1;\n            }\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n \
    \       } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmpsw3mp8y8.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == 'I' {\n            is_bored = true;\n        } else if c == '.'\
    \ || c == '?' || c == '!' {\n            if is_bored {\n                boredoms\
    \ += 1;\n            }\n            is_bored = false;\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp5meood86.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp05zu49ag.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = false;\n    for word in S.split_whitespace()\
    \ {\n        if word.ends_with('.') || word.ends_with('?') || word.ends_with('!')\
    \ {\n            sentence = true;\n        }\n        if sentence && word.starts_with('I')\
    \ {\n            boredoms += 1;\n            sentence = false;\n        }\n  \
    \  }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpw9s3zj6u.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == 'I' {\n            is_bored = true;\n        } else if c == '.'\
    \ || c == '?' || c == '!' {\n            if is_bored {\n                boredoms\
    \ += 1;\n            }\n            is_bored = false;\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpx2upfbrz.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpl7p59oyh.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp58dnv3lu.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == 'I' {\n            is_bored = true;\n        } else if c == '.'\
    \ || c == '?' || c == '!' {\n            if is_bored {\n                boredoms\
    \ += 1;\n            }\n            is_bored = false;\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpbvewv9f7.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpk9lvnv8f.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp9041_zfq.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpvlfk562l.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = false;\n    for c in S.chars() {\n   \
    \     if c == '.' || c == '?' || c == '!' {\n            sentence = false;\n \
    \       } else if c == ' ' {\n            continue;\n        } else if c == 'I'\
    \ && !sentence {\n            boredoms += 1;\n            sentence = true;\n \
    \       } else {\n            sentence = true;\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpojhg7bi2.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == '.' || c == '?' || c == '!' {\n            if is_bored {\n     \
    \           boredoms += 1;\n            }\n            is_bored = false;\n   \
    \     } else if c == 'I' {\n            is_bored = true;\n        }\n    }\n \
    \   boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmporqj0cwq.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        let mut chars = word.split_whitespace();\n\
    \        if let Some(first) = chars.next() {\n            if first == \"I\" {\n\
    \                boredoms += 1;\n            }\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        let mut words = word.split_whitespace();\n\
    \        if words.next() == Some(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpeiv8gwac.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpd6908m7r.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpi446_hgn.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpq6eknoya.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let mut first_word = true;\n    for word in S.split_whitespace()\
    \ {\n        if first_word {\n            if word == \"I\" {\n               \
    \ count += 1;\n            }\n            first_word = false;\n        }\n   \
    \     if word.ends_with('.') || word.ends_with('?') || word.ends_with('!') {\n\
    \            first_word = true;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp_mn7jhd7.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n \
    \       } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmplsnpi40e.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp61wzfh75.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp5qap7k07.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' || c\
    \ == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n  \
    \          count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpqy0mhzi3.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp9ot6f9o0.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        let mut chars = word.split_whitespace();\n\
    \        if chars.next() == Some(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == 'I' {\n            is_bored = true;\n        } else if c == '.'\
    \ || c == '?' || c == '!' {\n            if is_bored {\n                boredoms\
    \ += 1;\n            }\n            is_bored = false;\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpux7zipi3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == 'I' {\n            is_bored = true;\n        } else if c == '.'\
    \ || c == '?' || c == '!' {\n            if is_bored {\n                boredoms\
    \ += 1;\n            }\n            is_bored = false;\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdo2o5lru.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp9iejh0zx.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpyehkintw.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp3cn2fj9c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpf90w1v2p.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp4jmg82xo.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == 'I' {\n            is_bored = true;\n        } else if is_bored\
    \ && c == ' ' {\n            is_bored = false;\n        } else if is_bored &&\
    \ (c == '.' || c == '?' || c == '!') {\n            boredoms += 1;\n         \
    \   is_bored = false;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n    let\
    \ candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmptbfezo63.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpj9nvghpy.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp7muh0kjn.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpg1irilpm.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n \
    \       } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmpy34jt4o9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmprm2irr0s.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n      \
    \  if c == 'I' {\n            is_bored = true;\n        } else if is_bored &&\
    \ c == ' ' {\n            count += 1;\n            is_bored = false;\n       \
    \ } else if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpvjhfm9ne.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpem617pes.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpjevgxy8q.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpbad315g_.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpzs8qh45h.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n \
    \       } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmpreqmravg.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpa971ir9u.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n \
    \       } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmpdsfvz3m2.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpjnd3hofn.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmprvv8e7yg.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpks9p3__s.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpo18vur47.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmppcegbgb_.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut prev_char = ' ';\n    for c in S.chars() {\n    \
    \    if prev_char == 'I' && c == ' ' {\n            boredoms += 1;\n        }\n\
    \        prev_char = c;\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpr4inmwsc.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp3plocyxj.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n \
    \       } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmp0sg6_78b.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        let mut words = word.split_whitespace();\n\
    \        if words.next() == Some(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp3a0ntf6v.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if is_bored && c == ' ' {\n            boredoms += 1;\n            is_bored\
    \ = false;\n        }\n        if c == 'I' {\n            is_bored = true;\n \
    \       }\n        if c == '.' || c == '?' || c == '!' {\n            is_bored\
    \ = false;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpuz7xloq3.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpl8po9ouj.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == 'I' {\n            is_bored = true;\n        }\n        if c ==\
    \ '.' || c == '?' || c == '!' {\n            if is_bored {\n                boredoms\
    \ += 1;\n            }\n            is_bored = false;\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmph889q9gy.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp1iy8_ibu.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpf9rxppgv.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut last_char = ' ';\n    for c in S.chars() {\n    \
    \    if last_char == 'I' && c == ' ' {\n            boredoms += 1;\n        }\n\
    \        last_char = c;\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpmw53qkhj.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut prev_char = ' ';\n    for c in S.chars() {\n    \
    \    if prev_char == 'I' && c == ' ' {\n            boredoms += 1;\n        }\n\
    \        prev_char = c;\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpyktimk56.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp6d9lb7qj.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n      \
    \  if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n    \
    \    } else if c == 'I' {\n            is_bored = true;\n        } else if is_bored\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmpsn3xgsx1.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp_ewh2030.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp3bo0_rrl.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpk_q1oj9x.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == 'I' {\n            is_bored = true;\n        } else if c == '.'\
    \ || c == '?' || c == '!' {\n            if is_bored {\n                boredoms\
    \ += 1;\n            }\n            is_bored = false;\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp6ur4af_e.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp3w2n9vk_.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp557zgh78.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp3oco1kxk.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp6dfboxct.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == 'I' {\n            is_bored = true;\n        } else if c == '.'\
    \ || c == '?' || c == '!' {\n            if is_bored {\n                boredoms\
    \ += 1;\n            }\n            is_bored = false;\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpf8jqw7j_.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let words: Vec<&str> = S.split(|c: char| c == '.' || c ==\
    \ '?' || c == '!').collect();\n    for word in words {\n        let words: Vec<&str>\
    \ = word.split_whitespace().collect();\n        if words.len() > 0 && words[0]\
    \ == \"I\" {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == 'I' {\n            is_bored = true;\n        } else if c == '.'\
    \ || c == '?' || c == '!' {\n            if is_bored {\n                boredoms\
    \ += 1;\n            }\n            is_bored = false;\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpiy_e32af.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == 'I' {\n            is_bored = true;\n        } else if c == '.'\
    \ || c == '?' || c == '!' {\n            if is_bored {\n                boredoms\
    \ += 1;\n            }\n            is_bored = false;\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpp_uim44p.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence_start = true;\n    for word in S.split_whitespace()\
    \ {\n        if sentence_start && word == \"I\" {\n            boredoms += 1;\n\
    \        }\n        sentence_start = word.ends_with('.') || word.ends_with('?')\
    \ || word.ends_with('!');\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == 'I' {\n            is_bored = true;\n        }\n        if c ==\
    \ '.' || c == '?' || c == '!' {\n            if is_bored {\n                boredoms\
    \ += 1;\n            }\n            is_bored = false;\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpoxtmy9yv.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == 'I' {\n            is_bored = true;\n        } else if c == '.'\
    \ || c == '?' || c == '!' {\n            if is_bored {\n                boredoms\
    \ += 1;\n            }\n            is_bored = false;\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpvrn8zhcq.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n \
    \       } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmpirggvr4f.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n \
    \       } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmpfns_o08o.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n \
    \       } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmp0rcgd40a.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp_j1typwo.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmphpg1u1lx.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        let mut chars = word.split_whitespace();\n\
    \        if chars.next() == Some(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = false;\n    for word in S.split_whitespace()\
    \ {\n        if sentence {\n            if word.ends_with('.') || word.ends_with('?')\
    \ || word.ends_with('!') {\n                sentence = false;\n            }\n\
    \        } else {\n            if word.starts_with('I') {\n                boredoms\
    \ += 1;\n                sentence = true;\n            }\n        }\n    }\n \
    \   boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpb1ynqtkb.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == 'I' {\n            is_bored = true;\n        } else if c == '.'\
    \ || c == '?' || c == '!' {\n            if is_bored {\n                boredoms\
    \ += 1;\n            }\n            is_bored = false;\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp21r_sxbl.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' || c\
    \ == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n  \
    \          count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptlm4rkgk.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n \
    \       } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmp24ys5l1a.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     match c {\n            '.' | '?' | '!' => {\n                is_bored =\
    \ false;\n            }\n            'I' => {\n                if !is_bored {\n\
    \                    boredoms += 1;\n                    is_bored = true;\n  \
    \              }\n            }\n            _ => {}\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp03tbziap.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpt4msyk8y.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpfp17zwri.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == 'I' {\n            is_bored = true;\n        } else if c == '.'\
    \ || c == '?' || c == '!' {\n            if is_bored {\n                boredoms\
    \ += 1;\n            }\n            is_bored = false;\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp8uwcrxbg.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpkvbhl6xj.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp9qdd3c21.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp4b3dp0p6.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        let mut chars = word.split_whitespace();\n\
    \        if chars.next() == Some(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpa2rz8eti.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        let mut chars = word.split_whitespace();\n\
    \        if let Some(first) = chars.next() {\n            if first == \"I\" {\n\
    \                boredoms += 1;\n            }\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for word in S.split(|c: char|\
    \ c == '.' || c == '?' || c == '!') {\n        if is_bored {\n            boredoms\
    \ += 1;\n            is_bored = false;\n        }\n        if word.starts_with(\"\
    I\") {\n            is_bored = true;\n        }\n    }\n    boredoms\n}\n\nfn\
    \ main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmppv3vfxs_.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp3q0tr23i.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentences = S.split(|c: char| c == '.' || c == '?'\
    \ || c == '!');\n    for sentence in sentences {\n        if sentence.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpcq_r4o06.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence_start = true;\n    for word in S.split_whitespace()\
    \ {\n        if sentence_start && word == \"I\" {\n            boredoms += 1;\n\
    \        }\n        sentence_start = word.ends_with('.') || word.ends_with('?')\
    \ || word.ends_with('!');\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n \
    \       } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmp2i5vj6fo.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptm62ktx8.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp5iibdqsg.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpjtwxmx96.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n      \
    \  if c == 'I' {\n            is_bored = true;\n        } else if c == '.' ||\
    \ c == '?' || c == '!' {\n            if is_bored {\n                count +=\
    \ 1;\n            }\n            is_bored = false;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp08lmwkjp.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpm4jfr1lm.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpofon007a.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        let mut chars = word.split_whitespace();\n\
    \        if let Some(first) = chars.next() {\n            if first == \"I\" {\n\
    \                boredoms += 1;\n            }\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpjcc3cpfo.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpsb0yzkka.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ count = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n      \
    \  if c == 'I' {\n            is_bored = true;\n        } else if c == '.' ||\
    \ c == '?' || c == '!' {\n            if is_bored {\n                count +=\
    \ 1;\n            }\n            is_bored = false;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpq2_e067d.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        let mut chars = word.split_whitespace();\n\
    \        if let Some(first) = chars.next() {\n            if first == \"I\" {\n\
    \                boredoms += 1;\n            }\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut last_char = ' ';\n    for c in S.chars() {\n    \
    \    if last_char == 'I' && c == ' ' {\n            boredoms += 1;\n        }\n\
    \        last_char = c;\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpbb9v81sw.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpgyyf61zj.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpx5pkm2n7.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n \
    \       } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmppfvjdckb.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n \
    \       } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmpm_zelvz6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == 'I' {\n            is_bored = true;\n        } else if c == '.'\
    \ || c == '?' || c == '!' {\n            if is_bored {\n                boredoms\
    \ += 1;\n            }\n            is_bored = false;\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmphm_8tjla.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.trim().starts_with(\"I\"\
    ) {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpfcl801nn.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpy8re9e4a.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == 'I' {\n            is_bored = true;\n        }\n        if c ==\
    \ '.' || c == '?' || c == '!' {\n            if is_bored {\n                boredoms\
    \ += 1;\n            }\n            is_bored = false;\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpovldb9gm.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == 'I' {\n            is_bored = true;\n        }\n        if is_bored\
    \ && c == '.' {\n            boredoms += 1;\n            is_bored = false;\n \
    \       }\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"\
    Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"I love It !\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I feel good today. I will be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp05zo3i3t.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == 'I' {\n            is_bored = true;\n        } else if c == '.'\
    \ || c == '?' || c == '!' {\n            if is_bored {\n                boredoms\
    \ += 1;\n            }\n            is_bored = false;\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpor_xgi4q.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence_start = true;\n    for word in S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!') {\n        if sentence_start && word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n        sentence_start = true;\n\
    \    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpjmxup3lt.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == 'I' {\n            is_bored = true;\n        } else if c == '.'\
    \ || c == '?' || c == '!' {\n            if is_bored {\n                boredoms\
    \ += 1;\n            }\n            is_bored = false;\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpjmewslgy.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpc__k8uqt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpofaokzk0.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        let mut chars = word.chars();\n\
    \        if let Some(c) = chars.next() {\n            if c == 'I' {\n        \
    \        boredoms += 1;\n            }\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpo2jvxjt1.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        let mut chars = word.split_whitespace();\n\
    \        if let Some(first) = chars.next() {\n            if first == \"I\" {\n\
    \                boredoms += 1;\n            }\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpn8qe1l0z.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n \
    \       } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmpqfg4s2zp.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let words: Vec<&str> = S.split(|c: char| c == '.' || c ==\
    \ '?' || c == '!').collect();\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp_bcvx1tm.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpzmmzamyh.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n \
    \       } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmpt2dowxyn.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n \
    \       } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmp_q9pdctt.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        let mut chars = word.chars();\n\
    \        if chars.next() == Some('I') {\n            boredoms += 1;\n        }\n\
    \    }\n    boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp6lba4oka.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n \
    \       } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmp3jgag07e.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpfrce73wa.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp29puy4fe.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp420wuy0e.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp1bqf95yd.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = \"\";\n    for c in S.chars() {\n    \
    \    if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence =\
    \ \"\";\n        } else {\n            sentence.push(c);\n        }\n    }\n \
    \   boredoms\n}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `push` found for reference `&str` in the\
    \ current scope\n  --> /tmp/tmpo9whrs7e.rs:19:22\n   |\n19 |             sentence.push(c);\n\
    \   |                      ^^^^ method not found in `&str`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n \
    \       } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmpf_lfbbmn.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpyl_m7ck5.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n \
    \       } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmp6_jzr4ob.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence = String::new();\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence.starts_with(\"\
    I\") {\n                boredoms += 1;\n            }\n            sentence.clear();\n\
    \        } else {\n            sentence.push(c);\n        }\n    }\n    boredoms\n\
    }\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpy5b8ix0s.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut sentence_start = true;\n    for word in S.split_whitespace()\
    \ {\n        if sentence_start && word == \"I\" {\n            boredoms += 1;\n\
    \        }\n        sentence_start = word.ends_with('.') || word.ends_with('?')\
    \ || word.ends_with('!');\n    }\n    boredoms\n}\n\nfn main() {\n    let candidate\
    \ = is_bored;\n    assert_eq!(candidate(String::from(\"Hello world\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"Is the sky blue?\")), 0);\n    assert_eq!(candidate(String::from(\"\
    I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"bIt\")), 0);\n \
    \   assert_eq!(candidate(String::from(\"I feel good today. I will be productive.\
    \ will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"You and I are\
    \ going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n \
    \       } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\n\
    fn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
    )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `0`', /tmp/tmph7_ri2zo.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n   \
    \     if c == '.' || c == '?' || c == '!' {\n            if is_bored {\n     \
    \           boredoms += 1;\n            }\n            is_bored = false;\n   \
    \     } else if is_bored {\n            continue;\n        } else if c == 'I'\
    \ {\n            is_bored = true;\n        }\n    }\n    boredoms\n}\n\nfn main()\
    \ {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpu_1nnzh3.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You'll be given a string of words, and your task is to count the number\n\
    /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n///\
    \ Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"\
    Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n/// 1\nfn is_bored(S: String) -> isize {\n    let mut\
    \ boredoms = 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            boredoms += 1;\n        }\n    }\n    boredoms\n}\n\nfn main() {\n\
    \    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
    bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
    \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
    You and I are going for a walk\")), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp26x4m250.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
