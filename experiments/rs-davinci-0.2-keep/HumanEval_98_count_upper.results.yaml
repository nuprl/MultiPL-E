name: HumanEval_98_count_upper
language: rust
results:
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpkq4emn8_.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpnuqzr42p.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpkpuo8hmo.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    let mut i = 0;\n    for c in s.chars() {\n  \
    \      if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmph_ibha3e.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpumu87k25.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpfuk9jkex.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpfr1li8tb.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmph3xglcyn.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    let mut i = 0;\n    for c in s.chars() {\n  \
    \      if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpg094q7y2.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp5mxgdaoo.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpjwx3ilca.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpx5k0qzkn.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmprhlvuyor.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmplfrgq3ea.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpj9s_8vtr.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp6_2fy1_x.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpexnqjq8v.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpoyre_47o.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpz46acld8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpf4ik5sit.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    // TODO: implement this function\n    0\n}\n\nfn main() {\n    let candidate\
    \ = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n  \
    \  assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpf5cw4vv7.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpd7kffqhe.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpwhfzy5hc.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpdnyp6fxr.rs:7:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp6oty0m53.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpn78r_fwj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpb8hhee2s.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpb0d66ghy.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmppb2zdizl.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp6fiurr6g.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp4akfl6g8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpaqwmb0_a.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    s.chars().enumerate().fold(0, |acc, (i, c)| {\n        if i % 2 == 0\
    \ && c.is_uppercase() {\n            acc + 1\n        } else {\n            acc\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp8vryjkg0.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpygxw9ss1.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpz20iwc13.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpo78m4cat.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp7l8axoph.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpbma3q0jk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpxziqakea.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp7t1y51dm.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpcyypvf32.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp_ro_52ly.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmptcmrx1u_.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp39hw1yfj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp_rjmhnhi.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmphah0bu_f.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpxuptx4h2.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpj8ockqy3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpm_3ryxqk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpiwvg6mgg.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp2ykh38y1.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpzdwe05o2.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpauuzzdzc.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n   \
    \ for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && vowels.contains(&c)\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpne1ot2nf.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpllsuq7_8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpyeddy_jq.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpcrx_x_9x.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpba0m8ot1.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpd8qx5og9.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpezamgj3y.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpkmi9zstt.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmprgoxbziy.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp84gjn70q.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpal1jq245.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpv99fld6f.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp5czhnbjs.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpvs46ccp7.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpue_hbwf7.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpypx4cvyi.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpad685h6a.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    s.chars().enumerate().fold(0, |acc, (i, c)| {\n        if i % 2 == 0\
    \ && c.is_uppercase() {\n            acc + 1\n        } else {\n            acc\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpuyrevrmn.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp50zd5h98.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpz_1qq19k.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmph1musccx.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp25q4hmb3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpumog8fuh.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp_9qdprsl.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpg33dy99x.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpkdnlfd0d.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpkphtjso_.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpqhifqqyl.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpl_8v1s51.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    // TODO: Implement this function\n    0\n}\n\nfn main() {\n    let candidate\
    \ = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n  \
    \  assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp6f_2ykw0.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpqc64cn_y.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpk9yi2w95.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpzqud9v1l.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmphy789saj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpy_kd977w.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpofzvlp4e.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpxmi4yzf8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    let vowels = vec!['A', 'E', 'I', 'O', 'U'];\n\
    \    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && vowels.contains(&c)\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    let mut index = 0;\n    for c in s.chars() {\n\
    \        if index % 2 == 0 && c.is_uppercase() {\n            count += 1;\n  \
    \      }\n        index += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n  \
    \  assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpgqososmq.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpz7xnode9.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    let mut i = 0;\n    for c in s.chars() {\n  \
    \      if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp60wmew33.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpzc5ma26j.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    let mut i = 0;\n    for c in s.chars() {\n  \
    \      if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp5_pgzdk6.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpz1hk6u0u.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpijt1nhcr.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp9p36i49b.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp0fb9cq9z.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp7rwd6hwg.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpuar9bre3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpmnqitth5.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp26bezaru.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmppdp88kv3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp3ee84n5t.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpiepaev9x.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpvk549wcl.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp9ug1e7hq.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpphdekhe9.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpyb4mw9ip.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpj6rw6emg.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n   \
    \ for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && vowels.contains(&c)\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp17yhx76t.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpxn25_uhz.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpf_iq7cw8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp4nxvcmzv.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp95x333hs.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpx73xa6qw.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpvgci2viv.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    let mut i = 0;\n    for c in s.chars() {\n  \
    \      if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp6g8cbhwm.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpt4nsyynt.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpecc_aq7o.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpycyevcu1.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmplhhb_07f.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    // TODO\n    0\n}\n\nfn main() {\n    let candidate = count_upper;\n\
    \    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"\
    abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp_6ltz7fv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp5f1rxkrn.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpmkvui7rk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    let vowels = vec!['A', 'E', 'I', 'O', 'U'];\n\
    \    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && vowels.contains(&c)\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    let vowels = vec!['A', 'E', 'I', 'O', 'U'];\n\
    \    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && vowels.contains(&c)\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpect4pter.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpnxzdud39.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpb0wfeuwa.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp318ldok7.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp5meqwpuf.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp0pdhjpnd.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpjrmmar9x.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpn1a0etd3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpyrcvo9pv.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpfsfwf7d7.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpwjcz2fqa.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp2qan0s6j.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp0pdlkomj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n   \
    \ for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && vowels.contains(&c)\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpfd_nfs15.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp32ttp47v.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp4rybgar8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp8b92w31m.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp99wms4ls.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpsyrig9bl.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpe5pho7mw.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmppjjn_itw.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpnootw0s_.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n   \
    \ for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && vowels.contains(&c)\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpovhks1zh.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp60ftauey.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    s.chars().enumerate().fold(0, |acc, (i, c)| {\n        if i % 2 == 0\
    \ && c.is_uppercase() {\n            acc + 1\n        } else {\n            acc\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp9clhpxjk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp83dn577m.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpruffbe67.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmprmvr_fxj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpk2eax9ab.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmptlvp55il.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpaoeepfw0.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp09tvh2js.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp9p1f9ag3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpa6wtshpu.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp_9cfqout.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmppknpwexn.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp8y7lyvpc.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp_20spxw9.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp5erptzff.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp90f6fm6n.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp_pe_23up.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpfiaea_ud.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpbjrh3g9y.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpia317_uv.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp58h3hpcu.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n   \
    \ for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && vowels.contains(&c)\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    // TODO: Implement this function\n    0\n}\n\nfn main() {\n    let candidate\
    \ = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\")), 1);\n  \
    \  assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpylto7szg.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpxsbedbst.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpjd1wxlvc.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp06nemwrp.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp7dxe5omr.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpz18blzkr.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpl2kiddsz.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpba5fyjlp.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpxjdbhfby.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmppihopysi.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n   \
    \ for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && vowels.contains(&c)\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpkfnrdu9s.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp0oazjvjc.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpmxm5hkq_.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpd41t4qy4.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpjrlw0x4t.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpbeot_9rx.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    let vowels = vec!['A', 'E', 'I', 'O', 'U'];\n\
    \    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && vowels.contains(&c)\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpsqt5ou20.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n   \
    \ for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && vowels.contains(&c)\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"aBCdEf\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
    dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
    U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
    \ returns 0\n/// count_upper('dBBE') returns 0\nfn count_upper(s: String) -> isize\
    \ {\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
    aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n  \
    \  assert_eq!(candidate(String::from(\"dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"\
    B\")), 0);\n    assert_eq!(candidate(String::from(\"U\")), 1);\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"EEEE\")), 2);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmprilai86j.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
