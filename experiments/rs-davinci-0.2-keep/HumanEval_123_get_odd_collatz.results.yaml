name: HumanEval_123_get_odd_collatz
language: rust
results:
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut curr = n;\n    while curr != 1 {\n\
    \        if curr % 2 == 0 {\n            curr /= 2;\n        } else {\n      \
    \      curr = 3 * curr + 1;\n        }\n        collatz.push(curr);\n    }\n \
    \   collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpvauqr5zi.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut current = n;\n    while current !=\
    \ 1 {\n        if current % 2 == 0 {\n            current /= 2;\n        } else\
    \ {\n            current = current * 3 + 1;\n        }\n        collatz.push(current);\n\
    \    }\n    collatz.into_iter().filter(|x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpoaa6ook9.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut current = n;\n    while current !=\
    \ 1 {\n        if current % 2 == 0 {\n            current /= 2;\n        } else\
    \ {\n            current = current * 3 + 1;\n        }\n        collatz.push(current);\n\
    \    }\n    collatz.into_iter().filter(|x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpxb2ni_4f.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut curr = n;\n    while curr != 1 {\n\
    \        if curr % 2 == 0 {\n            curr /= 2;\n        } else {\n      \
    \      curr = curr * 3 + 1;\n        }\n        collatz.push(curr);\n    }\n \
    \   collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpas4bfwvk.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![n];\n    let mut n = n;\n    while n != 1 {\n      \
    \  n = if n % 2 == 0 {\n            n / 2\n        } else {\n            3 * n\
    \ + 1\n        };\n        if n % 2 != 0 {\n            result.push(n);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpsy4o0_tf.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut v = vec![n];\n    let mut i = n;\n    while i != 1 {\n        i =\
    \ if i % 2 == 0 { i / 2 } else { 3 * i + 1 };\n        if i % 2 != 0 {\n     \
    \       v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n\
    \    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12), vec![1,\
    \ 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpbfrqyilb.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![n];\n    let mut curr = n;\n    while curr != 1 {\n\
    \        if curr % 2 == 0 {\n            curr /= 2;\n        } else {\n      \
    \      curr = curr * 3 + 1;\n        }\n        if curr % 2 != 0 {\n         \
    \   result.push(curr);\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11,\
    \ 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpttx9ctzv.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![n];\n    let mut current = n;\n    while current !=\
    \ 1 {\n        current = if current % 2 == 0 { current / 2 } else { current *\
    \ 3 + 1 };\n        if current % 2 != 0 {\n            result.push(current);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpmb1c3x2a.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut next = n;\n    while next != 1 {\n\
    \        next = if next % 2 == 0 {\n            next / 2\n        } else {\n \
    \           next * 3 + 1\n        };\n        collatz.push(next);\n    }\n   \
    \ collatz.into_iter().filter(|x| x % 2 != 0).collect()\n}\n\nfn main() {\n   \
    \ let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7,\
    \ 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp3f5qtm6v.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut current = n;\n    while current !=\
    \ 1 {\n        if current % 2 == 0 {\n            current /= 2;\n        } else\
    \ {\n            current = current * 3 + 1;\n        }\n        collatz.push(current);\n\
    \    }\n    collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmppvul77lp.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut current = n;\n    while current !=\
    \ 1 {\n        if current % 2 == 0 {\n            current /= 2;\n        } else\
    \ {\n            current = 3 * current + 1;\n        }\n        collatz.push(current);\n\
    \    }\n    collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp7vi5a41v.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut v = vec![n];\n    let mut i = n;\n    while i != 1 {\n        i =\
    \ if i % 2 == 0 { i / 2 } else { 3 * i + 1 };\n        if i % 2 != 0 {\n     \
    \       v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n\
    \    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12), vec![1,\
    \ 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmphgbhyxyn.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut v = vec![n];\n    let mut cur = n;\n    while cur != 1 {\n       \
    \ if cur % 2 == 0 {\n            cur /= 2;\n        } else {\n            cur\
    \ = cur * 3 + 1;\n        }\n        if cur % 2 != 0 {\n            v.push(cur);\n\
    \        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpg9x8oung.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut curr = n;\n    while curr != 1 {\n\
    \        if curr % 2 == 0 {\n            curr /= 2;\n        } else {\n      \
    \      curr = curr * 3 + 1;\n        }\n        collatz.push(curr);\n    }\n \
    \   collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpjycxv408.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![n];\n    let mut curr = n;\n    while curr != 1 {\n\
    \        if curr % 2 == 0 {\n            curr /= 2;\n        } else {\n      \
    \      curr = curr * 3 + 1;\n        }\n        if curr % 2 != 0 {\n         \
    \   result.push(curr);\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11,\
    \ 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpcbgc5ql3.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut curr = n;\n    while curr != 1 {\n\
    \        if curr % 2 == 0 {\n            curr /= 2;\n        } else {\n      \
    \      curr = 3 * curr + 1;\n        }\n        collatz.push(curr);\n    }\n \
    \   collatz.into_iter().filter(|x| x % 2 != 0).collect()\n}\n\nfn main() {\n \
    \   let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpgftgi3q_.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut i = 0;\n    while collatz[i] != 1\
    \ {\n        if collatz[i] % 2 == 0 {\n            collatz.push(collatz[i] / 2);\n\
    \        } else {\n            collatz.push(collatz[i] * 3 + 1);\n        }\n\
    \        i += 1;\n    }\n    collatz.into_iter().filter(|x| x % 2 != 0).collect()\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpt7k6yt1u.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![n];\n    let mut num = n;\n    while num != 1 {\n  \
    \      num = if num % 2 == 0 {\n            num / 2\n        } else {\n      \
    \      3 * num + 1\n        };\n        if num % 2 != 0 {\n            result.push(num);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpykyxvcw2.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut curr = n;\n    while curr != 1 {\n\
    \        if curr % 2 == 0 {\n            curr /= 2;\n        } else {\n      \
    \      curr = 3 * curr + 1;\n        }\n        collatz.push(curr);\n    }\n \
    \   collatz.into_iter().filter(|x| x % 2 != 0).collect()\n}\n\nfn main() {\n \
    \   let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp1i7q0m3r.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut v = vec![n];\n    let mut i = n;\n    while i != 1 {\n        if i\
    \ % 2 == 0 {\n            i /= 2;\n        } else {\n            i = 3 * i + 1;\n\
    \        }\n        if i % 2 != 0 {\n            v.push(i);\n        }\n    }\n\
    \    v\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpby_d3w06.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut v = vec![n];\n    let mut i = n;\n    while i != 1 {\n        if i\
    \ % 2 == 0 {\n            i /= 2;\n        } else {\n            i = i * 3 + 1;\n\
    \        }\n        if i % 2 != 0 {\n            v.push(i);\n        }\n    }\n\
    \    v\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp03m6upa6.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![];\n    let mut current = n;\n    while current != 1\
    \ {\n        if current % 2 != 0 {\n            result.push(current);\n      \
    \  }\n        current = if current % 2 == 0 {\n            current / 2\n     \
    \   } else {\n            3 * current + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp1s0ty8af.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut v = vec![n];\n    let mut i = n;\n    while i != 1 {\n        if i\
    \ % 2 == 0 {\n            i /= 2;\n        } else {\n            i = 3 * i + 1;\n\
    \        }\n        if i % 2 != 0 {\n            v.push(i);\n        }\n    }\n\
    \    v\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpabqvv7lc.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut num = n;\n    while num != 1 {\n \
    \       if num % 2 == 0 {\n            num /= 2;\n        } else {\n         \
    \   num = num * 3 + 1;\n        }\n        collatz.push(num);\n    }\n    collatz.iter().filter(|&x|\
    \ x % 2 != 0).cloned().collect()\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpw68ailfz.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut num = n;\n    while num != 1 {\n \
    \       num = if num % 2 == 0 {\n            num / 2\n        } else {\n     \
    \       3 * num + 1\n        };\n        collatz.push(num);\n    }\n    collatz.into_iter().filter(|x|\
    \ x % 2 != 0).collect()\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpomv080os.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![];\n    let mut n = n;\n    while n != 1 {\n       \
    \ if n % 2 != 0 {\n            result.push(n);\n        }\n        n = if n %\
    \ 2 == 0 { n / 2 } else { 3 * n + 1 };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp7sjo9sv_.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut current = n;\n    while current !=\
    \ 1 {\n        if current % 2 == 0 {\n            current /= 2;\n        } else\
    \ {\n            current = current * 3 + 1;\n        }\n        collatz.push(current);\n\
    \    }\n    collatz.into_iter().filter(|x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpe97s74mv.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut current = n;\n    while current !=\
    \ 1 {\n        if current % 2 == 0 {\n            current /= 2;\n        } else\
    \ {\n            current = current * 3 + 1;\n        }\n        collatz.push(current);\n\
    \    }\n    collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp77gp62s9.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut seq = vec![n];\n    let mut curr = n;\n    while curr != 1 {\n   \
    \     if curr % 2 == 0 {\n            curr /= 2;\n        } else {\n         \
    \   curr = 3 * curr + 1;\n        }\n        seq.push(curr);\n    }\n    seq.into_iter().filter(|&x|\
    \ x % 2 != 0).collect()\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpvluyod4s.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![];\n    let mut num = n;\n    while num != 1 {\n   \
    \     if num % 2 != 0 {\n            result.push(num);\n        }\n        num\
    \ = if num % 2 == 0 {\n            num / 2\n        } else {\n            3 *\
    \ num + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpqtro8lng.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut odd_collatz = Vec::new();\n    while\
    \ collatz.last().unwrap() != &1 {\n        let last = collatz.last().unwrap();\n\
    \        if last % 2 == 0 {\n            collatz.push(last / 2);\n        } else\
    \ {\n            collatz.push(last * 3 + 1);\n        }\n    }\n    for i in collatz\
    \ {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n        }\n  \
    \  }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpb7swgvfa.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut res = vec![];\n    let mut cur = n;\n    while cur != 1 {\n      \
    \  if cur % 2 == 1 {\n            res.push(cur);\n        }\n        cur = if\
    \ cur % 2 == 0 { cur / 2 } else { 3 * cur + 1 };\n    }\n    res.push(1);\n  \
    \  res\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpn6rdc4el.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz: Vec<isize> = vec![n];\n    let mut i = n;\n    while i !=\
    \ 1 {\n        if i % 2 == 0 {\n            i = i / 2;\n        } else {\n   \
    \         i = 3 * i + 1;\n        }\n        collatz.push(i);\n    }\n    collatz.into_iter().filter(|&x|\
    \ x % 2 != 0).collect()\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpuonnnzmu.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![];\n    let mut num = n;\n    while num != 1 {\n   \
    \     if num % 2 != 0 {\n            result.push(num);\n        }\n        num\
    \ = if num % 2 == 0 {\n            num / 2\n        } else {\n            3 *\
    \ num + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpytxvwqvl.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![];\n    let mut num = n;\n    while num != 1 {\n   \
    \     if num % 2 != 0 {\n            result.push(num);\n        }\n        num\
    \ = if num % 2 == 0 {\n            num / 2\n        } else {\n            3 *\
    \ num + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp0xp7wko8.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![];\n    let mut m = n;\n    while m != 1 {\n       \
    \ if m % 2 == 1 {\n            result.push(m);\n        }\n        m = if m %\
    \ 2 == 0 {\n            m / 2\n        } else {\n            3 * m + 1\n     \
    \   };\n    }\n    result.push(1);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n\
    \    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12), vec![1,\
    \ 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpl1o0y4xv.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut odd_collatz = Vec::new();\n    while\
    \ collatz.last().unwrap() != &1 {\n        let last = collatz.last().unwrap();\n\
    \        if last % 2 == 0 {\n            collatz.push(last / 2);\n        } else\
    \ {\n            collatz.push(last * 3 + 1);\n            odd_collatz.push(*last);\n\
    \        }\n    }\n    odd_collatz.sort();\n    odd_collatz\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `collatz` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmp_yg8gbej.rs:20:13\n   |\n16 |         let last =\
    \ collatz.last().unwrap();\n   |                    -------------- immutable borrow\
    \ occurs here\n...\n20 |             collatz.push(last * 3 + 1);\n   |       \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n21 |           \
    \  odd_collatz.push(*last);\n   |                              ----- immutable\
    \ borrow later used here\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut v = vec![n];\n    let mut n = n;\n    while n != 1 {\n        if n\
    \ % 2 == 0 {\n            n /= 2;\n        } else {\n            n = 3 * n + 1;\n\
    \        }\n        if n % 2 != 0 {\n            v.push(n);\n        }\n    }\n\
    \    v\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpcyo1c6f_.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![];\n    let mut curr = n;\n    while curr != 1 {\n \
    \       if curr % 2 == 1 {\n            result.push(curr);\n        }\n      \
    \  curr = if curr % 2 == 0 {\n            curr / 2\n        } else {\n       \
    \     3 * curr + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\n\
    fn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmprc6d3_98.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![];\n    let mut num = n;\n    while num != 1 {\n   \
    \     if num % 2 != 0 {\n            result.push(num);\n        }\n        num\
    \ = if num % 2 == 0 {\n            num / 2\n        } else {\n            3 *\
    \ num + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpkn1ae141.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![];\n    let mut num = n;\n    while num != 1 {\n   \
    \     if num % 2 != 0 {\n            result.push(num);\n        }\n        num\
    \ = if num % 2 == 0 { num / 2 } else { 3 * num + 1 };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpare7qsfm.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![n];\n    let mut current = n;\n    while current !=\
    \ 1 {\n        if current % 2 == 0 {\n            current /= 2;\n        } else\
    \ {\n            current = current * 3 + 1;\n        }\n        if current % 2\
    \ != 0 {\n            result.push(current);\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpzrngbe7d.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut current = n;\n    while current !=\
    \ 1 {\n        if current % 2 == 0 {\n            current /= 2;\n        } else\
    \ {\n            current = current * 3 + 1;\n        }\n        collatz.push(current);\n\
    \    }\n    collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpwrwy7kpt.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut next = n;\n    while next != 1 {\n\
    \        next = if next % 2 == 0 {\n            next / 2\n        } else {\n \
    \           3 * next + 1\n        };\n        collatz.push(next);\n    }\n   \
    \ collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main() {\n  \
    \  let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmppzm53a69.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![];\n    let mut num = n;\n    while num != 1 {\n   \
    \     if num % 2 != 0 {\n            result.push(num);\n        }\n        num\
    \ = if num % 2 == 0 {\n            num / 2\n        } else {\n            3 *\
    \ num + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp9immhh_d.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![n];\n    let mut next = n;\n    while next != 1 {\n\
    \        next = if next % 2 == 0 {\n            next / 2\n        } else {\n \
    \           3 * next + 1\n        };\n        if next % 2 != 0 {\n           \
    \ result.push(next);\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11,\
    \ 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpy47vdgyy.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![n];\n    let mut n = n;\n    while n != 1 {\n      \
    \  n = if n % 2 == 0 {\n            n / 2\n        } else {\n            3 * n\
    \ + 1\n        };\n        if n % 2 != 0 {\n            result.push(n);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmps46vtb3a.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut i = 0;\n    while collatz[i] != 1\
    \ {\n        if collatz[i] % 2 == 0 {\n            collatz.push(collatz[i] / 2);\n\
    \        } else {\n            collatz.push(collatz[i] * 3 + 1);\n        }\n\
    \        i += 1;\n    }\n    collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp7acz0fc8.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![];\n    let mut current = n;\n    while current != 1\
    \ {\n        if current % 2 != 0 {\n            result.push(current);\n      \
    \  }\n        current = if current % 2 == 0 {\n            current / 2\n     \
    \   } else {\n            current * 3 + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp5b5_mkg4.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![n];\n    let mut current = n;\n    while current !=\
    \ 1 {\n        if current % 2 == 0 {\n            current /= 2;\n        } else\
    \ {\n            current = current * 3 + 1;\n        }\n        if current % 2\
    \ != 0 {\n            result.push(current);\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpvv68w_9i.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut current = n;\n    while current !=\
    \ 1 {\n        if current % 2 == 0 {\n            current /= 2;\n        } else\
    \ {\n            current = current * 3 + 1;\n        }\n        collatz.push(current);\n\
    \    }\n    collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp30fg993k.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![];\n    let mut num = n;\n    while num != 1 {\n   \
    \     if num % 2 != 0 {\n            result.push(num);\n        }\n        num\
    \ = if num % 2 == 0 {\n            num / 2\n        } else {\n            3 *\
    \ num + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpo_gp47x5.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz: Vec<isize> = vec![n];\n    let mut curr = n;\n    while curr\
    \ != 1 {\n        if curr % 2 == 0 {\n            curr /= 2;\n        } else {\n\
    \            curr = curr * 3 + 1;\n        }\n        collatz.push(curr);\n  \
    \  }\n    collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp2vkpwyep.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    while collatz.last().unwrap() != &1 {\n  \
    \      let last = collatz.last().unwrap();\n        if last % 2 == 0 {\n     \
    \       collatz.push(last / 2);\n        } else {\n            collatz.push(last\
    \ * 3 + 1);\n        }\n    }\n    collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpv8m3um36.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut odd_collatz = Vec::new();\n    let\
    \ mut i = 0;\n    while collatz[i] != 1 {\n        if collatz[i] % 2 == 0 {\n\
    \            collatz.push(collatz[i] / 2);\n        } else {\n            collatz.push(collatz[i]\
    \ * 3 + 1);\n            odd_collatz.push(collatz[i]);\n        }\n        i +=\
    \ 1;\n    }\n    odd_collatz.sort();\n    odd_collatz\n}\n\nfn main() {\n    let\
    \ candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11,\
    \ 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 7, 11, 13, 17]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpaacn5drh.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![n];\n    let mut next = n;\n    while next != 1 {\n\
    \        next = if next % 2 == 0 {\n            next / 2\n        } else {\n \
    \           3 * next + 1\n        };\n        if next % 2 != 0 {\n           \
    \ result.push(next);\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11,\
    \ 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpl0a0lvps.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![];\n    let mut num = n;\n    while num != 1 {\n   \
    \     if num % 2 != 0 {\n            result.push(num);\n        }\n        num\
    \ = if num % 2 == 0 {\n            num / 2\n        } else {\n            3 *\
    \ num + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpnnd252c2.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut current = n;\n    while current !=\
    \ 1 {\n        if current % 2 == 0 {\n            current /= 2;\n        } else\
    \ {\n            current = 3 * current + 1;\n        }\n        collatz.push(current);\n\
    \    }\n    collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp6mlbo8z2.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![];\n    let mut num = n;\n    while num != 1 {\n   \
    \     if num % 2 != 0 {\n            result.push(num);\n        }\n        num\
    \ = if num % 2 == 0 {\n            num / 2\n        } else {\n            3 *\
    \ num + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpmyr585d7.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![n];\n    let mut current = n;\n    while current !=\
    \ 1 {\n        if current % 2 == 0 {\n            current /= 2;\n        } else\
    \ {\n            current = current * 3 + 1;\n        }\n        if current % 2\
    \ != 0 {\n            result.push(current);\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpz5ac0xrt.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![];\n    let mut i = n;\n    while i != 1 {\n      \
    \  if i % 2 != 0 {\n            collatz.push(i);\n        }\n        i = if i\
    \ % 2 == 0 { i / 2 } else { 3 * i + 1 };\n    }\n    collatz.push(1);\n    collatz\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpw99zc36h.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![n];\n    let mut current = n;\n    while current !=\
    \ 1 {\n        if current % 2 == 0 {\n            current /= 2;\n        } else\
    \ {\n            current = current * 3 + 1;\n        }\n        if current % 2\
    \ != 0 {\n            result.push(current);\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpcstd2ubk.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![n];\n    let mut current = n;\n    while current !=\
    \ 1 {\n        if current % 2 == 0 {\n            current /= 2;\n        } else\
    \ {\n            current = current * 3 + 1;\n        }\n        if current % 2\
    \ != 0 {\n            result.push(current);\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpi7t0plra.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![];\n    let mut num = n;\n    while num != 1 {\n   \
    \     if num % 2 != 0 {\n            result.push(num);\n        }\n        num\
    \ = if num % 2 == 0 { num / 2 } else { 3 * num + 1 };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpd7evew9d.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![n];\n    let mut current = n;\n    while current !=\
    \ 1 {\n        if current % 2 == 0 {\n            current /= 2;\n        } else\
    \ {\n            current = current * 3 + 1;\n        }\n        if current % 2\
    \ != 0 {\n            result.push(current);\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpqkbh0xbo.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![n];\n    let mut next = n;\n    while next != 1 {\n\
    \        next = if next % 2 == 0 {\n            next / 2\n        } else {\n \
    \           3 * next + 1\n        };\n        if next % 2 != 0 {\n           \
    \ result.push(next);\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11,\
    \ 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpfe0vfwya.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut res = vec![n];\n    let mut cur = n;\n    while cur != 1 {\n     \
    \   cur = if cur % 2 == 0 { cur / 2 } else { 3 * cur + 1 };\n        if cur %\
    \ 2 == 1 {\n            res.push(cur);\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp2_ngn2wv.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![];\n    let mut n = n;\n    while n != 1 {\n       \
    \ if n % 2 != 0 {\n            result.push(n);\n        }\n        n = if n %\
    \ 2 == 0 { n / 2 } else { 3 * n + 1 };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmppetbjlvg.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut curr = n;\n    while curr != 1 {\n\
    \        if curr % 2 == 0 {\n            curr /= 2;\n        } else {\n      \
    \      curr = curr * 3 + 1;\n        }\n        collatz.push(curr);\n    }\n \
    \   collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmppodt0lf5.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![n];\n    let mut current = n;\n    while current !=\
    \ 1 {\n        current = if current % 2 == 0 {\n            current / 2\n    \
    \    } else {\n            current * 3 + 1\n        };\n        if current % 2\
    \ != 0 {\n            result.push(current);\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpimidfhar.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![n];\n    let mut next = n;\n    while next != 1 {\n\
    \        next = if next % 2 == 0 {\n            next / 2\n        } else {\n \
    \           3 * next + 1\n        };\n        if next % 2 != 0 {\n           \
    \ result.push(next);\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11,\
    \ 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmprf4u2vl1.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut i = n;\n    while i != 1 {\n     \
    \   if i % 2 == 0 {\n            i = i / 2;\n        } else {\n            i =\
    \ 3 * i + 1;\n        }\n        collatz.push(i);\n    }\n    collatz.into_iter().filter(|&x|\
    \ x % 2 != 0).collect()\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpgmy_jz74.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut v = vec![n];\n    let mut i = n;\n    while i != 1 {\n        if i\
    \ % 2 == 0 {\n            i /= 2;\n        } else {\n            i = 3 * i + 1;\n\
    \        }\n        if i % 2 != 0 {\n            v.push(i);\n        }\n    }\n\
    \    v\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpv9rvzzgu.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![n];\n    let mut current = n;\n    while current !=\
    \ 1 {\n        current = if current % 2 == 0 {\n            current / 2\n    \
    \    } else {\n            3 * current + 1\n        };\n        if current % 2\
    \ != 0 {\n            result.push(current);\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpymaacuku.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut i = 0;\n    while collatz[i] != 1\
    \ {\n        if collatz[i] % 2 == 0 {\n            collatz.push(collatz[i] / 2);\n\
    \        } else {\n            collatz.push(collatz[i] * 3 + 1);\n        }\n\
    \        i += 1;\n    }\n    collatz.retain(|&x| x % 2 != 0);\n    collatz\n}\n\
    \nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpvqmp2x_9.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut curr = n;\n    while curr != 1 {\n\
    \        if curr % 2 == 0 {\n            curr /= 2;\n        } else {\n      \
    \      curr = curr * 3 + 1;\n        }\n        collatz.push(curr);\n    }\n \
    \   collatz.into_iter().filter(|x| x % 2 != 0).collect()\n}\n\nfn main() {\n \
    \   let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpssldzkdb.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz: Vec<isize> = vec![n];\n    let mut current = n;\n    while\
    \ current != 1 {\n        if current % 2 == 0 {\n            current /= 2;\n \
    \       } else {\n            current = current * 3 + 1;\n        }\n        collatz.push(current);\n\
    \    }\n    collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp7h4vs6m9.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut current = n;\n    while current !=\
    \ 1 {\n        if current % 2 == 0 {\n            current /= 2;\n        } else\
    \ {\n            current = 3 * current + 1;\n        }\n        collatz.push(current);\n\
    \    }\n    collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpthh3jqsw.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut odd_collatz = Vec::new();\n    let mut num = n;\n    while num !=\
    \ 1 {\n        if num % 2 != 0 {\n            odd_collatz.push(num);\n       \
    \ }\n        num = if num % 2 == 0 { num / 2 } else { 3 * num + 1 };\n    }\n\
    \    odd_collatz.push(1);\n    odd_collatz\n}\n\nfn main() {\n    let candidate\
    \ = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n\
    \    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12), vec![1,\
    \ 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpas725ta_.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![];\n    let mut num = n;\n    while num != 1 {\n   \
    \     if num % 2 != 0 {\n            result.push(num);\n        }\n        num\
    \ = if num % 2 == 0 {\n            num / 2\n        } else {\n            num\
    \ * 3 + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpfyviugkl.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut odd_collatz = Vec::new();\n    let\
    \ mut i = 0;\n    while collatz[i] != 1 {\n        if collatz[i] % 2 == 0 {\n\
    \            collatz.push(collatz[i] / 2);\n        } else {\n            collatz.push(collatz[i]\
    \ * 3 + 1);\n            odd_collatz.push(collatz[i]);\n        }\n        i +=\
    \ 1;\n    }\n    odd_collatz.sort();\n    odd_collatz\n}\n\nfn main() {\n    let\
    \ candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11,\
    \ 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 7, 11, 13, 17]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpflg8e3k6.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut v = vec![n];\n    let mut curr = n;\n    while curr != 1 {\n     \
    \   if curr % 2 == 0 {\n            curr /= 2;\n        } else {\n           \
    \ curr = curr * 3 + 1;\n        }\n        if curr % 2 != 0 {\n            v.push(curr);\n\
    \        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpx1idj_00.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    while collatz.last().unwrap() != &1 {\n  \
    \      let last = collatz.last().unwrap();\n        if last % 2 == 0 {\n     \
    \       collatz.push(last / 2);\n        } else {\n            collatz.push(last\
    \ * 3 + 1);\n        }\n    }\n    collatz.into_iter().filter(|x| x % 2 != 0).collect()\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp5r8_5vpz.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![n];\n    let mut current = n;\n    while current !=\
    \ 1 {\n        if current % 2 == 0 {\n            current /= 2;\n        } else\
    \ {\n            current = current * 3 + 1;\n        }\n        if current % 2\
    \ != 0 {\n            result.push(current);\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpe_8b1qp9.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut curr = n;\n    while curr != 1 {\n\
    \        if curr % 2 == 0 {\n            curr /= 2;\n        } else {\n      \
    \      curr = 3 * curr + 1;\n        }\n        collatz.push(curr);\n    }\n \
    \   collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpqnne2ss9.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![n];\n    let mut current = n;\n    while current !=\
    \ 1 {\n        current = if current % 2 == 0 {\n            current / 2\n    \
    \    } else {\n            current * 3 + 1\n        };\n        if current % 2\
    \ != 0 {\n            result.push(current);\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp_hu52_ji.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut curr = n;\n    while curr != 1 {\n\
    \        if curr % 2 == 0 {\n            curr /= 2;\n        } else {\n      \
    \      curr = 3 * curr + 1;\n        }\n        collatz.push(curr);\n    }\n \
    \   collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmplg538sgk.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut odd_collatz = Vec::new();\n    while\
    \ collatz.last().unwrap() != &1 {\n        let last = collatz.last().unwrap();\n\
    \        if last % 2 == 0 {\n            collatz.push(last / 2);\n        } else\
    \ {\n            collatz.push(last * 3 + 1);\n            odd_collatz.push(*last);\n\
    \        }\n    }\n    odd_collatz.sort();\n    odd_collatz\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `collatz` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmprer12ysl.rs:20:13\n   |\n16 |         let last =\
    \ collatz.last().unwrap();\n   |                    -------------- immutable borrow\
    \ occurs here\n...\n20 |             collatz.push(last * 3 + 1);\n   |       \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n21 |           \
    \  odd_collatz.push(*last);\n   |                              ----- immutable\
    \ borrow later used here\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut i = 0;\n    while collatz[i] != 1\
    \ {\n        if collatz[i] % 2 == 0 {\n            collatz.push(collatz[i] / 2);\n\
    \        } else {\n            collatz.push(collatz[i] * 3 + 1);\n        }\n\
    \        i += 1;\n    }\n    collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpbtudzj9i.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut curr = n;\n    while curr != 1 {\n\
    \        if curr % 2 == 0 {\n            curr /= 2;\n        } else {\n      \
    \      curr = curr * 3 + 1;\n        }\n        collatz.push(curr);\n    }\n \
    \   collatz.into_iter().filter(|x| x % 2 != 0).collect()\n}\n\nfn main() {\n \
    \   let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmphzz06ehv.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut current = n;\n    while current !=\
    \ 1 {\n        if current % 2 == 0 {\n            current /= 2;\n        } else\
    \ {\n            current = current * 3 + 1;\n        }\n        collatz.push(current);\n\
    \    }\n    collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpi_qhh5re.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut i = n;\n    while i != 1 {\n     \
    \   if i % 2 == 0 {\n            i = i / 2;\n        } else {\n            i =\
    \ 3 * i + 1;\n        }\n        collatz.push(i);\n    }\n    collatz.into_iter().filter(|&x|\
    \ x % 2 != 0).collect()\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp_2k2q0q8.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut current = n;\n    while current !=\
    \ 1 {\n        if current % 2 == 0 {\n            current /= 2;\n        } else\
    \ {\n            current = current * 3 + 1;\n        }\n        collatz.push(current);\n\
    \    }\n    collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp5ga9gvgn.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = vec![];\n    let mut num = n;\n    while num != 1 {\n   \
    \     if num % 2 != 0 {\n            result.push(num);\n        }\n        num\
    \ = if num % 2 == 0 {\n            num / 2\n        } else {\n            num\
    \ * 3 + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpgxp8pxor.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut current = n;\n    while current !=\
    \ 1 {\n        current = if current % 2 == 0 {\n            current / 2\n    \
    \    } else {\n            current * 3 + 1\n        };\n        collatz.push(current);\n\
    \    }\n    collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp56iwm8b5.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    while collatz.last().unwrap() != &1 {\n  \
    \      let last = collatz.last().unwrap();\n        if last % 2 == 0 {\n     \
    \       collatz.push(last / 2);\n        } else {\n            collatz.push(last\
    \ * 3 + 1);\n        }\n    }\n    collatz.into_iter().filter(|x| x % 2 != 0).collect()\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpcjxmbjui.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut curr = n;\n    while curr != 1 {\n\
    \        if curr % 2 == 0 {\n            curr /= 2;\n        } else {\n      \
    \      curr = 3 * curr + 1;\n        }\n        collatz.push(curr);\n    }\n \
    \   collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpk1dnryxt.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut num = n;\n    while num != 1 {\n\
    \        if num % 2 != 0 {\n            result.push(num);\n        }\n       \
    \ num = if num % 2 == 0 {\n            num / 2\n        } else {\n           \
    \ 3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpn5znelwh.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut num = n;\n    while num != 1 {\n\
    \        if num % 2 != 0 {\n            result.push(num);\n        }\n       \
    \ num = if num % 2 == 0 {\n            num / 2\n        } else {\n           \
    \ 3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp5wx_d8hc.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut odd_collatz = Vec::new();\n    while\
    \ collatz.last().unwrap() != &1 {\n        let last = collatz.last().unwrap();\n\
    \        if last % 2 == 0 {\n            collatz.push(last / 2);\n        } else\
    \ {\n            collatz.push(last * 3 + 1);\n            odd_collatz.push(*last);\n\
    \        }\n    }\n    odd_collatz.sort();\n    odd_collatz\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `collatz` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmphb28xsgf.rs:20:13\n   |\n16 |         let last =\
    \ collatz.last().unwrap();\n   |                    -------------- immutable borrow\
    \ occurs here\n...\n20 |             collatz.push(last * 3 + 1);\n   |       \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n21 |           \
    \  odd_collatz.push(*last);\n   |                              ----- immutable\
    \ borrow later used here\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut curr = n;\n    while curr != 1 {\n\
    \        if curr % 2 == 0 {\n            curr /= 2;\n        } else {\n      \
    \      curr = 3 * curr + 1;\n        }\n        collatz.push(curr);\n    }\n \
    \   collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpm0ry0rnz.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut v = vec![n];\n    let mut i = n;\n    while i != 1 {\n        i =\
    \ if i % 2 == 0 {\n            i / 2\n        } else {\n            3 * i + 1\n\
    \        };\n        if i % 2 != 0 {\n            v.push(i);\n        }\n    }\n\
    \    v\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp2y2fmeiw.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut current = n;\n    while current !=\
    \ 1 {\n        if current % 2 == 0 {\n            current /= 2;\n        } else\
    \ {\n            current = current * 3 + 1;\n        }\n        collatz.push(current);\n\
    \    }\n    collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp3ean_mm4.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut odd_collatz = Vec::new();\n    while\
    \ collatz.last().unwrap() != &1 {\n        let last = collatz.last().unwrap();\n\
    \        if last % 2 == 0 {\n            collatz.push(last / 2);\n        } else\
    \ {\n            collatz.push(last * 3 + 1);\n            odd_collatz.push(*last);\n\
    \        }\n    }\n    odd_collatz.sort();\n    odd_collatz\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `collatz` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmpopm32mt9.rs:20:13\n   |\n16 |         let last =\
    \ collatz.last().unwrap();\n   |                    -------------- immutable borrow\
    \ occurs here\n...\n20 |             collatz.push(last * 3 + 1);\n   |       \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n21 |           \
    \  odd_collatz.push(*last);\n   |                              ----- immutable\
    \ borrow later used here\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut num = n;\n    while num != 1 {\n\
    \        if num % 2 != 0 {\n            result.push(num);\n        }\n       \
    \ num = if num % 2 == 0 {\n            num / 2\n        } else {\n           \
    \ num * 3 + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpceqxg93u.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut num = n;\n    while num != 1 {\n\
    \        if num % 2 != 0 {\n            result.push(num);\n        }\n       \
    \ num = if num % 2 == 0 { num / 2 } else { 3 * num + 1 };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpd8w430ys.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut i = 0;\n    while collatz[i] != 1\
    \ {\n        collatz.push(if collatz[i] % 2 == 0 { collatz[i] / 2 } else { 3 *\
    \ collatz[i] + 1 });\n        i += 1;\n    }\n    collatz.into_iter().filter(|&x|\
    \ x % 2 != 0).collect()\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmps5ma3sm_.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut odd_collatz = Vec::new();\n    let\
    \ mut i = 0;\n    while collatz[i] != 1 {\n        if collatz[i] % 2 == 0 {\n\
    \            collatz.push(collatz[i] / 2);\n        } else {\n            collatz.push(collatz[i]\
    \ * 3 + 1);\n            odd_collatz.push(collatz[i]);\n        }\n        i +=\
    \ 1;\n    }\n    odd_collatz.sort();\n    odd_collatz\n}\n\nfn main() {\n    let\
    \ candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11,\
    \ 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 7, 11, 13, 17]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp9zjc7aqe.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut current = n;\n    while current !=\
    \ 1 {\n        if current % 2 == 0 {\n            current /= 2;\n        } else\
    \ {\n            current = current * 3 + 1;\n        }\n        collatz.push(current);\n\
    \    }\n    collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp0gz19gww.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut v = vec![n];\n    let mut i = n;\n    while i != 1 {\n        i =\
    \ if i % 2 == 0 { i / 2 } else { 3 * i + 1 };\n        if i % 2 != 0 {\n     \
    \       v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n\
    \    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12), vec![1,\
    \ 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpxnbn1xsz.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut current = n;\n    while current !=\
    \ 1 {\n        current = if current % 2 == 0 {\n            current / 2\n    \
    \    } else {\n            3 * current + 1\n        };\n        collatz.push(current);\n\
    \    }\n    collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp65nu02v5.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut current = n;\n    while current !=\
    \ 1 {\n        if current % 2 == 0 {\n            current /= 2;\n        } else\
    \ {\n            current = current * 3 + 1;\n        }\n        collatz.push(current);\n\
    \    }\n    collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpyr4kpsjg.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut num = n;\n    while num != 1 {\n\
    \        result.push(num);\n        if num % 2 == 0 {\n            num /= 2;\n\
    \        } else {\n            num = num * 3 + 1;\n        }\n    }\n    result.push(1);\n\
    \    result.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpr7h7qnh4.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut odd_collatz = Vec::new();\n    while\
    \ collatz.last().unwrap() != &1 {\n        let last = collatz.last().unwrap();\n\
    \        if last % 2 == 0 {\n            collatz.push(last / 2);\n        } else\
    \ {\n            collatz.push(last * 3 + 1);\n            odd_collatz.push(*last);\n\
    \        }\n    }\n    odd_collatz.sort();\n    odd_collatz\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `collatz` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmpy5j18k11.rs:20:13\n   |\n16 |         let last =\
    \ collatz.last().unwrap();\n   |                    -------------- immutable borrow\
    \ occurs here\n...\n20 |             collatz.push(last * 3 + 1);\n   |       \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n21 |           \
    \  odd_collatz.push(*last);\n   |                              ----- immutable\
    \ borrow later used here\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut i = n;\n    while i != 1 {\n   \
    \     if i % 2 != 0 {\n            result.push(i);\n        }\n        i = if\
    \ i % 2 == 0 { i / 2 } else { 3 * i + 1 };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpq0i083il.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut current = n;\n    while current\
    \ != 1 {\n        if current % 2 == 1 {\n            result.push(current);\n \
    \       }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            3 * current + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpmhnxne7z.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut current = n;\n    while current\
    \ != 1 {\n        if current % 2 == 1 {\n            result.push(current);\n \
    \       }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            current * 3 + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpji1lt2ox.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut num = n;\n    while num != 1 {\n\
    \        if num % 2 != 0 {\n            result.push(num);\n        }\n       \
    \ num = if num % 2 == 0 { num / 2 } else { 3 * num + 1 };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpas1m1mmt.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut num = n;\n    while num != 1 {\n\
    \        if num % 2 != 0 {\n            result.push(num);\n        }\n       \
    \ num = if num % 2 == 0 {\n            num / 2\n        } else {\n           \
    \ num * 3 + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpxuiiasvw.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut odd_collatz = Vec::new();\n    while\
    \ collatz.last().unwrap() != &1 {\n        let last = collatz.last().unwrap();\n\
    \        if last % 2 == 0 {\n            collatz.push(last / 2);\n        } else\
    \ {\n            collatz.push(last * 3 + 1);\n            odd_collatz.push(*last);\n\
    \        }\n    }\n    odd_collatz.sort();\n    odd_collatz\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `collatz` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmpey7q13jc.rs:20:13\n   |\n16 |         let last =\
    \ collatz.last().unwrap();\n   |                    -------------- immutable borrow\
    \ occurs here\n...\n20 |             collatz.push(last * 3 + 1);\n   |       \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n21 |           \
    \  odd_collatz.push(*last);\n   |                              ----- immutable\
    \ borrow later used here\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut current = n;\n    while current\
    \ != 1 {\n        if current % 2 == 1 {\n            result.push(current);\n \
    \       }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            current * 3 + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp9aybaylh.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut curr = n;\n    while curr != 1 {\n\
    \        if curr % 2 == 0 {\n            curr /= 2;\n        } else {\n      \
    \      curr = curr * 3 + 1;\n        }\n        collatz.push(curr);\n    }\n \
    \   collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp298bcz07.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut num = n;\n    while num != 1 {\n\
    \        if num % 2 != 0 {\n            result.push(num);\n        }\n       \
    \ num = if num % 2 == 0 { num / 2 } else { 3 * num + 1 };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpm2a0m01o.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut odd_collatz = Vec::new();\n    while\
    \ collatz.last().unwrap() != &1 {\n        let last = collatz.last().unwrap();\n\
    \        if last % 2 == 0 {\n            collatz.push(last / 2);\n        } else\
    \ {\n            collatz.push(last * 3 + 1);\n            odd_collatz.push(*last);\n\
    \        }\n    }\n    odd_collatz.sort();\n    odd_collatz\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `collatz` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmphbxm59yb.rs:20:13\n   |\n16 |         let last =\
    \ collatz.last().unwrap();\n   |                    -------------- immutable borrow\
    \ occurs here\n...\n20 |             collatz.push(last * 3 + 1);\n   |       \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n21 |           \
    \  odd_collatz.push(*last);\n   |                              ----- immutable\
    \ borrow later used here\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz: Vec<isize> = vec![n];\n    let mut curr = n;\n    while curr\
    \ != 1 {\n        if curr % 2 == 0 {\n            curr /= 2;\n        } else {\n\
    \            curr = 3 * curr + 1;\n        }\n        collatz.push(curr);\n  \
    \  }\n    collatz.iter().filter(|&x| x % 2 != 0).map(|&x| x).collect()\n}\n\n\
    fn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpp5x3b88d.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut v = vec![n];\n    let mut i = n;\n    while i != 1 {\n        if i\
    \ % 2 == 0 {\n            i /= 2;\n        } else {\n            i = 3 * i + 1;\n\
    \        }\n        if i % 2 != 0 {\n            v.push(i);\n        }\n    }\n\
    \    v\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmphb32ng_a.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut num = n;\n    while num != 1 {\n\
    \        result.push(num);\n        if num % 2 == 0 {\n            num /= 2;\n\
    \        } else {\n            num = 3 * num + 1;\n        }\n    }\n    result.push(1);\n\
    \    result.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp_9ohdnzb.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut i = n;\n    while i != 1 {\n     \
    \   if i % 2 == 0 {\n            i = i / 2;\n        } else {\n            i =\
    \ 3 * i + 1;\n        }\n        collatz.push(i);\n    }\n    collatz.into_iter().filter(|x|\
    \ x % 2 != 0).collect()\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp4xw9f1ao.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut i = collatz.len() - 1;\n    while\
    \ collatz[i] != 1 {\n        if collatz[i] % 2 == 0 {\n            collatz.push(collatz[i]\
    \ / 2);\n        } else {\n            collatz.push(collatz[i] * 3 + 1);\n   \
    \     }\n        i += 1;\n    }\n    collatz.into_iter().filter(|&x| x % 2 !=\
    \ 0).collect()\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpuictoxyr.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut current = n;\n    while current !=\
    \ 1 {\n        if current % 2 == 0 {\n            current /= 2;\n        } else\
    \ {\n            current = current * 3 + 1;\n        }\n        collatz.push(current);\n\
    \    }\n    collatz.into_iter().filter(|x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpkk695i6p.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut num = n;\n    while num != 1 {\n\
    \        if num % 2 != 0 {\n            result.push(num);\n        }\n       \
    \ num = if num % 2 == 0 { num / 2 } else { 3 * num + 1 };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpirdm1wpf.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut num = n;\n    while num != 1 {\n\
    \        if num % 2 != 0 {\n            result.push(num);\n        }\n       \
    \ num = if num % 2 == 0 {\n            num / 2\n        } else {\n           \
    \ 3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpditz_4x5.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut odd_collatz = Vec::new();\n    while\
    \ collatz.last().unwrap() != &1 {\n        let last = collatz.last().unwrap();\n\
    \        if last % 2 == 0 {\n            collatz.push(last / 2);\n        } else\
    \ {\n            collatz.push(last * 3 + 1);\n            odd_collatz.push(*last);\n\
    \        }\n    }\n    odd_collatz.sort();\n    odd_collatz\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `collatz` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmpn6x81w7i.rs:20:13\n   |\n16 |         let last =\
    \ collatz.last().unwrap();\n   |                    -------------- immutable borrow\
    \ occurs here\n...\n20 |             collatz.push(last * 3 + 1);\n   |       \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n21 |           \
    \  odd_collatz.push(*last);\n   |                              ----- immutable\
    \ borrow later used here\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut current = n;\n    while current !=\
    \ 1 {\n        if current % 2 == 0 {\n            current /= 2;\n        } else\
    \ {\n            current = current * 3 + 1;\n        }\n        collatz.push(current);\n\
    \    }\n    collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp1ydeieia.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut num = n;\n    while num != 1 {\n\
    \        if num % 2 != 0 {\n            result.push(num);\n        }\n       \
    \ num = if num % 2 == 0 {\n            num / 2\n        } else {\n           \
    \ 3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp80k2r74r.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut v = vec![n];\n    let mut i = n;\n    while i != 1 {\n        if i\
    \ % 2 == 0 {\n            i /= 2;\n        } else {\n            i = 3 * i + 1;\n\
    \        }\n        if i % 2 != 0 {\n            v.push(i);\n        }\n    }\n\
    \    v\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp6furelru.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut n = n;\n    while n > 1 {\n    \
    \    if n % 2 == 1 {\n            result.push(n);\n        }\n        n = if n\
    \ % 2 == 0 { n / 2 } else { 3 * n + 1 };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpdnpsueh6.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut num = n;\n    while num != 1 {\n\
    \        if num % 2 != 0 {\n            result.push(num);\n        }\n       \
    \ num = if num % 2 == 0 {\n            num / 2\n        } else {\n           \
    \ 3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpei6u1u6r.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut num = n;\n    while num != 1 {\n\
    \        if num % 2 != 0 {\n            result.push(num);\n        }\n       \
    \ num = if num % 2 == 0 { num / 2 } else { 3 * num + 1 };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpx2qhnxo6.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut v = vec![n];\n    let mut i = n;\n    while i != 1 {\n        i =\
    \ if i % 2 == 0 { i / 2 } else { 3 * i + 1 };\n        if i % 2 != 0 {\n     \
    \       v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n\
    \    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12), vec![1,\
    \ 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpjsrk7as9.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut curr = n;\n    while curr != 1 {\n\
    \        if curr % 2 == 1 {\n            result.push(curr);\n        }\n     \
    \   curr = if curr % 2 == 0 {\n            curr / 2\n        } else {\n      \
    \      3 * curr + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\n\
    fn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpsyvy76dv.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz: Vec<isize> = vec![n];\n    let mut i = n;\n    while i !=\
    \ 1 {\n        if i % 2 == 0 {\n            i = i / 2;\n        } else {\n   \
    \         i = 3 * i + 1;\n        }\n        collatz.push(i);\n    }\n    collatz.into_iter().filter(|x|\
    \ x % 2 != 0).collect()\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp6i3f1dmm.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut current = n;\n    while current\
    \ != 1 {\n        if current % 2 == 1 {\n            result.push(current);\n \
    \       }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            3 * current + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpjf5zn93g.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut n = n;\n    while n > 1 {\n    \
    \    if n % 2 == 1 {\n            result.push(n);\n        }\n        n = collatz(n);\n\
    \    }\n    result.push(1);\n    result\n}\n\nfn main() {\n    let candidate =\
    \ get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n\
    \    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12), vec![1,\
    \ 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `collatz` in this scope\n  --> /tmp/tmpb_bm881w.rs:19:13\n\
    \   |\n19 |         n = collatz(n);\n   |             ^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut odd_collatz = Vec::new();\n    while\
    \ collatz.last().unwrap() != &1 {\n        let last = collatz.last().unwrap();\n\
    \        if last % 2 == 0 {\n            collatz.push(last / 2);\n        } else\
    \ {\n            collatz.push(last * 3 + 1);\n            odd_collatz.push(*last);\n\
    \        }\n    }\n    odd_collatz.sort();\n    odd_collatz\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `collatz` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmp5tym6ul8.rs:20:13\n   |\n16 |         let last =\
    \ collatz.last().unwrap();\n   |                    -------------- immutable borrow\
    \ occurs here\n...\n20 |             collatz.push(last * 3 + 1);\n   |       \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n21 |           \
    \  odd_collatz.push(*last);\n   |                              ----- immutable\
    \ borrow later used here\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut num = n;\n    while num != 1 {\n\
    \        if num % 2 != 0 {\n            result.push(num);\n        }\n       \
    \ num = if num % 2 == 0 { num / 2 } else { num * 3 + 1 };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpktjyjqjb.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut n = n;\n    while n != 1 {\n   \
    \     if n % 2 == 1 {\n            result.push(n);\n        }\n        n = if\
    \ n % 2 == 0 {\n            n / 2\n        } else {\n            3 * n + 1\n \
    \       };\n    }\n    result.push(1);\n    result\n}\n\nfn main() {\n    let\
    \ candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11,\
    \ 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpk0ommht0.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut v = vec![n];\n    let mut i = n;\n    while i != 1 {\n        if i\
    \ % 2 == 0 {\n            i /= 2;\n        } else {\n            i = 3 * i + 1;\n\
    \        }\n        if i % 2 != 0 {\n            v.push(i);\n        }\n    }\n\
    \    v\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp3mi7gzt3.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut odd_collatz = Vec::new();\n    while\
    \ collatz.last().unwrap() != &1 {\n        let last = collatz.last().unwrap();\n\
    \        if last % 2 == 0 {\n            collatz.push(last / 2);\n        } else\
    \ {\n            collatz.push(last * 3 + 1);\n            odd_collatz.push(*last);\n\
    \        }\n    }\n    odd_collatz.sort();\n    odd_collatz\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `collatz` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmp3cuyx1hg.rs:20:13\n   |\n16 |         let last =\
    \ collatz.last().unwrap();\n   |                    -------------- immutable borrow\
    \ occurs here\n...\n20 |             collatz.push(last * 3 + 1);\n   |       \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n21 |           \
    \  odd_collatz.push(*last);\n   |                              ----- immutable\
    \ borrow later used here\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut num = n;\n    while num != 1 {\n\
    \        if num % 2 != 0 {\n            result.push(num);\n        }\n       \
    \ num = if num % 2 == 0 {\n            num / 2\n        } else {\n           \
    \ num * 3 + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpopl5ekr8.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut curr = n;\n    while curr != 1 {\n\
    \        if curr % 2 == 1 {\n            result.push(curr);\n        }\n     \
    \   curr = if curr % 2 == 0 {\n            curr / 2\n        } else {\n      \
    \      curr * 3 + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\n\
    fn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpsix9yfy5.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut odd_collatz = Vec::new();\n    while\
    \ collatz.last().unwrap() != &1 {\n        let last = collatz.last().unwrap();\n\
    \        if last % 2 == 0 {\n            collatz.push(last / 2);\n        } else\
    \ {\n            collatz.push(last * 3 + 1);\n            odd_collatz.push(*last);\n\
    \        }\n    }\n    odd_collatz.sort();\n    odd_collatz\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `collatz` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmpf4ze9sjo.rs:20:13\n   |\n16 |         let last =\
    \ collatz.last().unwrap();\n   |                    -------------- immutable borrow\
    \ occurs here\n...\n20 |             collatz.push(last * 3 + 1);\n   |       \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n21 |           \
    \  odd_collatz.push(*last);\n   |                              ----- immutable\
    \ borrow later used here\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut res = vec![n];\n    let mut cur = n;\n    while cur != 1 {\n     \
    \   if cur % 2 == 0 {\n            cur /= 2;\n        } else {\n            cur\
    \ = cur * 3 + 1;\n        }\n        if cur % 2 == 1 {\n            res.push(cur);\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmppfq3nuoo.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut odd_collatz = Vec::new();\n    while\
    \ collatz.last().unwrap() != &1 {\n        let last = collatz.last().unwrap();\n\
    \        if last % 2 == 0 {\n            collatz.push(last / 2);\n        } else\
    \ {\n            collatz.push(last * 3 + 1);\n            odd_collatz.push(*last);\n\
    \        }\n    }\n    odd_collatz.sort();\n    odd_collatz\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `collatz` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmpe40usu3t.rs:20:13\n   |\n16 |         let last =\
    \ collatz.last().unwrap();\n   |                    -------------- immutable borrow\
    \ occurs here\n...\n20 |             collatz.push(last * 3 + 1);\n   |       \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n21 |           \
    \  odd_collatz.push(*last);\n   |                              ----- immutable\
    \ borrow later used here\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut odd_collatz = Vec::new();\n    while\
    \ collatz.last().unwrap() != &1 {\n        let last = collatz.last().unwrap();\n\
    \        if last % 2 == 0 {\n            collatz.push(last / 2);\n        } else\
    \ {\n            collatz.push(last * 3 + 1);\n            odd_collatz.push(*last);\n\
    \        }\n    }\n    odd_collatz.sort();\n    odd_collatz\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `collatz` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmpq0nbvd7f.rs:20:13\n   |\n16 |         let last =\
    \ collatz.last().unwrap();\n   |                    -------------- immutable borrow\
    \ occurs here\n...\n20 |             collatz.push(last * 3 + 1);\n   |       \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n21 |           \
    \  odd_collatz.push(*last);\n   |                              ----- immutable\
    \ borrow later used here\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut current = n;\n    while current\
    \ != 1 {\n        if current % 2 == 1 {\n            result.push(current);\n \
    \       }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            current * 3 + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpfmaf2n7_.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut odd_collatz = Vec::new();\n    let\
    \ mut current = n;\n    while current != 1 {\n        if current % 2 == 0 {\n\
    \            current /= 2;\n        } else {\n            current = current *\
    \ 3 + 1;\n        }\n        collatz.push(current);\n    }\n    for i in collatz\
    \ {\n        if i % 2 != 0 {\n            odd_collatz.push(i);\n        }\n  \
    \  }\n    odd_collatz\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp19i69hgq.rs:34:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut current = n;\n    while current\
    \ != 1 {\n        if current % 2 == 1 {\n            result.push(current);\n \
    \       }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            current * 3 + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp1u6kcd_3.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut curr = n;\n    while curr != 1 {\n\
    \        if curr % 2 == 0 {\n            curr /= 2;\n        } else {\n      \
    \      curr = curr * 3 + 1;\n        }\n        collatz.push(curr);\n    }\n \
    \   collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp2gu33czt.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut i = 0;\n    while collatz[i] != 1\
    \ {\n        if collatz[i] % 2 == 0 {\n            collatz.push(collatz[i] / 2);\n\
    \        } else {\n            collatz.push(collatz[i] * 3 + 1);\n        }\n\
    \        i += 1;\n    }\n    collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpds3cztn5.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut i = 0;\n    while collatz[i] != 1\
    \ {\n        if collatz[i] % 2 == 0 {\n            collatz.push(collatz[i] / 2);\n\
    \        } else {\n            collatz.push(collatz[i] * 3 + 1);\n        }\n\
    \        i += 1;\n    }\n    collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpye65_l24.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut num = n;\n    while num != 1 {\n\
    \        if num % 2 != 0 {\n            result.push(num);\n        }\n       \
    \ num = if num % 2 == 0 {\n            num / 2\n        } else {\n           \
    \ 3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp2sc_5o1d.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut next = n;\n    while next != 1 {\n\
    \        next = if next % 2 == 0 {\n            next / 2\n        } else {\n \
    \           3 * next + 1\n        };\n        collatz.push(next);\n    }\n   \
    \ collatz.into_iter().filter(|x| x % 2 != 0).collect()\n}\n\nfn main() {\n   \
    \ let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7,\
    \ 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpetayw1ol.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut next = n;\n    while next != 1 {\n\
    \        next = if next % 2 == 0 {\n            next / 2\n        } else {\n \
    \           3 * next + 1\n        };\n        collatz.push(next);\n    }\n   \
    \ collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main() {\n  \
    \  let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpx8v2xo18.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut curr = n;\n    while curr != 1 {\n\
    \        if curr % 2 == 0 {\n            curr /= 2;\n        } else {\n      \
    \      curr = curr * 3 + 1;\n        }\n        collatz.push(curr);\n    }\n \
    \   collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp7mb2uldb.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut num = n;\n    while num != 1 {\n\
    \        if num % 2 != 0 {\n            result.push(num);\n        }\n       \
    \ num = if num % 2 == 0 {\n            num / 2\n        } else {\n           \
    \ 3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpcmjyc009.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut odd_collatz = Vec::new();\n    while\
    \ collatz.last().unwrap() != &1 {\n        let last = collatz.last().unwrap();\n\
    \        if last % 2 == 0 {\n            collatz.push(last / 2);\n        } else\
    \ {\n            collatz.push(last * 3 + 1);\n            odd_collatz.push(*last);\n\
    \        }\n    }\n    odd_collatz.push(1);\n    odd_collatz\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `collatz` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmpykkgcldy.rs:20:13\n   |\n16 |         let last =\
    \ collatz.last().unwrap();\n   |                    -------------- immutable borrow\
    \ occurs here\n...\n20 |             collatz.push(last * 3 + 1);\n   |       \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n21 |           \
    \  odd_collatz.push(*last);\n   |                              ----- immutable\
    \ borrow later used here\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut num = n;\n    while num != 1 {\n\
    \        if num % 2 != 0 {\n            result.push(num);\n        }\n       \
    \ num = if num % 2 == 0 {\n            num / 2\n        } else {\n           \
    \ 3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp_4xbgloo.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut current = n;\n    while current !=\
    \ 1 {\n        current = if current % 2 == 0 {\n            current / 2\n    \
    \    } else {\n            3 * current + 1\n        };\n        collatz.push(current);\n\
    \    }\n    collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpbl4eudxn.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut current = n;\n    while current\
    \ != 1 {\n        if current % 2 == 1 {\n            result.push(current);\n \
    \       }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            current * 3 + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp0jr5u4qv.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut current = n;\n    while current\
    \ != 1 {\n        if current % 2 == 1 {\n            result.push(current);\n \
    \       }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            current * 3 + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp3u54isnl.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut num = n;\n    while num != 1 {\n\
    \        if num % 2 != 0 {\n            result.push(num);\n        }\n       \
    \ num = if num % 2 == 0 { num / 2 } else { 3 * num + 1 };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpogv5zak2.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut curr = n;\n    while curr != 1 {\n\
    \        if curr % 2 == 0 {\n            curr /= 2;\n        } else {\n      \
    \      curr = 3 * curr + 1;\n        }\n        collatz.push(curr);\n    }\n \
    \   collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpvibrl1bu.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut current = n;\n    while current\
    \ != 1 {\n        if current % 2 == 1 {\n            result.push(current);\n \
    \       }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            current * 3 + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp02017840.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut num = n;\n    while num != 1 {\n\
    \        if num % 2 != 0 {\n            result.push(num);\n        }\n       \
    \ num = if num % 2 == 0 { num / 2 } else { 3 * num + 1 };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpnqvsbpc6.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut n = n;\n    while n > 1 {\n    \
    \    if n % 2 == 1 {\n            result.push(n);\n        }\n        n = if n\
    \ % 2 == 0 { n / 2 } else { n * 3 + 1 };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpr79f0elf.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz: Vec<isize> = vec![n];\n    let mut i = n;\n    while i !=\
    \ 1 {\n        if i % 2 == 0 {\n            i = i / 2;\n        } else {\n   \
    \         i = 3 * i + 1;\n        }\n        collatz.push(i);\n    }\n    collatz.into_iter().filter(|x|\
    \ x % 2 != 0).collect()\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpucxqhfua.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut num = n;\n    while num != 1 {\n\
    \        if num % 2 != 0 {\n            result.push(num);\n        }\n       \
    \ num = if num % 2 == 0 { num / 2 } else { 3 * num + 1 };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp1iufrevt.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut i = n;\n    while i != 1 {\n   \
    \     if i % 2 != 0 {\n            result.push(i);\n        }\n        i = if\
    \ i % 2 == 0 { i / 2 } else { 3 * i + 1 };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp1viymgz3.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut v = vec![n];\n    let mut i = n;\n    while i != 1 {\n        i =\
    \ if i % 2 == 0 { i / 2 } else { 3 * i + 1 };\n        if i % 2 != 0 {\n     \
    \       v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n\
    \    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12), vec![1,\
    \ 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmph40qizlw.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut n = n;\n    while n != 1 {\n   \
    \     if n % 2 == 1 {\n            result.push(n);\n        }\n        n = if\
    \ n % 2 == 0 { n / 2 } else { n * 3 + 1 };\n    }\n    result.push(1);\n    result\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp0fqtkcdh.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut i = 0;\n    while collatz[i] != 1\
    \ {\n        if collatz[i] % 2 == 0 {\n            collatz.push(collatz[i] / 2);\n\
    \        } else {\n            collatz.push(collatz[i] * 3 + 1);\n        }\n\
    \        i += 1;\n    }\n    collatz.into_iter().filter(|x| x % 2 != 0).collect()\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpjdibm1ca.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz: Vec<isize> = vec![n];\n    let mut current = n;\n    while\
    \ current != 1 {\n        if current % 2 == 0 {\n            current /= 2;\n \
    \       } else {\n            current = current * 3 + 1;\n        }\n        collatz.push(current);\n\
    \    }\n    collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp_eoto241.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut i = 0;\n    while collatz[i] != 1\
    \ {\n        if collatz[i] % 2 == 0 {\n            collatz.push(collatz[i] / 2);\n\
    \        } else {\n            collatz.push(collatz[i] * 3 + 1);\n        }\n\
    \        i += 1;\n    }\n    collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n\
    }\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpas28gw2x.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut odd_collatz = Vec::new();\n    let\
    \ mut i = 0;\n    while collatz[i] != 1 {\n        if collatz[i] % 2 == 0 {\n\
    \            collatz.push(collatz[i] / 2);\n        } else {\n            collatz.push(collatz[i]\
    \ * 3 + 1);\n            odd_collatz.push(collatz[i]);\n        }\n        i +=\
    \ 1;\n    }\n    odd_collatz.sort();\n    odd_collatz\n}\n\nfn main() {\n    let\
    \ candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11,\
    \ 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 7, 11, 13, 17]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp_7fsmkcq.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut v = vec![n];\n    let mut i = n;\n    while i != 1 {\n        if i\
    \ % 2 == 0 {\n            i /= 2;\n        } else {\n            i = 3 * i + 1;\n\
    \        }\n        if i % 2 != 0 {\n            v.push(i);\n        }\n    }\n\
    \    v\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14, 7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmptinyqaul.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut num = n;\n    while num != 1 {\n\
    \        if num % 2 != 0 {\n            result.push(num);\n        }\n       \
    \ num = if num % 2 == 0 {\n            num / 2\n        } else {\n           \
    \ 3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmppnxn13y3.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut curr = n;\n    while curr != 1 {\n\
    \        if curr % 2 == 0 {\n            curr /= 2;\n        } else {\n      \
    \      curr = curr * 3 + 1;\n        }\n        collatz.push(curr);\n    }\n \
    \   collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpqgdxs9ha.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut current = n;\n    while current\
    \ != 1 {\n        if current % 2 == 1 {\n            result.push(current);\n \
    \       }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            current * 3 + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpx7195dpj.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut odd_collatz = Vec::new();\n    let\
    \ mut i = 0;\n    while collatz[i] != 1 {\n        if collatz[i] % 2 == 0 {\n\
    \            collatz.push(collatz[i] / 2);\n        } else {\n            collatz.push(collatz[i]\
    \ * 3 + 1);\n            odd_collatz.push(collatz[i]);\n        }\n        i +=\
    \ 1;\n    }\n    odd_collatz.sort();\n    odd_collatz\n}\n\nfn main() {\n    let\
    \ candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7, 11,\
    \ 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 7, 11, 13, 17]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpac8h84zd.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut current = n;\n    while current\
    \ != 1 {\n        if current % 2 == 1 {\n            result.push(current);\n \
    \       }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            3 * current + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp0epevefm.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut current = n;\n    while current\
    \ != 1 {\n        if current % 2 == 1 {\n            result.push(current);\n \
    \       }\n        current = if current % 2 == 0 {\n            current / 2\n\
    \        } else {\n            current * 3 + 1\n        };\n    }\n    result.push(1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpgsa7ztxc.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut odd_collatz = Vec::new();\n    while\
    \ collatz.last().unwrap() != &1 {\n        let last = collatz.last().unwrap();\n\
    \        if last % 2 == 0 {\n            collatz.push(last / 2);\n        } else\
    \ {\n            collatz.push(last * 3 + 1);\n            odd_collatz.push(*last);\n\
    \        }\n    }\n    odd_collatz.sort();\n    odd_collatz\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `collatz` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmpjxd9uj5q.rs:20:13\n   |\n16 |         let last =\
    \ collatz.last().unwrap();\n   |                    -------------- immutable borrow\
    \ occurs here\n...\n20 |             collatz.push(last * 3 + 1);\n   |       \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n21 |           \
    \  odd_collatz.push(*last);\n   |                              ----- immutable\
    \ borrow later used here\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut result = Vec::new();\n    let mut num = n;\n    while num != 1 {\n\
    \        if num % 2 != 0 {\n            result.push(num);\n        }\n       \
    \ num = if num % 2 == 0 {\n            num / 2\n        } else {\n           \
    \ 3 * num + 1\n        };\n    }\n    result.push(1);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpjeh6krid.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut current = n;\n    while current !=\
    \ 1 {\n        current = if current % 2 == 0 {\n            current / 2\n    \
    \    } else {\n            3 * current + 1\n        };\n        collatz.push(current);\n\
    \    }\n    collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpdbw3k91o.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut current = n;\n    while current !=\
    \ 1 {\n        if current % 2 == 0 {\n            current /= 2;\n        } else\
    \ {\n            current = current * 3 + 1;\n        }\n        collatz.push(current);\n\
    \    }\n    collatz.into_iter().filter(|&x| x % 2 != 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1,\
    \ 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpkuig7h9c.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut v = vec![n];\n    let mut n = n;\n    while n != 1 {\n        n =\
    \ if n % 2 == 0 {\n            n / 2\n        } else {\n            3 * n + 1\n\
    \        };\n        v.push(n);\n    }\n    v.into_iter().filter(|x| x % 2 !=\
    \ 0).collect()\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14),\
    \ vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n   \
    \ assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp76tuh3br.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut odd_collatz = Vec::new();\n    let\
    \ mut i = 0;\n    while collatz[i] != 1 {\n        if collatz[i] % 2 == 0 {\n\
    \            collatz.push(collatz[i] / 2);\n        } else {\n            collatz.push(collatz[i]\
    \ * 3 + 1);\n            odd_collatz.push(collatz[i]);\n        }\n        i +=\
    \ 1;\n    }\n    odd_collatz.push(1);\n    odd_collatz\n}\n\nfn main() {\n   \
    \ let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5, 7,\
    \ 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmp2fohh64n.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut i = n;\n    while i != 1 {\n     \
    \   if i % 2 == 0 {\n            i = i / 2;\n        } else {\n            i =\
    \ 3 * i + 1;\n        }\n        collatz.push(i);\n    }\n    collatz.into_iter().filter(|&x|\
    \ x % 2 != 0).collect()\n}\n\nfn main() {\n    let candidate = get_odd_collatz;\n\
    \    assert_eq!(candidate(14), vec![1, 5, 7, 11, 13, 17]);\n    assert_eq!(candidate(5),\
    \ vec![1, 5]);\n    assert_eq!(candidate(12), vec![1, 3, 5]);\n    assert_eq!(candidate(1),\
    \ vec![1]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 11, 17, 13, 5, 1]`,\n right: `[1, 5, 7, 11, 13, 17]`', /tmp/tmpyu44w6ff.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in\
    \ mathematics that concerns a sequence defined\n/// as follows: start with any\
    \ positive integer n. Then each term is obtained from the \n/// previous term\
    \ as follows: if the previous term is even, the next term is one half of \n///\
    \ the previous term. If the previous term is odd, the next term is 3 times the\
    \ previous\n/// term plus 1. The conjecture is that no matter what value of n,\
    \ the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n///\
    \ 2. returned list sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5)\
    \ returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd\
    \ numbers are only 1, and 5.\nfn get_odd_collatz(n: isize) -> Vec<isize> {\n \
    \   let mut collatz = vec![n];\n    let mut odd_collatz = Vec::new();\n    while\
    \ collatz.last().unwrap() != &1 {\n        let last = collatz.last().unwrap();\n\
    \        if last % 2 == 0 {\n            collatz.push(last / 2);\n        } else\
    \ {\n            collatz.push(last * 3 + 1);\n            odd_collatz.push(*last);\n\
    \        }\n    }\n    odd_collatz.sort();\n    odd_collatz\n}\n\nfn main() {\n\
    \    let candidate = get_odd_collatz;\n    assert_eq!(candidate(14), vec![1, 5,\
    \ 7, 11, 13, 17]);\n    assert_eq!(candidate(5), vec![1, 5]);\n    assert_eq!(candidate(12),\
    \ vec![1, 3, 5]);\n    assert_eq!(candidate(1), vec![1]);\n}\n"
  stdout: ''
  stderr: "error[E0502]: cannot borrow `collatz` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmpf7r_x28h.rs:20:13\n   |\n16 |         let last =\
    \ collatz.last().unwrap();\n   |                    -------------- immutable borrow\
    \ occurs here\n...\n20 |             collatz.push(last * 3 + 1);\n   |       \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n21 |           \
    \  odd_collatz.push(*last);\n   |                              ----- immutable\
    \ borrow later used here\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0502`.\n"
  exit_code: 1
  status: SyntaxError
