name: HumanEval_90_next_smallest
language: rust
results:
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if prev !=\
    \ Some(i) {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if prev.unwrap()\
    \ != i {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev.is_none() {\n            prev = Some(i);\n        } else if i !=\
    \ prev.unwrap() {\n            return Some(i);\n        }\n    }\n    None\n}\n\
    \nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut lst = lst;\n    lst.sort();\n\
    \    let mut last = lst[0];\n    for i in 1..lst.len() {\n        if lst[i] !=\
    \ last {\n            return Some(lst[i]);\n        }\n        last = lst[i];\n\
    \    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if i != prev.unwrap()\
    \ {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if prev !=\
    \ Some(i) {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    match lst.len() {\n        0\
    \ => None,\n        1 => None,\n        _ => Some(lst[1]),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if i > prev.unwrap()\
    \ {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if i != prev.unwrap()\
    \ {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if let Some(p) = prev {\n            if p != i {\n                return\
    \ Some(i);\n            }\n        }\n        prev = Some(i);\n    }\n    None\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if prev !=\
    \ Some(i) {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if i != prev.unwrap()\
    \ {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    if lst.len() < 2 {\n        return None;\n    }\n\
    \    let mut prev = lst[0];\n    for i in 1..lst.len() {\n        if lst[i] !=\
    \ prev {\n            return Some(lst[i]);\n        }\n        prev = lst[i];\n\
    \    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev.is_none() {\n            prev = Some(i);\n        } else if i !=\
    \ prev.unwrap() {\n            return Some(i);\n        }\n    }\n    None\n}\n\
    \nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for &x in lst.iter()\
    \ {\n        if prev.is_none() {\n            prev = Some(x);\n        } else\
    \ if prev.unwrap() != x {\n            return Some(x);\n        }\n    }\n   \
    \ None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut lst = lst;\n    lst.sort();\n\
    \    for i in 0..lst.len() - 1 {\n        if lst[i] != lst[i + 1] {\n        \
    \    return Some(lst[i + 1]);\n        }\n    }\n    None\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut smallest = lst[0];\n    let\
    \ mut next_smallest = lst[1];\n    for i in lst {\n        if i < smallest {\n\
    \            next_smallest = smallest;\n            smallest = i;\n        } else\
    \ if i < next_smallest {\n            next_smallest = i;\n        }\n    }\n \
    \   Some(next_smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(2)`', /tmp/tmpf7os43l8.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if i != prev.unwrap()\
    \ {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut lst = lst;\n    lst.sort();\n\
    \    let mut prev = lst[0];\n    for i in 1..lst.len() {\n        if lst[i] !=\
    \ prev {\n            return Some(lst[i]);\n        }\n        prev = lst[i];\n\
    \    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmprhbujgpq.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut last = None;\n    for i in lst {\n    \
    \    if last == None {\n            last = Some(i);\n        } else if last.unwrap()\
    \ != i {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if prev.unwrap()\
    \ != i {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut lst = lst;\n    lst.sort();\n\
    \    let mut prev = lst[0];\n    for i in 1..lst.len() {\n        if lst[i] !=\
    \ prev {\n            return Some(lst[i]);\n        }\n        prev = lst[i];\n\
    \    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if i != prev.unwrap()\
    \ {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if prev.unwrap()\
    \ != i {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev.is_none() {\n            prev = Some(i);\n        } else if prev.unwrap()\
    \ != i {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut smallest = lst[0];\n    let\
    \ mut second_smallest = lst[1];\n    for i in 2..lst.len() {\n        if lst[i]\
    \ < smallest {\n            second_smallest = smallest;\n            smallest\
    \ = lst[i];\n        } else if lst[i] < second_smallest {\n            second_smallest\
    \ = lst[i];\n        }\n    }\n    if smallest == second_smallest {\n        None\n\
    \    } else {\n        Some(second_smallest)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(3)`,\n right: `Some(2)`', /tmp/tmp34pmj80s.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut min = lst[0];\n    let mut min2\
    \ = lst[1];\n    for i in 2..lst.len() {\n        if lst[i] < min {\n        \
    \    min2 = min;\n            min = lst[i];\n        } else if lst[i] < min2 {\n\
    \            min2 = lst[i];\n        }\n    }\n    if min == min2 {\n        None\n\
    \    } else {\n        Some(min2)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(3)`,\n right: `Some(2)`', /tmp/tmpsrbfj22p.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if i != prev.unwrap()\
    \ {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut smallest = lst[0];\n    let\
    \ mut next_smallest = lst[1];\n    for i in lst {\n        if i < smallest {\n\
    \            next_smallest = smallest;\n            smallest = i;\n        } else\
    \ if i < next_smallest {\n            next_smallest = i;\n        }\n    }\n \
    \   if smallest == next_smallest {\n        return None;\n    }\n    Some(next_smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmpqp90qqc_.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    if lst.len() < 2 {\n        return None;\n    }\n\
    \    let mut prev = lst[0];\n    for i in 1..lst.len() {\n        if lst[i] !=\
    \ prev {\n            return Some(lst[i]);\n        }\n        prev = lst[i];\n\
    \    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    match lst.len() {\n        0 => None,\n       \
    \ 1 => None,\n        _ => {\n            let mut min = lst[0];\n            let\
    \ mut min2 = lst[1];\n            for i in 2..lst.len() {\n                if\
    \ lst[i] > min {\n                    min2 = lst[i];\n                    break;\n\
    \                }\n            }\n            Some(min2)\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(3)`,\n right: `Some(2)`', /tmp/tmphx7iu0d6.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).map(|x| *x)\n}\n\n\
    fn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for &x in lst.iter()\
    \ {\n        if prev == None {\n            prev = Some(x);\n        } else if\
    \ prev.unwrap() != x {\n            return Some(x);\n        }\n    }\n    None\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut min = lst[0];\n    let mut min2\
    \ = lst[1];\n    for i in 2..lst.len() {\n        if lst[i] < min {\n        \
    \    min2 = min;\n            min = lst[i];\n        } else if lst[i] < min2 {\n\
    \            min2 = lst[i];\n        }\n    }\n    if min == min2 {\n        None\n\
    \    } else {\n        Some(min2)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(3)`,\n right: `Some(2)`', /tmp/tmpvdwxl515.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if i != prev.unwrap()\
    \ {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if let Some(p) = prev {\n            if p != i {\n                return\
    \ Some(i);\n            }\n        }\n        prev = Some(i);\n    }\n    None\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut smallest = None;\n    for i in lst {\n\
    \        if smallest.is_none() {\n            smallest = Some(i);\n        } else\
    \ if smallest.unwrap() != i {\n            return Some(i);\n        }\n    }\n\
    \    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for item in lst {\n \
    \       if prev == None {\n            prev = Some(item);\n        } else if prev.unwrap()\
    \ != item {\n            return Some(item);\n        }\n    }\n    None\n}\n\n\
    fn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).map(|x| *x)\n}\n\n\
    fn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev.is_none() {\n            prev = Some(i);\n        } else if prev.unwrap()\
    \ != i {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if let Some(p) = prev {\n            if p != i {\n                return\
    \ Some(i);\n            }\n        }\n        prev = Some(i);\n    }\n    None\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut last = None;\n    for i in lst {\n    \
    \    if last == None {\n            last = Some(i);\n        } else if i != last.unwrap()\
    \ {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp0i762q6r.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut lst = lst;\n    lst.sort();\n\
    \    let mut prev = lst[0];\n    for i in 1..lst.len() {\n        if lst[i] !=\
    \ prev {\n            return Some(lst[i]);\n        }\n        prev = lst[i];\n\
    \    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut min = lst[0];\n    let mut second_min\
    \ = lst[1];\n    for i in lst {\n        if i < min {\n            second_min\
    \ = min;\n            min = i;\n        } else if i < second_min {\n         \
    \   second_min = i;\n        }\n    }\n    if min == second_min {\n        return\
    \ None;\n    }\n    Some(second_min)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmp5_swunbt.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if prev !=\
    \ Some(i) {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if i != prev.unwrap()\
    \ {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if prev !=\
    \ Some(i) {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut lst = lst;\n    lst.sort();\n\
    \    let mut prev = lst[0];\n    for i in 1..lst.len() {\n        if lst[i] !=\
    \ prev {\n            return Some(lst[i]);\n        }\n        prev = lst[i];\n\
    \    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut result = None;\n    for i in 1..lst.len()\
    \ {\n        if lst[i] != lst[i - 1] {\n            result = Some(lst[i]);\n \
    \           break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if let Some(p) = prev {\n            if p != i {\n                return\
    \ Some(i);\n            }\n        }\n        prev = Some(i);\n    }\n    None\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev.is_some() && prev.unwrap() != i {\n            return Some(i);\n\
    \        }\n        prev = Some(i);\n    }\n    None\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev.is_some() && prev.unwrap() != i {\n            return Some(i);\n\
    \        }\n        prev = Some(i);\n    }\n    None\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if i != prev.unwrap()\
    \ {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if prev.unwrap()\
    \ != i {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if prev.unwrap()\
    \ != i {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if prev.unwrap()\
    \ != i {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).map(|x| *x)\n}\n\n\
    fn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut min = lst[0];\n    let mut min2\
    \ = lst[1];\n    for i in lst {\n        if i < min {\n            min2 = min;\n\
    \            min = i;\n        } else if i < min2 {\n            min2 = i;\n \
    \       }\n    }\n    if min2 == min {\n        None\n    } else {\n        Some(min2)\n\
    \    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmpfij3og3f.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if let Some(p) = prev {\n            if p != i {\n                return\
    \ Some(i);\n            }\n        }\n        prev = Some(i);\n    }\n    None\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev.is_some() && prev.unwrap() != i {\n            return Some(i);\n\
    \        }\n        prev = Some(i);\n    }\n    None\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if prev !=\
    \ Some(i) {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if prev !=\
    \ Some(i) {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if prev.unwrap()\
    \ != i {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut lst = lst;\n    lst.sort();\n\
    \    let mut prev = lst[0];\n    for i in 1..lst.len() {\n        if lst[i] !=\
    \ prev {\n            return Some(lst[i]);\n        }\n        prev = lst[i];\n\
    \    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut smallest\
    \ = None;\n    let mut next_smallest = None;\n    for i in lst {\n        if let\
    \ Some(s) = smallest {\n            if i < s {\n                next_smallest\
    \ = smallest;\n                smallest = Some(i);\n            } else if let\
    \ Some(ns) = next_smallest {\n                if i < ns {\n                  \
    \  next_smallest = Some(i);\n                }\n            } else {\n       \
    \         next_smallest = Some(i);\n            }\n        } else {\n        \
    \    smallest = Some(i);\n        }\n    }\n    next_smallest\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp8t2iqtby.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpvkyvjbdd.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if prev.unwrap()\
    \ != i {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if i != prev.unwrap()\
    \ {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).map(|x| *x)\n}\n\n\
    fn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut min = None;\n    for i in lst {\n     \
    \   if min.is_none() {\n            min = Some(i);\n        } else if i != min.unwrap()\
    \ {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut min = None;\n    for i in lst {\n     \
    \   if min.is_none() {\n            min = Some(i);\n        } else if i > min.unwrap()\
    \ {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    if lst.len() < 2 {\n        return None;\n    }\n\
    \    let mut prev = lst[0];\n    for i in 1..lst.len() {\n        if lst[i] !=\
    \ prev {\n            return Some(lst[i]);\n        }\n        prev = lst[i];\n\
    \    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut smallest\
    \ = None;\n    let mut next_smallest = None;\n    for i in lst {\n        if smallest.is_none()\
    \ || i < smallest.unwrap() {\n            next_smallest = smallest;\n        \
    \    smallest = Some(i);\n        } else if next_smallest.is_none() || i < next_smallest.unwrap()\
    \ {\n            next_smallest = Some(i);\n        }\n    }\n    next_smallest\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmppqxosmjk.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if let Some(p) = prev {\n            if p != i {\n                return\
    \ Some(i);\n            }\n        }\n        prev = Some(i);\n    }\n    None\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut min = lst[0];\n    let mut next_min\
    \ = lst[1];\n    for i in 2..lst.len() {\n        if lst[i] < min {\n        \
    \    next_min = min;\n            min = lst[i];\n        } else if lst[i] < next_min\
    \ {\n            next_min = lst[i];\n        }\n    }\n    if min == next_min\
    \ {\n        None\n    } else {\n        Some(next_min)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(3)`,\n right: `Some(2)`', /tmp/tmp_pehrayt.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if i != prev.unwrap()\
    \ {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    for i in 0..lst.len() - 1 {\n        if lst[i]\
    \ != lst[i + 1] {\n            return Some(lst[i + 1]);\n        }\n    }\n  \
    \  None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpmpjlrqsv.rs:11:17\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if let Some(p) = prev {\n            if p != i {\n                return\
    \ Some(i);\n            }\n        }\n        prev = Some(i);\n    }\n    None\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut last = None;\n    for i in lst {\n    \
    \    if last == None {\n            last = Some(i);\n        } else if i != last.unwrap()\
    \ {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut lst = lst;\n    lst.sort();\n\
    \    let mut prev = lst[0];\n    for i in 1..lst.len() {\n        if lst[i] !=\
    \ prev {\n            return Some(lst[i]);\n        }\n        prev = lst[i];\n\
    \    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut smallest = None;\n    for i in lst {\n\
    \        if smallest == None {\n            smallest = Some(i);\n        } else\
    \ if i != smallest.unwrap() {\n            return Some(i);\n        }\n    }\n\
    \    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if prev.unwrap()\
    \ != i {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut lst = lst;\n    lst.sort();\n\
    \    let mut prev = lst[0];\n    for i in 1..lst.len() {\n        if lst[i] !=\
    \ prev {\n            return Some(lst[i]);\n        }\n        prev = lst[i];\n\
    \    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if i > prev.unwrap()\
    \ {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for n in lst {\n    \
    \    if prev == None {\n            prev = Some(n);\n        } else if prev.unwrap()\
    \ != n {\n            return Some(n);\n        }\n    }\n    None\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpsgqjqipy.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if i != prev.unwrap()\
    \ {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for item in lst {\n \
    \       if prev.is_some() && prev.unwrap() != item {\n            return Some(item);\n\
    \        }\n        prev = Some(item);\n    }\n    None\n}\n\nfn main() {\n  \
    \  let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]),\
    \ Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut min\
    \ = None;\n    let mut second_min = None;\n    for i in lst {\n        if min.is_none()\
    \ || i < min.unwrap() {\n            second_min = min;\n            min = Some(i);\n\
    \        } else if second_min.is_none() || i < second_min.unwrap() {\n       \
    \     second_min = Some(i);\n        }\n    }\n    second_min\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp3hxm4g5a.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev.is_some() && prev.unwrap() != i {\n            return Some(i);\n\
    \        }\n        prev = Some(i);\n    }\n    None\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut i = 0;\n    while i < lst.len() - 1 {\n\
    \        if lst[i] != lst[i + 1] {\n            return Some(lst[i + 1]);\n   \
    \     }\n        i += 1;\n    }\n    None\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp_et5vq1s.rs:12:15\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut min = lst[0];\n    let mut next_min\
    \ = lst[1];\n    for i in 2..lst.len() {\n        if lst[i] < min {\n        \
    \    next_min = min;\n            min = lst[i];\n        } else if lst[i] < next_min\
    \ {\n            next_min = lst[i];\n        }\n    }\n    if min == next_min\
    \ {\n        return None;\n    }\n    Some(next_min)\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(3)`,\n right: `Some(2)`', /tmp/tmpsbx608d8.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut sorted\
    \ = lst.clone();\n    sorted.sort();\n    sorted.dedup();\n    if sorted.len()\
    \ < 2 {\n        None\n    } else {\n        Some(sorted[1])\n    }\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut min = lst[0];\n    let mut next_min\
    \ = lst[1];\n    for i in lst {\n        if i < min {\n            next_min =\
    \ min;\n            min = i;\n        } else if i < next_min {\n            next_min\
    \ = i;\n        }\n    }\n    Some(next_min)\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(2)`', /tmp/tmp3e83c7mv.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if i != prev.unwrap()\
    \ {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut lst = lst;\n    lst.sort();\n\
    \    let mut prev = lst[0];\n    for i in 1..lst.len() {\n        if lst[i] !=\
    \ prev {\n            return Some(lst[i]);\n        }\n        prev = lst[i];\n\
    \    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if prev !=\
    \ Some(i) {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpsr779u36.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if i > prev.unwrap()\
    \ {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for x in lst {\n    \
    \    if prev == None {\n            prev = Some(x);\n        } else if x != prev.unwrap()\
    \ {\n            return Some(x);\n        }\n    }\n    None\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut min = lst[0];\n    let mut min2\
    \ = lst[1];\n    for i in lst {\n        if i < min {\n            min2 = min;\n\
    \            min = i;\n        } else if i < min2 {\n            min2 = i;\n \
    \       }\n    }\n    if min2 == min {\n        None\n    } else {\n        Some(min2)\n\
    \    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmpg7qa9sw_.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut sorted_lst = lst.clone();\n\
    \    sorted_lst.sort();\n    let mut prev = sorted_lst[0];\n    for i in 1..sorted_lst.len()\
    \ {\n        if sorted_lst[i] != prev {\n            return Some(sorted_lst[i]);\n\
    \        }\n        prev = sorted_lst[i];\n    }\n    None\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if prev.unwrap()\
    \ < i {\n            return Some(i);\n        } else {\n            prev = Some(i);\n\
    \        }\n    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if i != prev.unwrap()\
    \ {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut min = lst[0];\n    let mut second_min\
    \ = lst[1];\n    if min > second_min {\n        min = lst[1];\n        second_min\
    \ = lst[0];\n    }\n    for i in 2..lst.len() {\n        if lst[i] < min {\n \
    \           second_min = min;\n            min = lst[i];\n        } else if lst[i]\
    \ < second_min {\n            second_min = lst[i];\n        }\n    }\n    Some(second_min)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpb6_qh1i2.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if prev.unwrap()\
    \ != i {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut lst = lst;\n    lst.sort();\n\
    \    let mut prev = lst[0];\n    for i in 1..lst.len() {\n        if lst[i] !=\
    \ prev {\n            return Some(lst[i]);\n        }\n        prev = lst[i];\n\
    \    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut lst = lst;\n    lst.sort();\n\
    \    let mut prev = lst[0];\n    for i in 1..lst.len() {\n        if lst[i] !=\
    \ prev {\n            return Some(lst[i]);\n        }\n        prev = lst[i];\n\
    \    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut min = lst[0];\n    let mut min2\
    \ = lst[1];\n    for i in 2..lst.len() {\n        if lst[i] < min {\n        \
    \    min2 = min;\n            min = lst[i];\n        } else if lst[i] < min2 {\n\
    \            min2 = lst[i];\n        }\n    }\n    if min2 == min {\n        None\n\
    \    } else {\n        Some(min2)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(3)`,\n right: `Some(2)`', /tmp/tmpbj6ds3g8.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for x in lst {\n    \
    \    if let Some(prev) = prev {\n            if x != prev {\n                return\
    \ Some(x);\n            }\n        }\n        prev = Some(x);\n    }\n    None\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpi1bnemdo.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut lst = lst;\n    lst.sort();\n\
    \    let mut prev = lst[0];\n    for i in 1..lst.len() {\n        if lst[i] !=\
    \ prev {\n            return Some(lst[i]);\n        }\n        prev = lst[i];\n\
    \    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if i != prev.unwrap()\
    \ {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if prev.unwrap()\
    \ != i {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if i != prev.unwrap()\
    \ {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if prev !=\
    \ Some(i) {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpm_cs1frj.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut lst = lst;\n    lst.sort();\n\
    \    let mut last = lst[0];\n    for i in 1..lst.len() {\n        if lst[i] !=\
    \ last {\n            return Some(lst[i]);\n        }\n        last = lst[i];\n\
    \    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if prev.unwrap()\
    \ != i {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut min = lst[0];\n    let mut next_min\
    \ = lst[1];\n    for i in 2..lst.len() {\n        if lst[i] < min {\n        \
    \    next_min = min;\n            min = lst[i];\n        } else if lst[i] < next_min\
    \ {\n            next_min = lst[i];\n        }\n    }\n    if min == next_min\
    \ {\n        None\n    } else {\n        Some(next_min)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(3)`,\n right: `Some(2)`', /tmp/tmpz6oi2gj9.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if i != prev.unwrap()\
    \ {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if i != prev.unwrap()\
    \ {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut smallest = lst[0];\n    for i in 1..lst.len()\
    \ {\n        if lst[i] != smallest {\n            return Some(lst[i]);\n     \
    \   }\n    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpyacoer_z.rs:11:24\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut lst = lst;\n    lst.sort();\n\
    \    let mut last = lst[0];\n    for i in 1..lst.len() {\n        if lst[i] !=\
    \ last {\n            return Some(lst[i]);\n        }\n        last = lst[i];\n\
    \    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for x in lst {\n    \
    \    if prev.is_some() && prev.unwrap() != x {\n            return Some(x);\n\
    \        }\n        prev = Some(x);\n    }\n    None\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpln7hgt4b.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut lst = lst;\n    lst.sort();\n\
    \    let mut prev = lst[0];\n    for i in 1..lst.len() {\n        if lst[i] !=\
    \ prev {\n            return Some(lst[i]);\n        }\n        prev = lst[i];\n\
    \    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if i != prev.unwrap()\
    \ {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if i > prev.unwrap()\
    \ {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpqownapjh.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut lst = lst;\n    lst.sort();\n\
    \    let mut prev = lst[0];\n    for i in lst {\n        if i != prev {\n    \
    \        return Some(i);\n        }\n        prev = i;\n    }\n    None\n}\n\n\
    fn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut lst = lst;\n    lst.sort();\n\
    \    let mut min = lst[0];\n    let mut min2 = lst[1];\n    for i in 2..lst.len()\
    \ {\n        if lst[i] != min {\n            min2 = lst[i];\n            break;\n\
    \        }\n    }\n    if min == min2 {\n        return None;\n    }\n    return\
    \ Some(min2);\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(3)`,\n right: `Some(2)`', /tmp/tmpvmyk5liq.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp0br9w0vq.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    if lst.len()\
    \ < 2 {\n        return None;\n    }\n    let mut min = lst[0];\n    let mut second_min\
    \ = lst[1];\n    for i in 2..lst.len() {\n        if lst[i] < min {\n        \
    \    second_min = min;\n            min = lst[i];\n        } else if lst[i] <\
    \ second_min {\n            second_min = lst[i];\n        }\n    }\n    if min\
    \ == second_min {\n        return None;\n    }\n    Some(second_min)\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(3)`,\n right: `Some(2)`', /tmp/tmp2lqmdfzn.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if i != prev.unwrap()\
    \ {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if i != prev.unwrap()\
    \ {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    let mut prev = None;\n    for i in lst {\n    \
    \    if prev == None {\n            prev = Some(i);\n        } else if prev.unwrap()\
    \ != i {\n            return Some(i);\n        }\n    }\n    None\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1])\
    \ == None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.dedup();\n    lst.get(1).cloned()\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
