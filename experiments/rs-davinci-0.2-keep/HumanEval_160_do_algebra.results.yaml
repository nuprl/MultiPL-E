name: HumanEval_160_do_algebra
language: rust
results:
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let op = &operator[i];\n        let num = operand[i\
    \ + 1];\n        match op.as_str() {\n            \"+\" => result += num,\n  \
    \          \"-\" => result -= num,\n            \"*\" => result *= num,\n    \
    \        \"//\" => result /= num,\n            \"**\" => result = result.pow(num\
    \ as u32),\n            _ => panic!(\"invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpab45ypk3.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let op = &operator[i];\n        let op1 = operand[i];\n\
    \        let op2 = operand[i + 1];\n        match op.as_str() {\n            \"\
    +\" => result = op1 + op2,\n            \"-\" => result = op1 - op2,\n       \
    \     \"*\" => result = op1 * op2,\n            \"//\" => result = op1 / op2,\n\
    \            \"**\" => result = op1.pow(op2 as u32),\n            _ => panic!(\"\
    Invalid operator\"),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `37`', /tmp/tmpu3408b01.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpgro1l5d0.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmppl4grzj6.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp1es17b0a.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpj2x8izg6.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => (),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpii2377ir.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let op = &operator[i];\n        let num = operand[i\
    \ + 1];\n        match op.as_str() {\n            \"+\" => result += num,\n  \
    \          \"-\" => result -= num,\n            \"*\" => result *= num,\n    \
    \        \"//\" => result /= num,\n            \"**\" => result = result.pow(num\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpje0czzpd.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmps3qet9f4.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp3xhi1sil.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp50qt0xkn.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpc97f_1ki.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpm90s6b10.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for (i,\
    \ op) in operator.iter().enumerate() {\n        let op2 = operand[i + 1];\n  \
    \      match op.as_str() {\n            \"+\" => result += op2,\n            \"\
    -\" => result -= op2,\n            \"*\" => result *= op2,\n            \"//\"\
    \ => result /= op2,\n            \"**\" => result = result.pow(op2 as u32),\n\
    \            _ => (),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp3l7rcrj1.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp2d7sr42s.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpdeaqa1j9.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp0l90wtoz.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp_9qo9fog.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpcfxbglfw.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpv0y1rzre.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpjjy4yn01.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmphk00n4xr.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpi4sx5_vk.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp2l0j27rp.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpfioh6b8b.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpnvdde1pr.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => result = 0,\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp5tdlrchn.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp_m6wzy30.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpex7gwgen.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpa_2nsf4q.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let op = operator[i].as_str();\n        let\
    \ num = operand[i + 1];\n        match op {\n            \"+\" => result += num,\n\
    \            \"-\" => result -= num,\n            \"*\" => result *= num,\n  \
    \          \"//\" => result /= num,\n            \"**\" => result = result.pow(num\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp5bb7_f8o.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpvt8j6kl7.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmptcavvntj.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => (),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpbfyz5k6s.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp_odosaht.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpjmpuio65.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Wrong operator\"),\n        }\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp0graj2it.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpn6s13p7d.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpo5wmysk1.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unsupported operator\"),\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp9nre3gcw.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpcak9k4ib.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let op = &operator[i];\n        let num = operand[i\
    \ + 1];\n        match op.as_str() {\n            \"+\" => result += num,\n  \
    \          \"-\" => result -= num,\n            \"*\" => result *= num,\n    \
    \        \"//\" => result /= num,\n            \"**\" => result = result.pow(num\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmppj6ufzp7.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let op = &operator[i];\n        let num = operand[i\
    \ + 1];\n        match op.as_str() {\n            \"+\" => result += num,\n  \
    \          \"-\" => result -= num,\n            \"*\" => result *= num,\n    \
    \        \"//\" => result /= num,\n            \"**\" => result = result.pow(num\
    \ as u32),\n            _ => panic!(\"Unknown operator!\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpclbr295o.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp9c6zw_r2.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpa4s8spk1.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpk1e_rw8f.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for (i,\
    \ op) in operator.iter().enumerate() {\n        let op = match op.as_str() {\n\
    \            \"+\" => result + operand[i + 1],\n            \"-\" => result -\
    \ operand[i + 1],\n            \"*\" => result * operand[i + 1],\n           \
    \ \"//\" => result / operand[i + 1],\n            \"**\" => result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"unsupported operator\"),\n        };\n\
    \        result = op;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp219296lo.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let op = operator[i].as_str();\n        let\
    \ num = operand[i + 1];\n        match op {\n            \"+\" => result += num,\n\
    \            \"-\" => result -= num,\n            \"*\" => result *= num,\n  \
    \          \"//\" => result /= num,\n            \"**\" => result = result.pow(num\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpfj4sns21.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp6yhyw57b.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpw54_9slk.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpmxd0gc57.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpoionjpuk.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpjcnwxp7m.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpgkp75nb0.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpy1fee2bv.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpyflzvaq7.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let op = &operator[i];\n        let op1 = operand[i];\n\
    \        let op2 = operand[i + 1];\n        if op == \"+\" {\n            result\
    \ = result + op2;\n        } else if op == \"-\" {\n            result = result\
    \ - op2;\n        } else if op == \"*\" {\n            result = result * op2;\n\
    \        } else if op == \"//\" {\n            result = result / op2;\n      \
    \  } else if op == \"**\" {\n            result = result.pow(op2 as u32);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpdjv_934a.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpgx7fcwyp.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpr1z6qy7h.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => unreachable!(),\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp12zlgvdv.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpgv297qa6.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for (i,\
    \ op) in operator.iter().enumerate() {\n        let num = operand[i + 1];\n  \
    \      match op.as_str() {\n            \"+\" => result += num,\n            \"\
    -\" => result -= num,\n            \"*\" => result *= num,\n            \"//\"\
    \ => result /= num,\n            \"**\" => result = result.pow(num as u32),\n\
    \            _ => panic!(\"Unknown operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp_o0kosei.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for (i,\
    \ op) in operator.iter().enumerate() {\n        match op.as_str() {\n        \
    \    \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpu3gkfmgb.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpnitgqzb1.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpcs1si947.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpm4oi994b.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpitfjyu6r.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp43thryvx.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp5fqtlt2l.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpkmu7lxdp.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmps5qybo9n.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp0ikwhjx4.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpd7b2vhc4.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpt7fcjmh9.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpog8zi7yy.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpthrj82sb.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpul8y_dq0.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp1oe5hov9.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmptwp2cqen.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpislam0av.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let op = &operator[i];\n        let op1 = operand[i];\n\
    \        let op2 = operand[i + 1];\n        match op.as_str() {\n            \"\
    +\" => result = op1 + op2,\n            \"-\" => result = op1 - op2,\n       \
    \     \"*\" => result = op1 * op2,\n            \"//\" => result = op1 / op2,\n\
    \            \"**\" => result = op1.pow(op2 as u32),\n            _ => panic!(\"\
    Invalid operator\"),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `37`', /tmp/tmpb37g70ci.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for (i,\
    \ op) in operator.iter().enumerate() {\n        let op = op.as_str();\n      \
    \  let operand = operand[i + 1];\n        match op {\n            \"+\" => result\
    \ += operand,\n            \"-\" => result -= operand,\n            \"*\" => result\
    \ *= operand,\n            \"//\" => result /= operand,\n            \"**\" =>\
    \ result = result.pow(operand as u32),\n            _ => panic!(\"Unknown operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp8fgbbvcb.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpcd8noks2.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp57ltlync.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for (i,\
    \ op) in operator.iter().enumerate() {\n        match op.as_str() {\n        \
    \    \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i\
    \ + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" =>\
    \ result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp7ohyb98i.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp7_8ybuus.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp4uy_jmee.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => result = 0,\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmponx4nm3b.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmphf2gviqx.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let op = &operator[i];\n        let num = operand[i\
    \ + 1];\n        match op.as_str() {\n            \"+\" => result += num,\n  \
    \          \"-\" => result -= num,\n            \"*\" => result *= num,\n    \
    \        \"//\" => result /= num,\n            \"**\" => result = result.pow(num\
    \ as u32),\n            _ => panic!(\"Unknown operator: {}\", op),\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpuer7yqil.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for (i,\
    \ op) in operator.iter().enumerate() {\n        let op_result = match op.as_str()\
    \ {\n            \"+\" => result + operand[i + 1],\n            \"-\" => result\
    \ - operand[i + 1],\n            \"*\" => result * operand[i + 1],\n         \
    \   \"//\" => result / operand[i + 1],\n            \"**\" => result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        };\n\
    \        result = op_result;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmphg7u6zmz.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpps9gwjxt.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unrecognized operator\"),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp96r3xq74.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpglhj0obv.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpcq5ox2wy.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp631tf0_x.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpbwvz615e.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let op = &operator[i];\n        let op1 = operand[i];\n\
    \        let op2 = operand[i + 1];\n        match op.as_str() {\n            \"\
    +\" => result = op1 + op2,\n            \"-\" => result = op1 - op2,\n       \
    \     \"*\" => result = op1 * op2,\n            \"//\" => result = op1 / op2,\n\
    \            \"**\" => result = op1.pow(op2 as u32),\n            _ => panic!(\"\
    Invalid operator\"),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `37`', /tmp/tmpis9y3ti8.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpupa0kzf3.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpo6mqgu7y.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpq69jljux.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpx_e1yy84.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpw61_2hp7.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpukuwpjr1.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpnd0shq25.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpookxi_f4.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp681k9jnw.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpc3oflk9u.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => (),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp5x2enf5r.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => (),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp9yb_4qqg.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let op = &operator[i];\n        let num = operand[i\
    \ + 1];\n        match op.as_str() {\n            \"+\" => result += num,\n  \
    \          \"-\" => result -= num,\n            \"*\" => result *= num,\n    \
    \        \"//\" => result /= num,\n            \"**\" => result = result.pow(num\
    \ as u32),\n            _ => panic!(\"Unknown operator: {}\", op),\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp67o7lyax.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp9_yvf99j.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpk2xx7_q4.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let op = &operator[i];\n        let op1 = &operand[i];\n\
    \        let op2 = &operand[i + 1];\n        match op.as_str() {\n           \
    \ \"+\" => result = result + op2,\n            \"-\" => result = result - op2,\n\
    \            \"*\" => result = result * op2,\n            \"//\" => result = result\
    \ / op2,\n            \"**\" => result = result.pow(*op2 as u32),\n          \
    \  _ => panic!(\"Unknown operator\"),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpvoihp4cl.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmps5m41agq.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpstxum0v2.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpj4sftpay.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => (),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpbnlyljgm.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp5f1p1o5h.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator!\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpu4ra74cl.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp6uwq7cvr.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpcyex_agx.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpjgoecz9j.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpgqy71ukw.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut stack: Vec<isize> = Vec::new();\n\
    \    let mut operand_iter = operand.iter();\n    let mut operand_1 = operand_iter.next().unwrap();\n\
    \    let mut operand_2 = operand_iter.next().unwrap();\n    for op in operator\
    \ {\n        match op.as_str() {\n            \"+\" => {\n                stack.push(*operand_1\
    \ + *operand_2);\n                operand_1 = operand_iter.next().unwrap();\n\
    \                operand_2 = operand_iter.next().unwrap();\n            }\n  \
    \          \"-\" => {\n                stack.push(*operand_1 - *operand_2);\n\
    \                operand_1 = operand_iter.next().unwrap();\n                operand_2\
    \ = operand_iter.next().unwrap();\n            }\n            \"*\" => {\n   \
    \             stack.push(*operand_1 * *operand_2);\n                operand_1\
    \ = operand_iter.next().unwrap();\n                operand_2 = operand_iter.next().unwrap();\n\
    \            }\n            \"//\" => {\n                stack.push(*operand_1\
    \ / *operand_2);\n                operand_1 = operand_iter.next().unwrap();\n\
    \                operand_2 = operand_iter.next().unwrap();\n            }\n  \
    \          \"**\" => {\n                stack.push(operand_1.pow(*operand_2 as\
    \ u32));\n                operand_1 = operand_iter.next().unwrap();\n        \
    \        operand_2 = operand_iter.next().unwrap();\n            }\n          \
    \  _ => {}\n        }\n    }\n    stack.pop().unwrap()\n}\n\nfn main() {\n   \
    \ let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"\
    ), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpsn65qyca.rs:38:49\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => {}\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp468x3ei5.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpnlav6cfv.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpzquleksr.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp3924etav.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let op = &operator[i];\n        let num = operand[i\
    \ + 1];\n        match op.as_str() {\n            \"+\" => result += num,\n  \
    \          \"-\" => result -= num,\n            \"*\" => result *= num,\n    \
    \        \"//\" => result /= num,\n            \"**\" => result = result.pow(num\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpr8epdz93.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp4cq23tnr.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp4n1zf32b.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpxxnykrxm.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp40g4hsg2.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmps0cik_ft.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmplyuro0od.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmptgdspsbm.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => (),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpgzmywaw5.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        if operator[i] == \"+\" {\n            result\
    \ += operand[i + 1];\n        } else if operator[i] == \"-\" {\n            result\
    \ -= operand[i + 1];\n        } else if operator[i] == \"*\" {\n            result\
    \ *= operand[i + 1];\n        } else if operator[i] == \"//\" {\n            result\
    \ /= operand[i + 1];\n        } else if operator[i] == \"**\" {\n            result\
    \ = result.pow(operand[i + 1] as u32);\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpahylbv9a.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpd3cke67s.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let op = &operator[i];\n        let op1 = &operand[i];\n\
    \        let op2 = &operand[i + 1];\n        result = match op.as_str() {\n  \
    \          \"+\" => result + op2,\n            \"-\" => result - op2,\n      \
    \      \"*\" => result * op2,\n            \"//\" => result / op2,\n         \
    \   \"**\" => result.pow(*op2 as u32),\n            _ => panic!(\"Invalid operator\"\
    ),\n        };\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpg6ke3ee_.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpqwvv_fot.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut stack: Vec<isize> = Vec::new();\n\
    \    for (i, op) in operator.iter().enumerate() {\n        let num1 = operand[i];\n\
    \        let num2 = operand[i + 1];\n        match op.as_str() {\n           \
    \ \"+\" => stack.push(num1 + num2),\n            \"-\" => stack.push(num1 - num2),\n\
    \            \"*\" => stack.push(num1 * num2),\n            \"//\" => stack.push(num1\
    \ / num2),\n            \"**\" => stack.push(num1.pow(num2 as u32)),\n       \
    \     _ => panic!(\"Invalid operator\"),\n        }\n    }\n    stack.pop().unwrap()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `37`', /tmp/tmpw_qql9gm.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpjsyd1rch.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => {}\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpzv7bkbss.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp39s5jxl7.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp3pz8xwkv.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpsxv0_l4f.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp4dta91z_.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp1n912kvj.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpync6t34_.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let op = &operator[i];\n        let op1 = operand[i];\n\
    \        let op2 = operand[i + 1];\n        match op.as_str() {\n            \"\
    +\" => result = op1 + op2,\n            \"-\" => result = op1 - op2,\n       \
    \     \"*\" => result = op1 * op2,\n            \"//\" => result = op1 / op2,\n\
    \            \"**\" => result = op1.pow(op2 as u32),\n            _ => panic!(\"\
    Unknown operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `37`', /tmp/tmpcrhrf072.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpktj9o7mr.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpsggsjfc_.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => return 0,\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpzs9tjo6o.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let op = &operator[i];\n        let num = operand[i\
    \ + 1];\n        match op.as_str() {\n            \"+\" => result += num,\n  \
    \          \"-\" => result -= num,\n            \"*\" => result *= num,\n    \
    \        \"//\" => result /= num,\n            \"**\" => result = result.pow(num\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpu4dx3teq.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpc_w0zyif.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp6zraivg8.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp6fpyrv1j.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpaw9vbkcc.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp9rq01cg7.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpkt75ufw7.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator: {}\", operator[i]),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp1cxckikq.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let op = &operator[i];\n        let num = operand[i\
    \ + 1];\n        match op.as_str() {\n            \"+\" => result += num,\n  \
    \          \"-\" => result -= num,\n            \"*\" => result *= num,\n    \
    \        \"//\" => result /= num,\n            \"**\" => result = result.pow(num\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpfhgbukza.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp0b33ruzk.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp8g3e0070.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let op = &operator[i];\n        let op1 = operand[i\
    \ + 1];\n        match op.as_str() {\n            \"+\" => result += op1,\n  \
    \          \"-\" => result -= op1,\n            \"*\" => result *= op1,\n    \
    \        \"//\" => result /= op1,\n            \"**\" => result = result.pow(op1\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp2byiakbw.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpe3kxcdf5.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpj82nc5d7.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => (),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp63u_o0ee.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpbscsoxu2.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpllev42jv.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => (),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp17bhq4wv.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => (),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpna_s6yrp.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmprfevf609.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp1l9vq34p.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpiesml3m9.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp07v3ts7r.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp4mkcpkkt.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => (),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp5e8t2xpk.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpefskixx9.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => (),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp__veyrzn.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut stack: Vec<isize> = vec![];\n \
    \   let mut op_iter = operator.iter();\n    let mut opd_iter = operand.iter();\n\
    \    let mut op = op_iter.next().unwrap();\n    let mut opd = opd_iter.next().unwrap();\n\
    \    stack.push(*opd);\n    while let Some(opd) = opd_iter.next() {\n        match\
    \ op.as_str() {\n            \"+\" => {\n                stack.push(*opd);\n \
    \           }\n            \"-\" => {\n                stack.push(-*opd);\n  \
    \          }\n            \"*\" => {\n                let top = stack.pop().unwrap();\n\
    \                stack.push(top * *opd);\n            }\n            \"//\" =>\
    \ {\n                let top = stack.pop().unwrap();\n                stack.push(top\
    \ / *opd);\n            }\n            \"**\" => {\n                let top =\
    \ stack.pop().unwrap();\n                stack.push(top.pow(*opd as u32));\n \
    \           }\n            _ => {}\n        }\n        op = op_iter.next().unwrap();\n\
    \    }\n    stack.iter().sum()\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmp_xjuf89e.rs:48:29\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator!\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp9jztsl0f.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unsupported operator\"),\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpytpz23b5.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp52vu6l53.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpqec20xg_.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => (),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpsbd5pvw0.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let op = &operator[i];\n        let next_op\
    \ = &operand[i + 1];\n        match op.as_str() {\n            \"+\" => result\
    \ += next_op,\n            \"-\" => result -= next_op,\n            \"*\" => result\
    \ *= next_op,\n            \"//\" => result /= next_op,\n            \"**\" =>\
    \ result = result.pow(*next_op as u32),\n            _ => panic!(\"Unknown operator\"\
    ),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp5ftsc26m.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for (i,\
    \ op) in operator.iter().enumerate() {\n        let op_result = match op.as_str()\
    \ {\n            \"+\" => result + operand[i + 1],\n            \"-\" => result\
    \ - operand[i + 1],\n            \"*\" => result * operand[i + 1],\n         \
    \   \"//\" => result / operand[i + 1],\n            \"**\" => result.pow(operand[i\
    \ + 1] as u32),\n            _ => panic!(\"Unknown operator: {}\", op),\n    \
    \    };\n        result = op_result;\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp6odl7ufn.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp94u_1uo2.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let op = &operator[i];\n        let op1 = operand[i\
    \ + 1];\n        match op.as_str() {\n            \"+\" => result += op1,\n  \
    \          \"-\" => result -= op1,\n            \"*\" => result *= op1,\n    \
    \        \"//\" => result /= op1,\n            \"**\" => result = result.pow(op1\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpp7fsr6_8.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        let op = &operator[i];\n        let num = operand[i\
    \ + 1];\n        match op.as_str() {\n            \"+\" => result += num,\n  \
    \          \"-\" => result -= num,\n            \"*\" => result *= num,\n    \
    \        \"//\" => result /= num,\n            \"**\" => result = result.pow(num\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmplnccuems.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpskrcx0_r.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for (index,\
    \ op) in operator.iter().enumerate() {\n        let operand1 = result;\n     \
    \   let operand2 = operand[index + 1];\n        result = match op.as_str() {\n\
    \            \"+\" => operand1 + operand2,\n            \"-\" => operand1 - operand2,\n\
    \            \"*\" => operand1 * operand2,\n            \"//\" => operand1 / operand2,\n\
    \            \"**\" => operand1.pow(operand2 as u32),\n            _ => panic!(\"\
    Invalid operator\"),\n        };\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpe0shgxn4.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unsupported operator\"),\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp_xhzgkxh.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmp6o_fu8je.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpck3lo354.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpfiqxqvqd.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n/// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n/// expression and return the evaluation of this\
    \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
    \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
    \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
    /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
    \ list is equal to the length of operand list minus one.\n/// Operand is a list\
    \ of of non-negative integers.\n/// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n    let mut result = operand[0];\n    for i\
    \ in 0..operator.len() {\n        match operator[i].as_str() {\n            \"\
    +\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n\
    \            \"*\" => result *= operand[i + 1],\n            \"//\" => result\
    \ /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1]\
    \ as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `9`', /tmp/tmpmqrbn5jl.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
