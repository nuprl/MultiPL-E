name: HumanEval_159_eat
language: rust
results:
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if need <= left {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let\
    \ mut total = number + remaining;\n    if total < need {\n        result.push(total);\n\
    \        result.push(0);\n    } else {\n        result.push(need);\n        result.push(total\
    \ - need);\n    }\n    result\n}\n\nfn main() {\n    let candidate = eat;\n  \
    \  assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmp4kerhfw2.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![];\n    if number\
    \ + remaining >= need {\n        result.push(number + need);\n        result.push(remaining\
    \ - need);\n    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, -4]`,\n right: `[5, 0]`', /tmp/tmprquq4wyl.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![number + need,\
    \ remaining - need];\n    if result[1] < 0 {\n        result[1] = 0;\n       \
    \ result[0] = number + remaining;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmptgwdi5nk.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpk0slorsr.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![number];\n    if\
    \ need > remaining {\n        result.push(0);\n    } else {\n        result.push(remaining\
    \ - need);\n    }\n    result\n}\n\nfn main() {\n    let candidate = eat;\n  \
    \  assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 4]`,\n right: `[11, 4]`', /tmp/tmp2o4ouua5.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut res = vec![number];\n    if number\
    \ < need {\n        res.push(need - number);\n        if remaining < res[1] {\n\
    \            res[1] = remaining;\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n\
    \    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1,\
    \ 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n \
    \   assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5,\
    \ 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 1]`,\n right: `[11, 4]`', /tmp/tmpvdsh70h3.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpu599hbgl.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpl7wujx80.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpcphv8uq1.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut carrots = number + remaining;\n\
    \    if carrots < need {\n        carrots = 0;\n    } else {\n        carrots\
    \ -= need;\n    }\n    vec![number + remaining - carrots, carrots]\n}\n\nfn main()\
    \ {\n    let candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n\
    \    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1,\
    \ 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n \
    \   assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5,\
    \ 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpdqszx9do.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpzcptvwqu.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![];\n    if remaining\
    \ >= need {\n        result.push(number + need);\n        result.push(remaining\
    \ - need);\n    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpi9jkaywc.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![number];\n    if\
    \ number < need {\n        result.push(need - number);\n        result.push(remaining\
    \ - (need - number));\n    } else {\n        result.push(0);\n        result.push(remaining);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 1, 9]`,\n right: `[11, 4]`', /tmp/tmpeiflw2ky.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpbpbcyi5v.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ remaining = remaining;\n    if need > remaining {\n        eaten += remaining;\n\
    \        remaining = 0;\n    } else {\n        eaten += need;\n        remaining\
    \ -= need;\n    }\n    vec![eaten, remaining]\n}\n\nfn main() {\n    let candidate\
    \ = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![number + remaining,\
    \ 0];\n    if result[0] >= need {\n        result[0] = need;\n        result[1]\
    \ = remaining - (need - number);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpa705mna1.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpc26l5hc0.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![number + need,\
    \ remaining - need];\n    if result[1] < 0 {\n        result[1] = 0;\n       \
    \ result[0] = number + remaining;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![number + need,\
    \ remaining - need];\n    if result[1] < 0 {\n        result[1] = 0;\n       \
    \ result[0] = number + remaining;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![];\n    if remaining\
    \ < need {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    } else {\n        result.push(number + need);\n        result.push(remaining\
    \ - need);\n    }\n    result\n}\n\nfn main() {\n    let candidate = eat;\n  \
    \  assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmptvfx6j2p.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total < need {\n        total = number + remaining;\n    } else {\n  \
    \      total = number + need;\n    }\n    vec![total, remaining - need]\n}\n\n\
    fn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11,\
    \ 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1,\
    \ 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n \
    \   assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5,\
    \ 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, -6]`,\n right: `[7, 0]`', /tmp/tmpq8o0cq9v.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if need > left {\n        eaten += left;\n        left\
    \ = 0;\n    } else {\n        eaten += need;\n        left -= need;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmp9xpcwcro.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    let mut left = 0;\n    if total < need {\n        total = total;\n      \
    \  left = 0;\n    } else {\n        total = need;\n        left = total - need;\n\
    \    }\n    vec![total, left]\n}\n\nfn main() {\n    let candidate = eat;\n  \
    \  assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 0]`,\n right: `[11, 4]`', /tmp/tmpdvbgxw9g.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmp14xvwf8y.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpiil6m2o_.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    if remaining\
    \ < need {\n        eaten += remaining;\n        return vec![eaten, 0];\n    }\n\
    \    eaten += need;\n    return vec![eaten, remaining - need];\n}\n\nfn main()\
    \ {\n    let candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n\
    \    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1,\
    \ 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n \
    \   assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5,\
    \ 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left < need {\n        eaten += left;\n        left\
    \ = 0;\n    } else {\n        eaten += need;\n        left -= need;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpd9wm8k0r.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total < need {\n        total = number + remaining;\n    } else {\n  \
    \      total = number + need;\n    }\n    vec![total, remaining - need]\n}\n\n\
    fn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11,\
    \ 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1,\
    \ 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n \
    \   assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5,\
    \ 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, -6]`,\n right: `[7, 0]`', /tmp/tmpx5201dbz.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmp_4fvenmt.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    let mut left = 0;\n    if total < need {\n        total = total;\n      \
    \  left = 0;\n    } else {\n        total = need;\n        left = total - need;\n\
    \    }\n    vec![total, left]\n}\n\nfn main() {\n    let candidate = eat;\n  \
    \  assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 0]`,\n right: `[11, 4]`', /tmp/tmp3cjjxewt.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![];\n    let mut\
    \ total = number + remaining;\n    if total >= need {\n        result.push(need);\n\
    \        result.push(total - need);\n    } else {\n        result.push(total);\n\
    \        result.push(0);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpgv0zk915.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpphy4fjto.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmp6_36g2b5.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    if\
    \ number + need > remaining {\n        result.push(remaining);\n        result.push(0);\n\
    \    } else {\n        result.push(number + need);\n        result.push(remaining\
    \ - (number + need));\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[10, 0]`,\n right: `[11, 4]`', /tmp/tmpfvdpy9de.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if need > remaining {\n        eaten += remaining;\n\
    \        left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n\
    \    }\n    vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n  \
    \  assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if need > left {\n        eaten += left;\n        left\
    \ = 0;\n    } else {\n        eaten += need;\n        left -= need;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if need > remaining {\n        eaten += remaining;\n\
    \        left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n\
    \    }\n    vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n  \
    \  assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpiegfoiew.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![];\n    if remaining\
    \ >= need {\n        result.push(number + need);\n        result.push(remaining\
    \ - need);\n    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total < need {\n        total = number + remaining;\n    } else {\n  \
    \      total = number + need;\n    }\n    vec![total, remaining - need]\n}\n\n\
    fn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11,\
    \ 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1,\
    \ 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n \
    \   assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5,\
    \ 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, -6]`,\n right: `[7, 0]`', /tmp/tmpy3vtmb_l.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut carrots = number + remaining;\n\
    \    if carrots >= need {\n        carrots -= need;\n    } else {\n        carrots\
    \ = 0;\n    }\n    vec![number + remaining - carrots, carrots]\n}\n\nfn main()\
    \ {\n    let candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n\
    \    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1,\
    \ 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n \
    \   assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5,\
    \ 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpmoxe6yil.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmph062d1ja.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmphrlkdff4.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmp6y5_t58y.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpj0r5rqwf.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if eaten + left >= need {\n        eaten += need;\n \
    \       left -= need;\n    } else {\n        eaten += left;\n        left = 0;\n\
    \    }\n    vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n  \
    \  assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, -4]`,\n right: `[5, 0]`', /tmp/tmpn2q_1uyh.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmp86fp9jqs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if need > remaining {\n        eaten += remaining;\n\
    \        left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n\
    \    }\n    vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n  \
    \  assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    let mut left = 0;\n    if total < need {\n        total = total;\n      \
    \  left = 0;\n    } else {\n        total = need;\n        left = total - need;\n\
    \    }\n    vec![total, left]\n}\n\nfn main() {\n    let candidate = eat;\n  \
    \  assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 0]`,\n right: `[11, 4]`', /tmp/tmpdsvm5_hr.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![number + need,\
    \ remaining - need];\n    if result[1] < 0 {\n        result[1] = 0;\n       \
    \ result[0] = number + remaining;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![number + need,\
    \ remaining - need];\n    if result[1] < 0 {\n        result[1] = 0;\n       \
    \ result[0] = number + remaining;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![number + remaining,\
    \ 0];\n    if result[0] >= need {\n        result[0] = need;\n        result[1]\
    \ = remaining - (need - number);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmp6i3eqhbl.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ remaining = remaining;\n    if remaining < need {\n        eaten += remaining;\n\
    \        remaining = 0;\n    } else {\n        eaten += need;\n        remaining\
    \ -= need;\n    }\n    vec![eaten, remaining]\n}\n\nfn main() {\n    let candidate\
    \ = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total < need {\n        total = number + remaining;\n    } else {\n  \
    \      total = number + need;\n    }\n    vec![total, remaining - need]\n}\n\n\
    fn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11,\
    \ 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1,\
    \ 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n \
    \   assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5,\
    \ 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, -6]`,\n right: `[7, 0]`', /tmp/tmpe7uesxp2.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if need > remaining {\n        eaten += remaining;\n\
    \        left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n\
    \    }\n    vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n  \
    \  assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if need > remaining {\n        eaten += remaining;\n\
    \        left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n\
    \    }\n    vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n  \
    \  assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmparcivwur.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpe4hw3w80.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![];\n    if number\
    \ < 0 || need < 0 || remaining < 0 {\n        result.push(0);\n        result.push(0);\n\
    \    } else if number + remaining < need {\n        result.push(number + remaining);\n\
    \        result.push(0);\n    } else {\n        result.push(number + need);\n\
    \        result.push(remaining - need);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n\
    \    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1,\
    \ 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n \
    \   assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5,\
    \ 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, -4]`,\n right: `[5, 0]`', /tmp/tmpi_oo28mv.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut number = number;\n    let mut\
    \ need = need;\n    let mut remaining = remaining;\n    if need > remaining {\n\
    \        number += remaining;\n        remaining = 0;\n    } else {\n        number\
    \ += need;\n        remaining -= need;\n    }\n    vec![number, remaining]\n}\n\
    \nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11,\
    \ 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1,\
    \ 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n \
    \   assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5,\
    \ 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmp9ys5ae5t.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![];\n    if number\
    \ + remaining >= need {\n        result.push(number + need);\n        result.push(remaining\
    \ - need);\n    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, -4]`,\n right: `[5, 0]`', /tmp/tmpkxyld0_1.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total < need {\n        total = number + remaining;\n    } else {\n  \
    \      total = number + need;\n    }\n    vec![total, remaining - need]\n}\n\n\
    fn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11,\
    \ 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1,\
    \ 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n \
    \   assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5,\
    \ 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, -6]`,\n right: `[7, 0]`', /tmp/tmp9zn5mheh.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![number + remaining,\
    \ 0];\n    if result[0] >= need {\n        result[0] = need;\n        result[1]\
    \ = remaining - (need - number);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmptftgwdws.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut number = number;\n    let mut\
    \ need = need;\n    let mut remaining = remaining;\n    if number + remaining\
    \ >= need {\n        number += need;\n        need = 0;\n        remaining -=\
    \ need;\n    } else {\n        number += remaining;\n        need -= remaining;\n\
    \        remaining = 0;\n    }\n    vec![number, need]\n}\n\nfn main() {\n   \
    \ let candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n  \
    \  assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10,\
    \ 10), vec![11, 0]);\n    assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[11, 0]`,\n right: `[11, 4]`', /tmp/tmp3yh7j_pt.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    if remaining < need - number {\n    \
    \    vec![number + remaining, 0]\n    } else {\n        vec![number + need, remaining\
    \ - need + number]\n    }\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[11, 9]`,\n right: `[11, 4]`', /tmp/tmpn4a86i64.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![number + need,\
    \ remaining - need];\n    if result[1] < 0 {\n        result[1] = 0;\n       \
    \ result[0] = number + remaining;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmp1pc8phv7.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmprx0_tmtg.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    let mut left = 0;\n    if total >= need {\n        total = need;\n      \
    \  left = remaining - (need - number);\n    }\n    vec![total, left]\n}\n\nfn\
    \ main() {\n    let candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11,\
    \ 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1,\
    \ 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n \
    \   assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5,\
    \ 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpp_580wd6.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if eaten + remaining >= need {\n        eaten += need;\n\
    \        left -= need;\n    } else {\n        eaten += remaining;\n        left\
    \ = 0;\n    }\n    vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n\
    \    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, -4]`,\n right: `[5, 0]`', /tmp/tmp4e5c6gj1.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpnf06wdu0.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpa11ygbs5.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if need > remaining {\n        eaten += remaining;\n\
    \        left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n\
    \    }\n    vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n  \
    \  assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpogbs5wqf.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![];\n    if number\
    \ >= need {\n        result.push(number);\n        result.push(remaining);\n \
    \   } else {\n        let mut total = number;\n        let mut remain = remaining;\n\
    \        while total < need && remain > 0 {\n            total += 1;\n       \
    \     remain -= 1;\n        }\n        result.push(total);\n        result.push(remain);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpm_kdks4t.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![];\n    let mut\
    \ total_eaten = number;\n    let mut remaining_carrots = remaining;\n    if remaining_carrots\
    \ >= need {\n        total_eaten += need;\n        remaining_carrots -= need;\n\
    \    } else {\n        total_eaten += remaining_carrots;\n        remaining_carrots\
    \ = 0;\n    }\n    result.push(total_eaten);\n    result.push(remaining_carrots);\n\
    \    result\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmp7kli1rdk.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![];\n    if remaining\
    \ >= need {\n        result.push(number + need);\n        result.push(remaining\
    \ - need);\n    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if need > left {\n        eaten += left;\n        left\
    \ = 0;\n    } else {\n        eaten += need;\n        left -= need;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmp44clfs7x.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let\
    \ mut eaten = number;\n    if remaining >= need {\n        eaten += need;\n  \
    \      result.push(eaten);\n        result.push(remaining - need);\n    } else\
    \ {\n        eaten += remaining;\n        result.push(eaten);\n        result.push(0);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    if remaining\
    \ < need {\n        eaten += remaining;\n        remaining = 0;\n    } else {\n\
    \        eaten += need;\n        remaining -= need;\n    }\n    vec![eaten, remaining]\n\
    }\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5, 6, 10),\
    \ vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1,\
    \ 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n \
    \   assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5,\
    \ 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `remaining`\n  --> /tmp/tmpv90pxsbj.rs:27:9\n\
    \   |\n23 | fn eat(number: isize, need: isize, remaining: isize) -> Vec<isize>\
    \ {\n   |                                    --------- help: consider making this\
    \ binding mutable: `mut remaining`\n...\n27 |         remaining = 0;\n   |   \
    \      ^^^^^^^^^^^^^ cannot assign to immutable argument\n\nerror[E0384]: cannot\
    \ assign to immutable argument `remaining`\n  --> /tmp/tmpv90pxsbj.rs:30:9\n \
    \  |\n23 | fn eat(number: isize, need: isize, remaining: isize) -> Vec<isize>\
    \ {\n   |                                    --------- help: consider making this\
    \ binding mutable: `mut remaining`\n...\n30 |         remaining -= need;\n   |\
    \         ^^^^^^^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmp1xz9pa3z.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpmfkp1enj.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpu_x5w_4z.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if need > remaining {\n        eaten += remaining;\n\
    \        left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n\
    \    }\n    vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n  \
    \  assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![];\n    if number\
    \ + remaining < need {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    } else {\n        result.push(number + need);\n        result.push(remaining\
    \ - need);\n    }\n    result\n}\n\nfn main() {\n    let candidate = eat;\n  \
    \  assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, -4]`,\n right: `[5, 0]`', /tmp/tmp79kwqeij.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmp4cntoib4.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![];\n    if remaining\
    \ >= need {\n        result.push(number + need);\n        result.push(remaining\
    \ - need);\n    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut number = number;\n    let mut\
    \ need = need;\n    let mut remaining = remaining;\n    if number + remaining\
    \ >= need {\n        number += need;\n        remaining -= need;\n        need\
    \ = 0;\n    } else {\n        number += remaining;\n        need -= remaining;\n\
    \        remaining = 0;\n    }\n    vec![number, remaining]\n}\n\nfn main() {\n\
    \    let candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n\
    \    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1,\
    \ 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n \
    \   assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5,\
    \ 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, -4]`,\n right: `[5, 0]`', /tmp/tmp52zjbh0s.rs:46:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let\
    \ mut total = number + remaining;\n    if total >= need {\n        result.push(need);\n\
    \        result.push(total - need);\n    } else {\n        result.push(total);\n\
    \        result.push(0);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmp1g2nk5ts.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    if number + remaining >= need {\n   \
    \     vec![need, number + remaining - need]\n    } else {\n        vec![number\
    \ + remaining, 0]\n    }\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpelctjp37.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + need;\n    if\
    \ total > remaining {\n        total = remaining;\n    }\n    vec![total, remaining\
    \ - total]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[10, 0]`,\n right: `[11, 4]`', /tmp/tmp46r5zpv3.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![];\n    let mut\
    \ total = number + remaining;\n    if total >= need {\n        result.push(need);\n\
    \        result.push(total - need);\n    } else {\n        result.push(total);\n\
    \        result.push(0);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpj407c0nz.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    let mut left = 0;\n    if total >= need {\n        total = need;\n      \
    \  left = total - need;\n    }\n    vec![total, left]\n}\n\nfn main() {\n    let\
    \ candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 0]`,\n right: `[11, 4]`', /tmp/tmpulq0gqqz.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![];\n    if number\
    \ + remaining >= need {\n        result.push(number + need);\n        result.push(remaining\
    \ - need);\n    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, -4]`,\n right: `[5, 0]`', /tmp/tmpf7zi57hk.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpqwf1c45u.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if need > left {\n        eaten += left;\n        left\
    \ = 0;\n    } else {\n        eaten += need;\n        left -= need;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if need > left {\n        eaten += left;\n        left\
    \ = 0;\n    } else {\n        eaten += need;\n        left -= need;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![];\n    if number\
    \ < 0 || need < 0 || remaining < 0 {\n        result.push(0);\n        result.push(0);\n\
    \    } else if number + remaining >= need {\n        result.push(need);\n    \
    \    result.push(remaining - (need - number));\n    } else {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n\
    \    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1,\
    \ 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n \
    \   assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5,\
    \ 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpg6_wnqsj.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![number + remaining,\
    \ 0];\n    if result[0] >= need {\n        result[0] = need;\n        result[1]\
    \ = remaining - (need - number);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpg70_uld3.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmps6w5jtye.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let\
    \ mut total = number + remaining;\n    if total >= need {\n        result.push(need);\n\
    \        result.push(total - need);\n    } else {\n        result.push(total);\n\
    \        result.push(0);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmp3dqvbg6m.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![number + remaining,\
    \ 0];\n    if need > remaining {\n        result[0] += remaining;\n    } else\
    \ {\n        result[0] += need;\n        result[1] = remaining - need;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[21, 4]`,\n right: `[11, 4]`', /tmp/tmp9mh2kxue.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if need > remaining {\n        eaten += remaining;\n\
    \        left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n\
    \    }\n    vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n  \
    \  assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmp5f8njp0h.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if need > remaining {\n        eaten += remaining;\n\
    \        left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n\
    \    }\n    vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n  \
    \  assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left < need {\n        eaten += left;\n        left\
    \ = 0;\n    } else {\n        eaten += need;\n        left -= need;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![number];\n    if\
    \ need > remaining {\n        result.push(0);\n    } else {\n        result.push(remaining\
    \ - need);\n    }\n    result\n}\n\nfn main() {\n    let candidate = eat;\n  \
    \  assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 4]`,\n right: `[11, 4]`', /tmp/tmpjg850dc1.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmph1jhz3il.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![];\n    if remaining\
    \ < need {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    } else {\n        result.push(number + need);\n        result.push(remaining\
    \ - need);\n    }\n    result\n}\n\nfn main() {\n    let candidate = eat;\n  \
    \  assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmp2py_a2pk.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    if\
    \ remaining >= need {\n        result.push(number + need);\n        result.push(remaining\
    \ - need);\n    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmp77l4vo9h.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![number + need,\
    \ remaining - need];\n    if result[1] < 0 {\n        result[1] = 0;\n       \
    \ result[0] = number + remaining;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![number + need,\
    \ remaining - need];\n    if result[1] < 0 {\n        result[1] = 0;\n       \
    \ result[0] = number + remaining;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![number + need,\
    \ remaining - need];\n    if result[1] < 0 {\n        result[1] = 0;\n       \
    \ result[0] = number + remaining;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if need > remaining {\n        eaten += remaining;\n\
    \        left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n\
    \    }\n    vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n  \
    \  assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + need;\n    let\
    \ mut left = remaining - need;\n    if left < 0 {\n        total += left;\n  \
    \      left = 0;\n    }\n    vec![total, left]\n}\n\nfn main() {\n    let candidate\
    \ = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmplmreiwaa.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![];\n    let mut\
    \ total = number + remaining;\n    if total >= need {\n        result.push(need);\n\
    \        result.push(total - need);\n    } else {\n        result.push(total);\n\
    \        result.push(0);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpt8h3c5rt.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpgvx1h153.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpsop_rry7.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![];\n    if remaining\
    \ >= need {\n        result.push(number + need);\n        result.push(remaining\
    \ - need);\n    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total < need {\n        total = number + remaining;\n    } else {\n  \
    \      total = number + need;\n    }\n    vec![total, remaining - need]\n}\n\n\
    fn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11,\
    \ 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1,\
    \ 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n \
    \   assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5,\
    \ 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, -6]`,\n right: `[7, 0]`', /tmp/tmpttppf3dq.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if need > remaining {\n        eaten += remaining;\n\
    \        left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n\
    \    }\n    vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n  \
    \  assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![number + remaining,\
    \ 0];\n    if result[0] >= need {\n        result[0] = need;\n        result[1]\
    \ = remaining - (need - number);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpx0iw1qhl.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmp3uqswxak.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![number];\n    if\
    \ remaining >= need {\n        result.push(remaining - need);\n    } else {\n\
    \        result.push(0);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 4]`,\n right: `[11, 4]`', /tmp/tmpy5v02o20.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let total = number + need;\n    if total\
    \ <= remaining {\n        vec![total, remaining - total]\n    } else {\n     \
    \   vec![remaining + number, 0]\n    }\n}\n\nfn main() {\n    let candidate =\
    \ eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 0]`,\n right: `[11, 4]`', /tmp/tmp4i5567kr.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    if remaining\
    \ >= need {\n        eaten += need;\n    } else {\n        eaten += remaining;\n\
    \    }\n    vec![eaten, remaining - need]\n}\n\nfn main() {\n    let candidate\
    \ = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, -6]`,\n right: `[7, 0]`', /tmp/tmpvnyymp75.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmp55bxkuzb.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if need > remaining {\n        eaten += remaining;\n\
    \        left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n\
    \    }\n    vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n  \
    \  assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpx_qi6oyr.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpau6asgnw.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if need > remaining {\n        eaten += remaining;\n\
    \        left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n\
    \    }\n    vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n  \
    \  assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![];\n    let mut\
    \ total = number + remaining;\n    if total >= need {\n        result.push(need);\n\
    \        result.push(total - need);\n    } else {\n        result.push(total);\n\
    \        result.push(0);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpcswx4vo5.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![];\n    let mut\
    \ total = number + remaining;\n    if total >= need {\n        result.push(need);\n\
    \        result.push(total - need);\n    } else {\n        result.push(total);\n\
    \        result.push(0);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmp8yvn6yhj.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    if\
    \ remaining < need {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    } else {\n        result.push(number + need);\n        result.push(remaining\
    \ - need);\n    }\n    result\n}\n\nfn main() {\n    let candidate = eat;\n  \
    \  assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmptanjj91s.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![number];\n    if\
    \ need > remaining {\n        result.push(0);\n    } else {\n        result.push(remaining\
    \ - need);\n    }\n    result\n}\n\nfn main() {\n    let candidate = eat;\n  \
    \  assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 4]`,\n right: `[11, 4]`', /tmp/tmpel0oepo0.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if need > remaining {\n        eaten += remaining;\n\
    \        left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n\
    \    }\n    vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n  \
    \  assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = vec![number + need,\
    \ remaining - need];\n    if result[1] < 0 {\n        result[1] = 0;\n       \
    \ result[0] = number + remaining;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4,\
    \ 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n \
    \   assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4,\
    \ 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if need > left {\n        eaten += left;\n        left\
    \ = 0;\n    } else {\n        eaten += need;\n        left -= need;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 9]`,\n right: `[11, 4]`', /tmp/tmpyuckwed6.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    if\
    \ remaining >= need {\n        result.push(number + need);\n        result.push(remaining\
    \ - need);\n    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5,\
    \ 6, 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n  \
    \  assert_eq!(candidate(1, 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2,\
    \ 11, 5), vec![7, 0]);\n    assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4,\
    \ 5, 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n/// but now you need to eat more carrots to complete the day's\
    \ meals.\n/// you should return an array of [ total number of eaten carrots after\
    \ your meals,\n/// the number of carrots left after your meals ]\n/// if there\
    \ are not enough remaining carrots, you will eat all remaining carrots, but will\
    \ still be hungry.\n/// Example:\n/// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4,\
    \ 8, 9) -> [12, 1]\n/// * eat(1, 10, 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7,\
    \ 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you\
    \ have eaten.\n/// @need : integer\n/// the number of carrots that you need to\
    \ eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist\
    \ in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n\
    /// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number: isize, need: isize,\
    \ remaining: isize) -> Vec<isize> {\n    let mut total = number + remaining;\n\
    \    if total < need {\n        total = number + remaining;\n    } else {\n  \
    \      total = number + need;\n    }\n    vec![total, remaining - need]\n}\n\n\
    fn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5, 6, 10), vec![11,\
    \ 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1,\
    \ 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n \
    \   assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5,\
    \ 1), vec![5, 0]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, -6]`,\n right: `[7, 0]`', /tmp/tmp_nzm1naa.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
