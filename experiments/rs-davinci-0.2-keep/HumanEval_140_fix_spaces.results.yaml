name: HumanEval_140_fix_spaces
language: rust
results:
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut last_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if last_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        last_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpy093vfjf.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count > 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpn5weuphf.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpex9zzdqt.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    if consecutive_spaces > 2 {\n        result.push('-');\n\
    \    } else {\n        for _ in 0..consecutive_spaces {\n            result.push('_');\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f_\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpq0ea76z2.rs:45:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count > 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpivel4q3g.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut is_space\
    \ = false;\n    let mut is_double_space = false;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if is_space {\n                if !is_double_space\
    \ {\n                    result.push('-');\n                    is_double_space\
    \ = true;\n                }\n            } else {\n                result.push('_');\n\
    \                is_space = true;\n            }\n        } else {\n         \
    \   result.push(c);\n            is_space = false;\n            is_double_space\
    \ = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpc4jd8ym3.rs:36:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if prev_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        prev_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpiwy_mjnb.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    if consecutive_spaces > 2 {\n        result.push('-');\n\
    \    } else {\n        for _ in 0..consecutive_spaces {\n            result.push('_');\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f_\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp7ozphyxq.rs:45:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            consecutive_spaces += 1;\n            if consecutive_spaces\
    \ > 2 {\n                if !prev_space {\n                    result.push('-');\n\
    \                }\n            } else {\n                result.push('_');\n\
    \            }\n            prev_space = true;\n        } else {\n           \
    \ consecutive_spaces = 0;\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp7ux75trq.rs:37:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces > 2 {\n                result.push('-');\n    \
    \            spaces = 0;\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            result.push(c);\n            spaces\
    \ = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp3smyfp2q.rs:33:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces == 2 {\n                result.push('-');\n   \
    \             spaces = 0;\n            }\n        } else {\n            if spaces\
    \ == 1 {\n                result.push('_');\n            }\n            spaces\
    \ = 0;\n            result.push(c);\n        }\n    }\n    if spaces == 1 {\n\
    \        result.push('_');\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpd6nco_c9.rs:36:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut last_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if last_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        last_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp_28jpasi.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                prev_space = true;\n          \
    \      consecutive_spaces = 1;\n            }\n        } else {\n            if\
    \ prev_space {\n                if consecutive_spaces > 2 {\n                \
    \    result.push('-');\n                } else {\n                    result.push('_');\n\
    \                }\n                prev_space = false;\n            }\n     \
    \       result.push(c);\n        }\n    }\n    if prev_space {\n        if consecutive_spaces\
    \ > 2 {\n            result.push('-');\n        } else {\n            result.push('_');\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpe5_m4ar_.rs:46:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            consecutive_spaces = 0;\n     \
    \       prev_space = false;\n            result.push(c);\n        }\n    }\n \
    \   if consecutive_spaces > 2 {\n        result.push('-');\n    } else {\n   \
    \     for _ in 0..consecutive_spaces {\n            result.push('_');\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n \
    \   assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ == 1 {\n                result.push('_');\n            } else if consecutive_spaces\
    \ > 1 {\n                result.push('-');\n            }\n            result.push(c);\n\
    \            prev_space = false;\n        }\n    }\n    if consecutive_spaces\
    \ == 1 {\n        result.push('_');\n    } else if consecutive_spaces > 1 {\n\
    \        result.push('-');\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f_\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp7hj7tlfp.rs:41:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut last_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if last_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        last_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpfpijklma.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_char\
    \ = ' ';\n    let mut space_count = 0;\n    for c in text.chars() {\n        if\
    \ c == ' ' {\n            space_count += 1;\n            if space_count > 2 {\n\
    \                continue;\n            }\n        } else {\n            space_count\
    \ = 0;\n        }\n        if prev_char == ' ' && c == ' ' {\n            result.push('-');\n\
    \        } else {\n            result.push(c);\n        }\n        prev_char =\
    \ c;\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n \
    \   assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp0hqhqwz2.rs:34:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpqis6mkar.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count > 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpc5vjkft3.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp9rfe31v0.rs:38:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count > 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp27f2yzfu.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut last_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if last_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        last_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpzter3rtx.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\" \", \"_\").replace(\"__\", \"-\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpq_h4ehyj.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if !prev_space {\n                result.push('_');\n\
    \                prev_space = true;\n            }\n            consecutive_spaces\
    \ += 1;\n        } else {\n            if consecutive_spaces > 2 {\n         \
    \       result.push('-');\n            }\n            result.push(c);\n      \
    \      prev_space = false;\n            consecutive_spaces = 0;\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp4lban53w.rs:35:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces > 2 {\n                result.push('-');\n    \
    \            spaces = 0;\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            result.push(c);\n            spaces\
    \ = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpm2uiix2i.rs:33:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                prev_space = true;\n          \
    \      consecutive_spaces = 1;\n            }\n        } else {\n            if\
    \ prev_space {\n                if consecutive_spaces > 2 {\n                \
    \    result.push('-');\n                } else {\n                    result.push('_');\n\
    \                }\n                prev_space = false;\n            }\n     \
    \       result.push(c);\n        }\n    }\n    if prev_space {\n        if consecutive_spaces\
    \ > 2 {\n            result.push('-');\n        } else {\n            result.push('_');\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpup9idvsb.rs:46:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if prev_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        prev_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp40lace9b.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut last_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if last_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        last_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp0czxtp4x.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            consecutive_spaces = 0;\n     \
    \       prev_space = false;\n            result.push(c);\n        }\n    }\n \
    \   if consecutive_spaces > 2 {\n        result.push('-');\n    } else {\n   \
    \     for _ in 0..consecutive_spaces {\n            result.push('_');\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n \
    \   assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    if consecutive_spaces > 2 {\n        result.push('-');\n\
    \    } else {\n        for _ in 0..consecutive_spaces {\n            result.push('_');\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f_\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplhxctp4r.rs:45:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_space = false;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            if prev_space {\n                consecutive_space\
    \ = true;\n            }\n            prev_space = true;\n            result.push('_');\n\
    \        } else {\n            if consecutive_space {\n                result.push('-');\n\
    \                consecutive_space = false;\n            }\n            prev_space\
    \ = false;\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow__-Dirty__-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpbzuv9ily.rs:35:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    if consecutive_spaces > 2 {\n        result.push('-');\n\
    \    } else {\n        for _ in 0..consecutive_spaces {\n            result.push('_');\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f_\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpwojekai8.rs:45:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            consecutive_spaces = 0;\n     \
    \       prev_space = false;\n            result.push(c);\n        }\n    }\n \
    \   if consecutive_spaces > 2 {\n        result.push('-');\n    } else {\n   \
    \     for _ in 0..consecutive_spaces {\n            result.push('_');\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n \
    \   assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_space = false;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            if prev_space {\n                consecutive_space\
    \ = true;\n            }\n            prev_space = true;\n            result.push('_');\n\
    \        } else {\n            if consecutive_space {\n                result.push('-');\n\
    \                consecutive_space = false;\n            }\n            prev_space\
    \ = false;\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow__-Dirty__-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpm7810qzk.rs:35:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            consecutive_spaces = 0;\n     \
    \       prev_space = false;\n            result.push(c);\n        }\n    }\n \
    \   if consecutive_spaces > 2 {\n        result.push('-');\n    } else {\n   \
    \     for _ in 0..consecutive_spaces {\n            result.push('_');\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n \
    \   assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces == 1 {\n                result.push('_');\n   \
    \         } else if spaces > 2 {\n                result.push('-');\n        \
    \    }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp21m9_cit.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            consecutive_spaces = 0;\n     \
    \       prev_space = false;\n            result.push(c);\n        }\n    }\n \
    \   if consecutive_spaces > 2 {\n        result.push('-');\n    } else {\n   \
    \     for _ in 0..consecutive_spaces {\n            result.push('_');\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n \
    \   assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut last_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if last_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        last_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpsa9y0f9z.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\"  \", \"-\").replace(\" \", \"_\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpggeh7vt9.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            consecutive_spaces = 0;\n     \
    \       prev_space = false;\n            result.push(c);\n        }\n    }\n \
    \   if consecutive_spaces > 2 {\n        result.push('-');\n    } else {\n   \
    \     for _ in 0..consecutive_spaces {\n            result.push('_');\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n \
    \   assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            if\
    \ c == ' ' {\n                result.push('_');\n            } else {\n      \
    \          result.push(c);\n            }\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp54rd2h82.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    if consecutive_spaces > 2 {\n        result.push('-');\n\
    \    } else {\n        for _ in 0..consecutive_spaces {\n            result.push('_');\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f_\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp7b81gjkf.rs:45:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    if consecutive_spaces > 2 {\n        result.push('-');\n\
    \    } else {\n        for _ in 0..consecutive_spaces {\n            result.push('_');\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f_\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpnj7odp8a.rs:45:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            consecutive_spaces = 0;\n     \
    \       prev_space = false;\n            result.push(c);\n        }\n    }\n \
    \   if consecutive_spaces > 2 {\n        result.push('-');\n    } else {\n   \
    \     for _ in 0..consecutive_spaces {\n            result.push('_');\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n \
    \   assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            consecutive_spaces = 0;\n     \
    \       prev_space = false;\n            result.push(c);\n        }\n    }\n \
    \   if consecutive_spaces > 2 {\n        result.push('-');\n    } else {\n   \
    \     for _ in 0..consecutive_spaces {\n            result.push('_');\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n \
    \   assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp0f_l3gl_.rs:38:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if prev_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        prev_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpj9c7svhd.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmplu3qwxns.rs:38:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            consecutive_spaces = 0;\n     \
    \       prev_space = false;\n            result.push(c);\n        }\n    }\n \
    \   if consecutive_spaces > 2 {\n        result.push('-');\n    } else {\n   \
    \     for _ in 0..consecutive_spaces {\n            result.push('_');\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n \
    \   assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                prev_space = true;\n          \
    \      consecutive_spaces = 1;\n            }\n        } else {\n            if\
    \ prev_space {\n                if consecutive_spaces > 2 {\n                \
    \    result.push('-');\n                } else {\n                    result.push('_');\n\
    \                }\n                prev_space = false;\n            }\n     \
    \       result.push(c);\n        }\n    }\n    if prev_space {\n        if consecutive_spaces\
    \ > 2 {\n            result.push('-');\n        } else {\n            result.push('_');\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp5n1uoztp.rs:46:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut last_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if last_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        last_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpywu6nnpl.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if prev_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        prev_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp2vm5suwu.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut last_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if last_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        last_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp3ychdf38.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpw8n8mqes.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if prev_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        prev_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp3yh4x0v_.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\"  \", \"-\").replace(\" \", \"_\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp1eqttx3g.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut last_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if last_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        last_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmprveitz6u.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut last_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if last_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        last_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpu_4frmlb.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces > 2 {\n                result.push('-');\n    \
    \            spaces = 0;\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            result.push(c);\n            spaces\
    \ = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpgnt43d3y.rs:33:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut last_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if last_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        last_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp16ksa38a.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            consecutive_spaces = 0;\n     \
    \       prev_space = false;\n            result.push(c);\n        }\n    }\n \
    \   if consecutive_spaces > 2 {\n        result.push('-');\n    } else {\n   \
    \     for _ in 0..consecutive_spaces {\n            result.push('_');\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n \
    \   assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces > 2 {\n                result.push('-');\n    \
    \            spaces = 0;\n            }\n        } else {\n            if spaces\
    \ > 0 {\n                result.push('_');\n                spaces = 0;\n    \
    \        }\n            result.push(c);\n        }\n    }\n    if spaces > 0 {\n\
    \        result.push('_');\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpnuqk3qc6.rs:36:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces > 2 {\n                result.push('-');\n    \
    \            spaces = 0;\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            result.push(c);\n            spaces\
    \ = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp46kh2qrn.rs:33:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces > 2 {\n                result.push('-');\n    \
    \            spaces = 0;\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            result.push(c);\n            spaces\
    \ = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpttwjvj7o.rs:33:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    if consecutive_spaces > 2 {\n        result.push('-');\n\
    \    } else {\n        for _ in 0..consecutive_spaces {\n            result.push('_');\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f_\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp12vzxpxg.rs:45:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            consecutive_spaces = 0;\n     \
    \       prev_space = false;\n            result.push(c);\n        }\n    }\n \
    \   if consecutive_spaces > 2 {\n        result.push('-');\n    } else {\n   \
    \     for _ in 0..consecutive_spaces {\n            result.push('_');\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n \
    \   assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count > 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp12tve0al.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    if consecutive_spaces > 2 {\n        result.push('-');\n\
    \    } else {\n        for _ in 0..consecutive_spaces {\n            result.push('_');\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f_\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpwgf8t3pc.rs:45:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpz6hvcsad.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp0at1xmqt.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpcxex2g8d.rs:38:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    if consecutive_spaces > 2 {\n        result.push('-');\n\
    \    } else {\n        for _ in 0..consecutive_spaces {\n            result.push('_');\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f_\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpdv9y811o.rs:45:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces == 1 {\n                result.push('_');\n   \
    \         } else if spaces == 2 {\n                result.push('-');\n       \
    \     }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpjd855ptl.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces > 2 {\n                result.push('-');\n    \
    \            spaces = 0;\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            result.push(c);\n            spaces\
    \ = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpeoa61mfb.rs:33:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut last_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if last_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        last_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpa690nycn.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    if consecutive_spaces > 2 {\n        result.push('-');\n\
    \    } else {\n        for _ in 0..consecutive_spaces {\n            result.push('_');\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f_\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmps1pz2508.rs:45:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if prev_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        prev_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpyi9v52n1.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            consecutive_spaces = 0;\n     \
    \       prev_space = false;\n            result.push(c);\n        }\n    }\n \
    \   if consecutive_spaces > 2 {\n        result.push('-');\n    } else {\n   \
    \     for _ in 0..consecutive_spaces {\n            result.push('_');\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n \
    \   assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    // TODO\n    unimplemented!()\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpezj1si1p.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpoqa9vqre.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut last_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if last_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        last_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmph1ujy2y7.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut last_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if last_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        last_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp5cs6oc27.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces == 1 {\n                result.push('_');\n   \
    \         } else if spaces > 2 {\n                result.push('-');\n        \
    \    }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp3mr9goa7.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpe7t2b1sc.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_space = false;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            if prev_space {\n                consecutive_space\
    \ = true;\n            }\n            prev_space = true;\n            result.push('\
    \ ');\n        } else {\n            if prev_space {\n                if consecutive_space\
    \ {\n                    result.push('-');\n                } else {\n       \
    \             result.push('_');\n                }\n                consecutive_space\
    \ = false;\n            }\n            prev_space = false;\n            result.push(c);\n\
    \        }\n    }\n    if prev_space {\n        if consecutive_space {\n     \
    \       result.push('-');\n        } else {\n            result.push('_');\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir _Hanif _\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpw5dy755r.rs:45:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\" \", \"_\").replace(\"__\", \"-\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmprvlkqr6n.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count > 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpuizob2t6.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    if consecutive_spaces > 2 {\n        result.push('-');\n\
    \    } else {\n        for _ in 0..consecutive_spaces {\n            result.push('_');\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f_\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp81p7zlg5.rs:45:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces == 1 {\n                result.push('_');\n   \
    \         } else if spaces == 2 {\n                result.push('-');\n       \
    \     }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp3tsmpath.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if prev_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        prev_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpbk141ruh.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpp2sy978a.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces == 1 {\n                result.push('_');\n   \
    \         } else if spaces > 2 {\n                result.push('-');\n        \
    \    }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpqek2wn2b.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\" \", \"_\").replace(\"__\", \"-\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp5nh8nnoc.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces == 2 {\n                result.push('-');\n   \
    \             spaces = 0;\n            }\n        } else {\n            if spaces\
    \ == 1 {\n                result.push('_');\n            }\n            spaces\
    \ = 0;\n            result.push(c);\n        }\n    }\n    if spaces == 1 {\n\
    \        result.push('_');\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp4gx52mxb.rs:36:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpzsmlkvmx.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if prev_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        prev_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmplruukr3o.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_space = false;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            if prev_space {\n                consecutive_space\
    \ = true;\n            }\n            prev_space = true;\n            result.push('_');\n\
    \        } else {\n            if consecutive_space {\n                result.push('-');\n\
    \                consecutive_space = false;\n            }\n            prev_space\
    \ = false;\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow__-Dirty__-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpdkhsolns.rs:35:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if prev_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        prev_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp2ppx_7o2.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\" \", \"_\").replace(\"__\", \"-\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmphmyz35a2.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    if consecutive_spaces > 2 {\n        result.push('-');\n\
    \    } else {\n        for _ in 0..consecutive_spaces {\n            result.push('_');\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f_\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpm6vvhmty.rs:45:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces > 2 {\n                continue;\n            }\n\
    \        } else {\n            spaces = 0;\n        }\n        result.push(if\
    \ c == ' ' { '_' } else { c });\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpgwrowoze.rs:30:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut space_count = 0;\n    for c in text.chars() {\n      \
    \  if c == ' ' {\n            space_count += 1;\n            if space_count >\
    \ 2 {\n                if !prev_space {\n                    result.push('-');\n\
    \                }\n            } else {\n                result.push('_');\n\
    \            }\n            prev_space = true;\n        } else {\n           \
    \ result.push(c);\n            prev_space = false;\n            space_count =\
    \ 0;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp0dtmbpif.rs:37:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    if consecutive_spaces > 2 {\n        result.push('-');\n\
    \    } else {\n        for _ in 0..consecutive_spaces {\n            result.push('_');\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f_\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpq3zf_4ey.rs:45:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut last_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if last_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            last_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            consecutive_spaces = 0;\n     \
    \       last_space = false;\n            result.push(c);\n        }\n    }\n \
    \   if consecutive_spaces > 2 {\n        result.push('-');\n    } else {\n   \
    \     for _ in 0..consecutive_spaces {\n            result.push('_');\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n \
    \   assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if !prev_space {\n                result.push('_');\n\
    \                prev_space = true;\n            }\n            consecutive_spaces\
    \ += 1;\n        } else {\n            if consecutive_spaces > 2 {\n         \
    \       result.push('-');\n            }\n            result.push(c);\n      \
    \      prev_space = false;\n            consecutive_spaces = 0;\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpgod1wa40.rs:35:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut previous_char\
    \ = ' ';\n    let mut space_count = 0;\n    for c in text.chars() {\n        if\
    \ c == ' ' {\n            space_count += 1;\n            if space_count > 2 {\n\
    \                continue;\n            }\n        } else {\n            space_count\
    \ = 0;\n        }\n        if c == ' ' && previous_char == ' ' {\n           \
    \ result.push('-');\n        } else {\n            result.push(c);\n        }\n\
    \        previous_char = c;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpyo7x1wwr.rs:34:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            prev_space\
    \ = false;\n            if consecutive_spaces > 2 {\n                result.push('-');\n\
    \            } else if consecutive_spaces > 0 {\n                result.push('_');\n\
    \            }\n            consecutive_spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    if consecutive_spaces > 2 {\n        result.push('-');\n\
    \    } else if consecutive_spaces > 0 {\n        result.push('_');\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpufkds7ny.rs:43:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\"  \", \"-\").replace(\" \", \"_\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpc3htr112.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\"  \", \"-\").replace(\" \", \"_\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpeqlge76q.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    if consecutive_spaces > 2 {\n        result.push('-');\n\
    \    } else {\n        for _ in 0..consecutive_spaces {\n            result.push('_');\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f_\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpfjbjdfon.rs:45:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\" \", \"_\").replace(\"__\", \"-\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpbkak_lzj.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_counter\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_counter\
    \ += 1;\n            if space_counter > 2 {\n                result.push('-');\n\
    \                space_counter = 0;\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            result.push(c);\n            space_counter\
    \ = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpiym_4r4m.rs:33:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut last_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if last_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        last_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpfz35txbj.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if !prev_space {\n                result.push('_');\n\
    \                prev_space = true;\n            }\n            consecutive_spaces\
    \ += 1;\n        } else {\n            if consecutive_spaces > 2 {\n         \
    \       result.push('-');\n            }\n            result.push(c);\n      \
    \      prev_space = false;\n            consecutive_spaces = 0;\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp5bhfpy4t.rs:35:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces > 2 {\n                result.push('-');\n    \
    \            spaces = 0;\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            result.push(c);\n            spaces\
    \ = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp7yjehs2f.rs:33:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    if consecutive_spaces > 2 {\n        result.push('-');\n\
    \    } else {\n        for _ in 0..consecutive_spaces {\n            result.push('_');\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f_\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpaz02m5u5.rs:45:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count > 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmphgr6hjoe.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut space_count = 0;\n    for c in text.chars() {\n      \
    \  if c == ' ' {\n            if prev_space {\n                space_count +=\
    \ 1;\n            } else {\n                prev_space = true;\n             \
    \   space_count = 1;\n            }\n        } else {\n            if prev_space\
    \ {\n                if space_count > 2 {\n                    result.push('-');\n\
    \                } else {\n                    result.push('_');\n           \
    \     }\n            }\n            prev_space = false;\n            result.push(c);\n\
    \        }\n    }\n    if prev_space {\n        if space_count > 2 {\n       \
    \     result.push('-');\n        } else {\n            result.push('_');\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpv2wpssvo.rs:46:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces == 2 {\n                result.push('-');\n   \
    \             spaces = 0;\n            }\n        } else {\n            spaces\
    \ = 0;\n            if c == ' ' {\n                result.push('_');\n       \
    \     } else {\n                result.push(c);\n            }\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp2i5qemp_.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            consecutive_spaces += 1;\n            if consecutive_spaces\
    \ > 2 {\n                if !prev_space {\n                    result.push('-');\n\
    \                }\n            } else {\n                result.push('_');\n\
    \            }\n            prev_space = true;\n        } else {\n           \
    \ consecutive_spaces = 0;\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpcmtgjlx4.rs:37:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces == 1 {\n                result.push('_');\n   \
    \         } else if spaces == 2 {\n                result.push('-');\n       \
    \     }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpkbar4dl3.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    if consecutive_spaces > 2 {\n        result.push('-');\n\
    \    } else {\n        for _ in 0..consecutive_spaces {\n            result.push('_');\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f_\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp281mg1m2.rs:45:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut last_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if last_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        last_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp9jk9wa7h.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            consecutive_spaces = 0;\n     \
    \       prev_space = false;\n            result.push(c);\n        }\n    }\n \
    \   if consecutive_spaces > 2 {\n        result.push('-');\n    } else {\n   \
    \     for _ in 0..consecutive_spaces {\n            result.push('_');\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n \
    \   assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut last_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if last_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        last_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpgwmiictt.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 1 {\n                result.push('-');\n            } else if consecutive_spaces\
    \ == 1 {\n                result.push('_');\n            }\n            result.push(c);\n\
    \            prev_space = false;\n        }\n    }\n    if consecutive_spaces\
    \ > 1 {\n        result.push('-');\n    } else if consecutive_spaces == 1 {\n\
    \        result.push('_');\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f_\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpz21u4dft.rs:41:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_space = false;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            if prev_space {\n                consecutive_space\
    \ = true;\n            }\n            prev_space = true;\n            result.push('_');\n\
    \        } else {\n            if consecutive_space {\n                result.push('-');\n\
    \                consecutive_space = false;\n            }\n            prev_space\
    \ = false;\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow__-Dirty__-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp8md8gk5o.rs:35:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            consecutive_spaces = 0;\n     \
    \       prev_space = false;\n            result.push(c);\n        }\n    }\n \
    \   if consecutive_spaces > 2 {\n        result.push('-');\n    } else {\n   \
    \     for _ in 0..consecutive_spaces {\n            result.push('_');\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n \
    \   assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    if consecutive_spaces > 2 {\n        result.push('-');\n\
    \    } else {\n        for _ in 0..consecutive_spaces {\n            result.push('_');\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f_\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkq99bgyd.rs:45:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            consecutive_spaces = 0;\n     \
    \       prev_space = false;\n            result.push(c);\n        }\n    }\n \
    \   if consecutive_spaces > 2 {\n        result.push('-');\n    } else {\n   \
    \     for _ in 0..consecutive_spaces {\n            result.push('_');\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n \
    \   assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count > 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp2gphbyfc.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                prev_space = true;\n          \
    \      consecutive_spaces = 1;\n            }\n        } else {\n            if\
    \ prev_space {\n                if consecutive_spaces > 2 {\n                \
    \    result.push('-');\n                } else {\n                    result.push('_');\n\
    \                }\n                prev_space = false;\n            }\n     \
    \       result.push(c);\n        }\n    }\n    if prev_space {\n        if consecutive_spaces\
    \ > 2 {\n            result.push('-');\n        } else {\n            result.push('_');\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpnu9su936.rs:46:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if prev_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        prev_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpypbl5o1q.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if prev_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        prev_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp2wga_kah.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmphlk4yk4d.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_char\
    \ = ' ';\n    for c in text.chars() {\n        match c {\n            ' ' => {\n\
    \                if prev_char == ' ' {\n                    result.push('-');\n\
    \                } else {\n                    result.push('_');\n           \
    \     }\n            }\n            _ => result.push(c),\n        }\n        prev_char\
    \ = c;\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpt0kfejqn.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut last_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if last_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        last_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp947w12yf.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \                space_count = 0;\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            result.push(c);\n            space_count\
    \ = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpqf8smwu9.rs:33:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count > 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpx68rg34e.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\" \", \"_\").replace(\"__\", \"-\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp0xi_dw7_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces == 1 {\n                result.push('_');\n   \
    \         } else if spaces == 2 {\n                result.push('-');\n       \
    \     }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpqhu5czqr.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut space_count = 0;\n    for c in text.chars() {\n      \
    \  if c == ' ' {\n            if prev_space {\n                space_count +=\
    \ 1;\n            } else {\n                prev_space = true;\n             \
    \   space_count = 1;\n            }\n        } else {\n            if prev_space\
    \ {\n                if space_count > 2 {\n                    result.push('-');\n\
    \                } else {\n                    result.push('_');\n           \
    \     }\n            }\n            prev_space = false;\n            result.push(c);\n\
    \        }\n    }\n    if prev_space {\n        if space_count > 2 {\n       \
    \     result.push('-');\n        } else {\n            result.push('_');\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpnut45agr.rs:46:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            consecutive_spaces += 1;\n            if consecutive_spaces\
    \ > 2 {\n                if !prev_space {\n                    result.push('-');\n\
    \                }\n            } else {\n                result.push('_');\n\
    \            }\n            prev_space = true;\n        } else {\n           \
    \ consecutive_spaces = 0;\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpw007nhiv.rs:37:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count > 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmprqkh2_52.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp6sglt3y4.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            consecutive_spaces += 1;\n            if consecutive_spaces\
    \ > 2 {\n                if !prev_space {\n                    result.push('-');\n\
    \                }\n            } else {\n                result.push('_');\n\
    \            }\n            prev_space = true;\n        } else {\n           \
    \ consecutive_spaces = 0;\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpdj5xsiws.rs:37:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    if consecutive_spaces > 2 {\n        result.push('-');\n\
    \    } else {\n        for _ in 0..consecutive_spaces {\n            result.push('_');\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f_\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpjsitsu_z.rs:45:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces == 2 {\n                result.push('-');\n   \
    \             spaces = 0;\n            }\n        } else {\n            if spaces\
    \ == 1 {\n                result.push('_');\n            }\n            spaces\
    \ = 0;\n            result.push(c);\n        }\n    }\n    if spaces == 1 {\n\
    \        result.push('_');\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpnuhfzpba.rs:36:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_is_space\
    \ = false;\n    for c in text.chars() {\n        if c == ' ' {\n            if\
    \ prev_is_space {\n                result.push('-');\n            } else {\n \
    \               result.push('_');\n            }\n            prev_is_space =\
    \ true;\n        } else {\n            result.push(c);\n            prev_is_space\
    \ = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpz0s36qtl.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    if consecutive_spaces > 2 {\n        result.push('-');\n\
    \    } else {\n        for _ in 0..consecutive_spaces {\n            result.push('_');\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f_\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpky3wa6vu.rs:45:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp2akdwwqd.rs:38:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ == 1 {\n                result.push('_');\n            } else if consecutive_spaces\
    \ > 1 {\n                result.push('-');\n            }\n            result.push(c);\n\
    \            prev_space = false;\n        }\n    }\n    if consecutive_spaces\
    \ == 1 {\n        result.push('_');\n    } else if consecutive_spaces > 1 {\n\
    \        result.push('-');\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f_\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpwsfeaqby.rs:41:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if prev_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        prev_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp5zmuvqeq.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            consecutive_spaces = 0;\n     \
    \       prev_space = false;\n            result.push(c);\n        }\n    }\n \
    \   if consecutive_spaces > 2 {\n        result.push('-');\n    } else {\n   \
    \     for _ in 0..consecutive_spaces {\n            result.push('_');\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n \
    \   assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\" \", \"_\").replace(\"__\", \"-\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmppkmq3le0.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\" \", \"_\").replace(\"__\", \"-\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmplkodqn2u.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            result.push(c);\n            space_count\
    \ = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp_euigxy0.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \                space_count = 0;\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            result.push(c);\n            space_count\
    \ = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp25j85tdm.rs:33:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut last_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if last_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            last_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            result.push(c);\n            last_space\
    \ = false;\n        }\n    }\n    if consecutive_spaces > 2 {\n        result.push('-');\n\
    \    } else {\n        for _ in 0..consecutive_spaces {\n            result.push('_');\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f_\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpxkr5elyx.rs:45:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut last_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if last_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        last_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmptn_5ybgg.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            result.push(c);\n            space_count\
    \ = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp7zpod0jp.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    if consecutive_spaces > 2 {\n        result.push('-');\n\
    \    } else {\n        for _ in 0..consecutive_spaces {\n            result.push('_');\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f_\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp9phdyzrj.rs:45:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces == 1 {\n                result.push('_');\n   \
    \         } else if spaces > 2 {\n                result.push('-');\n        \
    \    }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpxtpazoi7.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count > 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpcglpv_jh.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            consecutive_spaces = 0;\n     \
    \       prev_space = false;\n            result.push(c);\n        }\n    }\n \
    \   if consecutive_spaces > 2 {\n        result.push('-');\n    } else {\n   \
    \     for _ in 0..consecutive_spaces {\n            result.push('_');\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n \
    \   assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    if consecutive_spaces > 2 {\n        result.push('-');\n\
    \    } else {\n        for _ in 0..consecutive_spaces {\n            result.push('_');\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f_\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpgsxj16mw.rs:45:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut prev_space = false;\n    let mut result = String::new();\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            if prev_space\
    \ {\n                result.push('-');\n            } else {\n               \
    \ result.push('_');\n            }\n            prev_space = true;\n        }\
    \ else {\n            result.push(c);\n            prev_space = false;\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmplj5_jfhe.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            count\
    \ += 1;\n            if count == 1 {\n                result.push('_');\n    \
    \        } else if count == 2 {\n                result.push('-');\n         \
    \   }\n        } else {\n            count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp3q_d51wf.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            consecutive_spaces = 0;\n     \
    \       prev_space = false;\n            result.push(c);\n        }\n    }\n \
    \   if consecutive_spaces > 2 {\n        result.push('-');\n    } else {\n   \
    \     for _ in 0..consecutive_spaces {\n            result.push('_');\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n \
    \   assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_char\
    \ = ' ';\n    let mut count = 0;\n    for char in text.chars() {\n        if char\
    \ == ' ' {\n            if prev_char == ' ' {\n                count += 1;\n \
    \           } else {\n                count = 1;\n            }\n            if\
    \ count > 2 {\n                result.push('-');\n            } else {\n     \
    \           result.push('_');\n            }\n        } else {\n            result.push(char);\n\
    \            count = 0;\n        }\n        prev_char = char;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp97ye70kp.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    if consecutive_spaces > 2 {\n        result.push('-');\n\
    \    } else {\n        for _ in 0..consecutive_spaces {\n            result.push('_');\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f_\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpwuyeypoi.rs:45:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_counter\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_counter\
    \ += 1;\n            if space_counter == 1 {\n                result.push('_');\n\
    \            } else if space_counter > 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_counter = 0;\n           \
    \ result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpt83nlgpt.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if prev_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        prev_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpqeao9yg2.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_space = false;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            if prev_space {\n                consecutive_space\
    \ = true;\n            }\n            prev_space = true;\n            result.push('_');\n\
    \        } else {\n            if consecutive_space {\n                result.push('-');\n\
    \                consecutive_space = false;\n            }\n            prev_space\
    \ = false;\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow__-Dirty__-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpno2q6c3x.rs:35:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\"  \", \"-\").replace(\" \", \"_\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpo5oorein.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if prev_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        prev_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp95ioz05l.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if prev_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        prev_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpuk6_i9ky.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    if consecutive_spaces > 2 {\n        result.push('-');\n\
    \    } else {\n        for _ in 0..consecutive_spaces {\n            result.push('_');\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f_\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp4f06e2mm.rs:45:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces > 2 {\n                result.push('-');\n    \
    \            spaces = 0;\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpyjnb23kb.rs:33:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 1 {\n                result.push('-');\n            } else if consecutive_spaces\
    \ == 1 {\n                result.push('_');\n            }\n            consecutive_spaces\
    \ = 0;\n            prev_space = false;\n            result.push(c);\n       \
    \ }\n    }\n    if consecutive_spaces > 1 {\n        result.push('-');\n    }\
    \ else if consecutive_spaces == 1 {\n        result.push('_');\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpnpvcci74.rs:43:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpeh1ffyk4.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_char\
    \ = ' ';\n    let mut space_count = 0;\n    for c in text.chars() {\n        if\
    \ c == ' ' {\n            space_count += 1;\n            if space_count > 2 {\n\
    \                continue;\n            }\n        } else {\n            space_count\
    \ = 0;\n        }\n        if prev_char == ' ' && c == ' ' {\n            result.push('-');\n\
    \        } else {\n            result.push(c);\n        }\n        prev_char =\
    \ c;\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n \
    \   assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp52k_atz9.rs:34:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            consecutive_spaces = 0;\n     \
    \       prev_space = false;\n            result.push(c);\n        }\n    }\n \
    \   if consecutive_spaces > 2 {\n        result.push('-');\n    } else {\n   \
    \     for _ in 0..consecutive_spaces {\n            result.push('_');\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n \
    \   assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    if consecutive_spaces > 2 {\n        result.push('-');\n\
    \    } else {\n        for _ in 0..consecutive_spaces {\n            result.push('_');\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f_\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp07358udj.rs:45:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            consecutive_spaces = 0;\n     \
    \       prev_space = false;\n            result.push(c);\n        }\n    }\n \
    \   if consecutive_spaces > 2 {\n        result.push('-');\n    } else {\n   \
    \     for _ in 0..consecutive_spaces {\n            result.push('_');\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n \
    \   assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if !prev_space {\n                result.push('_');\n\
    \                prev_space = true;\n            }\n            consecutive_spaces\
    \ += 1;\n        } else {\n            if consecutive_spaces > 2 {\n         \
    \       result.push('-');\n            }\n            result.push(c);\n      \
    \      prev_space = false;\n            consecutive_spaces = 0;\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp4p0zjz_4.rs:35:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_char\
    \ = ' ';\n    let mut space_count = 0;\n    for c in text.chars() {\n        if\
    \ c == ' ' {\n            space_count += 1;\n            if space_count > 2 {\n\
    \                continue;\n            }\n        } else {\n            space_count\
    \ = 0;\n        }\n        if prev_char == ' ' && c == ' ' {\n            result.push('-');\n\
    \        } else {\n            result.push(c);\n        }\n        prev_char =\
    \ c;\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n \
    \   assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpmde9n98t.rs:34:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut last_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if last_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        last_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpmii65xzw.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            consecutive_spaces = 0;\n     \
    \       prev_space = false;\n            result.push(c);\n        }\n    }\n \
    \   if consecutive_spaces > 2 {\n        result.push('-');\n    } else {\n   \
    \     for _ in 0..consecutive_spaces {\n            result.push('_');\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n \
    \   assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmprb2wl3wz.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces == 2 {\n                result.push('-');\n   \
    \             spaces = 0;\n            }\n        } else {\n            if spaces\
    \ == 1 {\n                result.push('_');\n            }\n            spaces\
    \ = 0;\n            result.push(c);\n        }\n    }\n    if spaces == 1 {\n\
    \        result.push('_');\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp_7tupybf.rs:36:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut last_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if last_char\
    \ == ' ' {\n                result.push('-');\n            } else {\n        \
    \        result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        last_char = c;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpp0lh9yqt.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces > 2 {\n                result.push('-');\n    \
    \            spaces = 0;\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            result.push(c);\n            spaces\
    \ = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpgnr239w0.rs:33:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmphx4k2wps.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \                space_count = 0;\n            }\n        } else {\n         \
    \   if space_count == 1 {\n                result.push('_');\n            }\n\
    \            result.push(c);\n            space_count = 0;\n        }\n    }\n\
    \    if space_count == 1 {\n        result.push('_');\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_YellowDirtyFellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"`',\
    \ /tmp/tmpigoy0627.rs:36:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if prev_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_H_a_n_i_f\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpcy7ds5qr.rs:38:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpaxkvklqj.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces > 2 {\n                result.push('-');\n    \
    \            spaces = 0;\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            result.push(c);\n            spaces\
    \ = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpy_8l8rib.rs:33:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces == 1 {\n                result.push('_');\n   \
    \         } else if spaces == 2 {\n                result.push('-');\n       \
    \     }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpy5gdn4fd.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n///\
    \ fix_spaces(\"Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") ==\
    \ \"_Example_2\"\n/// fix_spaces(\" Example   3\") == \"_Example-3\"\nfn fix_spaces(text:\
    \ String) -> String {\n    text.replace(\" \", \"_\").replace(\"__\", \"-\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpsi8pxxz_.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
