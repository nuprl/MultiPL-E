name: HumanEval_121_solution
language: rust
results:
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmphmma8zh9.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 != 0).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpfp1qwrp7.rs:7:74\n\
    \  |\n7 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_, x)|\
    \ x % 2 != 0).map(|(_, x)| x).sum()\n  |                                     \
    \                                   - ^ - {integer}\n  |                     \
    \                                                   |\n  |                   \
    \                                                     &&isize\n  |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `x`\n  |\n7 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n  |    \
    \                                                                    +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v % 2 != 0 {\n\
    \            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n % 2 != 0 {\n\
    \            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 != 0).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 != 0).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmp24q1h6d_.rs:7:74\n\
    \  |\n7 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_, x)|\
    \ x % 2 != 0).map(|(_, x)| x).sum()\n  |                                     \
    \                                   - ^ - {integer}\n  |                     \
    \                                                   |\n  |                   \
    \                                                     &&isize\n  |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `x`\n  |\n7 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n  |    \
    \                                                                    +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n % 2 != 0 {\n\
    \            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, &x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v % 2 != 0 {\n\
    \            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| n % 2 != 0).map(|(_, n)| n).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpj_u0khyq.rs:7:74\n\
    \  |\n7 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_, n)|\
    \ n % 2 != 0).map(|(_, n)| n).sum()\n  |                                     \
    \                                   - ^ - {integer}\n  |                     \
    \                                                   |\n  |                   \
    \                                                     &&isize\n  |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `n`\n  |\n7 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| *n % 2 != 0).map(|(_, n)| n).sum()\n  |    \
    \                                                                    +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v % 2 != 0 {\n\
    \            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v % 2 != 0 {\n\
    \            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v % 2 != 0 {\n\
    \            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v % 2 != 0 {\n\
    \            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n % 2 != 0 {\n\
    \            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v % 2 != 0 {\n\
    \            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (idx, val) in lst.iter().enumerate() {\n        if idx % 2 == 0 && val % 2 !=\
    \ 0 {\n            sum += val;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n % 2 != 0 {\n\
    \            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 != 0).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v % 2 != 0 {\n\
    \            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n % 2 != 0 {\n\
    \            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 != 0).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v % 2 != 0 {\n\
    \            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n % 2 != 0 {\n\
    \            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 != 0).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n % 2 != 0 {\n\
    \            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmp8adwg6zb.rs:7:74\n\
    \  |\n7 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_, x)|\
    \ x % 2 != 0).map(|(_, x)| x).sum()\n  |                                     \
    \                                   - ^ - {integer}\n  |                     \
    \                                                   |\n  |                   \
    \                                                     &&isize\n  |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `x`\n  |\n7 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n  |    \
    \                                                                    +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v % 2 != 0 {\n\
    \            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpg5oeimd4.rs:7:74\n\
    \  |\n7 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_, x)|\
    \ x % 2 != 0).map(|(_, x)| x).sum()\n  |                                     \
    \                                   - ^ - {integer}\n  |                     \
    \                                                   |\n  |                   \
    \                                                     &&isize\n  |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `x`\n  |\n7 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n  |    \
    \                                                                    +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 != 0).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v % 2 != 0 {\n\
    \            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v % 2 != 0 {\n\
    \            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, &x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 != 0).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v % 2 != 0 {\n\
    \            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n % 2 != 0 {\n\
    \            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v % 2 != 0 {\n\
    \            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 != 0).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 != 0).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 != 0).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n % 2 != 0 {\n\
    \            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmp819r6k12.rs:7:74\n\
    \  |\n7 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_, x)|\
    \ x % 2 != 0).map(|(_, x)| x).sum()\n  |                                     \
    \                                   - ^ - {integer}\n  |                     \
    \                                                   |\n  |                   \
    \                                                     &&isize\n  |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `x`\n  |\n7 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n  |    \
    \                                                                    +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| n % 2 != 0).map(|(_, n)| n).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmp3w8gk52y.rs:7:74\n\
    \  |\n7 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_, n)|\
    \ n % 2 != 0).map(|(_, n)| n).sum()\n  |                                     \
    \                                   - ^ - {integer}\n  |                     \
    \                                                   |\n  |                   \
    \                                                     &&isize\n  |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `n`\n  |\n7 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| *n % 2 != 0).map(|(_, n)| n).sum()\n  |    \
    \                                                                    +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v % 2 != 0 {\n\
    \            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpvejsnnqq.rs:7:74\n\
    \  |\n7 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_, x)|\
    \ x % 2 != 0).map(|(_, x)| x).sum()\n  |                                     \
    \                                   - ^ - {integer}\n  |                     \
    \                                                   |\n  |                   \
    \                                                     &&isize\n  |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `x`\n  |\n7 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n  |    \
    \                                                                    +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 != 0).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, &x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n % 2 != 0 {\n\
    \            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v % 2 != 0 {\n\
    \            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpigcjqzpq.rs:7:74\n\
    \  |\n7 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_, x)|\
    \ x % 2 != 0).map(|(_, x)| x).sum()\n  |                                     \
    \                                   - ^ - {integer}\n  |                     \
    \                                                   |\n  |                   \
    \                                                     &&isize\n  |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `x`\n  |\n7 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n  |    \
    \                                                                    +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n % 2 != 0 {\n\
    \            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpozwnxt52.rs:7:74\n\
    \  |\n7 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_, x)|\
    \ x % 2 != 0).map(|(_, x)| x).sum()\n  |                                     \
    \                                   - ^ - {integer}\n  |                     \
    \                                                   |\n  |                   \
    \                                                     &&isize\n  |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `x`\n  |\n7 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n  |    \
    \                                                                    +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n % 2 != 0 {\n\
    \            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, x)| {\n        if i % 2 == 0 && x % 2 != 0 {\n            acc + x\n\
    \        } else {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v % 2 != 0 {\n\
    \            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 != 0).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n % 2 != 0 {\n\
    \            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpk6wp7v3b.rs:7:74\n\
    \  |\n7 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_, x)|\
    \ x % 2 != 0).map(|(_, x)| x).sum()\n  |                                     \
    \                                   - ^ - {integer}\n  |                     \
    \                                                   |\n  |                   \
    \                                                     &&isize\n  |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `x`\n  |\n7 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n  |    \
    \                                                                    +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmphu889eyx.rs:7:74\n\
    \  |\n7 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_, x)|\
    \ x % 2 != 0).map(|(_, x)| x).sum()\n  |                                     \
    \                                   - ^ - {integer}\n  |                     \
    \                                                   |\n  |                   \
    \                                                     &&isize\n  |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `x`\n  |\n7 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n  |    \
    \                                                                    +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0,\
    \ |acc, (i, &x)| {\n        if i % 2 == 0 && x % 2 != 0 {\n            acc + x\n\
    \        } else {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 != 0).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 != 0).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmprllbzstj.rs:7:74\n\
    \  |\n7 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_, x)|\
    \ x % 2 != 0).map(|(_, x)| x).sum()\n  |                                     \
    \                                   - ^ - {integer}\n  |                     \
    \                                                   |\n  |                   \
    \                                                     &&isize\n  |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `x`\n  |\n7 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n  |    \
    \                                                                    +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmp8paxpx59.rs:7:74\n\
    \  |\n7 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_, x)|\
    \ x % 2 != 0).map(|(_, x)| x).sum()\n  |                                     \
    \                                   - ^ - {integer}\n  |                     \
    \                                                   |\n  |                   \
    \                                                     &&isize\n  |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `x`\n  |\n7 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n  |    \
    \                                                                    +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 != 0).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 != 0).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 != 0).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpe_ruqei1.rs:7:74\n\
    \  |\n7 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_, x)|\
    \ x % 2 != 0).map(|(_, x)| x).sum()\n  |                                     \
    \                                   - ^ - {integer}\n  |                     \
    \                                                   |\n  |                   \
    \                                                     &&isize\n  |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `x`\n  |\n7 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n  |    \
    \                                                                    +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n % 2 != 0 {\n\
    \            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v % 2 != 0 {\n\
    \            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 != 0).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 != 0).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v % 2 != 0 {\n\
    \            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| n % 2 != 0).map(|(_, n)| n).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmp1z0_atl2.rs:7:74\n\
    \  |\n7 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_, n)|\
    \ n % 2 != 0).map(|(_, n)| n).sum()\n  |                                     \
    \                                   - ^ - {integer}\n  |                     \
    \                                                   |\n  |                   \
    \                                                     &&isize\n  |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `n`\n  |\n7 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| *n % 2 != 0).map(|(_, n)| n).sum()\n  |    \
    \                                                                    +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| n % 2 != 0).map(|(_, n)| n).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpeyaprmn2.rs:7:74\n\
    \  |\n7 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_, n)|\
    \ n % 2 != 0).map(|(_, n)| n).sum()\n  |                                     \
    \                                   - ^ - {integer}\n  |                     \
    \                                                   |\n  |                   \
    \                                                     &&isize\n  |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `n`\n  |\n7 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| *n % 2 != 0).map(|(_, n)| n).sum()\n  |    \
    \                                                                    +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmp915x65yd.rs:7:74\n\
    \  |\n7 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_, x)|\
    \ x % 2 != 0).map(|(_, x)| x).sum()\n  |                                     \
    \                                   - ^ - {integer}\n  |                     \
    \                                                   |\n  |                   \
    \                                                     &&isize\n  |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `x`\n  |\n7 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n  |    \
    \                                                                    +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| n % 2 != 0).map(|(_, n)| n).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpz13_0pzu.rs:7:74\n\
    \  |\n7 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_, n)|\
    \ n % 2 != 0).map(|(_, n)| n).sum()\n  |                                     \
    \                                   - ^ - {integer}\n  |                     \
    \                                                   |\n  |                   \
    \                                                     &&isize\n  |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `n`\n  |\n7 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| *n % 2 != 0).map(|(_, n)| n).sum()\n  |    \
    \                                                                    +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmp1svsubi4.rs:7:74\n\
    \  |\n7 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_, x)|\
    \ x % 2 != 0).map(|(_, x)| x).sum()\n  |                                     \
    \                                   - ^ - {integer}\n  |                     \
    \                                                   |\n  |                   \
    \                                                     &&isize\n  |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `x`\n  |\n7 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n  |    \
    \                                                                    +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n % 2 != 0 {\n\
    \            sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v % 2 != 0 {\n\
    \            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| n % 2 != 0).map(|(_, n)| n).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpmholv5_o.rs:7:74\n\
    \  |\n7 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_, n)|\
    \ n % 2 != 0).map(|(_, n)| n).sum()\n  |                                     \
    \                                   - ^ - {integer}\n  |                     \
    \                                                   |\n  |                   \
    \                                                     &&isize\n  |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `n`\n  |\n7 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| *n % 2 != 0).map(|(_, n)| n).sum()\n  |    \
    \                                                                    +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpqjyms1jb.rs:7:74\n\
    \  |\n7 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_, x)|\
    \ x % 2 != 0).map(|(_, x)| x).sum()\n  |                                     \
    \                                   - ^ - {integer}\n  |                     \
    \                                                   |\n  |                   \
    \                                                     &&isize\n  |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `x`\n  |\n7 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n  |    \
    \                                                                    +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v % 2 != 0 {\n\
    \            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, num) in lst.iter().enumerate() {\n        if i % 2 == 0 && num % 2 != 0\
    \ {\n            sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v % 2 != 0 {\n\
    \            sum += v;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 != 0).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| n % 2 != 0).map(|(_, n)| n).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmp1pvlvlk8.rs:7:74\n\
    \  |\n7 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_, n)|\
    \ n % 2 != 0).map(|(_, n)| n).sum()\n  |                                     \
    \                                   - ^ - {integer}\n  |                     \
    \                                                   |\n  |                   \
    \                                                     &&isize\n  |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `n`\n  |\n7 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| *n % 2 != 0).map(|(_, n)| n).sum()\n  |    \
    \                                                                    +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, e) in lst.iter().enumerate() {\n        if i % 2 == 0 && e % 2 != 0 {\n\
    \            sum += e;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmp4k_2_sd9.rs:7:74\n\
    \  |\n7 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_, x)|\
    \ x % 2 != 0).map(|(_, x)| x).sum()\n  |                                     \
    \                                   - ^ - {integer}\n  |                     \
    \                                                   |\n  |                   \
    \                                                     &&isize\n  |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `x`\n  |\n7 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, x)| *x % 2 != 0).map(|(_, x)| x).sum()\n  |    \
    \                                                                    +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, &x)| x % 2 != 0).map(|(_, &x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
    \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321])\
    \ ==>0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
