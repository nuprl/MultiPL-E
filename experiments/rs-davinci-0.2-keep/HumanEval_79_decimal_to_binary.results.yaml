name: HumanEval_79_decimal_to_binary
language: rust
results:
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp8pt1nk6n.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut num = decimal;\n\
    \    while num > 0 {\n        binary.push_str(&(num % 2).to_string());\n     \
    \   num /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpl_mmz3ny.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ dec = decimal;\n    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n\
    \        dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpbg5al0dw.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ dec = decimal;\n    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n\
    \        dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpyj6zjbi5.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary = binary.chars().rev().collect();\n\
    \    format!(\"db{}db\", binary)\n}\n\nfn main() {\n    let candidate = decimal_to_binary;\n\
    \    assert_eq!(candidate(0), String::from(\"db0db\"));\n    assert_eq!(candidate(32),\
    \ String::from(\"db100000db\"));\n    assert_eq!(candidate(103), String::from(\"\
    db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"db1111db\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"dbdb\"`,\n right: `\"db0db\"`', /tmp/tmpbzgcrefj.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ dec = decimal;\n    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n\
    \        dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpp02w22_m.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut n = decimal;\n\
    \    while n > 0 {\n        binary.push_str(&(n % 2).to_string());\n        n\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n\
    \    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp9p77hix_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    format!(\"db{:b}db\", decimal)\n}\n\nfn main() {\n \
    \   let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut n = decimal;\n\
    \    while n > 0 {\n        binary.push_str(&(n % 2).to_string());\n        n\
    \ /= 2;\n    }\n    format!(\"db{}db\", binary.chars().rev().collect::<String>())\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"dbdb\"`,\n right: `\"db0db\"`', /tmp/tmpjgk3klbv.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmpxhnn7_32.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut num = decimal;\n\
    \    while num > 0 {\n        binary.push_str(&format!(\"{}\", num % 2));\n  \
    \      num /= 2;\n    }\n    format!(\"db{}db\", binary.chars().rev().collect::<String>())\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"dbdb\"`,\n right: `\"db0db\"`', /tmp/tmpeg46ou5c.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp_t7ujy2z.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmpyvvxo_6z.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&format!(\"{}\"\
    , decimal % 2));\n        decimal /= 2;\n    }\n    format!(\"db{}db\", binary.chars().rev().collect::<String>())\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"dbdb\"`,\n right: `\"db0db\"`', /tmp/tmphcdd4n_a.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ number = decimal;\n    while number > 0 {\n        binary.push_str(&(number\
    \ % 2).to_string());\n        number /= 2;\n    }\n    binary.push_str(\"db\"\
    );\n    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate =\
    \ decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpna6az_35.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmptlend68h.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ dec = decimal;\n    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n\
    \        dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpvabi53zu.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpcd4bv4q1.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmpo1chg_b7.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmp656e0nhs.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut result = String::from(\"db\");\n    let mut\
    \ n = decimal;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n\
    \        n /= 2;\n    }\n    result.push_str(\"db\");\n    result.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpdk5sa0jp.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    binary.push_str(\"db\");\n    while decimal > 0 {\n        binary.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    binary.push_str(\"db\"\
    );\n    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate =\
    \ decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmp_qqxu_pm.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmpzdr7w4ck.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpnz_ob4re.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    format!(\"db{:b}db\", decimal)\n}\n\nfn main() {\n \
    \   let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut n = decimal;\n\
    \    while n > 0 {\n        binary.push_str(&(n % 2).to_string());\n        n\
    \ /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmpvuftiwva.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut result = String::from(\"db\");\n    let mut\
    \ decimal = decimal;\n    while decimal > 0 {\n        result.push_str(&format!(\"\
    {}\", decimal % 2));\n        decimal /= 2;\n    }\n    result.push_str(\"db\"\
    );\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate =\
    \ decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpqd9uvleo.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    format!(\"db{:b}db\", decimal)\n}\n\nfn main() {\n \
    \   let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpkf4vkqbi.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut n = decimal;\n\
    \    while n > 0 {\n        binary.push_str(&(n % 2).to_string());\n        n\
    \ /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmpjrivio25.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpo67ntvpp.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    binary.push_str(\"db\");\n    while decimal > 0 {\n        binary.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    binary.push_str(\"db\"\
    );\n    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate =\
    \ decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpq5qya2h_.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut number\
    \ = decimal;\n    while number > 0 {\n        binary.push_str(&(number % 2).to_string());\n\
    \        number /= 2;\n    }\n    format!(\"db{}db\", binary.chars().rev().collect::<String>())\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"dbdb\"`,\n right: `\"db0db\"`', /tmp/tmpnrb_bamk.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    binary.push_str(\"\
    db\");\n    let mut n = decimal;\n    while n > 0 {\n        binary.push_str(&(n\
    \ % 2).to_string());\n        n /= 2;\n    }\n    binary.push_str(\"db\");\n \
    \   binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = decimal_to_binary;\n\
    \    assert_eq!(candidate(0), String::from(\"db0db\"));\n    assert_eq!(candidate(32),\
    \ String::from(\"db100000db\"));\n    assert_eq!(candidate(103), String::from(\"\
    db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"db1111db\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmp6vm77j_f.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmp3zs7fx7f.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpfqnly4ad.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut num = decimal;\n\
    \    while num > 0 {\n        binary.push_str(&format!(\"{}\", num % 2));\n  \
    \      num /= 2;\n    }\n    format!(\"db{}db\", binary.chars().rev().collect::<String>())\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"dbdb\"`,\n right: `\"db0db\"`', /tmp/tmpfyhs_xv8.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpzrwsbkyz.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmph_jfan2e.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    format!(\"db{}db\", binary.chars().rev().collect::<String>())\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"dbdb\"`,\n right: `\"db0db\"`', /tmp/tmp4f91covv.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp4sjo6m1s.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmpuz3939rc.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmpqttfylpi.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut number\
    \ = decimal;\n    while number > 0 {\n        binary.push_str(&(number % 2).to_string());\n\
    \        number /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\
    \nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp6sduouwp.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmpyfxdd3wx.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmp3078cwlq.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ dec = decimal;\n    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n\
    \        dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpxoisdfjl.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ n = decimal;\n    while n > 0 {\n        binary.push(if n % 2 == 0 { '0' } else\
    \ { '1' });\n        n /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpv9hmf41q.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut num = decimal;\n\
    \    while num > 0 {\n        binary.push_str(&(num % 2).to_string());\n     \
    \   num /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp315teome.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut n = decimal;\n\
    \    while n > 0 {\n        binary.push_str(&(n % 2).to_string());\n        n\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n\
    \    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp68z7n387.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    binary.push_str(\"\
    db\");\n    let mut num = decimal;\n    while num > 0 {\n        binary.push_str(&(num\
    \ % 2).to_string());\n        num /= 2;\n    }\n    binary.push_str(\"db\");\n\
    \    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = decimal_to_binary;\n\
    \    assert_eq!(candidate(0), String::from(\"db0db\"));\n    assert_eq!(candidate(32),\
    \ String::from(\"db100000db\"));\n    assert_eq!(candidate(103), String::from(\"\
    db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"db1111db\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpa1cefn29.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpz841jga6.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    binary.push_str(\"db\");\n    while decimal > 0 {\n        binary.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    binary.push_str(\"db\"\
    );\n    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate =\
    \ decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpg26v9uu5.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpt2k0o_ie.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut n = decimal;\n\
    \    while n > 0 {\n        binary.push_str(&(n % 2).to_string());\n        n\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n\
    \    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp_8wrm7_v.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut num = decimal;\n\
    \    while num > 0 {\n        binary.push_str(&(num % 2).to_string());\n     \
    \   num /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpjegbha46.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut n = decimal;\n\
    \    while n > 0 {\n        binary.push_str(&(n % 2).to_string());\n        n\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n\
    \    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdk227r44.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpyvlf8oor.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    binary.push_str(\"\
    db\");\n    let mut num = decimal;\n    while num > 0 {\n        binary.push_str(&(num\
    \ % 2).to_string());\n        num /= 2;\n    }\n    binary.push_str(\"db\");\n\
    \    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = decimal_to_binary;\n\
    \    assert_eq!(candidate(0), String::from(\"db0db\"));\n    assert_eq!(candidate(32),\
    \ String::from(\"db100000db\"));\n    assert_eq!(candidate(103), String::from(\"\
    db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"db1111db\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpl8thmewk.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ dec = decimal;\n    while dec > 0 {\n        binary.push(if dec % 2 == 0 { '0'\
    \ } else { '1' });\n        dec /= 2;\n    }\n    binary.push_str(\"db\");\n \
    \   binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = decimal_to_binary;\n\
    \    assert_eq!(candidate(0), String::from(\"db0db\"));\n    assert_eq!(candidate(32),\
    \ String::from(\"db100000db\"));\n    assert_eq!(candidate(103), String::from(\"\
    db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"db1111db\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmphthzva6t.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut result = String::from(\"db\");\n    let mut\
    \ number = decimal;\n    while number > 0 {\n        result.push_str(&(number\
    \ % 2).to_string());\n        number /= 2;\n    }\n    result.push_str(\"db\"\
    );\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate =\
    \ decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpod66dfee.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpbh9lpikc.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmppflgpch2.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmp71renq3f.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    format!(\"db{:b}db\", decimal)\n}\n\nfn main() {\n \
    \   let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut result = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        result.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    let mut result = result.chars().rev().collect::<String>();\n\
    \    result.insert(0, 'd');\n    result.push('b');\n    result\n}\n\nfn main()\
    \ {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"db\"`,\n right: `\"db0db\"`', /tmp/tmphgrv9gty.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut number\
    \ = decimal;\n    while number > 0 {\n        binary.push_str(&(number % 2).to_string());\n\
    \        number /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\
    \nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmphtg4u0f7.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    format!(\"db{}db\", binary.chars().rev().collect::<String>())\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"dbdb\"`,\n right: `\"db0db\"`', /tmp/tmpej507sq_.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmplwwn84ip.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    format!(\"db{:b}db\", decimal)\n}\n\nfn main() {\n \
    \   let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmpfmvptbfd.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpe4kx81os.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut num = decimal;\n\
    \    while num > 0 {\n        binary.push_str(&(num % 2).to_string());\n     \
    \   num /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpummljn2a.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut result = String::from(\"db\");\n    let mut\
    \ num = decimal;\n    while num > 0 {\n        result.push_str(&(num % 2).to_string());\n\
    \        num /= 2;\n    }\n    result.push_str(\"db\");\n    result.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpjjhhuv16.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpyahwtkqr.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ dec = decimal;\n    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n\
    \        dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmprm6r8s34.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmplvxq5u7i.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ num = decimal;\n    while num > 0 {\n        let remainder = num % 2;\n    \
    \    binary.push_str(&remainder.to_string());\n        num /= 2;\n    }\n    binary.push_str(\"\
    db\");\n    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmppcm9vqxu.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmpogv0u1rt.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut num = decimal;\n\
    \    while num > 0 {\n        binary.push_str(&(num % 2).to_string());\n     \
    \   num /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmpm7yik1hl.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ dec = decimal;\n    while dec > 0 {\n        binary.push_str(&((dec % 2).to_string()));\n\
    \        dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpw9ewp705.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut num = decimal;\n\
    \    while num > 0 {\n        binary.push_str(&(num % 2).to_string());\n     \
    \   num /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpwu9gekbg.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ n = decimal;\n    while n > 0 {\n        binary.push_str(&((n % 2).to_string()));\n\
    \        n /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmp1ozit7mu.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmpqgw591m0.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ dec = decimal;\n    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n\
    \        dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpvdn3d5ie.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    format!(\"db{:b}db\", decimal)\n}\n\nfn main() {\n \
    \   let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ num = decimal;\n    while num > 0 {\n        binary.push_str(&(num % 2).to_string());\n\
    \        num /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpq9q_c9ou.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    binary.push_str(\"\
    db\");\n    let mut num = decimal;\n    while num > 0 {\n        binary.push_str(&(num\
    \ % 2).to_string());\n        num /= 2;\n    }\n    binary.push_str(\"db\");\n\
    \    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = decimal_to_binary;\n\
    \    assert_eq!(candidate(0), String::from(\"db0db\"));\n    assert_eq!(candidate(32),\
    \ String::from(\"db100000db\"));\n    assert_eq!(candidate(103), String::from(\"\
    db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"db1111db\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpz8xv_z6z.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmpqpuk0wfe.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    format!(\"db{:b}db\", decimal)\n}\n\nfn main() {\n \
    \   let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmpmm58veg_.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ dec = decimal;\n    while dec > 0 {\n        binary.push_str(&((dec % 2).to_string()));\n\
    \        dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmp2ompt5p4.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmp3us9ui2o.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut result = String::from(\"db\");\n    let mut\
    \ n = decimal;\n    while n > 0 {\n        result.push(if n % 2 == 0 { '0' } else\
    \ { '1' });\n        n /= 2;\n    }\n    result.push_str(\"db\");\n    result.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpd9ab5t0f.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&format!(\"{}\"\
    , decimal % 2));\n        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpxmaq0rws.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut num = decimal;\n\
    \    while num > 0 {\n        binary.push_str(&(num % 2).to_string());\n     \
    \   num /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmptivj726f.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmp5wp0eye8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut result = String::from(\"db\");\n    let mut\
    \ decimal = decimal;\n    while decimal > 0 {\n        result.push_str(&format!(\"\
    {}\", decimal % 2));\n        decimal /= 2;\n    }\n    result.push_str(\"db\"\
    );\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate =\
    \ decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmp97w2u4o4.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut n = decimal;\n\
    \    while n > 0 {\n        binary.push_str(&((n % 2).to_string()));\n       \
    \ n /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpg0xvbvpy.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpjuoc9w0l.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut num = decimal;\n\
    \    while num > 0 {\n        binary.push_str(&(num % 2).to_string());\n     \
    \   num /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp4hpvbq5e.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut result = String::from(\"db\");\n    let mut\
    \ num = decimal;\n    while num > 0 {\n        result.push_str(&(num % 2).to_string());\n\
    \        num /= 2;\n    }\n    result.push_str(\"db\");\n    result.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpk4kdhzln.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    format!(\"db{}db\", binary.chars().rev().collect::<String>())\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"dbdb\"`,\n right: `\"db0db\"`', /tmp/tmp6yotk994.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmp79h2ne9a.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpzbp73osu.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmpz7pikt31.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&((dec % 2).to_string()));\n   \
    \     dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmpq9242uw8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpi5he8vda.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmp1t7aqay5.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&format!(\"{}\"\
    , decimal % 2));\n        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpy9uvxoj5.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    binary.push_str(\"\
    db\");\n    let mut n = decimal;\n    while n > 0 {\n        let r = n % 2;\n\
    \        n = n / 2;\n        binary.push_str(&r.to_string());\n    }\n    binary.push_str(\"\
    db\");\n    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmp9fk7mrl8.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ dec = decimal;\n    while dec > 0 {\n        binary.push_str(&format!(\"{}\"\
    , dec % 2));\n        dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmprr66k6e6.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp2umlmue9.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    format!(\"db{:b}db\", decimal)\n}\n\nfn main() {\n \
    \   let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp1z72zuz5.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut num = decimal;\n\
    \    while num > 0 {\n        binary.push_str(&(num % 2).to_string());\n     \
    \   num /= 2;\n    }\n    format!(\"db{}db\", binary.chars().rev().collect::<String>())\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"dbdb\"`,\n right: `\"db0db\"`', /tmp/tmp5na0m5ag.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdxx0abgl.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ dec = decimal;\n    while dec > 0 {\n        binary.push_str(&((dec % 2).to_string()));\n\
    \        dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpsp63t5u6.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    format!(\"db{:b}db\", decimal)\n}\n\nfn main() {\n \
    \   let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ dec = decimal;\n    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n\
    \        dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmp6gvhvi_v.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    binary.push_str(\"\
    db\");\n    let mut n = decimal;\n    while n > 0 {\n        binary.push_str(&(n\
    \ % 2).to_string());\n        n /= 2;\n    }\n    binary.push_str(\"db\");\n \
    \   binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = decimal_to_binary;\n\
    \    assert_eq!(candidate(0), String::from(\"db0db\"));\n    assert_eq!(candidate(32),\
    \ String::from(\"db100000db\"));\n    assert_eq!(candidate(103), String::from(\"\
    db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"db1111db\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpxw1n5d36.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ num = decimal;\n    while num > 0 {\n        binary.push(if num % 2 == 0 { '0'\
    \ } else { '1' });\n        num /= 2;\n    }\n    binary.push_str(\"db\");\n \
    \   binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = decimal_to_binary;\n\
    \    assert_eq!(candidate(0), String::from(\"db0db\"));\n    assert_eq!(candidate(32),\
    \ String::from(\"db100000db\"));\n    assert_eq!(candidate(103), String::from(\"\
    db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"db1111db\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpourkdcrj.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut n = decimal;\n\
    \    while n > 0 {\n        binary.push_str(&(n % 2).to_string());\n        n\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n\
    \    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpagc_kj7z.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpxl_un2il.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpu4b2wego.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp0zbm5xpt.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmp7twmfird.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    binary.push_str(\"\
    db\");\n    let mut dec = decimal;\n    while dec > 0 {\n        binary.push_str(&(dec\
    \ % 2).to_string());\n        dec /= 2;\n    }\n    binary.push_str(\"db\");\n\
    \    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = decimal_to_binary;\n\
    \    assert_eq!(candidate(0), String::from(\"db0db\"));\n    assert_eq!(candidate(32),\
    \ String::from(\"db100000db\"));\n    assert_eq!(candidate(103), String::from(\"\
    db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"db1111db\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmphbnxa27g.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut result = String::from(\"db\");\n    let mut\
    \ num = decimal;\n    while num > 0 {\n        result.push_str(&(num % 2).to_string());\n\
    \        num /= 2;\n    }\n    result.push_str(\"db\");\n    result.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmp123vchmq.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&format!(\"{}\", dec % 2));\n  \
    \      dec /= 2;\n    }\n    format!(\"db{}db\", binary.chars().rev().collect::<String>())\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"dbdb\"`,\n right: `\"db0db\"`', /tmp/tmp3ua_cy0s.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ dec = decimal;\n    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n\
    \        dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpli3t1v2h.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ remainder = decimal;\n    while remainder > 0 {\n        binary.push_str(&(remainder\
    \ % 2).to_string());\n        remainder /= 2;\n    }\n    binary.push_str(\"db\"\
    );\n    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate =\
    \ decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmp8wag0wdd.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut n = decimal;\n\
    \    while n > 0 {\n        binary.push_str(&(n % 2).to_string());\n        n\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n\
    \    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp6lkz_nxg.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmpohy2yf74.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ dec = decimal;\n    while dec > 0 {\n        binary.push_str(&((dec % 2).to_string()));\n\
    \        dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpwt4pb5bz.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut n = decimal;\n\
    \    while n > 0 {\n        binary.push_str(&(n % 2).to_string());\n        n\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n\
    \    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpruhdaw6f.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpjl1j6txy.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ dec = decimal;\n    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n\
    \        dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmptj8jxfb5.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpzxuurqpi.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut n = decimal;\n\
    \    while n > 0 {\n        binary.push_str(&(n % 2).to_string());\n        n\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n\
    \    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpk4tq58q5.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut result = String::from(\"db\");\n    let mut\
    \ decimal = decimal;\n    while decimal > 0 {\n        result.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    result.push_str(\"db\"\
    );\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate =\
    \ decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpzo54wg5o.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut n = decimal;\n\
    \    while n > 0 {\n        binary.push_str(&format!(\"{}\", n % 2));\n      \
    \  n /= 2;\n    }\n    format!(\"db{}db\", binary.chars().rev().collect::<String>())\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"dbdb\"`,\n right: `\"db0db\"`', /tmp/tmpr_b20iwd.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    format!(\"db{:b}db\", decimal)\n}\n\nfn main() {\n \
    \   let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ num = decimal;\n    while num > 0 {\n        binary.push_str(&(num % 2).to_string());\n\
    \        num /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmplrr5ijcl.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    format!(\"db{:b}db\", decimal)\n}\n\nfn main() {\n \
    \   let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&format!(\"{}\", dec % 2));\n  \
    \      dec /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpzv3j3mzl.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp6knk0s5l.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ dec = decimal;\n    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n\
    \        dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmp20v71djv.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpri69m51t.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut result = String::from(\"db\");\n    let mut\
    \ decimal = decimal;\n    while decimal > 0 {\n        result.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    result.push_str(\"db\"\
    );\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate =\
    \ decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpfqk0lpis.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ num = decimal;\n    while num > 0 {\n        binary.push_str(&(num % 2).to_string());\n\
    \        num /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpmqpre7rj.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ number = decimal;\n    while number > 0 {\n        binary.push_str(&(number\
    \ % 2).to_string());\n        number /= 2;\n    }\n    binary.push_str(\"db\"\
    );\n    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate =\
    \ decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmp5_mijqso.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    binary.push_str(\"\
    db\");\n    let mut n = decimal;\n    while n > 0 {\n        binary.push_str(&(n\
    \ % 2).to_string());\n        n /= 2;\n    }\n    binary.push_str(\"db\");\n \
    \   binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = decimal_to_binary;\n\
    \    assert_eq!(candidate(0), String::from(\"db0db\"));\n    assert_eq!(candidate(32),\
    \ String::from(\"db100000db\"));\n    assert_eq!(candidate(103), String::from(\"\
    db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"db1111db\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpq9ts4hxd.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ n = decimal;\n    while n > 0 {\n        binary.push_str(&(n % 2).to_string());\n\
    \        n /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpdoxfpqav.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp_c9w8gsw.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpnn_n8jp3.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmpjujjub25.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ dec = decimal;\n    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n\
    \        dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmp5m1if4ez.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    let mut binary = binary.chars().rev().collect::<String>();\n\
    \    binary.insert(0, 'd');\n    binary.push('b');\n    binary\n}\n\nfn main()\
    \ {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"db\"`,\n right: `\"db0db\"`', /tmp/tmpxxa78mpe.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    binary.push_str(\"\
    db\");\n    let mut num = decimal;\n    while num > 0 {\n        binary.push_str(&(num\
    \ % 2).to_string());\n        num /= 2;\n    }\n    binary.push_str(\"db\");\n\
    \    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = decimal_to_binary;\n\
    \    assert_eq!(candidate(0), String::from(\"db0db\"));\n    assert_eq!(candidate(32),\
    \ String::from(\"db100000db\"));\n    assert_eq!(candidate(103), String::from(\"\
    db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"db1111db\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpxoqq7gj4.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ dec = decimal;\n    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n\
    \        dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpcevnjo3t.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ dec = decimal;\n    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n\
    \        dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpwtwupc85.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    format!(\"db{}db\", binary.chars().rev().collect::<String>())\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"dbdb\"`,\n right: `\"db0db\"`', /tmp/tmpror8cp6d.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ dec = decimal;\n    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n\
    \        dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpftnuuzq3.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut num = decimal;\n\
    \    while num > 0 {\n        binary.push_str(&(num % 2).to_string());\n     \
    \   num /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmpn2up3em1.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut n = decimal;\n\
    \    while n > 0 {\n        binary.push_str(&(n % 2).to_string());\n        n\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n\
    \    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpexdtuib6.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    format!(\"db{:b}db\", decimal)\n}\n\nfn main() {\n \
    \   let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpzqve6dy1.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    binary.push_str(\"\
    db\");\n    let mut n = decimal;\n    while n > 0 {\n        binary.push_str(&(n\
    \ % 2).to_string());\n        n /= 2;\n    }\n    binary.push_str(\"db\");\n \
    \   binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = decimal_to_binary;\n\
    \    assert_eq!(candidate(0), String::from(\"db0db\"));\n    assert_eq!(candidate(32),\
    \ String::from(\"db100000db\"));\n    assert_eq!(candidate(103), String::from(\"\
    db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"db1111db\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpz1jjaqj4.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp_u064nbt.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ number = decimal;\n    while number > 0 {\n        binary.push_str(&(number\
    \ % 2).to_string());\n        number /= 2;\n    }\n    binary.push_str(\"db\"\
    );\n    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate =\
    \ decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpk899rhlm.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ n = decimal;\n    while n > 0 {\n        binary.push_str(&((n % 2).to_string()));\n\
    \        n /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpxu2lceq5.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmppgfyi83y.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    let mut remainder = 0;\n    let mut count = 0;\n    binary.push_str(\"\
    db\");\n    while decimal > 0 {\n        remainder = decimal % 2;\n        decimal\
    \ = decimal / 2;\n        if remainder == 1 {\n            binary.push_str(\"\
    1\");\n        } else {\n            binary.push_str(\"0\");\n        }\n    \
    \    count += 1;\n    }\n    for _ in 0..(8 - count) {\n        binary.push_str(\"\
    0\");\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd00000000bd\"`,\n right: `\"db0db\"`', /tmp/tmpxrakhpdd.rs:34:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmprpfkbx6r.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ decimal = decimal;\n    while decimal != 0 {\n        binary.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    binary.push_str(\"db\"\
    );\n    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate =\
    \ decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmp1tjv24g8.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ dec = decimal;\n    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n\
    \        dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmptxrsjexk.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmpdbpo0a6o.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmps9rfaq6h.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    format!(\"db{:b}db\", decimal)\n}\n\nfn main() {\n \
    \   let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    binary.push_str(\"\
    db\");\n    let mut dec = decimal;\n    while dec > 0 {\n        binary.push_str(&(dec\
    \ % 2).to_string());\n        dec /= 2;\n    }\n    binary.push_str(\"db\");\n\
    \    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = decimal_to_binary;\n\
    \    assert_eq!(candidate(0), String::from(\"db0db\"));\n    assert_eq!(candidate(32),\
    \ String::from(\"db100000db\"));\n    assert_eq!(candidate(103), String::from(\"\
    db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"db1111db\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmphylljv87.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut n = decimal;\n\
    \    while n > 0 {\n        binary.push_str(&(n % 2).to_string());\n        n\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n\
    \    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpwl_0vm0v.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ dec = decimal;\n    while dec > 0 {\n        binary.push_str(&((dec % 2).to_string()));\n\
    \        dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpfzgwk50i.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut num = decimal;\n\
    \    while num > 0 {\n        binary.push_str(&(num % 2).to_string());\n     \
    \   num /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmp6c0ulfto.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpj9sd334s.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmpcjmefidz.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp38h_hyz3.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    binary.push_str(\"\
    db\");\n    let mut num = decimal;\n    while num > 0 {\n        binary.push_str(&(num\
    \ % 2).to_string());\n        num /= 2;\n    }\n    binary.push_str(\"db\");\n\
    \    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = decimal_to_binary;\n\
    \    assert_eq!(candidate(0), String::from(\"db0db\"));\n    assert_eq!(candidate(32),\
    \ String::from(\"db100000db\"));\n    assert_eq!(candidate(103), String::from(\"\
    db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"db1111db\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmp7doo3xi2.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut number\
    \ = decimal;\n    while number > 0 {\n        binary.push_str(&(number % 2).to_string());\n\
    \        number /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmp_xcbhtwe.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpaz7g0fyr.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    binary.push_str(\"db\");\n    while decimal > 0 {\n        binary.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    binary.push_str(\"db\"\
    );\n    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate =\
    \ decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmplxhjwevj.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmp03iuytnm.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&format!(\"{}\"\
    , decimal % 2));\n        decimal /= 2;\n    }\n    format!(\"db{}db\", binary.chars().rev().collect::<String>())\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"dbdb\"`,\n right: `\"db0db\"`', /tmp/tmp6684onoc.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ dec = decimal;\n    while dec > 0 {\n        binary.push_str(&format!(\"{}\"\
    , dec % 2));\n        dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpe5m0cdng.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmps90wu4fs.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut dec = decimal;\n\
    \    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n     \
    \   dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bd\"`,\n right: `\"db0db\"`', /tmp/tmpja05wx84.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::from(\"db\");\n    let mut\
    \ dec = decimal;\n    while dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n\
    \        dec /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmp1ctukwsz.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp0ku47d98.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    let mut n = decimal;\n\
    \    while n > 0 {\n        binary.push_str(&(n % 2).to_string());\n        n\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n\
    \    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdi_wn_1z.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfn decimal_to_binary(decimal:\
    \ isize) -> String {\n    let mut binary = String::new();\n    binary.push_str(\"\
    db\");\n    let mut num = decimal;\n    while num > 0 {\n        binary.push_str(&(num\
    \ % 2).to_string());\n        num /= 2;\n    }\n    binary.push_str(\"db\");\n\
    \    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = decimal_to_binary;\n\
    \    assert_eq!(candidate(0), String::from(\"db0db\"));\n    assert_eq!(candidate(32),\
    \ String::from(\"db100000db\"));\n    assert_eq!(candidate(103), String::from(\"\
    db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"db1111db\"));\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpiw26fyw5.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
