name: HumanEval_97_multiply
language: rust
results:
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpj69kixrx.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp7nf4_zke.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpwl0ocn1h.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a % 10;\n    let\
    \ b = b % 10;\n    a * b\n}\n\nfn main() {\n    let candidate = multiply;\n  \
    \  assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n\
    \    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14, -15),\
    \ 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17, 27),\
    \ 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp1r4b59z4.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut a = a;\n    let\
    \ mut b = b;\n    if a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n       \
    \ b = -b;\n    }\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpe6wv5uv0.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpncf2d772.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmptrrtdl4o.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp0vldjire.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp1kzzyasw.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp6n7pd7e6.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpwvo0t2pt.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut a = a;\n    let\
    \ mut b = b;\n    if a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n       \
    \ b = -b;\n    }\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpmrcmh2x3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpsymhou15.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp4vhsy7on.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp5ktalqgr.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpnf0r_p5p.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a_unit = a % 10;\n\
    \    let b_unit = b % 10;\n    a_unit * b_unit\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp6ih_8qlk.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs()\
    \ % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp4ebnd0ao.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp8qgq82uj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpcna50xwb.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut a = a;\n    let\
    \ mut b = b;\n    if a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n       \
    \ b = -b;\n    }\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp6yqo2k2h.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpt42zv6ga.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp9ueizx_b.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpjc4ea76p.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpos3n2ye_.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpzpyh165_.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpxjmwhjai.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp_g4su5pl.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpkjpamz7u.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpqb7uj1_o.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpiropk8hj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp_zcs_f0n.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpe5wiu7na.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp4skb3mc1.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp7vntm90i.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmps0_4j_td.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp5mkwa701.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmple2y6_ki.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpjvmbputd.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpbrb51vab.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpx1dwqzlx.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpi6xvpb5v.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp_ii4a7za.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpa1rof3c5.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpt7huv9po.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpo1ive5jj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpd27k_afu.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp0vahwrej.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp727hxulc.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmptdleczdw.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpwhzh2c2e.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs()\
    \ % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpdfo4ayux.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpoi10yycn.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp_8bm7hw4.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpkdyxg2xs.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpj2nqiimp.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpsqeinjr6.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp1r5xrgix.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs()\
    \ % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpnkh8shor.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpghoo1bja.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut a = a;\n    let\
    \ mut b = b;\n    if a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n       \
    \ b = -b;\n    }\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpovtw5qbs.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpc7weeh4m.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpfi1hp_5b.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a % 10;\n    let\
    \ b = b % 10;\n    a * b\n}\n\nfn main() {\n    let candidate = multiply;\n  \
    \  assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n\
    \    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14, -15),\
    \ 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17, 27),\
    \ 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpav8ujm2b.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp81s3kwqg.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpo3mxi4lz.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpftj4ug8c.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpx3zjgn1k.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp3n598etu.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpl6dxjnak.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpi28axlmi.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpmar0gl47.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp9i9kbewc.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpe2ifuvvc.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpvo0tqltr.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp5bliizqy.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp8_t6547e.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpvfzkczha.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut a = a;\n    let\
    \ mut b = b;\n    if a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n       \
    \ b = -b;\n    }\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpv_niqx87.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpkoekfr1y.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmprhoqjfz1.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpqii3enus.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpld0_ub68.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut a = a;\n    let\
    \ mut b = b;\n    if a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n       \
    \ b = -b;\n    }\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpd3jnpm0d.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpb0ca6e35.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut a = a;\n    let\
    \ mut b = b;\n    if a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n       \
    \ b = -b;\n    }\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmptqtlakp2.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpvjft_bo2.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmphtp51m4u.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpv3qdwhqg.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpt_k3jimk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpc2nz2z6v.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut a = a;\n    let\
    \ mut b = b;\n    if a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n       \
    \ b = -b;\n    }\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a.abs() % 10) * (b.abs()\
    \ % 10)\n}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
    \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpnjpluf03.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut a = a;\n    let\
    \ mut b = b;\n    if a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n       \
    \ b = -b;\n    }\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmplef82wmh.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut a = a;\n    let\
    \ mut b = b;\n    if a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n       \
    \ b = -b;\n    }\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpgc63g3yz.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpi10in3ch.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut a = a;\n    let\
    \ mut b = b;\n    if a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n       \
    \ b = -b;\n    }\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut a = a;\n    let\
    \ mut b = b;\n    if a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n       \
    \ b = -b;\n    }\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut a = a;\n    let\
    \ mut b = b;\n    if a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n       \
    \ b = -b;\n    }\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp1wz6pyq8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpfuwzpmn8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut a = a;\n    let\
    \ mut b = b;\n    if a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n       \
    \ b = -b;\n    }\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp5iheozk7.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpj3blqifr.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpe6xoakie.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpuasbkmq9.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpisozk5gx.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmphtr1d3jj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpu0nwt_z6.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut a = a.abs();\n\
    \    let mut b = b.abs();\n    let mut result = 0;\n    while a > 0 {\n      \
    \  result += b % 10;\n        a /= 10;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = multiply;\n    assert_eq!(candidate(148, 412), 16);\n   \
    \ assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n\
    \    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n\
    \    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n\
    \    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `16`', /tmp/tmp651m_5e9.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpnweg1avt.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpg9or_6su.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmptuoxf2el.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpeag63esc.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp7dw9r2k1.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp_uihhwxh.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut a = a;\n    let\
    \ mut b = b;\n    if a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n       \
    \ b = -b;\n    }\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut a = a;\n    let\
    \ mut b = b;\n    if a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n       \
    \ b = -b;\n    }\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpmkll4wqt.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmphy87d257.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp55284kfm.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpfkuw79e_.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpn_to59vn.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp879gqqon.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut a = a;\n    let\
    \ mut b = b;\n    if a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n       \
    \ b = -b;\n    }\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpd9wszn7w.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpo338w9ix.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut a = a;\n    let\
    \ mut b = b;\n    if a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n       \
    \ b = -b;\n    }\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpct6es8eb.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpatoyp6w8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmps1z8ejan.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpedfavpuw.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp7a8488jq.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpq1gfukp7.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp7r3lnxxo.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpxxu6po2h.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmppgu2bgz2.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp8ot_v_xp.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp1tzczjve.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpnwe11vyt.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let a = a.abs();\n    let\
    \ b = b.abs();\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate =\
    \ multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpca6t8qx3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpzokvdtia.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmphpxw157f.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmppjt03nrw.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmphdp2j23_.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpd2xykqwn.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpxce29mn2.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp9ef8xcxk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpw9tq44ki.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpw9lvv9k7.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmpc3j4i4fk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    let mut a = a;\n    let\
    \ mut b = b;\n    if a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n       \
    \ b = -b;\n    }\n    (a % 10) * (b % 10)\n}\n\nfn main() {\n    let candidate\
    \ = multiply;\n    assert_eq!(candidate(148, 412), 16);\n    assert_eq!(candidate(19,\
    \ 28), 72);\n    assert_eq!(candidate(2020, 1851), 0);\n    assert_eq!(candidate(14,\
    \ -15), 20);\n    assert_eq!(candidate(76, 67), 42);\n    assert_eq!(candidate(17,\
    \ 27), 49);\n    assert_eq!(candidate(0, 1), 0);\n    assert_eq!(candidate(0,\
    \ 0), 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmp89i6oqnx.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Complete the function that takes two integers and returns \n/// the\
    \ product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
    /// multiply(148, 412) should return 16.\n/// multiply(19, 28) should return 72.\n\
    /// multiply(2020, 1851) should return 0.\n/// multiply(14,-15) should return\
    \ 20.\nfn multiply(a: isize, b: isize) -> isize {\n    (a % 10) * (b % 10)\n}\n\
    \nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148, 412),\
    \ 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
    \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
    \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
    \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `20`', /tmp/tmplmebtsw0.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
