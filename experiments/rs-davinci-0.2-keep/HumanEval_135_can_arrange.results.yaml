name: HumanEval_135_can_arrange
language: rust
results:
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    for i in 0..arr.len() - 1 {\n        if arr[i] >= arr[i + 1] {\n        \
    \    max_index = i as isize;\n        }\n    }\n    max_index\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `3`', /tmp/tmpnhc87kjd.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &x) in arr.iter().enumerate() {\n  \
    \      if x > max_value {\n            max_value = x;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp5h3km13y.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    if arr.len() == 0 {\n\
    \        return -1;\n    }\n    let mut max_index = 0;\n    let mut max_value\
    \ = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > max_value {\n  \
    \          max_value = arr[i];\n            max_index = i;\n        }\n    }\n\
    \    if max_index == arr.len() - 1 {\n        return -1;\n    }\n    for i in\
    \ 0..max_index {\n        if arr[i] > arr[max_index + 1] {\n            return\
    \ -1;\n        }\n    }\n    max_index as isize\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `3`', /tmp/tmpoealvwfu.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpb4zwmpbx.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &value) in arr.iter().enumerate() {\n\
    \        if value > max_value {\n            max_value = value;\n            max_index\
    \ = i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpmb1o3rv6.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpbomu3jrm.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = std::isize::MIN;\n    for i in (0..arr.len()).rev() {\n\
    \        if arr[i] >= max_value {\n            max_value = arr[i];\n         \
    \   max_index = i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n\
    \    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp6bkfbjlc.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpc_vpriu2.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    for i in 0..arr.len() {\n        if i == 0 {\n            max_index = 0;\n\
    \        } else if arr[i] < arr[i - 1] {\n            if i - 1 > max_index {\n\
    \                max_index = i - 1;\n            }\n        }\n    }\n    max_index\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp0v_kja1u.rs:9:25\n\
    \  |\n9 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp0v_kja1u.rs:19:5\n   |\n8  | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n19 |     max_index\n   |     ^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     max_index.try_into().unwrap()\n\
    \   |              ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = arr[0];\n\
    \    let mut max_index = 0;\n    for (i, &x) in arr.iter().enumerate() {\n   \
    \     if x > max {\n            max = x;\n            max_index = i;\n       \
    \ }\n    }\n    if max_index == arr.len() - 1 {\n        return -1;\n    }\n \
    \   let mut max_index = max_index as isize;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if i == max_index as usize {\n            continue;\n        }\n\
    \        if x > arr[max_index as usize] {\n            return -1;\n        }\n\
    \    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n  \
    \  assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `3`', /tmp/tmp8oc9irjs.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &x) in arr.iter().enumerate() {\n  \
    \      if x > max_value {\n            max_value = x;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpyguvhrmb.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for i in (0..arr.len()).rev() {\n        if arr[i]\
    \ >= max {\n            max = arr[i];\n            max_index = i as isize;\n \
    \       }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpntakeav5.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = arr[0];\n    for i in 1..arr.len() {\n        if arr[i]\
    \ > max_value {\n            max_value = arr[i];\n            max_index = i as\
    \ isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp5gyci5sy.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    for i in 0..arr.len() {\n        if i == 0 {\n            continue;\n   \
    \     }\n        if arr[i] <= arr[i - 1] {\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_idx = -1;\n    for (i, &x) in arr.iter().enumerate() {\n      \
    \  if x > max {\n            max = x;\n            max_idx = i as isize;\n   \
    \     }\n    }\n    max_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp3atj50sj.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &v) in arr.iter().enumerate() {\n  \
    \      if v > max_value {\n            max_value = v;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpv7q529d1.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for i in 0..arr.len() {\n        if arr[i] >\
    \ max_value {\n            max_value = arr[i];\n            max_index = i as isize;\n\
    \        }\n        if arr[i] < max_value {\n            return i as isize - 1;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `3`', /tmp/tmpkk3dcrb6.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &x) in arr.iter().enumerate() {\n  \
    \      if x > max_value {\n            max_value = x;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpbn_uy8q2.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpd8qv81qy.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for i in (0..arr.len()).rev() {\n        if arr[i]\
    \ >= max {\n            max = arr[i];\n            max_index = i as isize;\n \
    \       }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpn0regs28.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_idx = -1;\n    for (i, &x) in arr.iter().enumerate() {\n      \
    \  if x > max {\n            max = x;\n            max_idx = i as isize;\n   \
    \     }\n    }\n    max_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmptzycxwrs.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = arr[0];\n    for i in 1..arr.len() {\n        if arr[i]\
    \ > max_value {\n            max_value = arr[i];\n            max_index = i as\
    \ isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpw95xotsg.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut result = -1;\n\
    \    for i in 0..arr.len() {\n        if i > 0 && arr[i] <= arr[i - 1] {\n   \
    \         result = i as isize;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &v) in arr.iter().enumerate() {\n  \
    \      if v > max_value {\n            max_value = v;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpbfkg9pib.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_idx = -1;\n    for i in 0..arr.len() {\n        if arr[i] > max\
    \ {\n            max = arr[i];\n            max_idx = i as isize;\n        }\n\
    \    }\n    max_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpjji_y7pv.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &x) in arr.iter().enumerate() {\n  \
    \      if x > max_value {\n            max_value = x;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpulo08jtc.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = arr[0];\n\
    \    let mut max_index = 0;\n    for i in 1..arr.len() {\n        if arr[i] >\
    \ max {\n            max = arr[i];\n            max_index = i;\n        }\n  \
    \  }\n    if max_index == arr.len() - 1 {\n        return -1;\n    }\n    for\
    \ i in max_index..arr.len() - 1 {\n        if arr[i] > arr[i + 1] {\n        \
    \    return -1;\n        }\n    }\n    return max_index as isize;\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `3`', /tmp/tmpxxd9fwj7.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = arr[0];\n\
    \    let mut max_index = 0;\n    for (i, &x) in arr.iter().enumerate() {\n   \
    \     if x > max {\n            max = x;\n            max_index = i;\n       \
    \ }\n    }\n    if max_index == arr.len() - 1 {\n        return -1;\n    }\n \
    \   for (i, &x) in arr.iter().enumerate() {\n        if i == max_index {\n   \
    \         continue;\n        }\n        if x > arr[max_index] {\n            return\
    \ -1;\n        }\n    }\n    max_index as isize\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `3`', /tmp/tmpy4d6xyki.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpti6khpaj.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for i in (0..arr.len()).rev() {\n        if arr[i]\
    \ >= max {\n            max = arr[i];\n            max_index = i as isize;\n \
    \       }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp7p_onl0u.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = isize::min_value();\n    for (i, &v) in arr.iter().enumerate()\
    \ {\n        if v > max_value {\n            max_index = i as isize;\n       \
    \     max_value = v;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpiyw36wzu.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = std::isize::MIN;\n    for (i, &v) in arr.iter().enumerate()\
    \ {\n        if v > max_value {\n            max_value = v;\n            max_index\
    \ = i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp97g35cb8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = arr[0];\n    for i in 1..arr.len() {\n        if arr[i]\
    \ > max_value {\n            max_value = arr[i];\n            max_index = i as\
    \ isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp5n6xy9v9.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    for i in 0..arr.len() {\n        if i == 0 {\n            continue;\n   \
    \     }\n        if arr[i] <= arr[i - 1] {\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut result = -1;\n\
    \    for i in 0..arr.len() {\n        if i > 0 && arr[i] <= arr[i - 1] {\n   \
    \         result = i as isize;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, x) in arr.iter().enumerate() {\n     \
    \   if *x > max {\n            max = *x;\n            max_index = i as isize;\n\
    \        }\n    }\n    if max_index == 0 {\n        return -1;\n    }\n    max_index\
    \ - 1\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `-1`', /tmp/tmpbr924kik.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &x) in arr.iter().enumerate() {\n  \
    \      if x > max_value {\n            max_value = x;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpa3t5n76r.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = arr[0];\n    for i in 1..arr.len() {\n        if arr[i]\
    \ > max_value {\n            max_value = arr[i];\n            max_index = i as\
    \ isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp4d4tds9p.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &v) in arr.iter().enumerate() {\n  \
    \      if v > max_value {\n            max_value = v;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp8nn1_770.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpy76vwjx0.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_idx = -1;\n    for (i, &x) in arr.iter().enumerate() {\n      \
    \  if x > max {\n            max = x;\n            max_idx = i as isize;\n   \
    \     }\n    }\n    max_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp7g12fe6l.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpqe2cc0s3.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n        if\
    \ x > max {\n            max = x;\n            index = i as isize;\n        }\n\
    \    }\n    index\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpmbt5d8ne.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = arr[0];\n    for i in 1..arr.len() {\n        if arr[i]\
    \ < max_value {\n            max_index = i as isize;\n            max_value =\
    \ arr[i];\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `3`', /tmp/tmpib8ecvir.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &v) in arr.iter().enumerate() {\n  \
    \      if v > max_value {\n            max_value = v;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmptq8g2qkn.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut index = -1;\n    for i in 0..arr.len() {\n        if arr[i] > max {\n\
    \            max = arr[i];\n            index = i as isize;\n        }\n    }\n\
    \    index\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpo1kt2c41.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpp2n0nrro.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &x) in arr.iter().enumerate() {\n  \
    \      if x > max_value {\n            max_value = x;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpjpvvft8h.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for i in (0..arr.len()).rev() {\n        if arr[i]\
    \ >= max {\n            max = arr[i];\n            max_index = i as isize;\n \
    \       }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpqa9uoipk.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpc7uy0q_0.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &x) in arr.iter().enumerate() {\n  \
    \      if x > max_value {\n            max_value = x;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp94m9bv8u.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmperjaqvdx.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmplynb9ke3.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpd_dp7s1v.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpkd1jet5y.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &v) in arr.iter().enumerate() {\n  \
    \      if v > max_value {\n            max_value = v;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp9dy8ac7f.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpsdwuyz_z.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    for (i, x) in arr.iter().enumerate() {\n        if i == 0 {\n           \
    \ continue;\n        }\n        if arr[i - 1] >= *x {\n            continue;\n\
    \        }\n        if i > max_index {\n            max_index = i;\n        }\n\
    \    }\n    max_index as isize\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp6rsjj_w7.rs:9:25\n\
    \  |\n9 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    for i in 1..arr.len() {\n        if arr[i] <= arr[i - 1] {\n            max_index\
    \ = i as isize - 1;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `3`', /tmp/tmpgdr_23vy.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    for i in 0..arr.len() {\n        if i == 0 {\n            continue;\n   \
    \     }\n        if arr[i] <= arr[i - 1] {\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &v) in arr.iter().enumerate() {\n  \
    \      if v > max_value {\n            max_value = v;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmprixnb974.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_idx = -1;\n    for (i, &x) in arr.iter().enumerate() {\n      \
    \  if x > max {\n            max = x;\n            max_idx = i as isize;\n   \
    \     }\n    }\n    max_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpt9hgydoy.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = arr[0];\n\
    \    let mut max_index = 0;\n    for (i, &x) in arr.iter().enumerate() {\n   \
    \     if x > max {\n            max = x;\n            max_index = i;\n       \
    \ }\n    }\n    if max_index == arr.len() - 1 {\n        return -1;\n    }\n \
    \   for i in (max_index + 1)..arr.len() {\n        if arr[i] < arr[i - 1] {\n\
    \            return i as isize - 1;\n        }\n    }\n    arr.len() as isize\
    \ - 1\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `3`', /tmp/tmph5f6mo3c.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpk3q064cr.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpxis6xjby.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = arr[0];\n    for i in 1..arr.len() {\n        if arr[i]\
    \ > max_value {\n            max_value = arr[i];\n            max_index = i as\
    \ isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpaql2s20l.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp2hsw8rdv.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    for i in 0..arr.len() {\n        if i == 0 {\n            continue;\n   \
    \     }\n        if arr[i] <= arr[i - 1] {\n            max_idx = i as isize;\n\
    \        }\n    }\n    max_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp8gue3y4i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_idx = -1;\n    for (i, &x) in arr.iter().enumerate() {\n      \
    \  if x > max {\n            max = x;\n            max_idx = i as isize;\n   \
    \     }\n    }\n    max_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp44a5wj3q.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_idx = -1;\n    for (i, &x) in arr.iter().enumerate() {\n      \
    \  if x > max {\n            max = x;\n            max_idx = i as isize;\n   \
    \     }\n    }\n    max_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpu4k9jal1.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp_xybgahw.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = arr[0];\n\
    \    let mut max_index = 0;\n    for (i, &x) in arr.iter().enumerate() {\n   \
    \     if x > max {\n            max = x;\n            max_index = i;\n       \
    \ }\n    }\n    if max_index == arr.len() - 1 {\n        return -1;\n    }\n \
    \   for &x in arr[max_index + 1..].iter() {\n        if x >= max {\n         \
    \   return -1;\n        }\n    }\n    max_index as isize\n}\n\nfn main() {\n \
    \   let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `3`', /tmp/tmp65cniw5d.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = arr[0];\n\
    \    let mut max_index = 0;\n    for i in 1..arr.len() {\n        if arr[i] <\
    \ max {\n            return i as isize - 1;\n        }\n        if arr[i] > max\
    \ {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n\
    \    if max_index == arr.len() - 1 {\n        -1\n    } else {\n        max_index\
    \ as isize\n    }\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `3`', /tmp/tmpyw0pertu.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut index = -1;\n    for i in (0..arr.len()).rev() {\n        if arr[i]\
    \ >= max {\n            max = arr[i];\n            index = i as isize;\n     \
    \   }\n    }\n    index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpesyjfzsi.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for i in 0..arr.len() {\n        if arr[i] > max\
    \ {\n            max = arr[i];\n            max_index = i as isize;\n        }\n\
    \    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n  \
    \  assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpylhjykn6.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp8y6dd6uz.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &v) in arr.iter().enumerate() {\n  \
    \      if v > max_value {\n            max_value = v;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpaquwmbs2.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &x) in arr.iter().enumerate() {\n  \
    \      if x > max_value {\n            max_value = x;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpxdsx8q2x.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpla877z5w.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &x) in arr.iter().enumerate() {\n  \
    \      if x > max_value {\n            max_value = x;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpikfjv36l.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &x) in arr.iter().enumerate() {\n  \
    \      if x > max_value {\n            max_value = x;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpd5h080s0.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_idx = -1;\n    for i in (0..arr.len()).rev() {\n        if arr[i]\
    \ >= max {\n            max = arr[i];\n            max_idx = i as isize;\n   \
    \     }\n    }\n    max_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp28roq0py.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpsg1_jnrf.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = std::isize::MIN;\n    for (index, value) in arr.iter().enumerate()\
    \ {\n        if value > &max_value {\n            max_index = index as isize;\n\
    \            max_value = *value;\n        }\n    }\n    max_index\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp4a7of1qw.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &x) in arr.iter().enumerate() {\n  \
    \      if x > max_value {\n            max_value = x;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp_wkhg_yt.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &x) in arr.iter().enumerate() {\n  \
    \      if x > max_value {\n            max_value = x;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp41jqypw1.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = 0;\n    for (i, &x) in arr.iter().enumerate() {\n   \
    \     if x > max_value {\n            max_value = x;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpv8f7uy7l.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &v) in arr.iter().enumerate() {\n  \
    \      if v > max_value {\n            max_value = v;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp0sjy5n1h.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = 0;\n   \
    \ let mut max_index = -1;\n    for i in 0..arr.len() {\n        if arr[i] > max\
    \ {\n            max = arr[i];\n            max_index = i as isize;\n        }\n\
    \    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n  \
    \  assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpcurs9y85.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    let mut max_val = std::isize::MIN;\n    for (i, &val) in arr.iter().enumerate()\
    \ {\n        if val > max_val {\n            max_idx = i as isize;\n         \
    \   max_val = val;\n        }\n    }\n    if max_idx == 0 {\n        return -1;\n\
    \    }\n    let mut max_idx = max_idx - 1;\n    for (i, &val) in arr.iter().enumerate()\
    \ {\n        if i as isize == max_idx {\n            continue;\n        }\n  \
    \      if val > arr[max_idx as usize] {\n            return -1;\n        }\n \
    \   }\n    max_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `3`', /tmp/tmpuond00xo.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    let mut max_val = -1;\n    for (i, &val) in arr.iter().enumerate() {\n  \
    \      if val > max_val {\n            max_idx = i as isize;\n            max_val\
    \ = val;\n        }\n    }\n    max_idx\n}\n\nfn main() {\n    let candidate =\
    \ can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp_7ydbpa4.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = isize::min_value();\n\
    \    let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n  \
    \      if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp87o3tayi.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    let mut max_val = -1;\n    for (i, &val) in arr.iter().enumerate() {\n  \
    \      if val > max_val {\n            max_idx = i as isize;\n            max_val\
    \ = val;\n        }\n    }\n    max_idx\n}\n\nfn main() {\n    let candidate =\
    \ can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpf90ndqai.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp9pxk4bvv.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &v) in arr.iter().enumerate() {\n  \
    \      if v > max_value {\n            max_value = v;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp0c6d25cj.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut index = -1;\n    for i in (0..arr.len()).rev() {\n        if arr[i]\
    \ >= max {\n            max = arr[i];\n            index = i as isize;\n     \
    \   }\n    }\n    index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpg93trk9d.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &x) in arr.iter().enumerate() {\n  \
    \      if x > max_value {\n            max_value = x;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpz4po47z2.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for i in (0..arr.len()).rev() {\n        if arr[i]\
    \ >= max {\n            max = arr[i];\n            max_index = i as isize;\n \
    \       }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpaucnnftz.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpalnk43mv.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpxpbw2g96.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = arr[0];\n    for (i, &x) in arr.iter().enumerate() {\n\
    \        if x < max_value {\n            max_index = i as isize;\n        } else\
    \ {\n            max_value = x;\n        }\n    }\n    max_index\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmptbsoe5nk.rs:10:25\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpgrg94vkx.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &value) in arr.iter().enumerate() {\n\
    \        if value > max_value {\n            max_value = value;\n            max_index\
    \ = i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmppbg5kkqw.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for i in (0..arr.len()).rev() {\n        if arr[i]\
    \ >= max {\n            max = arr[i];\n            max_index = i as isize;\n \
    \       }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp86chmhwp.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &value) in arr.iter().enumerate() {\n\
    \        if value > max_value {\n            max_value = value;\n            max_index\
    \ = i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpfmgb_dh7.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &value) in arr.iter().enumerate() {\n\
    \        if value > max_value {\n            max_value = value;\n            max_index\
    \ = i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp3hc2lqz7.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpl7om7hzu.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    for i in 0..arr.len() {\n        if i == 0 {\n            continue;\n   \
    \     }\n        if arr[i] <= arr[i - 1] {\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = 0;\n    for (i, &v) in arr.iter().enumerate() {\n   \
    \     if v > max_value {\n            max_value = v;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp4kcfh92u.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut largest_index\
    \ = -1;\n    let mut largest_value = -1;\n    for (i, &value) in arr.iter().enumerate()\
    \ {\n        if value > largest_value {\n            largest_value = value;\n\
    \            largest_index = i as isize;\n        }\n    }\n    largest_index\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpx4wpawlj.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for i in (0..arr.len()).rev() {\n        if arr[i]\
    \ >= max {\n            max = arr[i];\n            max_index = i as isize;\n \
    \       }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpv7v3ik_s.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = std::isize::MIN;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x >= max_value {\n            max_index = i as isize;\n      \
    \      max_value = x;\n        }\n    }\n    max_index\n}\n\nfn main() {\n   \
    \ let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpw3ks3ht1.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for i in (0..arr.len()).rev() {\n        if arr[i]\
    \ >= max {\n            max = arr[i];\n            max_index = i as isize;\n \
    \       }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpn6t7wyu4.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &x) in arr.iter().enumerate() {\n  \
    \      if x > max_value {\n            max_value = x;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpz7hq712t.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &v) in arr.iter().enumerate() {\n  \
    \      if v > max_value {\n            max_value = v;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpl8czom1l.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &x) in arr.iter().enumerate() {\n  \
    \      if x > max_value {\n            max_value = x;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpihdhitqt.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    for i in 0..arr.len() {\n        if i > 0 && arr[i] < arr[i - 1] {\n    \
    \        max_index = i as isize - 1;\n        }\n    }\n    max_index\n}\n\nfn\
    \ main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `3`', /tmp/tmph_4nmwy_.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmphop_w3jg.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = arr[0];\n\
    \    let mut max_index = 0;\n    for (i, &x) in arr.iter().enumerate() {\n   \
    \     if x > max {\n            max = x;\n            max_index = i;\n       \
    \ }\n    }\n    if max_index == arr.len() - 1 {\n        return -1;\n    }\n \
    \   for i in (max_index + 1)..arr.len() {\n        if arr[i] < arr[i - 1] {\n\
    \            return i as isize - 1;\n        }\n    }\n    -1\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `3`', /tmp/tmpu8uw9nso.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for i in (0..arr.len()).rev() {\n        if arr[i]\
    \ >= max {\n            max = arr[i];\n            max_index = i as isize;\n \
    \       }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpjdbdgi89.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpk20__as2.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for i in 0..arr.len() {\n        if arr[i] <=\
    \ max_value {\n            max_index = i as isize;\n        } else {\n       \
    \     max_value = arr[i];\n        }\n    }\n    max_index\n}\n\nfn main() {\n\
    \    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for i in 0..arr.len() {\n        if arr[i] >\
    \ max_value {\n            max_value = arr[i];\n            max_index = i as isize;\n\
    \        }\n        if arr[i] < max_value {\n            return i as isize - 1;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `3`', /tmp/tmpmxullsyz.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, x) in arr.iter().enumerate() {\n     \
    \   if x > &max {\n            max = *x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp3yqr2bqr.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = std::isize::MIN;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x > max_value {\n            max_value = x;\n            max_index\
    \ = i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp0jqy3t9h.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpe6uipa6c.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &value) in arr.iter().enumerate() {\n\
    \        if value > max_value {\n            max_value = value;\n            max_index\
    \ = i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpxbwhgg13.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = 0;\n   \
    \ let mut max_idx = -1;\n    for (i, &x) in arr.iter().enumerate() {\n       \
    \ if x > max {\n            max = x;\n            max_idx = i as isize;\n    \
    \    }\n    }\n    max_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp7mczx37a.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    for i in 0..arr.len() {\n        if i == 0 {\n            continue;\n   \
    \     }\n        if arr[i] <= arr[i - 1] {\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &v) in arr.iter().enumerate() {\n  \
    \      if v > max_value {\n            max_value = v;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp5da5oy8f.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &x) in arr.iter().enumerate() {\n  \
    \      if x > max_value {\n            max_value = x;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpzhd_pkai.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = arr[0];\n\
    \    let mut max_index = 0;\n    for (i, &x) in arr.iter().enumerate() {\n   \
    \     if x > max {\n            max = x;\n            max_index = i;\n       \
    \ }\n    }\n    if max_index == arr.len() - 1 {\n        return -1;\n    }\n \
    \   for i in (max_index + 1)..arr.len() {\n        if arr[i] < arr[i - 1] {\n\
    \            return i as isize - 1;\n        }\n    }\n    return -1;\n}\n\nfn\
    \ main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `3`', /tmp/tmphsl01hdo.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_idx = -1;\n\
    \    for i in 0..arr.len() {\n        if i == 0 {\n            continue;\n   \
    \     }\n        if arr[i] <= arr[i - 1] {\n            max_idx = i as isize;\n\
    \        }\n    }\n    max_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &v) in arr.iter().enumerate() {\n  \
    \      if v > max_value {\n            max_value = v;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpzd1zai1x.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &v) in arr.iter().enumerate() {\n  \
    \      if v > max_value {\n            max_value = v;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpv7kc1k19.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmprw10drgi.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = arr[0];\n    for i in 1..arr.len() {\n        if arr[i]\
    \ < max_value {\n            max_index = i as isize;\n            max_value =\
    \ arr[i];\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `3`', /tmp/tmponlxmr23.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for i in (0..arr.len()).rev() {\n        if arr[i]\
    \ >= max {\n            max = arr[i];\n            max_index = i as isize;\n \
    \       }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpf34thppm.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = 0;\n    for (i, &v) in arr.iter().enumerate() {\n   \
    \     if v > max_value {\n            max_value = v;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp5ug4kdox.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = 0;\n\
    \    let mut max_value = arr[0];\n    for i in 1..arr.len() {\n        if arr[i]\
    \ > max_value {\n            max_value = arr[i];\n            max_index = i;\n\
    \        }\n    }\n    max_index as isize\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpvzdjyih6.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &value) in arr.iter().enumerate() {\n\
    \        if value > max_value {\n            max_value = value;\n            max_index\
    \ = i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpqnm87lgp.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for i in 0..arr.len() {\n        if arr[i] > max\
    \ {\n            max = arr[i];\n            max_index = i as isize;\n        }\n\
    \    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n  \
    \  assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp158hcqw_.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for i in (0..arr.len()).rev() {\n        if arr[i]\
    \ >= max {\n            max = arr[i];\n            max_index = i as isize;\n \
    \       }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpvs0kcgzp.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for i in 0..arr.len() {\n        if arr[i] > max\
    \ {\n            max = arr[i];\n            max_index = i as isize;\n        }\n\
    \    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n  \
    \  assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpdct97agy.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp4qwy876r.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &x) in arr.iter().enumerate() {\n  \
    \      if x > max_value {\n            max_value = x;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmphg5m7p6_.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmplxqsr2ow.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmptecv40qe.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    for i in 0..arr.len() {\n        if i > 0 && arr[i] <= arr[i - 1] {\n   \
    \         max_index = i as isize;\n        }\n    }\n    max_index\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &x) in arr.iter().enumerate() {\n  \
    \      if x > max_value {\n            max_value = x;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpqqmomlwe.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for i in 0..arr.len() {\n        if arr[i] > max\
    \ {\n            max = arr[i];\n            max_index = i as isize;\n        }\n\
    \    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n  \
    \  assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpmlvbph_s.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = arr[0];\n    for i in 1..arr.len() {\n        if arr[i]\
    \ <= max_value {\n            max_index = i as isize;\n        } else {\n    \
    \        max_value = arr[i];\n        }\n    }\n    max_index\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpwbc_wcqr.rs:10:25\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &v) in arr.iter().enumerate() {\n  \
    \      if v > max_value {\n            max_value = v;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp2ae_ngve.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &value) in arr.iter().enumerate() {\n\
    \        if value > max_value {\n            max_value = value;\n            max_index\
    \ = i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp4p6q9wbl.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    for i in 0..arr.len() - 1 {\n        if arr[i] >= arr[i + 1] {\n        \
    \    max_index = i as isize;\n        }\n    }\n    max_index\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `3`', /tmp/tmpm2njg0cq.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = arr[0];\n    for i in 1..arr.len() {\n        if arr[i]\
    \ > max_value {\n            max_value = arr[i];\n            max_index = i as\
    \ isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpqc39d52i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = arr[0];\n    for i in 1..arr.len() {\n        if arr[i]\
    \ < max_value {\n            max_index = i as isize;\n            max_value =\
    \ arr[i];\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `3`', /tmp/tmpdek2dsm_.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpcun5uorz.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_idx = -1;\n    for (i, &x) in arr.iter().enumerate() {\n      \
    \  if x > max {\n            max = x;\n            max_idx = i as isize;\n   \
    \     }\n    }\n    max_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpxjpvwgb0.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_idx = -1;\n    for (i, &x) in arr.iter().enumerate() {\n      \
    \  if x > max {\n            max = x;\n            max_idx = i as isize;\n   \
    \     }\n    }\n    max_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpjisi5_1w.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpvqqlu0qw.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &x) in arr.iter().enumerate() {\n  \
    \      if x > max_value {\n            max_value = x;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpd__wo8d6.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for i in (0..arr.len()).rev() {\n        if arr[i]\
    \ >= max {\n            max = arr[i];\n            max_index = i as isize;\n \
    \       }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpnqvnly94.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &x) in arr.iter().enumerate() {\n  \
    \      if x > max_value {\n            max_value = x;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpdm4zyp4s.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    for i in 0..arr.len() {\n        if i == 0 {\n            continue;\n   \
    \     }\n        if arr[i] <= arr[i - 1] {\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for i in (0..arr.len()).rev() {\n        if arr[i]\
    \ >= max {\n            max = arr[i];\n            max_index = i as isize;\n \
    \       }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpg5tf1gqq.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for i in (0..arr.len()).rev() {\n        if arr[i]\
    \ <= max {\n            max_index = i as isize;\n        } else {\n          \
    \  max = arr[i];\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `3`', /tmp/tmpxvselg07.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for i in (0..arr.len()).rev() {\n        if arr[i]\
    \ <= max {\n            return max_index as isize;\n        }\n        max = arr[i];\n\
    \        max_index = i as isize;\n    }\n    -1\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpupd9i0l_.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    if arr.len() < 2 {\n \
    \       return -1;\n    }\n    let mut max_index = -1;\n    let mut max_value\
    \ = arr[0];\n    for (i, &v) in arr.iter().enumerate().skip(1) {\n        if v\
    \ < max_value {\n            max_index = i as isize;\n        } else {\n     \
    \       max_value = v;\n        }\n    }\n    max_index\n}\n\nfn main() {\n  \
    \  let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = arr[0];\n\
    \    let mut max_index = 0;\n    for (i, &x) in arr.iter().enumerate() {\n   \
    \     if x > max {\n            max = x;\n            max_index = i;\n       \
    \ }\n    }\n    if max_index == arr.len() - 1 {\n        return -1;\n    }\n \
    \   max_index as isize\n}\n\nfn main() {\n    let candidate = can_arrange;\n \
    \   assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `3`', /tmp/tmp8fp__sia.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &v) in arr.iter().enumerate() {\n  \
    \      if v > max_value {\n            max_value = v;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp2zm3bv7f.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = std::isize::MIN;\n    for (i, &x) in arr.iter().enumerate()\
    \ {\n        if x >= max_value {\n            max_index = i as isize;\n      \
    \      max_value = x;\n        }\n    }\n    max_index\n}\n\nfn main() {\n   \
    \ let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmps79ef5g7.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    for i in 0..arr.len() {\n        if i == 0 {\n            continue;\n   \
    \     }\n        if arr[i] <= arr[i - 1] {\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &x) in arr.iter().enumerate() {\n  \
    \      if x > max_value {\n            max_value = x;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp6lrewmjo.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &x) in arr.iter().enumerate() {\n  \
    \      if x > max_value {\n            max_value = x;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpl416pom9.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (index, value) in arr.iter().enumerate()\
    \ {\n        if index == 0 {\n            max_index = 0;\n            max_value\
    \ = *value;\n        } else if *value < max_value {\n            max_index = index\
    \ as isize;\n            max_value = *value;\n        }\n    }\n    max_index\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `3`', /tmp/tmpzub7v44n.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    for i in 0..arr.len() {\n        if i == 0 {\n            continue;\n   \
    \     }\n        if arr[i] <= arr[i - 1] {\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    for i in 0..arr.len() {\n        if i == 0 {\n            continue;\n   \
    \     }\n        if arr[i] <= arr[i - 1] {\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut index = -1;\n    for i in 0..arr.len() {\n        if arr[i] > max {\n\
    \            max = arr[i];\n            index = i as isize;\n        }\n    }\n\
    \    index\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpi8ndywp0.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for i in 0..arr.len() {\n        if arr[i] >\
    \ max_value {\n            max_value = arr[i];\n            max_index = i as isize;\n\
    \        }\n        if arr[i] < max_value {\n            return i as isize - 1;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `3`', /tmp/tmpxx65i67w.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = arr[0];\n\
    \    let mut max_index = 0;\n    for (i, &x) in arr.iter().enumerate() {\n   \
    \     if x > max {\n            max = x;\n            max_index = i;\n       \
    \ }\n    }\n    if max_index == arr.len() - 1 {\n        return -1;\n    }\n \
    \   let mut max_index = max_index as isize;\n    for i in (0..arr.len() - 1).rev()\
    \ {\n        if arr[i] > arr[i + 1] {\n            max_index = i as isize;\n \
    \       }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `3`', /tmp/tmpr4uv5j0t.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = arr[0];\n\
    \    let mut index = -1;\n    for i in 1..arr.len() {\n        if arr[i] < max\
    \ {\n            index = i as isize;\n        } else {\n            max = arr[i];\n\
    \        }\n    }\n    index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpw5xx0qi3.rs:9:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = 0;\n\
    \    let mut max_value = arr[0];\n    let mut result = -1;\n    for i in 1..arr.len()\
    \ {\n        if arr[i] > max_value {\n            max_value = arr[i];\n      \
    \      max_index = i;\n        }\n        if arr[i] <= arr[i - 1] {\n        \
    \    result = max_index as isize;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `3`', /tmp/tmp2icqxeoh.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &x) in arr.iter().enumerate() {\n  \
    \      if x > max_value {\n            max_value = x;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpnmwdrp18.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for i in 0..arr.len() {\n        if arr[i] > max\
    \ {\n            max = arr[i];\n            max_index = i as isize;\n        }\n\
    \    }\n    if max_index == 0 {\n        return -1;\n    }\n    for i in (0..max_index).rev()\
    \ {\n        if arr[i as usize] > arr[(i + 1) as usize] {\n            return\
    \ -1;\n        }\n    }\n    return max_index;\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `3`', /tmp/tmpr8g6hsw5.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &v) in arr.iter().enumerate() {\n  \
    \      if v > max_value {\n            max_value = v;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpsmk4pe62.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &value) in arr.iter().enumerate() {\n\
    \        if value > max_value {\n            max_value = value;\n            max_index\
    \ = i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp2mlwgd1h.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for i in 0..arr.len() {\n        if arr[i] > max\
    \ {\n            max = arr[i];\n            max_index = i as isize;\n        }\n\
    \    }\n    if max_index == 0 {\n        return -1;\n    }\n    max_index - 1\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `-1`', /tmp/tmp_4mr24_p.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpkzc6pqju.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &x) in arr.iter().enumerate() {\n    \
    \    if x > max {\n            max = x;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpqqtx0brz.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for i in 0..arr.len() {\n        if arr[i] > max\
    \ {\n            max = arr[i];\n            max_index = i as isize;\n        }\n\
    \    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n  \
    \  assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpczhivuhl.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = arr[0];\n    for i in 1..arr.len() {\n        if arr[i]\
    \ > max_value {\n            max_value = arr[i];\n            max_index = i as\
    \ isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpc0ajppdd.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max = -1;\n  \
    \  let mut max_index = -1;\n    for (i, &v) in arr.iter().enumerate() {\n    \
    \    if v > max {\n            max = v;\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpqt_jbei9.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = arr[0];\n    for i in 1..arr.len() {\n        if arr[i]\
    \ < max_value {\n            max_index = i as isize;\n            max_value =\
    \ arr[i];\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `3`', /tmp/tmpaz8erhex.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &value) in arr.iter().enumerate() {\n\
    \        if value > max_value {\n            max_value = value;\n            max_index\
    \ = i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpkbp3mx6i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for i in 0..arr.len() {\n        if arr[i] >\
    \ max_value {\n            max_value = arr[i];\n            max_index = i as isize;\n\
    \        } else if arr[i] == max_value {\n            max_index = -1;\n      \
    \  }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpe_8q7hym.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    for i in 0..arr.len() {\n        if i == 0 {\n            continue;\n   \
    \     }\n        if arr[i] <= arr[i - 1] {\n            max_index = i as isize;\n\
    \        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = arr[0];\n    for i in 1..arr.len() {\n        if arr[i]\
    \ > max_value {\n            max_value = arr[i];\n            max_index = i as\
    \ isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmp_my6mern.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5]) = 3\n/// can_arrange([1,2,3])\
    \ = -1\nfn can_arrange(arr: Vec<isize>) -> isize {\n    let mut max_index = -1;\n\
    \    let mut max_value = -1;\n    for (i, &x) in arr.iter().enumerate() {\n  \
    \      if x > max_value {\n            max_value = x;\n            max_index =\
    \ i as isize;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmpmhkr8wl6.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
