name: HumanEval_147_get_max_triples
language: rust
results:
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpvhxg00rv.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmph8w24tb2.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    let mut a = vec![0; n as usize];\n    for i in\
    \ 0..n {\n        a[i as usize] = i * i - i + 1;\n    }\n    for i in 0..n {\n\
    \        for j in i+1..n {\n            for k in j+1..n {\n                if\
    \ (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n               \
    \     count += 1;\n                }\n            }\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmp_5jsaiq7.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp5frtvtd4.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmprcqgl6n5.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpz0csqofb.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        let a = i * i - i +\
    \ 1;\n        for j in (i + 1)..n {\n            let b = j * j - j + 1;\n    \
    \        for k in (j + 1)..n {\n                let c = k * k - k + 1;\n     \
    \           if (a + b + c) % 3 == 0 {\n                    count += 1;\n     \
    \           }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpja3ukm3x.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpt9489wq8.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmphr8eh3al.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpqsfkcogr.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp_ampt12d.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    let mut a: Vec<isize> = Vec::new();\n    for\
    \ i in 1..=n {\n        a.push(i * i - i + 1);\n    }\n    for i in 0..n {\n \
    \       for j in i + 1..n {\n            for k in j + 1..n {\n               \
    \ if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count += 1;\n      \
    \          }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n \
    \   let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprpw7gly4.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprpw7gly4.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprpw7gly4.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp7plu6i_m.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpi6lv07ma.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp89jvrwgt.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    let mut a = vec![0; n as usize];\n    for i in\
    \ 0..n {\n        a[i as usize] = i * i - i + 1;\n    }\n    for i in 0..n - 2\
    \ {\n        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n      \
    \          if (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n   \
    \                 count += 1;\n                }\n            }\n        }\n \
    \   }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n   \
    \ assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpd0t2oky5.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n as usize];\n    for i in 0..n {\n        a[i as\
    \ usize] = i * i - i + 1;\n    }\n    let mut count = 0;\n    for i in 0..n {\n\
    \        for j in i+1..n {\n            for k in j+1..n {\n                if\
    \ (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n               \
    \     count += 1;\n                }\n            }\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmp3c2941jb.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp65fec_yl.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpxztdav_t.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    let mut a = vec![0; n as usize];\n    for i in\
    \ 0..n {\n        a[i as usize] = i * i - i + 1;\n    }\n    for i in 0..n - 2\
    \ {\n        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n      \
    \          if (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n   \
    \                 count += 1;\n                }\n            }\n        }\n \
    \   }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n   \
    \ assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpantdultt.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpr7pxdimv.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i + 1..n {\n\
    \            for k in j + 1..n {\n                if (i * i - i + 1 + j * j -\
    \ j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n       \
    \         }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n  \
    \  let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpt39xk8da.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpmkmxg2nf.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpremk98bv.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpda0vftli.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    let mut a = vec![0; n as usize];\n    for i in\
    \ 0..n {\n        a[i as usize] = i * i - i + 1;\n    }\n    for i in 0..n - 2\
    \ {\n        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n      \
    \          if (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n   \
    \                 count += 1;\n                }\n            }\n        }\n \
    \   }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n   \
    \ assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpqdoc9tl1.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    let mut a = vec![0; n as usize];\n    for i in\
    \ 0..n {\n        a[i as usize] = i * i - i + 1;\n    }\n    for i in 0..n {\n\
    \        for j in i+1..n {\n            for k in j+1..n {\n                if\
    \ (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n               \
    \     count += 1;\n                }\n            }\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpwhwk96dy.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpt4v20pvd.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpo4nmg6r8.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = Vec::new();\n    for i in 1..=n {\n        a.push(i * i -\
    \ i + 1);\n    }\n    let mut count = 0;\n    for i in 0..n - 2 {\n        for\
    \ j in i + 1..n - 1 {\n            for k in j + 1..n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpci4a497b.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpci4a497b.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpci4a497b.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp_6e5ozyw.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i + 1..n {\n\
    \            for k in j + 1..n {\n                if (i * i - i + 1 + j * j -\
    \ j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n       \
    \         }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n  \
    \  let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp0i1nfpug.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpzx4qjjsr.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n as usize];\n    for i in 0..n {\n        a[i as\
    \ usize] = i * i - i + 1;\n    }\n    let mut count = 0;\n    for i in 0..n {\n\
    \        for j in i+1..n {\n            for k in j+1..n {\n                if\
    \ (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n               \
    \     count += 1;\n                }\n            }\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmp_jr8xaq9.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp31c1vhfa.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i + 1..n {\n\
    \            for k in j + 1..n {\n                if (i * i - i + 1 + j * j -\
    \ j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n       \
    \         }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n  \
    \  let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpelzpdufx.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmprn16lltq.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpnep9yhws.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmppv62ilie.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpfh4_psi_.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpy85nam9a.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpr3qtuuog.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpbh00dmxu.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpr6jh4408.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpzzf71lrz.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp25ttox45.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp7f4huhgk.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp0otermf3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmppy6uhl2e.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpyrxp5u06.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpxwogpano.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpfqytnt_a.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp63rv4u3h.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp0w5f_ls3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp6ai9cnbm.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i + 1..n {\n\
    \            for k in j + 1..n {\n                if (i * i - i + 1 + j * j -\
    \ j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n       \
    \         }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n  \
    \  let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpdtz4ecqg.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp4c8_r71m.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp5nwqh59q.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp2ika8ax0.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpx7qinuk8.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp4vx53mx5.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp6ub_7imc.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpq508vib9.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpscqcea3k.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpe48dcwq2.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n as usize];\n    for i in 0..n {\n        a[i as\
    \ usize] = i * i - i + 1;\n    }\n    let mut count = 0;\n    for i in 0..n -\
    \ 2 {\n        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n    \
    \            if (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n \
    \                   count += 1;\n                }\n            }\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n  \
    \  assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpbe0css9x.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpfsximu_v.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp28f94gsd.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n as usize];\n    for i in 0..n {\n        a[i as\
    \ usize] = i * i - i + 1;\n    }\n    let mut count = 0;\n    for i in 0..n {\n\
    \        for j in i+1..n {\n            for k in j+1..n {\n                if\
    \ (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n               \
    \     count += 1;\n                }\n            }\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpuh9sk4rk.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpomzgpad5.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp6apf85kc.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpquu9ya6z.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpak8069in.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp9vm_2ugp.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpaegrw95r.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpsklqwrih.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpwuufwfly.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpoxgpmq4e.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    let mut a: Vec<isize> = Vec::new();\n    for\
    \ i in 1..=n {\n        a.push(i * i - i + 1);\n    }\n    for i in 0..n - 2 {\n\
    \        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n          \
    \      if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpblu3jt9t.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpblu3jt9t.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpblu3jt9t.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpkb80xkbn.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpnaq7pf95.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    let mut a: Vec<isize> = Vec::new();\n    for\
    \ i in 1..n+1 {\n        a.push(i*i - i + 1);\n    }\n    for i in 0..n-2 {\n\
    \        for j in i+1..n-1 {\n            for k in j+1..n {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count += 1;\n         \
    \       }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp1qtgjn6n.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp1qtgjn6n.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp1qtgjn6n.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpa2_s_wad.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    let mut a = vec![0; n as usize];\n    for i in\
    \ 0..n {\n        a[i as usize] = i * i - i + 1;\n    }\n    for i in 0..n {\n\
    \        for j in i+1..n {\n            for k in j+1..n {\n                if\
    \ (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n               \
    \     count += 1;\n                }\n            }\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmppm611k2t.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpszp261cn.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpdv6_nt_6.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut triples = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    triples += 1;\n\
    \                }\n            }\n        }\n    }\n    triples\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpzmiqvxor.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n as usize];\n    for i in 0..n {\n        a[i as\
    \ usize] = i * i - i + 1;\n    }\n    let mut count = 0;\n    for i in 0..n -\
    \ 2 {\n        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n    \
    \            if (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n \
    \                   count += 1;\n                }\n            }\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n  \
    \  assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpr0zn79ym.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpe8w21erj.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    let mut a = vec![];\n    for i in 1..=n {\n \
    \       a.push(i * i - i + 1);\n    }\n    for i in 0..n - 2 {\n        for j\
    \ in i + 1..n - 1 {\n            for k in j + 1..n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpdof7nmc0.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpdof7nmc0.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpdof7nmc0.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    let mut a = vec![0; n as usize];\n    for i in\
    \ 0..n {\n        a[i as usize] = i * i - i + 1;\n    }\n    for i in 0..n {\n\
    \        for j in i+1..n {\n            for k in j+1..n {\n                if\
    \ (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n               \
    \     count += 1;\n                }\n            }\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpmm2cs242.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    let mut a: Vec<isize> = vec![0; n as usize];\n\
    \    for i in 1..n {\n        a[i as usize] = i * i - i + 1;\n        for j in\
    \ 1..i {\n            for k in 1..j {\n                if (a[i as usize] + a[j\
    \ as usize] + a[k as usize]) % 3 == 0 {\n                    count += 1;\n   \
    \             }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpg1hkol94.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = Vec::new();\n    for i in 1..=n {\n        a.push(i * i -\
    \ i + 1);\n    }\n    let mut count = 0;\n    for i in 0..n - 2 {\n        for\
    \ j in i + 1..n - 1 {\n            for k in j + 1..n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmplofd1vqc.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmplofd1vqc.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmplofd1vqc.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i + 1..n {\n\
    \            for k in j + 1..n {\n                if (i * i - i + 1 + j * j -\
    \ j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n       \
    \         }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n  \
    \  let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp19ih2kq_.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmppmrnxkih.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpb1vk6lo6.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    let mut a = vec![0; n as usize];\n    for i in\
    \ 0..n {\n        a[i as usize] = i * i - i + 1;\n    }\n    for i in 0..n {\n\
    \        for j in i+1..n {\n            for k in j+1..n {\n                if\
    \ (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n               \
    \     count += 1;\n                }\n            }\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpt54150c5.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp8l4oocq1.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpwwzwfnbx.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp4elupupc.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i + 1..n {\n\
    \            for k in j + 1..n {\n                if (i * i - i + 1 + j * j -\
    \ j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n       \
    \         }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n  \
    \  let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpfau19nx9.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp687dhbk3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n as usize];\n    for i in 0..n {\n        a[i as\
    \ usize] = i * i - i + 1;\n    }\n    let mut count = 0;\n    for i in 0..n {\n\
    \        for j in i+1..n {\n            for k in j+1..n {\n                if\
    \ (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n               \
    \     count += 1;\n                }\n            }\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmp77q35gji.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp1ha1csr5.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmph8eyin3z.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmphztk0rwi.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmphgknp5wl.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp7_uotewd.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n as usize];\n    for i in 0..n {\n        a[i as\
    \ usize] = i * i - i + 1;\n    }\n    let mut count = 0;\n    for i in 0..n -\
    \ 2 {\n        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n    \
    \            if (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n \
    \                   count += 1;\n                }\n            }\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n  \
    \  assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmp68h9yq0j.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = Vec::new();\n    for i in 1..=n {\n        a.push(i * i -\
    \ i + 1);\n    }\n    let mut count = 0;\n    for i in 0..n - 2 {\n        for\
    \ j in i + 1..n - 1 {\n            for k in j + 1..n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpdayj9ab5.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpdayj9ab5.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpdayj9ab5.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpe3a1g74v.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpownple7y.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp9txse21p.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpkahv44yr.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpjcms4nok.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpcgrmiakm.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpi64p69r1.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmppij5wcxb.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp5qwy5a_r.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpraqw8i1_.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpwr_h18sx.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp_18qho6y.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp6p3d42pl.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpcdnrg75u.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp1d2leigo.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp1j1hbvfk.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp71pgat6r.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    let mut a = vec![0; n as usize];\n    for i in\
    \ 0..n {\n        a[i as usize] = i * i - i + 1;\n    }\n    for i in 0..n - 2\
    \ {\n        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n      \
    \          if (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n   \
    \                 count += 1;\n                }\n            }\n        }\n \
    \   }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n   \
    \ assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpb603ay15.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp6zd4r4k1.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpvvlasxmt.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n as usize];\n    for i in 0..n {\n        a[i as\
    \ usize] = i * i - i + 1;\n    }\n    let mut count = 0;\n    for i in 0..n -\
    \ 2 {\n        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n    \
    \            if (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n \
    \                   count += 1;\n                }\n            }\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n  \
    \  assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmp_uqgnck2.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmppkz41tm2.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmppp9xrdmo.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = Vec::new();\n    for i in 1..=n {\n        a.push(i * i -\
    \ i + 1);\n    }\n    let mut count = 0;\n    for i in 0..n - 2 {\n        for\
    \ j in i + 1..n - 1 {\n            for k in j + 1..n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphh9sjvrf.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphh9sjvrf.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphh9sjvrf.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n as usize];\n    for i in 0..n {\n        a[i as\
    \ usize] = i * i - i + 1;\n    }\n    let mut count = 0;\n    for i in 0..n {\n\
    \        for j in i+1..n {\n            for k in j+1..n {\n                if\
    \ (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n               \
    \     count += 1;\n                }\n            }\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmp71ca8b8g.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpynkk6lz9.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpkijbn5i2.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i-i+1 + j*j-j+1 + k*k-k+1)\
    \ % 3 == 0 {\n                    count += 1;\n                }\n           \
    \ }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpnxebmwvg.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![];\n    for i in 1..n+1 {\n        a.push(i*i - i +\
    \ 1);\n    }\n    let mut count = 0;\n    for i in 0..n-2 {\n        for j in\
    \ i+1..n-1 {\n            for k in j+1..n {\n                if (a[i] + a[j] +\
    \ a[k]) % 3 == 0 {\n                    count += 1;\n                }\n     \
    \       }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpp87bnpwj.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpp87bnpwj.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpp87bnpwj.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpo7bcdyzb.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n as usize];\n    for i in 0..n {\n        a[i as\
    \ usize] = i * i - i + 1;\n    }\n    let mut count = 0;\n    for i in 0..n -\
    \ 2 {\n        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n    \
    \            if (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n \
    \                   count += 1;\n                }\n            }\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n  \
    \  assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpdiwdne3a.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    let mut a = vec![0; n as usize];\n    for i in\
    \ 0..n {\n        a[i as usize] = i * i - i + 1;\n    }\n    for i in 0..n - 2\
    \ {\n        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n      \
    \          if (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n   \
    \                 count += 1;\n                }\n            }\n        }\n \
    \   }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n   \
    \ assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmp90w09umo.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpmqn0gy5l.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpqxci5djd.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmphmmk81eh.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n as usize];\n    for i in 0..n {\n        a[i as\
    \ usize] = i * i - i + 1;\n    }\n    let mut count = 0;\n    for i in 0..n -\
    \ 2 {\n        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n    \
    \            if (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n \
    \                   count += 1;\n                }\n            }\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n  \
    \  assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmp2jxfjw3o.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i + 1..n {\n\
    \            for k in j + 1..n {\n                if (i * i - i + 1 + j * j -\
    \ j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n       \
    \         }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n  \
    \  let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp55vrtkxu.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp0rwd87mm.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n as usize];\n    for i in 0..n {\n        a[i as\
    \ usize] = i * i - i + 1;\n    }\n    let mut count = 0;\n    for i in 0..n {\n\
    \        for j in i+1..n {\n            for k in j+1..n {\n                if\
    \ (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n               \
    \     count += 1;\n                }\n            }\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmp14_prg06.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpmuo_7_1t.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n as usize];\n    for i in 0..n {\n        a[i as\
    \ usize] = i * i - i + 1;\n    }\n    let mut count = 0;\n    for i in 0..n {\n\
    \        for j in i + 1..n {\n            for k in j + 1..n {\n              \
    \  if (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n           \
    \         count += 1;\n                }\n            }\n        }\n    }\n  \
    \  count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpb1tjt4nl.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpeodc0yev.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpzzkg1_mc.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpahe7zk4z.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpuo1swl58.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpy5r3obcn.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpchhhiq58.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpjrxky9yr.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp384pc4nu.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp0kdcaihg.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpkgggexoa.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp48w1q1_d.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpcey_bzut.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    let mut i = 1;\n    let mut j = 2;\n    let mut\
    \ k = 3;\n    while i < n {\n        while j < n {\n            while k < n {\n\
    \                let a = i * i - i + 1;\n                let b = j * j - j + 1;\n\
    \                let c = k * k - k + 1;\n                if (a + b + c) % 3 ==\
    \ 0 {\n                    count += 1;\n                }\n                k +=\
    \ 1;\n            }\n            j += 1;\n            k = j + 1;\n        }\n\
    \        i += 1;\n        j = i + 1;\n        k = j + 1;\n    }\n    count\n}\n\
    \nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp08d0x6cr.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmphwnv8ztt.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpjvebw95h.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp3qtt5jyt.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpn5nbrtp_.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp4r8y4bqn.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp0d15uyey.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpwk54dsgm.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    let mut a = vec![0; n as usize];\n    for i in\
    \ 0..n {\n        a[i as usize] = i * i - i + 1;\n    }\n    for i in 0..n - 2\
    \ {\n        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n      \
    \          if (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n   \
    \                 count += 1;\n                }\n            }\n        }\n \
    \   }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n   \
    \ assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmp2u03xgn8.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n as usize];\n    for i in 0..n {\n        a[i as\
    \ usize] = i * i - i + 1;\n    }\n    let mut count = 0;\n    for i in 0..n -\
    \ 2 {\n        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n    \
    \            if (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n \
    \                   count += 1;\n                }\n            }\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n  \
    \  assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpbcg7usme.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i + 1..n {\n\
    \            for k in j + 1..n {\n                if (i * i - i + 1 + j * j -\
    \ j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n       \
    \         }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n  \
    \  let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp3dw5lwxn.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpcurmo33u.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n as usize];\n    for i in 0..n {\n        a[i as\
    \ usize] = i * i - i + 1;\n    }\n    let mut count = 0;\n    for i in 0..n {\n\
    \        for j in i + 1..n {\n            for k in j + 1..n {\n              \
    \  if (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n           \
    \         count += 1;\n                }\n            }\n        }\n    }\n  \
    \  count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmppruofaav.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpkd8f51hn.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpdbisfora.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp3j0m4opw.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmphzu7ttb4.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp_21rx1oj.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpnatm71x8.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp3f34gybr.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n as usize];\n    for i in 0..n {\n        a[i as\
    \ usize] = i * i - i + 1;\n    }\n    let mut count = 0;\n    for i in 0..n -\
    \ 2 {\n        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n    \
    \            if (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n \
    \                   count += 1;\n                }\n            }\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n  \
    \  assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpr2pn6b9d.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    let mut a = Vec::new();\n    for i in 1..n+1\
    \ {\n        a.push(i*i - i + 1);\n    }\n    for i in 0..n-2 {\n        for j\
    \ in i+1..n-1 {\n            for k in j+1..n {\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n                    count += 1;\n                }\n   \
    \         }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpd97md930.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpd97md930.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpd97md930.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp426gdber.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i + 1..n {\n\
    \            for k in j + 1..n {\n                if (i * i - i + 1 + j * j -\
    \ j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n       \
    \         }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n  \
    \  let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp_l9p1rhq.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmptxd1v6lj.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpkt838_6c.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpb7xkmhp7.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpb26dhte_.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp8reij0fi.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmps588un0h.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpbbmri_nc.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpwngs97c5.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpl9kuvlil.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpk_iacxkb.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n as usize];\n    for i in 0..n {\n        a[i as\
    \ usize] = i * i - i + 1;\n    }\n    let mut count = 0;\n    for i in 0..n {\n\
    \        for j in i+1..n {\n            for k in j+1..n {\n                if\
    \ (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n               \
    \     count += 1;\n                }\n            }\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpadg1x8ls.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpo3qczdih.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpqvl01ppc.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
