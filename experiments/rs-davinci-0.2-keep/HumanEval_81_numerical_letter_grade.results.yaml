name: HumanEval_81_numerical_letter_grade
language: rust
results:
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpour3ufa9.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            letter_grades.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            letter_grades.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            letter_grades.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp02yh3h5u.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp_8p9p8m6.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5qhe8_i0.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|g| {\n        let grade = match *g\
    \ {\n            4.0 => \"A+\",\n            g if g > 3.7 => \"A\",\n        \
    \    g if g > 3.3 => \"A-\",\n            g if g > 3.0 => \"B+\",\n          \
    \  g if g > 2.7 => \"B\",\n            g if g > 2.3 => \"B-\",\n            g\
    \ if g > 2.0 => \"C+\",\n            g if g > 1.7 => \"C\",\n            g if\
    \ g > 1.3 => \"C-\",\n            g if g > 1.0 => \"D+\",\n            g if g\
    \ > 0.7 => \"D\",\n            g if g > 0.0 => \"D-\",\n            _ => \"E\"\
    ,\n        };\n        grade.to_string()\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpl5l55i_o.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp7d4pvzvl.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpjvo6llle.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpewkbfadx.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade > 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade > 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade > 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade > 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade > 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade > 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade > 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade > 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade > 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade > 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade > 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            letter_grades.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            letter_grades.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            letter_grades.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpu3fs9178.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|g| {\n        if *g >= 4.0 {\n    \
    \        \"A+\".to_string()\n        } else if *g >= 3.7 {\n            \"A\"\
    .to_string()\n        } else if *g >= 3.3 {\n            \"A-\".to_string()\n\
    \        } else if *g >= 3.0 {\n            \"B+\".to_string()\n        } else\
    \ if *g >= 2.7 {\n            \"B\".to_string()\n        } else if *g >= 2.3 {\n\
    \            \"B-\".to_string()\n        } else if *g >= 2.0 {\n            \"\
    C+\".to_string()\n        } else if *g >= 1.7 {\n            \"C\".to_string()\n\
    \        } else if *g >= 1.3 {\n            \"C-\".to_string()\n        } else\
    \ if *g >= 1.0 {\n            \"D+\".to_string()\n        } else if *g >= 0.7\
    \ {\n            \"D\".to_string()\n        } else if *g >= 0.0 {\n          \
    \  \"D-\".to_string()\n        } else {\n            \"E\".to_string()\n     \
    \   }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpvk0z7hr4.rs:56:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for g in grades {\n\
    \        if g >= 4.0 {\n            result.push(\"A+\".to_string());\n       \
    \ } else if g >= 3.7 {\n            result.push(\"A\".to_string());\n        }\
    \ else if g >= 3.3 {\n            result.push(\"A-\".to_string());\n        }\
    \ else if g >= 3.0 {\n            result.push(\"B+\".to_string());\n        }\
    \ else if g >= 2.7 {\n            result.push(\"B\".to_string());\n        } else\
    \ if g >= 2.3 {\n            result.push(\"B-\".to_string());\n        } else\
    \ if g >= 2.0 {\n            result.push(\"C+\".to_string());\n        } else\
    \ if g >= 1.7 {\n            result.push(\"C\".to_string());\n        } else if\
    \ g >= 1.3 {\n            result.push(\"C-\".to_string());\n        } else if\
    \ g >= 1.0 {\n            result.push(\"D+\".to_string());\n        } else if\
    \ g >= 0.7 {\n            result.push(\"D\".to_string());\n        } else if g\
    \ >= 0.0 {\n            result.push(\"D-\".to_string());\n        } else {\n \
    \           result.push(\"E\".to_string());\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpkug61uee.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            letter_grades.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            letter_grades.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            letter_grades.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp76oq7vsx.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|x| {\n        let grade = match *x\
    \ {\n            4.0 => \"A+\",\n            x if x > 3.7 => \"A\",\n        \
    \    x if x > 3.3 => \"A-\",\n            x if x > 3.0 => \"B+\",\n          \
    \  x if x > 2.7 => \"B\",\n            x if x > 2.3 => \"B-\",\n            x\
    \ if x > 2.0 => \"C+\",\n            x if x > 1.7 => \"C\",\n            x if\
    \ x > 1.3 => \"C-\",\n            x if x > 1.0 => \"D+\",\n            x if x\
    \ > 0.7 => \"D\",\n            x if x > 0.0 => \"D-\",\n            _ => \"E\"\
    ,\n        };\n        grade.to_string()\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            letter_grades.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            letter_grades.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            letter_grades.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmphltrvpm0.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmph6of77p1.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp811v19pe.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpa8y8yt62.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp9rn7ylt8.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpz6m81bkl.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpherew684.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|grade| {\n        if *grade >= 4.0\
    \ {\n            \"A+\".to_string()\n        } else if *grade >= 3.7 {\n     \
    \       \"A\".to_string()\n        } else if *grade >= 3.3 {\n            \"A-\"\
    .to_string()\n        } else if *grade >= 3.0 {\n            \"B+\".to_string()\n\
    \        } else if *grade >= 2.7 {\n            \"B\".to_string()\n        } else\
    \ if *grade >= 2.3 {\n            \"B-\".to_string()\n        } else if *grade\
    \ >= 2.0 {\n            \"C+\".to_string()\n        } else if *grade >= 1.7 {\n\
    \            \"C\".to_string()\n        } else if *grade >= 1.3 {\n          \
    \  \"C-\".to_string()\n        } else if *grade >= 1.0 {\n            \"D+\".to_string()\n\
    \        } else if *grade >= 0.7 {\n            \"D\".to_string()\n        } else\
    \ if *grade >= 0.0 {\n            \"D-\".to_string()\n        } else {\n     \
    \       \"E\".to_string()\n        }\n    }).collect()\n}\n\nfn main() {\n   \
    \ let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpsqmwrbcu.rs:56:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpmaftkekj.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpg5hd_qft.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|g| {\n        if *g >= 4.0 {\n    \
    \        \"A+\".to_string()\n        } else if *g >= 3.7 {\n            \"A\"\
    .to_string()\n        } else if *g >= 3.3 {\n            \"A-\".to_string()\n\
    \        } else if *g >= 3.0 {\n            \"B+\".to_string()\n        } else\
    \ if *g >= 2.7 {\n            \"B\".to_string()\n        } else if *g >= 2.3 {\n\
    \            \"B-\".to_string()\n        } else if *g >= 2.0 {\n            \"\
    C+\".to_string()\n        } else if *g >= 1.7 {\n            \"C\".to_string()\n\
    \        } else if *g >= 1.3 {\n            \"C-\".to_string()\n        } else\
    \ if *g >= 1.0 {\n            \"D+\".to_string()\n        } else if *g >= 0.7\
    \ {\n            \"D\".to_string()\n        } else if *g >= 0.0 {\n          \
    \  \"D-\".to_string()\n        } else {\n            \"E\".to_string()\n     \
    \   }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpls2xfsos.rs:56:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|g| {\n        if *g >= 4.0 {\n    \
    \        \"A+\".to_string()\n        } else if *g >= 3.7 {\n            \"A\"\
    .to_string()\n        } else if *g >= 3.3 {\n            \"A-\".to_string()\n\
    \        } else if *g >= 3.0 {\n            \"B+\".to_string()\n        } else\
    \ if *g >= 2.7 {\n            \"B\".to_string()\n        } else if *g >= 2.3 {\n\
    \            \"B-\".to_string()\n        } else if *g >= 2.0 {\n            \"\
    C+\".to_string()\n        } else if *g >= 1.7 {\n            \"C\".to_string()\n\
    \        } else if *g >= 1.3 {\n            \"C-\".to_string()\n        } else\
    \ if *g >= 1.0 {\n            \"D+\".to_string()\n        } else if *g >= 0.7\
    \ {\n            \"D\".to_string()\n        } else if *g >= 0.0 {\n          \
    \  \"D-\".to_string()\n        } else {\n            \"E\".to_string()\n     \
    \   }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp4m4o4zs4.rs:56:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpc7nur_z8.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmptcjb1yjt.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            letter_grades.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            letter_grades.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            letter_grades.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpzvua3d53.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            letter_grades.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            letter_grades.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            letter_grades.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpiewxc_kt.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpw3j_jem3.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpjlb6i21o.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpx2t5vsal.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp6fsh9_f_.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade > 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade > 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade > 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade > 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade > 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade > 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade > 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade > 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade > 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade > 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade > 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpl2nv2kap.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp_hr42li7.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade > 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade > 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade > 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade > 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade > 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade > 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade > 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade > 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade > 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade > 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade > 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade > 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A\", \"B\", \"C-\", \"C\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]`', /tmp/tmp0l_rqo1v.rs:58:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpy3qcd2cu.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpmmr61d86.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpxyq_ixul.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|&x| {\n        match x {\n        \
    \    4.0 => \"A+\",\n            x if x > 3.7 => \"A\",\n            x if x >\
    \ 3.3 => \"A-\",\n            x if x > 3.0 => \"B+\",\n            x if x > 2.7\
    \ => \"B\",\n            x if x > 2.3 => \"B-\",\n            x if x > 2.0 =>\
    \ \"C+\",\n            x if x > 1.7 => \"C\",\n            x if x > 1.3 => \"\
    C-\",\n            x if x > 1.0 => \"D+\",\n            x if x > 0.7 => \"D\"\
    ,\n            x if x > 0.0 => \"D-\",\n            _ => \"E\",\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpmymr86av.rs:39:8\n     |\n39 \
    \  |     }).collect()\n     |        ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait\
    \ `FromIterator<&str>` is not implemented for `Vec<String>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpb9wzvzl4.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpl1rfvmd3.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmphi7r1c_z.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp1zadcm51.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpfonjnovo.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade > 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade > 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade > 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade > 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade > 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade > 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade > 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade > 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade > 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade > 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade > 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpqi5t5yr2.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            letter_grades.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            letter_grades.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            letter_grades.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmphj8pcma0.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            letter_grades.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            letter_grades.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            letter_grades.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpo0ug24bf.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp7kr60vl4.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp561ovc80.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp86g55qwd.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            letter_grades.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            letter_grades.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            letter_grades.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpypprhm12.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpssysxrne.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade > 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade > 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade > 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade > 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade > 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade > 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade > 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade > 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade > 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade > 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade > 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5tkcytu1.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpws4_hmtl.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade > 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade > 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade > 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade > 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade > 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade > 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade > 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade > 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade > 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade > 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade > 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            letter_grades.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            letter_grades.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            letter_grades.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpt554wk6s.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpt9gbt4u9.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            letter_grades.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            letter_grades.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            letter_grades.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpwklbfe_i.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            letter_grades.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            letter_grades.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            letter_grades.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp4u77po4g.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|x| {\n        if *x >= 4.0 {\n    \
    \        \"A+\".to_string()\n        } else if *x >= 3.7 {\n            \"A\"\
    .to_string()\n        } else if *x >= 3.3 {\n            \"A-\".to_string()\n\
    \        } else if *x >= 3.0 {\n            \"B+\".to_string()\n        } else\
    \ if *x >= 2.7 {\n            \"B\".to_string()\n        } else if *x >= 2.3 {\n\
    \            \"B-\".to_string()\n        } else if *x >= 2.0 {\n            \"\
    C+\".to_string()\n        } else if *x >= 1.7 {\n            \"C\".to_string()\n\
    \        } else if *x >= 1.3 {\n            \"C-\".to_string()\n        } else\
    \ if *x >= 1.0 {\n            \"D+\".to_string()\n        } else if *x >= 0.7\
    \ {\n            \"D\".to_string()\n        } else if *x >= 0.0 {\n          \
    \  \"D-\".to_string()\n        } else {\n            \"E\".to_string()\n     \
    \   }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp9a3qukbn.rs:56:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpzua4d38j.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpmhdbyy5g.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpt4v8exa4.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            letter_grades.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            letter_grades.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            letter_grades.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp9p3637dx.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            letter_grades.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            letter_grades.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            letter_grades.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpp_jy4ye1.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            letter_grades.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            letter_grades.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            letter_grades.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpqpgmiyi3.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpcugx6l8j.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpapvko126.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpzjvkrj56.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpowfgmn42.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            letter_grades.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            letter_grades.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            letter_grades.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpjq2n0rnt.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpljwg3zs3.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmptg2o5b4x.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|g| {\n        if *g >= 4.0 {\n    \
    \        \"A+\".to_string()\n        } else if *g >= 3.7 {\n            \"A\"\
    .to_string()\n        } else if *g >= 3.3 {\n            \"A-\".to_string()\n\
    \        } else if *g >= 3.0 {\n            \"B+\".to_string()\n        } else\
    \ if *g >= 2.7 {\n            \"B\".to_string()\n        } else if *g >= 2.3 {\n\
    \            \"B-\".to_string()\n        } else if *g >= 2.0 {\n            \"\
    C+\".to_string()\n        } else if *g >= 1.7 {\n            \"C\".to_string()\n\
    \        } else if *g >= 1.3 {\n            \"C-\".to_string()\n        } else\
    \ if *g >= 1.0 {\n            \"D+\".to_string()\n        } else if *g >= 0.7\
    \ {\n            \"D\".to_string()\n        } else if *g >= 0.0 {\n          \
    \  \"D-\".to_string()\n        } else {\n            \"E\".to_string()\n     \
    \   }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp18bq9gad.rs:56:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpw8i8ixru.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|&g| {\n        if g >= 4.0 {\n    \
    \        \"A+\".to_string()\n        } else if g >= 3.7 {\n            \"A\".to_string()\n\
    \        } else if g >= 3.3 {\n            \"A-\".to_string()\n        } else\
    \ if g >= 3.0 {\n            \"B+\".to_string()\n        } else if g >= 2.7 {\n\
    \            \"B\".to_string()\n        } else if g >= 2.3 {\n            \"B-\"\
    .to_string()\n        } else if g >= 2.0 {\n            \"C+\".to_string()\n \
    \       } else if g >= 1.7 {\n            \"C\".to_string()\n        } else if\
    \ g >= 1.3 {\n            \"C-\".to_string()\n        } else if g >= 1.0 {\n \
    \           \"D+\".to_string()\n        } else if g >= 0.7 {\n            \"D\"\
    .to_string()\n        } else if g >= 0.0 {\n            \"D-\".to_string()\n \
    \       } else {\n            \"E\".to_string()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpgv41ne1j.rs:56:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpqlg5y42m.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|&x| {\n        if x >= 4.0 {\n    \
    \        \"A+\".to_string()\n        } else if x >= 3.7 {\n            \"A\".to_string()\n\
    \        } else if x >= 3.3 {\n            \"A-\".to_string()\n        } else\
    \ if x >= 3.0 {\n            \"B+\".to_string()\n        } else if x >= 2.7 {\n\
    \            \"B\".to_string()\n        } else if x >= 2.3 {\n            \"B-\"\
    .to_string()\n        } else if x >= 2.0 {\n            \"C+\".to_string()\n \
    \       } else if x >= 1.7 {\n            \"C\".to_string()\n        } else if\
    \ x >= 1.3 {\n            \"C-\".to_string()\n        } else if x >= 1.0 {\n \
    \           \"D+\".to_string()\n        } else if x >= 0.7 {\n            \"D\"\
    .to_string()\n        } else if x >= 0.0 {\n            \"D-\".to_string()\n \
    \       } else {\n            \"E\".to_string()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpve1zc8yt.rs:56:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|g| {\n        if *g >= 4.0 {\n    \
    \        \"A+\".to_string()\n        } else if *g >= 3.7 {\n            \"A\"\
    .to_string()\n        } else if *g >= 3.3 {\n            \"A-\".to_string()\n\
    \        } else if *g >= 3.0 {\n            \"B+\".to_string()\n        } else\
    \ if *g >= 2.7 {\n            \"B\".to_string()\n        } else if *g >= 2.3 {\n\
    \            \"B-\".to_string()\n        } else if *g >= 2.0 {\n            \"\
    C+\".to_string()\n        } else if *g >= 1.7 {\n            \"C\".to_string()\n\
    \        } else if *g >= 1.3 {\n            \"C-\".to_string()\n        } else\
    \ if *g >= 1.0 {\n            \"D+\".to_string()\n        } else if *g >= 0.7\
    \ {\n            \"D\".to_string()\n        } else if *g >= 0.0 {\n          \
    \  \"D-\".to_string()\n        } else {\n            \"E\".to_string()\n     \
    \   }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp_b3c1bf3.rs:56:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|x| {\n        if *x >= 4.0 {\n    \
    \        \"A+\".to_string()\n        } else if *x >= 3.7 {\n            \"A\"\
    .to_string()\n        } else if *x >= 3.3 {\n            \"A-\".to_string()\n\
    \        } else if *x >= 3.0 {\n            \"B+\".to_string()\n        } else\
    \ if *x >= 2.7 {\n            \"B\".to_string()\n        } else if *x >= 2.3 {\n\
    \            \"B-\".to_string()\n        } else if *x >= 2.0 {\n            \"\
    C+\".to_string()\n        } else if *x >= 1.7 {\n            \"C\".to_string()\n\
    \        } else if *x >= 1.3 {\n            \"C-\".to_string()\n        } else\
    \ if *x >= 1.0 {\n            \"D+\".to_string()\n        } else if *x >= 0.7\
    \ {\n            \"D\".to_string()\n        } else if *x >= 0.0 {\n          \
    \  \"D-\".to_string()\n        } else {\n            \"E\".to_string()\n     \
    \   }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpq8p9arih.rs:56:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpl3dr3mke.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|&grade| {\n        let grade = grade.round()\
    \ as i32;\n        match grade {\n            4 => \"A+\",\n            3 => \"\
    A\",\n            2 => \"B\",\n            1 => \"C\",\n            0 => \"D\"\
    ,\n            _ => \"E\",\n        }.to_string()\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"A\", \"B\", \"B\", \"A+\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]`', /tmp/tmpc_nql6u2.rs:38:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade > 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade > 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade > 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade > 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade > 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade > 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade > 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade > 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade > 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade > 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade > 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp7vcnnso7.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade > 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade > 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade > 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade > 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade > 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade > 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade > 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade > 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade > 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade > 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade > 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpra8cqq88.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade > 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade > 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade > 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade > 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade > 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade > 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade > 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade > 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade > 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade > 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade > 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpkc4vhxl4.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp_kp7tub2.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade > 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade > 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade > 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade > 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade > 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade > 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade > 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade > 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade > 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade > 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade > 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpmsalat5y.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut output = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            output.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            output.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            output.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            output.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            output.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            output.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            output.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            output.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            output.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            output.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            output.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            output.push(\"D-\".to_string());\n\
    \        } else {\n            output.push(\"E\".to_string());\n        }\n  \
    \  }\n    output\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp4q032m2f.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp89aueqw4.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp7997cgxn.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp_hp9l78v.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpmgz725q8.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5i9s7vgm.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpp1_qiap9.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade > 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade > 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade > 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade > 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade > 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade > 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade > 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade > 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade > 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade > 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade > 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|&g| {\n        if g >= 4.0 {\n    \
    \        \"A+\".to_string()\n        } else if g >= 3.7 {\n            \"A\".to_string()\n\
    \        } else if g >= 3.3 {\n            \"A-\".to_string()\n        } else\
    \ if g >= 3.0 {\n            \"B+\".to_string()\n        } else if g >= 2.7 {\n\
    \            \"B\".to_string()\n        } else if g >= 2.3 {\n            \"B-\"\
    .to_string()\n        } else if g >= 2.0 {\n            \"C+\".to_string()\n \
    \       } else if g >= 1.7 {\n            \"C\".to_string()\n        } else if\
    \ g >= 1.3 {\n            \"C-\".to_string()\n        } else if g >= 1.0 {\n \
    \           \"D+\".to_string()\n        } else if g >= 0.7 {\n            \"D\"\
    .to_string()\n        } else if g >= 0.0 {\n            \"D-\".to_string()\n \
    \       } else {\n            \"E\".to_string()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmprt72oq1p.rs:56:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            letter_grades.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            letter_grades.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            letter_grades.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpdyhpvkyd.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            letter_grades.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            letter_grades.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            letter_grades.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpm4azroho.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade > 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade > 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade > 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade > 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade > 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade > 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade > 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade > 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade > 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade > 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade > 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp06znqigh.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp6_x1hp5k.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            letter_grades.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            letter_grades.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            letter_grades.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpkv8rb6bv.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpcqp1c8w1.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpd0rvqc8_.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|&g| {\n        if g >= 4.0 {\n    \
    \        \"A+\".to_string()\n        } else if g >= 3.7 {\n            \"A\".to_string()\n\
    \        } else if g >= 3.3 {\n            \"A-\".to_string()\n        } else\
    \ if g >= 3.0 {\n            \"B+\".to_string()\n        } else if g >= 2.7 {\n\
    \            \"B\".to_string()\n        } else if g >= 2.3 {\n            \"B-\"\
    .to_string()\n        } else if g >= 2.0 {\n            \"C+\".to_string()\n \
    \       } else if g >= 1.7 {\n            \"C\".to_string()\n        } else if\
    \ g >= 1.3 {\n            \"C-\".to_string()\n        } else if g >= 1.0 {\n \
    \           \"D+\".to_string()\n        } else if g >= 0.7 {\n            \"D\"\
    .to_string()\n        } else if g >= 0.0 {\n            \"D-\".to_string()\n \
    \       } else {\n            \"E\".to_string()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp1ohj9b__.rs:56:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmps0u_qiph.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpiouzs7ap.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for grade in\
    \ grades {\n        if grade == 4.0 {\n            letter_grades.push(\"A+\".to_string());\n\
    \        } else if grade > 3.7 {\n            letter_grades.push(\"A\".to_string());\n\
    \        } else if grade > 3.3 {\n            letter_grades.push(\"A-\".to_string());\n\
    \        } else if grade > 3.0 {\n            letter_grades.push(\"B+\".to_string());\n\
    \        } else if grade > 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if grade > 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if grade > 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if grade > 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if grade > 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if grade > 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if grade > 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if grade > 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|g| match *g {\n        4.0 => \"A+\"\
    ,\n        g if g > 3.7 => \"A\",\n        g if g > 3.3 => \"A-\",\n        g\
    \ if g > 3.0 => \"B+\",\n        g if g > 2.7 => \"B\",\n        g if g > 2.3\
    \ => \"B-\",\n        g if g > 2.0 => \"C+\",\n        g if g > 1.7 => \"C\",\n\
    \        g if g > 1.3 => \"C-\",\n        g if g > 1.0 => \"D+\",\n        g if\
    \ g > 0.7 => \"D\",\n        g if g > 0.0 => \"D-\",\n        _ => \"E\",\n  \
    \  }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpzautkhj6.rs:37:8\n     |\n37 \
    \  |     }).collect()\n     |        ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait\
    \ `FromIterator<&str>` is not implemented for `Vec<String>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp77jjwdl3.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|&g| match g {\n        4.0 => \"A+\"\
    ,\n        g if g > 3.7 => \"A\",\n        g if g > 3.3 => \"A-\",\n        g\
    \ if g > 3.0 => \"B+\",\n        g if g > 2.7 => \"B\",\n        g if g > 2.3\
    \ => \"B-\",\n        g if g > 2.0 => \"C+\",\n        g if g > 1.7 => \"C\",\n\
    \        g if g > 1.3 => \"C-\",\n        g if g > 1.0 => \"D+\",\n        g if\
    \ g > 0.7 => \"D\",\n        g if g > 0.0 => \"D-\",\n        _ => \"E\",\n  \
    \  }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpi928tbka.rs:37:8\n     |\n37 \
    \  |     }).collect()\n     |        ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait\
    \ `FromIterator<&str>` is not implemented for `Vec<String>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp239i8o19.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpzq9fo7c1.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade > 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade > 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade > 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade > 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade > 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade > 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade > 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade > 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade > 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade > 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade > 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpzofcnojm.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|&g| {\n        if g >= 4.0 {\n    \
    \        \"A+\".to_string()\n        } else if g >= 3.7 {\n            \"A\".to_string()\n\
    \        } else if g >= 3.3 {\n            \"A-\".to_string()\n        } else\
    \ if g >= 3.0 {\n            \"B+\".to_string()\n        } else if g >= 2.7 {\n\
    \            \"B\".to_string()\n        } else if g >= 2.3 {\n            \"B-\"\
    .to_string()\n        } else if g >= 2.0 {\n            \"C+\".to_string()\n \
    \       } else if g >= 1.7 {\n            \"C\".to_string()\n        } else if\
    \ g >= 1.3 {\n            \"C-\".to_string()\n        } else if g >= 1.0 {\n \
    \           \"D+\".to_string()\n        } else if g >= 0.7 {\n            \"D\"\
    .to_string()\n        } else if g >= 0.0 {\n            \"D-\".to_string()\n \
    \       } else {\n            \"E\".to_string()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpj7fe8u4z.rs:56:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            letter_grades.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            letter_grades.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            letter_grades.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmprd3464nq.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp_ikip7s2.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpaaivir96.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            letter_grades.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            letter_grades.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            letter_grades.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp11y7chzw.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpc1rmw_y4.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmps2cphqje.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpxt2naang.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpdvo6d08l.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade > 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade > 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade > 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade > 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade > 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade > 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade > 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade > 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade > 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade > 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade > 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp2xgx15xe.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|grade| {\n        if *grade >= 4.0\
    \ {\n            \"A+\".to_string()\n        } else if *grade >= 3.7 {\n     \
    \       \"A\".to_string()\n        } else if *grade >= 3.3 {\n            \"A-\"\
    .to_string()\n        } else if *grade >= 3.0 {\n            \"B+\".to_string()\n\
    \        } else if *grade >= 2.7 {\n            \"B\".to_string()\n        } else\
    \ if *grade >= 2.3 {\n            \"B-\".to_string()\n        } else if *grade\
    \ >= 2.0 {\n            \"C+\".to_string()\n        } else if *grade >= 1.7 {\n\
    \            \"C\".to_string()\n        } else if *grade >= 1.3 {\n          \
    \  \"C-\".to_string()\n        } else if *grade >= 1.0 {\n            \"D+\".to_string()\n\
    \        } else if *grade >= 0.7 {\n            \"D\".to_string()\n        } else\
    \ if *grade >= 0.0 {\n            \"D-\".to_string()\n        } else {\n     \
    \       \"E\".to_string()\n        }\n    }).collect()\n}\n\nfn main() {\n   \
    \ let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpjnptsoqo.rs:56:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp20jzw3vv.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpodznoe4x.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpv0tqo2u8.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpry4r58ou.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpr_wp_zz2.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|&g| {\n        if g >= 4.0 {\n    \
    \        \"A+\".to_string()\n        } else if g >= 3.7 {\n            \"A\".to_string()\n\
    \        } else if g >= 3.3 {\n            \"A-\".to_string()\n        } else\
    \ if g >= 3.0 {\n            \"B+\".to_string()\n        } else if g >= 2.7 {\n\
    \            \"B\".to_string()\n        } else if g >= 2.3 {\n            \"B-\"\
    .to_string()\n        } else if g >= 2.0 {\n            \"C+\".to_string()\n \
    \       } else if g >= 1.7 {\n            \"C\".to_string()\n        } else if\
    \ g >= 1.3 {\n            \"C-\".to_string()\n        } else if g >= 1.0 {\n \
    \           \"D+\".to_string()\n        } else if g >= 0.7 {\n            \"D\"\
    .to_string()\n        } else if g >= 0.0 {\n            \"D-\".to_string()\n \
    \       } else {\n            \"E\".to_string()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp4nx7u5fc.rs:56:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            letter_grades.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            letter_grades.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            letter_grades.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpxep8o7w_.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpwrv8ryi0.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade > 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade > 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade > 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade > 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade > 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade > 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade > 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade > 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade > 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade > 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade > 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp12xh7n30.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpxb03wn0z.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            letter_grades.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            letter_grades.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            letter_grades.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpkjnrbylo.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5v8f4fph.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade > 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade > 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade > 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade > 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade > 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade > 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade > 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade > 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade > 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade > 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade > 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp7ytc31e4.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpzpa5c2eo.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpdz3apc9y.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp198br1s5.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpdsz7unj0.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpht8m7iwa.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmphsmjfcds.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|g| {\n        if *g >= 4.0 {\n    \
    \        \"A+\".to_string()\n        } else if *g >= 3.7 {\n            \"A\"\
    .to_string()\n        } else if *g >= 3.3 {\n            \"A-\".to_string()\n\
    \        } else if *g >= 3.0 {\n            \"B+\".to_string()\n        } else\
    \ if *g >= 2.7 {\n            \"B\".to_string()\n        } else if *g >= 2.3 {\n\
    \            \"B-\".to_string()\n        } else if *g >= 2.0 {\n            \"\
    C+\".to_string()\n        } else if *g >= 1.7 {\n            \"C\".to_string()\n\
    \        } else if *g >= 1.3 {\n            \"C-\".to_string()\n        } else\
    \ if *g >= 1.0 {\n            \"D+\".to_string()\n        } else if *g >= 0.7\
    \ {\n            \"D\".to_string()\n        } else if *g >= 0.0 {\n          \
    \  \"D-\".to_string()\n        } else {\n            \"E\".to_string()\n     \
    \   }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpamliqzpo.rs:56:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpyum_w86s.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmph0p65bbv.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp94tuf_e2.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|x| {\n        if *x >= 4.0 {\n    \
    \        \"A+\".to_string()\n        } else if *x >= 3.7 {\n            \"A\"\
    .to_string()\n        } else if *x >= 3.3 {\n            \"A-\".to_string()\n\
    \        } else if *x >= 3.0 {\n            \"B+\".to_string()\n        } else\
    \ if *x >= 2.7 {\n            \"B\".to_string()\n        } else if *x >= 2.3 {\n\
    \            \"B-\".to_string()\n        } else if *x >= 2.0 {\n            \"\
    C+\".to_string()\n        } else if *x >= 1.7 {\n            \"C\".to_string()\n\
    \        } else if *x >= 1.3 {\n            \"C-\".to_string()\n        } else\
    \ if *x >= 1.0 {\n            \"D+\".to_string()\n        } else if *x >= 0.7\
    \ {\n            \"D\".to_string()\n        } else if *x >= 0.0 {\n          \
    \  \"D-\".to_string()\n        } else {\n            \"E\".to_string()\n     \
    \   }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpe0uul7a6.rs:56:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpy21lwu_m.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|grade| {\n        if *grade >= 4.0\
    \ {\n            \"A+\".to_string()\n        } else if *grade >= 3.7 {\n     \
    \       \"A\".to_string()\n        } else if *grade >= 3.3 {\n            \"A-\"\
    .to_string()\n        } else if *grade >= 3.0 {\n            \"B+\".to_string()\n\
    \        } else if *grade >= 2.7 {\n            \"B\".to_string()\n        } else\
    \ if *grade >= 2.3 {\n            \"B-\".to_string()\n        } else if *grade\
    \ >= 2.0 {\n            \"C+\".to_string()\n        } else if *grade >= 1.7 {\n\
    \            \"C\".to_string()\n        } else if *grade >= 1.3 {\n          \
    \  \"C-\".to_string()\n        } else if *grade >= 1.0 {\n            \"D+\".to_string()\n\
    \        } else if *grade >= 0.7 {\n            \"D\".to_string()\n        } else\
    \ if *grade >= 0.0 {\n            \"D-\".to_string()\n        } else {\n     \
    \       \"E\".to_string()\n        }\n    }).collect()\n}\n\nfn main() {\n   \
    \ let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp4t7xttnb.rs:56:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|grade| {\n        if *grade >= 4.0\
    \ {\n            \"A+\".to_string()\n        } else if *grade >= 3.7 {\n     \
    \       \"A\".to_string()\n        } else if *grade >= 3.3 {\n            \"A-\"\
    .to_string()\n        } else if *grade >= 3.0 {\n            \"B+\".to_string()\n\
    \        } else if *grade >= 2.7 {\n            \"B\".to_string()\n        } else\
    \ if *grade >= 2.3 {\n            \"B-\".to_string()\n        } else if *grade\
    \ >= 2.0 {\n            \"C+\".to_string()\n        } else if *grade >= 1.7 {\n\
    \            \"C\".to_string()\n        } else if *grade >= 1.3 {\n          \
    \  \"C-\".to_string()\n        } else if *grade >= 1.0 {\n            \"D+\".to_string()\n\
    \        } else if *grade >= 0.7 {\n            \"D\".to_string()\n        } else\
    \ if *grade >= 0.0 {\n            \"D-\".to_string()\n        } else {\n     \
    \       \"E\".to_string()\n        }\n    }).collect()\n}\n\nfn main() {\n   \
    \ let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpanjtyg6s.rs:56:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpvq2k_ho1.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|&grade| {\n        if grade >= 4.0\
    \ {\n            \"A+\".to_string()\n        } else if grade >= 3.7 {\n      \
    \      \"A\".to_string()\n        } else if grade >= 3.3 {\n            \"A-\"\
    .to_string()\n        } else if grade >= 3.0 {\n            \"B+\".to_string()\n\
    \        } else if grade >= 2.7 {\n            \"B\".to_string()\n        } else\
    \ if grade >= 2.3 {\n            \"B-\".to_string()\n        } else if grade >=\
    \ 2.0 {\n            \"C+\".to_string()\n        } else if grade >= 1.7 {\n  \
    \          \"C\".to_string()\n        } else if grade >= 1.3 {\n            \"\
    C-\".to_string()\n        } else if grade >= 1.0 {\n            \"D+\".to_string()\n\
    \        } else if grade >= 0.7 {\n            \"D\".to_string()\n        } else\
    \ if grade >= 0.0 {\n            \"D-\".to_string()\n        } else {\n      \
    \      \"E\".to_string()\n        }\n    }).collect()\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmphzw6da5c.rs:56:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpo89yp7p2.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpivzs81_1.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut output: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            output.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            output.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            output.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            output.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            output.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            output.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            output.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            output.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            output.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            output.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            output.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            output.push(\"D-\".to_string());\n\
    \        } else {\n            output.push(\"E\".to_string());\n        }\n  \
    \  }\n    output\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp5utrewbh.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpi72x51k2.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpi5pdhsnd.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade > 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade > 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade > 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade > 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade > 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade > 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade > 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade > 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade > 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade > 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade > 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|&g| {\n        if g >= 4.0 {\n    \
    \        \"A+\".to_string()\n        } else if g >= 3.7 {\n            \"A\".to_string()\n\
    \        } else if g >= 3.3 {\n            \"A-\".to_string()\n        } else\
    \ if g >= 3.0 {\n            \"B+\".to_string()\n        } else if g >= 2.7 {\n\
    \            \"B\".to_string()\n        } else if g >= 2.3 {\n            \"B-\"\
    .to_string()\n        } else if g >= 2.0 {\n            \"C+\".to_string()\n \
    \       } else if g >= 1.7 {\n            \"C\".to_string()\n        } else if\
    \ g >= 1.3 {\n            \"C-\".to_string()\n        } else if g >= 1.0 {\n \
    \           \"D+\".to_string()\n        } else if g >= 0.7 {\n            \"D\"\
    .to_string()\n        } else if g >= 0.0 {\n            \"D-\".to_string()\n \
    \       } else {\n            \"E\".to_string()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpqi3laxtj.rs:56:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmphxs214r6.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp2cd1xrfc.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpqp5gi9z5.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp_dzfl4kp.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpbwveiof3.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpk4o2nf2o.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpzgjmbbzp.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            letter_grades.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            letter_grades.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            letter_grades.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmprft47gy1.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut letter_grades = Vec::new();\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            letter_grades.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            letter_grades.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            letter_grades.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            letter_grades.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            letter_grades.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            letter_grades.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            letter_grades.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            letter_grades.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            letter_grades.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            letter_grades.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            letter_grades.push(\"D-\".to_string());\n\
    \        } else {\n            letter_grades.push(\"E\".to_string());\n      \
    \  }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmprm824d86.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp4pgop4a1.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|g| {\n        if *g >= 4.0 {\n    \
    \        \"A+\".to_string()\n        } else if *g >= 3.7 {\n            \"A\"\
    .to_string()\n        } else if *g >= 3.3 {\n            \"A-\".to_string()\n\
    \        } else if *g >= 3.0 {\n            \"B+\".to_string()\n        } else\
    \ if *g >= 2.7 {\n            \"B\".to_string()\n        } else if *g >= 2.3 {\n\
    \            \"B-\".to_string()\n        } else if *g >= 2.0 {\n            \"\
    C+\".to_string()\n        } else if *g >= 1.7 {\n            \"C\".to_string()\n\
    \        } else if *g >= 1.3 {\n            \"C-\".to_string()\n        } else\
    \ if *g >= 1.0 {\n            \"D+\".to_string()\n        } else if *g >= 0.7\
    \ {\n            \"D\".to_string()\n        } else if *g >= 0.0 {\n          \
    \  \"D-\".to_string()\n        } else {\n            \"E\".to_string()\n     \
    \   }\n    }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmppqnbklv4.rs:56:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for grade\
    \ in grades {\n        if grade == 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade > 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade > 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade > 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade > 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade > 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade > 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade > 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade > 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade > 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade > 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade > 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade > 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade > 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade > 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade > 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade > 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade > 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade > 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade > 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade > 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade > 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade > 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|&g| {\n        let grade = match g\
    \ {\n            4.0 => \"A+\",\n            g if g > 3.7 => \"A\",\n        \
    \    g if g > 3.3 => \"A-\",\n            g if g > 3.0 => \"B+\",\n          \
    \  g if g > 2.7 => \"B\",\n            g if g > 2.3 => \"B-\",\n            g\
    \ if g > 2.0 => \"C+\",\n            g if g > 1.7 => \"C\",\n            g if\
    \ g > 1.3 => \"C-\",\n            g if g > 1.0 => \"D+\",\n            g if g\
    \ > 0.7 => \"D\",\n            g if g > 0.0 => \"D-\",\n            _ => \"E\"\
    ,\n        };\n        grade.to_string()\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp66hpb36x.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp10ghzza2.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|grade| {\n        let grade = *grade;\n\
    \        if grade >= 4.0 {\n            \"A+\".to_string()\n        } else if\
    \ grade >= 3.7 {\n            \"A\".to_string()\n        } else if grade >= 3.3\
    \ {\n            \"A-\".to_string()\n        } else if grade >= 3.0 {\n      \
    \      \"B+\".to_string()\n        } else if grade >= 2.7 {\n            \"B\"\
    .to_string()\n        } else if grade >= 2.3 {\n            \"B-\".to_string()\n\
    \        } else if grade >= 2.0 {\n            \"C+\".to_string()\n        } else\
    \ if grade >= 1.7 {\n            \"C\".to_string()\n        } else if grade >=\
    \ 1.3 {\n            \"C-\".to_string()\n        } else if grade >= 1.0 {\n  \
    \          \"D+\".to_string()\n        } else if grade >= 0.7 {\n            \"\
    D\".to_string()\n        } else if grade >= 0.0 {\n            \"D-\".to_string()\n\
    \        } else {\n            \"E\".to_string()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp_ev9gj5x.rs:57:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpan_8_a2n.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp4ulos7j8.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp35u7c_eq.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade > 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade > 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade > 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade > 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade > 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade > 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade > 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade > 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade > 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade > 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade > 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade == 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade > 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade > 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade > 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade > 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade > 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade > 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade > 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade > 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade > 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade > 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade > 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpu02y9vmo.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    let mut result = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            result.push(\"A+\".to_string());\n\
    \        } else if grade >= 3.7 {\n            result.push(\"A\".to_string());\n\
    \        } else if grade >= 3.3 {\n            result.push(\"A-\".to_string());\n\
    \        } else if grade >= 3.0 {\n            result.push(\"B+\".to_string());\n\
    \        } else if grade >= 2.7 {\n            result.push(\"B\".to_string());\n\
    \        } else if grade >= 2.3 {\n            result.push(\"B-\".to_string());\n\
    \        } else if grade >= 2.0 {\n            result.push(\"C+\".to_string());\n\
    \        } else if grade >= 1.7 {\n            result.push(\"C\".to_string());\n\
    \        } else if grade >= 1.3 {\n            result.push(\"C-\".to_string());\n\
    \        } else if grade >= 1.0 {\n            result.push(\"D+\".to_string());\n\
    \        } else if grade >= 0.7 {\n            result.push(\"D\".to_string());\n\
    \        } else if grade >= 0.0 {\n            result.push(\"D-\".to_string());\n\
    \        } else {\n            result.push(\"E\".to_string());\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpyemwkcfq.rs:58:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a list of GPAs for some students and you have to write \n/// a\
    \ function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n    grades.iter().map(|&g| {\n        match g {\n        \
    \    4.0 => \"A+\",\n            g if g > 3.7 => \"A\",\n            g if g >\
    \ 3.3 => \"A-\",\n            g if g > 3.0 => \"B+\",\n            g if g > 2.7\
    \ => \"B\",\n            g if g > 2.3 => \"B-\",\n            g if g > 2.0 =>\
    \ \"C+\",\n            g if g > 1.7 => \"C\",\n            g if g > 1.3 => \"\
    C-\",\n            g if g > 1.0 => \"D+\",\n            g if g > 0.7 => \"D\"\
    ,\n            g if g > 0.0 => \"D-\",\n            _ => \"E\",\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpy4x9f6mj.rs:39:8\n     |\n39 \
    \  |     }).collect()\n     |        ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait\
    \ `FromIterator<&str>` is not implemented for `Vec<String>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
