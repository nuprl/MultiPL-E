name: HumanEval_146_specialFilter
language: rust
results:
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpbshstbq9.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut result\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            result += 1;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmptrv8g3jp.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpjbp561u3.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp_4dvunft.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for i in nums {\n        if i > 10 && i % 2 != 0 && (i / 10) % 2 !=\
    \ 0 && i % 10 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\
    \nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpyjn7i0im.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && is_odd(num) && is_odd(num\
    \ / 10) {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_odd` in this scope\n  --> /tmp/tmp6nqxv636.rs:10:24\n\
    \   |\n10 |         if num > 10 && is_odd(num) && is_odd(num / 10) {\n   |   \
    \                     ^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `is_odd` in this scope\n  --> /tmp/tmp6nqxv636.rs:10:39\n   |\n10 |\
    \         if num > 10 && is_odd(num) && is_odd(num / 10) {\n   |             \
    \                          ^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmphr6xkcwv.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && is_odd(num) && is_odd(num\
    \ / 10) {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_odd` in this scope\n  --> /tmp/tmprf13502l.rs:10:24\n\
    \   |\n10 |         if num > 10 && is_odd(num) && is_odd(num / 10) {\n   |   \
    \                     ^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `is_odd` in this scope\n  --> /tmp/tmprf13502l.rs:10:39\n   |\n10 |\
    \         if num > 10 && is_odd(num) && is_odd(num / 10) {\n   |             \
    \                          ^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        let mut num = num;\n        if num < 0\
    \ {\n            num = -num;\n        }\n        if num > 10 {\n            let\
    \ first = num % 10;\n            let last = num / 10;\n            if first %\
    \ 2 == 1 && last % 2 == 1 {\n                count += 1;\n            }\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `1`', /tmp/tmpuoun5km5.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            let mut num_copy\
    \ = num;\n            let mut first_digit = num_copy % 10;\n            num_copy\
    \ /= 10;\n            let last_digit = num_copy % 10;\n            if first_digit\
    \ % 2 != 0 && last_digit % 2 != 0 {\n                count += 1;\n           \
    \ }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp9ty7dtkp.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|&x|\
    \ x > &10 && x.abs() % 10 % 2 != 0 && x.abs() / 10 % 2 != 0).count() as isize\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpv3xsppl6.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpxfkrxjfq.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmphhjjefq9.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpf6n5wogg.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp3fh7xnv8.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for i in nums {\n        if i > 10 && i % 2 != 0 && i / 10 % 2 !=\
    \ 0 && i % 10 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\
    \nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpb_lg3c9l.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 && num % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp63aylscf.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.abs() % 10 % 2 != 0\
    \ && num.abs() / 10 % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpw1qt22t8.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpv_t1an27.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.abs() % 10 % 2 != 0\
    \ && num / 10 % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n   \
    \ count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp25jqlznb.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp97xsqxy2.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for i in nums {\n        if i > 10 && i % 2 != 0 && i % 10 != 0 {\n\
    \            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp5fia9zpk.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp1mlvklcz.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 && num % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpxn7rdaqy.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.abs() % 10 % 2 != 0\
    \ && num / 10 % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n   \
    \ count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp8n94fe8w.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.abs() % 10 % 2 != 0\
    \ && num.abs() / 10 % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpyl81rh8y.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.abs() % 10 % 2 != 0\
    \ && num.abs() / 10 % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp3_q0nyww.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for i in nums {\n        if i > 10 && i % 2 != 0 && i % 10 != 0 {\n\
    \            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpkaieyj9p.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.abs() % 10 % 2 != 0\
    \ && (num / 10).abs() % 10 % 2 != 0 {\n            count += 1;\n        }\n  \
    \  }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmptifgbrzm.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && is_odd(num) && is_odd(num\
    \ / 10) {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_odd` in this scope\n  --> /tmp/tmp3w4t5cm1.rs:10:24\n\
    \   |\n10 |         if num > 10 && is_odd(num) && is_odd(num / 10) {\n   |   \
    \                     ^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `is_odd` in this scope\n  --> /tmp/tmp3w4t5cm1.rs:10:39\n   |\n10 |\
    \         if num > 10 && is_odd(num) && is_odd(num / 10) {\n   |             \
    \                          ^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpz9ci6au2.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 && num % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpq_5ux9g3.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 && num % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpkyptnlfo.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp20tjmyit.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for i in nums {\n        if i > 10 && i % 2 != 0 && i / 10 % 2 !=\
    \ 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpcentfgfi.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && (num % 10) % 2 != 0 && (num\
    \ / 10) % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpt5crzjao.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|&x|\
    \ x > &10 && x.abs() % 10 % 2 != 0 && x / 10 % 10 % 2 != 0).count() as isize\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmph7mjixxm.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 && num % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp5cb29pop.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpu55013qo.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpff3kwiy8.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.abs() % 10 % 2 != 0\
    \ && num / 10 % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n   \
    \ count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpr8pz5jgb.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpvmojed91.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            let mut num_str\
    \ = num.to_string();\n            let first_digit = num_str.remove(0);\n     \
    \       let last_digit = num_str.pop().unwrap();\n            if first_digit.is_digit(10)\
    \ && last_digit.is_digit(10) {\n                if first_digit.to_digit(10).unwrap()\
    \ % 2 != 0 && last_digit.to_digit(10).unwrap() % 2 != 0 {\n                  \
    \  count += 1;\n                }\n            }\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpg3slsqnp.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.abs() % 10 % 2 != 0\
    \ && num / 10 % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n   \
    \ count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpp3ltre16.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmphclf0kv2.rs:8:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && is_odd(num) && is_odd(num\
    \ / 10) {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_odd` in this scope\n  --> /tmp/tmp7vggpm6n.rs:10:24\n\
    \   |\n10 |         if num > 10 && is_odd(num) && is_odd(num / 10) {\n   |   \
    \                     ^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `is_odd` in this scope\n  --> /tmp/tmp7vggpm6n.rs:10:39\n   |\n10 |\
    \         if num > 10 && is_odd(num) && is_odd(num / 10) {\n   |             \
    \                          ^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpp6rkgk5o.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && is_odd(num) && is_odd(num\
    \ / 10) {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_odd` in this scope\n  --> /tmp/tmp9fru6ahu.rs:10:24\n\
    \   |\n10 |         if num > 10 && is_odd(num) && is_odd(num / 10) {\n   |   \
    \                     ^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `is_odd` in this scope\n  --> /tmp/tmp9fru6ahu.rs:10:39\n   |\n10 |\
    \         if num > 10 && is_odd(num) && is_odd(num / 10) {\n   |             \
    \                          ^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for i in nums {\n        if i > 10 && i % 2 != 0 && i / 10 % 2 !=\
    \ 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpqg3kruqu.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp4vt867lt.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpq7d17ne7.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.abs() % 10 % 2 != 0\
    \ && num / 10 % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n   \
    \ count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpep3_0y__.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for i in nums {\n        if i > 10 && i % 2 != 0 && i % 10 != 0 {\n\
    \            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmppab4loh4.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.abs() % 10 % 2 != 0\
    \ && num.abs() / 10 % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpsputnj8y.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 && num % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp4jo0uc_5.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.abs() % 10 % 2 != 0\
    \ && num.abs() / 10 % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp415_7fub.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && is_odd(num) && is_odd(num\
    \ / 10) {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_odd` in this scope\n  --> /tmp/tmpt77mnvio.rs:10:24\n\
    \   |\n10 |         if num > 10 && is_odd(num) && is_odd(num / 10) {\n   |   \
    \                     ^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `is_odd` in this scope\n  --> /tmp/tmpt77mnvio.rs:10:39\n   |\n10 |\
    \         if num > 10 && is_odd(num) && is_odd(num / 10) {\n   |             \
    \                          ^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmph36tdkw3.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp_yc3nsgu.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && is_first_and_last_digit_odd(num)\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_first_and_last_digit_odd` in this\
    \ scope\n  --> /tmp/tmpqv0nlsx1.rs:10:24\n   |\n10 |         if num > 10 && is_first_and_last_digit_odd(num)\
    \ {\n   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for i in nums {\n        if i > 10 && i % 2 != 0 && i / 10 % 2 !=\
    \ 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpcq6eqmzq.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for i in nums {\n        if i > 10 && i % 2 != 0 && i / 10 % 2 !=\
    \ 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpj46h855x.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for i in nums {\n        if i > 10 && i % 2 != 0 && i / 10 % 2 !=\
    \ 0 && i % 10 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\
    \nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp0cvdvki2.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.abs() % 10 % 2 != 0\
    \ && num.abs() / 10 % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpxk67mdaa.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpw96_jyar.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && (num / 10)\
    \ % 2 != 0 && num % 10 != 0 {\n            count += 1;\n        }\n    }\n   \
    \ count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpmkrxl3xj.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp5wgroavl.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp_ho084l5.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n > 10 && n % 2 != 0 && n % 10 != 0 {\n\
    \            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp5xd6o2_0.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpmqrhu_r5.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpvt_m8t8p.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n > 10 && n % 2 != 0 && n % 10 != 0 {\n\
    \            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmphluotokc.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.abs() % 10 % 2 != 0\
    \ && num.abs() / 10 % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmppu1297yr.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n > 10 && n % 2 != 0 && n % 10 != 0 {\n\
    \            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp3yze7hje.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && is_odd(num / 10) && is_odd(num\
    \ % 10) {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_odd` in this scope\n  --> /tmp/tmphdws_h47.rs:10:24\n\
    \   |\n10 |         if num > 10 && is_odd(num / 10) && is_odd(num % 10) {\n  \
    \ |                        ^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `is_odd` in this scope\n  --> /tmp/tmphdws_h47.rs:10:44\n   |\n\
    10 |         if num > 10 && is_odd(num / 10) && is_odd(num % 10) {\n   |     \
    \                                       ^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for i in nums {\n        if i > 10 && i % 2 != 0 && i % 10 != 0 {\n\
    \            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpu98m4bp8.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpr0qudctn.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 && num % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpz2yrpiyl.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp710bouh8.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && (num / 10)\
    \ % 2 != 0 && num % 10 != 0 {\n            count += 1;\n        }\n    }\n   \
    \ count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpcez5sf0n.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpbhkezscv.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpr8qebj6p.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp1_dszz2z.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|&n|\
    \ n > &10 && n.abs() % 10 % 2 != 0 && n.abs() / 10 % 2 != 0).count() as isize\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp2dn1lh5z.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut result\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            result += 1;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmphj7lemrg.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpefv0kp23.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for i in nums {\n        if i > 10 && i % 2 != 0 && i / 10 % 2 !=\
    \ 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp4ow6ox1t.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for i in nums {\n        if i > 10 && i % 2 != 0 && i / 10 % 2 !=\
    \ 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp2jmojtlf.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpnsa1dnj8.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpoohtyfk3.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n > 10 && n.abs() % 10 % 2 != 0 && n.abs()\
    \ / 10 % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpwlpl4ir4.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpulbs_ee5.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 && num % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp9zuaffa4.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 && num % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpjz8_8kdh.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.to_string().chars().nth(0).unwrap().to_digit(10).unwrap()\
    \ % 2 != 0 && num.to_string().chars().last().unwrap().to_digit(10).unwrap() %\
    \ 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        let mut num = num;\n        if num < 0\
    \ {\n            num = -num;\n        }\n        let first = num % 10;\n     \
    \   let last = num / 10;\n        if first % 2 != 0 && last % 2 != 0 && num >\
    \ 10 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `1`', /tmp/tmpv77pygpy.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpz4ox6i1d.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.to_string().chars().nth(0).unwrap().to_digit(10).unwrap()\
    \ % 2 != 0 && num.to_string().chars().last().unwrap().to_digit(10).unwrap() %\
    \ 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && (num % 10) % 2 != 0 && num\
    \ / 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpxjmkefyy.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp2dwrz6d9.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp_dkhc37a.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.abs() % 10 % 2 != 0\
    \ && num.abs() / 10 % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpha5s0w43.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpk4507q0d.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 && num % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmps_qnfn0n.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n > 10 && n % 2 != 0 && n / 10 % 2 !=\
    \ 0 && n % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpbnvag9bh.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for i in nums {\n        if i > 10 && i % 2 != 0 && i % 10 != 0 {\n\
    \            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp81uu0me3.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|&x|\
    \ x > &10 && x.abs() % 10 % 2 != 0 && x / 10 % 10 % 2 != 0).count() as isize\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmphkleso24.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpexsxhaz6.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.abs() % 10 % 2 != 0\
    \ && num.abs() / 10 % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmprg042j8i.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.abs() % 10 % 2 != 0\
    \ && num.abs() / 10 % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp44ywtvss.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 && num % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpe1btjmmi.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.abs() % 10 % 2 != 0\
    \ && num.abs() / 10 % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpxgzhbf8a.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpad_hoju2.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        let mut num = num;\n        if num < 0\
    \ {\n            num = -num;\n        }\n        if num > 10 {\n            let\
    \ mut first = num % 10;\n            let mut last = num % 10;\n            while\
    \ num > 0 {\n                num /= 10;\n                last = num % 10;\n  \
    \          }\n            if first % 2 != 0 && last % 2 != 0 {\n             \
    \   count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp_3xw_yoj.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpbji2c7vj.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.to_string().chars().next().unwrap().to_digit(10).unwrap()\
    \ % 2 != 0 && num.to_string().chars().last().unwrap().to_digit(10).unwrap() %\
    \ 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmptmkzm5ra.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpj4ogdnwu.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp1w48bsgj.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp0925lxf_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && is_odd(num) && is_odd(num\
    \ / 10) {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_odd` in this scope\n  --> /tmp/tmp95b9k54p.rs:10:24\n\
    \   |\n10 |         if num > 10 && is_odd(num) && is_odd(num / 10) {\n   |   \
    \                     ^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `is_odd` in this scope\n  --> /tmp/tmp95b9k54p.rs:10:39\n   |\n10 |\
    \         if num > 10 && is_odd(num) && is_odd(num / 10) {\n   |             \
    \                          ^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for i in nums {\n        if i > 10 && i % 2 != 0 && (i % 10) % 2 !=\
    \ 0 && (i / 10) % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmppgvc7sb0.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp06hxlbxl.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.abs() % 10 % 2 != 0\
    \ && num.abs() / 10 % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpuypnn00d.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && (num / 10)\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpctewwb4m.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && is_odd(num) && is_odd(num\
    \ / 10) {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_odd` in this scope\n  --> /tmp/tmpiej7aeho.rs:10:24\n\
    \   |\n10 |         if num > 10 && is_odd(num) && is_odd(num / 10) {\n   |   \
    \                     ^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `is_odd` in this scope\n  --> /tmp/tmpiej7aeho.rs:10:39\n   |\n10 |\
    \         if num > 10 && is_odd(num) && is_odd(num / 10) {\n   |             \
    \                          ^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && (num % 10)\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpl8zi8u0u.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            let mut n =\
    \ num;\n            let mut first = n % 10;\n            n /= 10;\n          \
    \  let last = n % 10;\n            if first % 2 != 0 && last % 2 != 0 {\n    \
    \            count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn\
    \ main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpuvzgs3cr.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpq3cphtob.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp4a3vz28_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpbcsuhlj9.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            let mut num\
    \ = num;\n            let mut first = num % 10;\n            num /= 10;\n    \
    \        let mut last = num % 10;\n            num /= 10;\n            while num\
    \ > 0 {\n                last = num % 10;\n                num /= 10;\n      \
    \      }\n            if first % 2 != 0 && last % 2 != 0 {\n                count\
    \ += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && (num / 10)\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpaolgt9ge.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && is_odd(num / 10) && is_odd(num\
    \ % 10) {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_odd` in this scope\n  --> /tmp/tmpbpsy9iaz.rs:10:24\n\
    \   |\n10 |         if num > 10 && is_odd(num / 10) && is_odd(num % 10) {\n  \
    \ |                        ^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `is_odd` in this scope\n  --> /tmp/tmpbpsy9iaz.rs:10:44\n   |\n\
    10 |         if num > 10 && is_odd(num / 10) && is_odd(num % 10) {\n   |     \
    \                                       ^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpoq14ov47.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.abs() % 10 % 2 != 0\
    \ && num / 10 % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n   \
    \ count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpzvosbuef.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.abs() % 10 % 2 != 0\
    \ && num.abs() / 10 % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp1b95_2kx.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmphqyfcl3d.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp2co0sv93.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmplfcigsc_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|&x|\
    \ x > &10 && x.abs() % 10 % 2 != 0 && x / 10 % 10 % 2 != 0).count() as isize\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp7ab7sow5.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 && num % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp_2n3lwdi.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpw4h_z2u2.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.abs() % 10 % 2 != 0\
    \ && num / 10 % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n   \
    \ count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpv_3r2usd.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && (num % 10) % 2 != 0 && (num\
    \ / 10) % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpc0lbqide.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpvb4d7zd1.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpe_oze8__.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp3424os58.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.abs() % 10 % 2 != 0\
    \ && num / 10 % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n   \
    \ count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpdn9e3cy9.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpjqtbhrqx.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpglsnf_wm.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            let mut n =\
    \ num;\n            let mut first = n % 10;\n            n /= 10;\n          \
    \  let mut last = n % 10;\n            while n > 0 {\n                n /= 10;\n\
    \                last = n % 10;\n            }\n            if first % 2 != 0\
    \ && last % 2 != 0 {\n                count += 1;\n            }\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp4afhj2x3.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && is_odd(num) && is_odd(num\
    \ / 10) {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_odd` in this scope\n  --> /tmp/tmpt8wciz2e.rs:10:24\n\
    \   |\n10 |         if num > 10 && is_odd(num) && is_odd(num / 10) {\n   |   \
    \                     ^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `is_odd` in this scope\n  --> /tmp/tmpt8wciz2e.rs:10:39\n   |\n10 |\
    \         if num > 10 && is_odd(num) && is_odd(num / 10) {\n   |             \
    \                          ^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp7riqp5_a.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.abs() % 10 % 2 != 0\
    \ && num / 10 % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n   \
    \ count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpk9lfq2q_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.abs() % 10 % 2 != 0\
    \ && (num / 10).abs() % 10 % 2 != 0 {\n            count += 1;\n        }\n  \
    \  }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp2wfnlqy3.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 && num % 10 != 0 {\n            count += 1;\n        }\n    }\n   \
    \ count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp6jakcsm4.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && (num / 10)\
    \ % 2 != 0 && num % 10 != 0 {\n            count += 1;\n        }\n    }\n   \
    \ count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmphkeejgcv.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.abs() % 10 % 2 != 0\
    \ && num / 10 % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n   \
    \ count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp12r6pc3u.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n > 10 && n % 2 != 0 && n / 10 % 2 !=\
    \ 0 && n % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpx67rlkhl.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.abs() % 10 % 2 != 0\
    \ && num.abs() / 10 % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp2ui3__cb.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && is_odd(num) && is_odd(num\
    \ / 10) {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_odd` in this scope\n  --> /tmp/tmpulg8cyhz.rs:10:24\n\
    \   |\n10 |         if num > 10 && is_odd(num) && is_odd(num / 10) {\n   |   \
    \                     ^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `is_odd` in this scope\n  --> /tmp/tmpulg8cyhz.rs:10:39\n   |\n10 |\
    \         if num > 10 && is_odd(num) && is_odd(num / 10) {\n   |             \
    \                          ^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpwwcsquz8.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmphtyzsbv3.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpj0srajnm.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.abs() % 10 % 2 != 0\
    \ && num / 10 % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n   \
    \ count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp3mz1fe_d.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.abs() % 10 % 2 != 0\
    \ && num / 10 % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n   \
    \ count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp0lees6v3.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpt7b03059.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.to_string().chars().nth(0).unwrap().to_digit(10).unwrap()\
    \ % 2 != 0 && num.to_string().chars().last().unwrap().to_digit(10).unwrap() %\
    \ 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp4ipw8glk.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 && num % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpxlvx3mps.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && (num % 10) % 2 != 0 && (num\
    \ / 10) % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpk1a9x8co.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp1rqk1w4n.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpuy8f3rgy.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp3fgbmq1f.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && (num / 10)\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmptgeyybh_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num > 0 && num % 2 == 1\
    \ && num % 10 == 1 {\n            count += 1;\n        }\n    }\n    count\n}\n\
    \nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp_w8kv_ce.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && is_odd(num % 10) && is_odd(num\
    \ / 10) {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_odd` in this scope\n  --> /tmp/tmpaj0kxis7.rs:10:24\n\
    \   |\n10 |         if num > 10 && is_odd(num % 10) && is_odd(num / 10) {\n  \
    \ |                        ^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `is_odd` in this scope\n  --> /tmp/tmpaj0kxis7.rs:10:44\n   |\n\
    10 |         if num > 10 && is_odd(num % 10) && is_odd(num / 10) {\n   |     \
    \                                       ^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpbplilxn3.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 && num % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpzhdvhi_t.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp6rdw7wjk.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpqcxevz0z.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.abs() % 10 % 2 != 0\
    \ && num.abs() / 10 % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpwar864q5.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 && num % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpjhhfkwsd.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|&x|\
    \ x > &10 && x.abs() % 10 % 2 != 0 && x.abs() / 10 % 2 != 0).count() as isize\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp175r1wgv.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num.abs() % 10 % 2 != 0\
    \ && num.abs() / 10 % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpywxj0wkc.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp5kdlxtdz.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num > 0 && num % 2 == 1\
    \ && num % 10 == 1 {\n            count += 1;\n        }\n    }\n    count\n}\n\
    \nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpfbsdj14u.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpw0ypm274.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n > 10 && n % 2 != 0 && n % 10 != 0 {\n\
    \            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpafcpmxvs.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp14uxlxkc.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp6ht5__rc.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && is_odd(num) && is_odd(num\
    \ / 10) {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_odd` in this scope\n  --> /tmp/tmp_dq5taj4.rs:10:24\n\
    \   |\n10 |         if num > 10 && is_odd(num) && is_odd(num / 10) {\n   |   \
    \                     ^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `is_odd` in this scope\n  --> /tmp/tmp_dq5taj4.rs:10:39\n   |\n10 |\
    \         if num > 10 && is_odd(num) && is_odd(num / 10) {\n   |             \
    \                          ^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for i in nums {\n        if i > 10 && i % 2 != 0 && i % 10 != 0 {\n\
    \            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp7of2n3g_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpkifgbujj.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmphgvtsp4e.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 && num % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpgxfvyqv0.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpnxk6n_k8.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count\
    \ = 0;\n    for i in nums {\n        if i > 10 && i % 2 != 0 && i % 10 != 0 {\n\
    \            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp4us45lwi.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
