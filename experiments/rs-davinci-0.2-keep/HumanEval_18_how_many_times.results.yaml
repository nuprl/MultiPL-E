name: HumanEval_18_how_many_times
language: rust
results:
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_length = string.len();\n\
    \    let substring_length = substring.len();\n    while index < string_length\
    \ {\n        if &string[index..index + substring_length] == substring {\n    \
    \        count += 1;\n            index += substring_length;\n        } else {\n\
    \            index += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'byte index 10 is out of bounds of `cacacacac`',\
    \ library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    let\
    \ substring_len = substring.len();\n    while index < string.len() {\n       \
    \ if string.starts_with(&substring) {\n            count += 1;\n            string\
    \ = string[substring_len..].to_string();\n        } else {\n            string\
    \ = string[1..].to_string();\n        }\n        index += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmps5mlt2wb.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut start = 0;\n    let length = substring.len();\n\
    \    while start + length <= string.len() {\n        if string[start..start +\
    \ length] == substring {\n            count += 1;\n            start += length;\n\
    \        } else {\n            start += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpyoegbhb1.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_length = string.len();\n\
    \    let substring_length = substring.len();\n    while index < string_length\
    \ {\n        if string[index..].starts_with(&substring) {\n            count +=\
    \ 1;\n            index += substring_length;\n        } else {\n            index\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmptug3ooti.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    let\
    \ substring_len = substring.len();\n    while index < string.len() {\n       \
    \ let index_opt = string.find(&substring);\n        if index_opt.is_none() {\n\
    \            break;\n        }\n        let index = index_opt.unwrap();\n    \
    \    count += 1;\n        string = string[index + substring_len..].to_string();\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n   \
    \ assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpvg4ac2b1.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      if string[index..].starts_with(&substring) {\n            count += 1;\n\
    \            index += substring_len;\n        } else {\n            index += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpzt4lb0_a.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       if let Some(i) = string[index..].find(&substring) {\n            count\
    \ += 1;\n            index += i + substring.len();\n        } else {\n       \
    \     break;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpc6ddartd.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      if string[index..].starts_with(&substring) {\n            count += 1;\n\
    \            index += substring_len;\n        } else {\n            index += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpsfhyu8nu.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    let\
    \ substring_len = substring.len();\n    while index < string.len() {\n       \
    \ let index_of_substring = string.find(&substring);\n        if index_of_substring.is_none()\
    \ {\n            break;\n        }\n        let index_of_substring = index_of_substring.unwrap();\n\
    \        count += 1;\n        string = string[index_of_substring + substring_len..].to_string();\n\
    \        index += index_of_substring + substring_len;\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `4`', /tmp/tmpczkbe6hf.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    while\
    \ index < string.len() {\n        let mut start = index;\n        let mut end\
    \ = index + substring.len();\n        if end > string.len() {\n            break;\n\
    \        }\n        let slice = &string[start..end];\n        if slice == substring\
    \ {\n            count += 1;\n            index += substring.len();\n        }\
    \ else {\n            index += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpa0x8eyy7.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut i = 0;\n    let string_len = string.len();\n   \
    \ let substring_len = substring.len();\n    while i < string_len {\n        if\
    \ string[i..].starts_with(&substring) {\n            count += 1;\n           \
    \ i += substring_len;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpvnvvsmjg.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       if let Some(i) = string[index..].find(&substring) {\n            count\
    \ += 1;\n            index += i + substring.len();\n        } else {\n       \
    \     break;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp763yi6ts.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       let mut i = index;\n        let mut j = 0;\n        while i < string.len()\
    \ && j < substring.len() && string.as_bytes()[i] == substring.as_bytes()[j] {\n\
    \            i += 1;\n            j += 1;\n        }\n        if j == substring.len()\
    \ {\n            count += 1;\n        }\n        index += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      let slice = &string[index..];\n        if slice.starts_with(&substring)\
    \ {\n            count += 1;\n            index += substring_len;\n        } else\
    \ {\n            index += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp_8jrpxs0.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    while\
    \ index < string.len() {\n        let index_of_substring = string.find(&substring);\n\
    \        if index_of_substring.is_none() {\n            break;\n        }\n  \
    \      count += 1;\n        index = index_of_substring.unwrap() + 1;\n       \
    \ string = string[index..].to_string();\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `4`', /tmp/tmpvfn9qk83.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut i = 0;\n    while i < string.len() {\n        if\
    \ &string[i..i + substring.len()] == substring {\n            count += 1;\n  \
    \          i += substring.len();\n        } else {\n            i += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'byte index 10 is out of bounds of `cacacacac`',\
    \ library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    while\
    \ index < string.len() {\n        if string.starts_with(&substring) {\n      \
    \      count += 1;\n            string = string.chars().skip(substring.len()).collect();\n\
    \        } else {\n            string = string.chars().skip(1).collect();\n  \
    \      }\n        index += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpngkti0jt.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    let\
    \ substring_length = substring.len();\n    while index < string.len() {\n    \
    \    if string.starts_with(&substring) {\n            count += 1;\n          \
    \  string = string[substring_length..].to_string();\n        } else {\n      \
    \      string = string[1..].to_string();\n        }\n        index += 1;\n   \
    \ }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpu0ei2_fr.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      if &string[index..index + substring_len] == substring {\n            count\
    \ += 1;\n            index += substring_len;\n        } else {\n            index\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'byte index 10 is out of bounds of `cacacacac`',\
    \ library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      let string_slice = &string[index..];\n        if string_slice.starts_with(&substring)\
    \ {\n            count += 1;\n            index += substring_len;\n        } else\
    \ {\n            index += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp3sn8u2ba.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    while\
    \ let Some(pos) = string.find(&substring) {\n        count += 1;\n        index\
    \ += pos + 1;\n        string = string[index..].to_string();\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'byte index 4 is out of bounds of `xyx`', library/core/src/str/mod.rs:107:9\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut string_chars\
    \ = string.chars();\n    let mut substring_chars = substring.chars();\n    let\
    \ mut string_char = string_chars.next();\n    let mut substring_char = substring_chars.next();\n\
    \    while string_char.is_some() {\n        if string_char == substring_char {\n\
    \            i += 1;\n            j += 1;\n            if i == substring.len()\
    \ {\n                count += 1;\n                i = 0;\n                j =\
    \ 0;\n                string_chars = string.chars();\n                substring_chars\
    \ = substring.chars();\n                string_char = string_chars.next();\n \
    \               substring_char = substring_chars.next();\n            } else {\n\
    \                string_char = string_chars.next();\n                substring_char\
    \ = substring_chars.next();\n            }\n        } else {\n            i =\
    \ 0;\n            j += 1;\n            string_chars = string.chars().skip(j);\n\
    \            substring_chars = substring.chars();\n            string_char = string_chars.next();\n\
    \            substring_char = substring_chars.next();\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdm0isf7g.rs:35:28\n   |\n\
    12 |     let mut string_chars = string.chars();\n   |                        \
    \    -------------- expected due to this value\n...\n35 |             string_chars\
    \ = string.chars().skip(j);\n   |                            ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Chars`, found struct `Skip`\n   |\n   = note: expected struct\
    \ `Chars<'_>`\n              found struct `Skip<Chars<'_>>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut len = substring.len();\n\
    \    while index < string.len() {\n        if string[index..index + len] == substring\
    \ {\n            count += 1;\n            index += len;\n        } else {\n  \
    \          index += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'byte index 10 is out of bounds of `cacacacac`',\
    \ library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      if string[index..].starts_with(&substring) {\n            count += 1;\n\
    \            index += substring_len;\n        } else {\n            index += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpewkmj1w1.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    let mut string_chars = string.chars();\n\
    \    let mut substring_chars = substring.chars();\n    while index < string_len\
    \ {\n        let mut string_char = string_chars.next();\n        let mut substring_char\
    \ = substring_chars.next();\n        if string_char == substring_char {\n    \
    \        let mut i = index;\n            while string_char == substring_char {\n\
    \                string_char = string_chars.next();\n                substring_char\
    \ = substring_chars.next();\n                i += 1;\n            }\n        \
    \    if substring_char.is_none() {\n                count += 1;\n            \
    \    index = i;\n            }\n        }\n        index += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp3y97wu35.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string_chars = string.chars();\n\
    \    let mut substring_chars = substring.chars();\n    let mut substring_char\
    \ = substring_chars.next();\n    for c in string_chars {\n        if c == substring_char.unwrap()\
    \ {\n            if substring_chars.next().is_none() {\n                count\
    \ += 1;\n                substring_chars = substring.chars();\n              \
    \  substring_char = substring_chars.next();\n            } else {\n          \
    \      substring_char = substring_chars.next();\n            }\n        } else\
    \ {\n            substring_chars = substring.chars();\n            substring_char\
    \ = substring_chars.next();\n        }\n    }\n    count\n}\n\nfn main() {\n \
    \   let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\"\
    ), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmporie_17k.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    let\
    \ substring_len = substring.len();\n    while let Some(i) = string.find(&substring)\
    \ {\n        count += 1;\n        index += i + substring_len;\n        string\
    \ = string[index..].to_string();\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'byte index 4 is out of bounds of `xyx`', library/core/src/str/mod.rs:107:9\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       let mut sub_index = 0;\n        while sub_index < substring.len() && index\
    \ + sub_index < string.len() {\n            if string.chars().nth(index + sub_index)\
    \ != substring.chars().nth(sub_index) {\n                break;\n            }\n\
    \            sub_index += 1;\n        }\n        if sub_index == substring.len()\
    \ {\n            count += 1;\n            index += sub_index;\n        } else\
    \ {\n            index += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp23pz31l5.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut start = 0;\n    let mut end = substring.len();\n\
    \    while end <= string.len() {\n        if string[start..end] == substring {\n\
    \            count += 1;\n        }\n        start += 1;\n        end += 1;\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n   \
    \ assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       if string[index..].starts_with(&substring) {\n            count += 1;\n\
    \            index += substring.len();\n        } else {\n            index +=\
    \ 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp27izadgd.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut string_chars\
    \ = string.chars();\n    let mut substring_chars = substring.chars();\n    let\
    \ mut string_char = string_chars.next();\n    let mut substring_char = substring_chars.next();\n\
    \    while string_char.is_some() {\n        if string_char == substring_char {\n\
    \            i += 1;\n            j += 1;\n            string_char = string_chars.next();\n\
    \            substring_char = substring_chars.next();\n            if substring_char.is_none()\
    \ {\n                count += 1;\n                substring_chars = substring.chars();\n\
    \                substring_char = substring_chars.next();\n                j =\
    \ 0;\n            }\n        } else {\n            string_char = string_chars.nth(i\
    \ - j);\n            substring_chars = substring.chars();\n            substring_char\
    \ = substring_chars.next();\n            i = i - j + 1;\n            j = 0;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmplmu4g8c8.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut start = 0;\n    let mut end = substring.len();\n\
    \    while end <= string.len() {\n        if &string[start..end] == substring\
    \ {\n            count += 1;\n        }\n        start += 1;\n        end += 1;\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n   \
    \ assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    let\
    \ substring_len = substring.len();\n    while let Some(i) = string.find(&substring)\
    \ {\n        index += i;\n        string = string[i + substring_len..].to_string();\n\
    \        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate =\
    \ how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpv6pq3yw7.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    while\
    \ index < string.len() {\n        if string.starts_with(&substring) {\n      \
    \      count += 1;\n            string = string.chars().skip(substring.len()).collect();\n\
    \        } else {\n            string = string.chars().skip(1).collect();\n  \
    \      }\n        index += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp715vibh9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    let\
    \ substring_len = substring.len();\n    while let Some(i) = string.find(&substring)\
    \ {\n        count += 1;\n        index += i + substring_len;\n        string\
    \ = string[index..].to_string();\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'byte index 4 is out of bounds of `xyx`', library/core/src/str/mod.rs:107:9\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string = string.as_str();\n\
    \    let substring = substring.as_str();\n    while index < string.len() {\n \
    \       if string.get(index..index + substring.len()) == Some(substring) {\n \
    \           count += 1;\n            index += substring.len();\n        } else\
    \ {\n            index += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmplk8xe0nc.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut start = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while start + substring_len <=\
    \ string_len {\n        if string[start..start + substring_len] == substring {\n\
    \            count += 1;\n            start += substring_len;\n        } else\
    \ {\n            start += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp3v3lvvox.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       if let Some(i) = string[index..].find(&substring) {\n            count\
    \ += 1;\n            index += i + substring.len();\n        } else {\n       \
    \     break;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp_7in60bc.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut i = 0;\n    while i < string.len() {\n        if\
    \ string[i..].starts_with(&substring) {\n            count += 1;\n           \
    \ i += substring.len();\n        } else {\n            i += 1;\n        }\n  \
    \  }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpguitgus4.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      if &string[index..index + substring_len] == substring {\n            count\
    \ += 1;\n            index += substring_len;\n        } else {\n            index\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'byte index 10 is out of bounds of `cacacacac`',\
    \ library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    while\
    \ index < string.len() {\n        let index_option = string.find(&substring);\n\
    \        match index_option {\n            Some(index) => {\n                count\
    \ += 1;\n                string = string[index + substring.len()..].to_string();\n\
    \            }\n            None => break,\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpt4vmzpqu.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      if string[index..].starts_with(&substring) {\n            count += 1;\n\
    \            index += substring_len;\n        } else {\n            index += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpxgjmpwxd.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    while\
    \ index != -1 {\n        index = string.find(&substring).unwrap_or(-1);\n    \
    \    if index != -1 {\n            count += 1;\n            string = string[index\
    \ + substring.len()..].to_string();\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0600]: cannot apply unary operator `-` to type `usize`\n  --> /tmp/tmp0pbtow1r.rs:13:51\n\
    \   |\n13 |         index = string.find(&substring).unwrap_or(-1);\n   |     \
    \                                              ^^\n   |                      \
    \                             |\n   |                                        \
    \           cannot apply unary operator `-`\n   |                            \
    \                       help: you may have meant the maximum value of `usize`:\
    \ `usize::MAX`\n   |\n   = note: unsigned values cannot be negated\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmp0pbtow1r.rs:12:20\n\
    \   |\n12 |     while index != -1 {\n   |                    ^^ the trait `Neg`\
    \ is not implemented for `usize`\n   |\n   = help: the following other types implement\
    \ trait `Neg`:\n             &f32\n             &f64\n             &i128\n   \
    \          &i16\n             &i32\n             &i64\n             &i8\n    \
    \         &isize\n           and 8 others\n\nerror[E0600]: cannot apply unary\
    \ operator `-` to type `usize`\n  --> /tmp/tmp0pbtow1r.rs:14:21\n   |\n14 |  \
    \       if index != -1 {\n   |                     ^^\n   |                  \
    \   |\n   |                     cannot apply unary operator `-`\n   |        \
    \             help: you may have meant the maximum value of `usize`: `usize::MAX`\n\
    \   |\n   = note: unsigned values cannot be negated\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0277, E0600.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut start = 0;\n    let mut end = substring.len();\n\
    \    let string_len = string.len();\n    let substring_len = substring.len();\n\
    \    while end <= string_len {\n        if string[start..end] == substring {\n\
    \            count += 1;\n            start += 1;\n            end += 1;\n   \
    \     } else {\n            start += 1;\n            end += 1;\n        }\n  \
    \  }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      let mut i = 0;\n        while i < substring_len && index + i < string_len\
    \ && string.chars().nth(index + i) == substring.chars().nth(i) {\n           \
    \ i += 1;\n        }\n        if i == substring_len {\n            count += 1;\n\
    \            index += i;\n        } else {\n            index += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n   \
    \ assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpyrvp0nap.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let s = string.as_bytes();\n\
    \    let sub = substring.as_bytes();\n    while i < s.len() {\n        if s[i]\
    \ == sub[j] {\n            if j == sub.len() - 1 {\n                count += 1;\n\
    \                j = 0;\n            } else {\n                j += 1;\n     \
    \       }\n        } else {\n            j = 0;\n        }\n        i += 1;\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n   \
    \ assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp7w9xip8e.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_length = string.len();\n\
    \    let substring_length = substring.len();\n    while index < string_length\
    \ {\n        if string[index..].starts_with(&substring) {\n            count +=\
    \ 1;\n            index += substring_length;\n        } else {\n            index\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpg16jthmc.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string_chars = string.chars();\n\
    \    let substring_chars = substring.chars();\n    while let Some(c) = string_chars.nth(index)\
    \ {\n        if c == substring_chars.clone().next().unwrap() {\n            let\
    \ mut i = 0;\n            let mut string_chars_clone = string_chars.clone();\n\
    \            let mut substring_chars_clone = substring_chars.clone();\n      \
    \      while let Some(c) = string_chars_clone.next() {\n                if c ==\
    \ substring_chars_clone.next().unwrap() {\n                    i += 1;\n     \
    \           } else {\n                    break;\n                }\n        \
    \    }\n            if i == substring.len() {\n                count += 1;\n \
    \               index += substring.len() - 1;\n            }\n        }\n    \
    \    index += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmp22byvrgw.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string_chars = string.chars();\n\
    \    let substring_chars = substring.chars();\n    while let Some(c) = string_chars.nth(index)\
    \ {\n        if c == substring_chars.next().unwrap() {\n            let mut i\
    \ = 0;\n            let mut string_chars_copy = string_chars.clone();\n      \
    \      let mut substring_chars_copy = substring_chars.clone();\n            while\
    \ let Some(c) = string_chars_copy.next() {\n                if c == substring_chars_copy.next().unwrap()\
    \ {\n                    i += 1;\n                } else {\n                 \
    \   break;\n                }\n            }\n            if i == substring.len()\
    \ - 1 {\n                count += 1;\n                index += substring.len()\
    \ - 1;\n            }\n        }\n        index += 1;\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `substring_chars` as mutable, as it is not\
    \ declared as mutable\n  --> /tmp/tmp7livq3gs.rs:14:17\n   |\n12 |     let substring_chars\
    \ = substring.chars();\n   |         --------------- help: consider changing this\
    \ to be mutable: `mut substring_chars`\n13 |     while let Some(c) = string_chars.nth(index)\
    \ {\n14 |         if c == substring_chars.next().unwrap() {\n   |            \
    \     ^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut i = 0;\n    while i < string.len() {\n        if\
    \ string[i..].starts_with(&substring) {\n            count += 1;\n           \
    \ i += substring.len();\n        } else {\n            i += 1;\n        }\n  \
    \  }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpdco1wlia.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       if string[index..].starts_with(&substring) {\n            count += 1;\n\
    \            index += substring.len();\n        } else {\n            index +=\
    \ 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp5xjkf1fc.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       let mut found = false;\n        for i in 0..substring.len() {\n      \
    \      if index + i < string.len() && string.chars().nth(index + i).unwrap() ==\
    \ substring.chars().nth(i).unwrap() {\n                found = true;\n       \
    \     } else {\n                found = false;\n                break;\n     \
    \       }\n        }\n        if found {\n            count += 1;\n          \
    \  index += substring.len();\n        } else {\n            index += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp8mjujqzf.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    while\
    \ index < string.len() {\n        let index_opt = string.find(&substring);\n \
    \       match index_opt {\n            Some(index) => {\n                count\
    \ += 1;\n                string = string[index + substring.len()..].to_string();\n\
    \            }\n            None => break,\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpmdz9f5pz.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       let mut found = false;\n        for (i, c) in substring.chars().enumerate()\
    \ {\n            if index + i >= string.len() {\n                break;\n    \
    \        }\n            if string.chars().nth(index + i).unwrap() == c {\n   \
    \             found = true;\n            } else {\n                found = false;\n\
    \                break;\n            }\n        }\n        if found {\n      \
    \      count += 1;\n            index += substring.len();\n        } else {\n\
    \            index += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `4`', /tmp/tmpc7347sl1.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       let mut i = index;\n        let mut j = 0;\n        while i < string.len()\
    \ && j < substring.len() && string.chars().nth(i) == substring.chars().nth(j)\
    \ {\n            i += 1;\n            j += 1;\n        }\n        if j == substring.len()\
    \ {\n            count += 1;\n        }\n        index += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       let mut i = 0;\n        while i < substring.len() && index + i < string.len()\
    \ && string.chars().nth(index + i) == substring.chars().nth(i) {\n           \
    \ i += 1;\n        }\n        if i == substring.len() {\n            count +=\
    \ 1;\n        }\n        index += 1;\n    }\n    count\n}\n\nfn main() {\n   \
    \ let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\"\
    ), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       let found = string[index..].find(&substring);\n        if found.is_none()\
    \ {\n            break;\n        }\n        count += 1;\n        index += found.unwrap()\
    \ + substring.len();\n    }\n    count\n}\n\nfn main() {\n    let candidate =\
    \ how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpyzu77npz.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    let\
    \ substring_len = substring.len();\n    while index < string.len() {\n       \
    \ if string.starts_with(&substring) {\n            count += 1;\n            string\
    \ = string[substring_len..].to_string();\n        } else {\n            string\
    \ = string[1..].to_string();\n        }\n        index += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp97gu9vir.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string_chars = string.chars();\n\
    \    let substring_chars = substring.chars();\n    loop {\n        match string_chars.nth(index)\
    \ {\n            Some(c) => {\n                if c == substring_chars.nth(0).unwrap()\
    \ {\n                    let mut i = 0;\n                    let mut string_chars_clone\
    \ = string_chars.clone();\n                    for c2 in substring_chars {\n \
    \                       match string_chars_clone.nth(i) {\n                  \
    \          Some(c3) => {\n                                if c2 != c3 {\n    \
    \                                break;\n                                }\n \
    \                           }\n                            None => break,\n  \
    \                      }\n                        i += 1;\n                  \
    \  }\n                    if i == substring.len() - 1 {\n                    \
    \    count += 1;\n                        index += i;\n                    } else\
    \ {\n                        index += 1;\n                    }\n            \
    \    } else {\n                    index += 1;\n                }\n          \
    \  }\n            None => break,\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `substring_chars` as mutable, as it is not\
    \ declared as mutable\n  --> /tmp/tmpehfwnjw1.rs:16:25\n   |\n12 |     let substring_chars\
    \ = substring.chars();\n   |         --------------- help: consider changing this\
    \ to be mutable: `mut substring_chars`\n...\n16 |                 if c == substring_chars.nth(0).unwrap()\
    \ {\n   |                         ^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\
    \nerror[E0382]: borrow of moved value: `substring_chars`\n   --> /tmp/tmpehfwnjw1.rs:16:25\n\
    \    |\n12  |     let substring_chars = substring.chars();\n    |         ---------------\
    \ move occurs because `substring_chars` has type `Chars<'_>`, which does not implement\
    \ the `Copy` trait\n...\n16  |                 if c == substring_chars.nth(0).unwrap()\
    \ {\n    |                         ^^^^^^^^^^^^^^^^^^^^^^ value borrowed here\
    \ after move\n...\n19  |                     for c2 in substring_chars {\n   \
    \ |                               --------------- `substring_chars` moved due\
    \ to this implicit call to `.into_iter()`, in previous iteration of loop\n   \
    \ |\nnote: this function takes ownership of the receiver `self`, which moves `substring_chars`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0382, E0596.\nFor more information about an error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      if string[index..].starts_with(&substring) {\n            count += 1;\n\
    \            index += substring_len;\n        } else {\n            index += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp649yg0i2.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    while\
    \ let Some(i) = string.find(&substring) {\n        count += 1;\n        index\
    \ += i + 1;\n        string = string[index..].to_string();\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'byte index 4 is out of bounds of `xyx`', library/core/src/str/mod.rs:107:9\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      if string[index..].starts_with(&substring) {\n            count += 1;\n\
    \            index += substring_len;\n        } else {\n            index += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpz8o7k735.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       let mut found = false;\n        for (i, c) in substring.chars().enumerate()\
    \ {\n            if string.chars().nth(index + i) == Some(c) {\n             \
    \   found = true;\n            } else {\n                found = false;\n    \
    \            break;\n            }\n        }\n        if found {\n          \
    \  count += 1;\n            index += substring.len();\n        } else {\n    \
    \        index += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpf3uxs0xb.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       let index_of_substring = string[index..].find(&substring);\n        if\
    \ index_of_substring.is_none() {\n            break;\n        }\n        count\
    \ += 1;\n        index += index_of_substring.unwrap() + substring.len();\n   \
    \ }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmplttv7vwj.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       let mut found = false;\n        for i in 0..substring.len() {\n      \
    \      if index + i >= string.len() {\n                break;\n            }\n\
    \            if string.chars().nth(index + i).unwrap() != substring.chars().nth(i).unwrap()\
    \ {\n                break;\n            }\n            if i == substring.len()\
    \ - 1 {\n                found = true;\n            }\n        }\n        if found\
    \ {\n            count += 1;\n            index += substring.len();\n        }\
    \ else {\n            index += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp9y8rnpth.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut start = 0;\n    let sub_len = substring.len();\n\
    \    let str_len = string.len();\n    while start + sub_len <= str_len {\n   \
    \     if string[start..start + sub_len] == substring {\n            count += 1;\n\
    \            start += sub_len;\n        } else {\n            start += 1;\n  \
    \      }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpr0ok1wwh.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string_chars = string.chars();\n\
    \    let substring_chars = substring.chars();\n    let substring_len = substring.len();\n\
    \    let mut string_chars_iter = string_chars.by_ref();\n    while let Some(c)\
    \ = string_chars_iter.next() {\n        if c == substring_chars.clone().nth(index).unwrap()\
    \ {\n            index += 1;\n            if index == substring_len {\n      \
    \          count += 1;\n                index = 0;\n            }\n        } else\
    \ {\n            index = 0;\n        }\n    }\n    count\n}\n\nfn main() {\n \
    \   let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\"\
    ), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp38_j5pdl.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string = string.as_str();\n\
    \    let substring = substring.as_str();\n    while index < string.len() {\n \
    \       if string.get(index..index + substring.len()) == Some(substring) {\n \
    \           count += 1;\n            index += substring.len();\n        } else\
    \ {\n            index += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp2pda1k7f.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      let slice = &string[index..];\n        if slice.starts_with(&substring)\
    \ {\n            count += 1;\n            index += substring_len;\n        } else\
    \ {\n            index += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpoq4qku61.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      let slice = &string[index..];\n        if slice.starts_with(&substring)\
    \ {\n            count += 1;\n            index += substring_len;\n        } else\
    \ {\n            index += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpml0ly00k.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut pos = 0;\n    while pos < string.len() {\n     \
    \   if let Some(i) = string[pos..].find(&substring) {\n            count += 1;\n\
    \            pos += i + substring.len();\n        } else {\n            break;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp8tg4gb34.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    let\
    \ substring_len = substring.len();\n    while index < string.len() {\n       \
    \ if string.starts_with(&substring) {\n            count += 1;\n            string\
    \ = string[substring_len..].to_string();\n        } else {\n            string\
    \ = string[1..].to_string();\n        }\n        index += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpids1rra7.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      if string[index..].starts_with(&substring) {\n            count += 1;\n\
    \            index += substring_len;\n        } else {\n            index += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpgv2kf5u5.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    while\
    \ index < string.len() {\n        let mut found = false;\n        for i in 0..substring.len()\
    \ {\n            if string.len() > index + i && string.as_bytes()[index + i] ==\
    \ substring.as_bytes()[i] {\n                found = true;\n            } else\
    \ {\n                found = false;\n                break;\n            }\n \
    \       }\n        if found {\n            count += 1;\n            string = string.remove(index);\n\
    \        } else {\n            index += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqilasl3z.rs:24:22\n   |\n\
    11 |     let mut string = string;\n   |                      ------ expected due\
    \ to this value\n...\n24 |             string = string.remove(index);\n   |  \
    \                    ^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                      |\n   |                      expected\
    \ struct `String`, found `char`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       let mut found = false;\n        for i in 0..substring.len() {\n      \
    \      if index + i >= string.len() {\n                break;\n            }\n\
    \            if string.chars().nth(index + i).unwrap() != substring.chars().nth(i).unwrap()\
    \ {\n                break;\n            }\n            if i == substring.len()\
    \ - 1 {\n                found = true;\n            }\n        }\n        if found\
    \ {\n            count += 1;\n            index += substring.len();\n        }\
    \ else {\n            index += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp8m32hrfo.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut string_chars\
    \ = string.chars();\n    let mut substring_chars = substring.chars();\n    while\
    \ let Some(c) = string_chars.next() {\n        if c == substring_chars.next().unwrap()\
    \ {\n            i += 1;\n            if i == substring.len() {\n            \
    \    count += 1;\n                i = 0;\n                substring_chars = substring.chars();\n\
    \            }\n        } else {\n            i = 0;\n            substring_chars\
    \ = substring.chars();\n        }\n        j += 1;\n        if j == string.len()\
    \ {\n            break;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp0v_fftaq.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       if let Some(i) = string[index..].find(&substring) {\n            count\
    \ += 1;\n            index += i + substring.len();\n        } else {\n       \
    \     break;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpm2etq1lp.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       let slice = &string[index..];\n        if slice.starts_with(&substring)\
    \ {\n            count += 1;\n            index += substring.len();\n        }\
    \ else {\n            index += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp1g8vdlp2.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    let\
    \ substring_len = substring.len();\n    while index < string.len() {\n       \
    \ let index_opt = string.find(&substring);\n        if index_opt.is_none() {\n\
    \            break;\n        }\n        let index = index_opt.unwrap();\n    \
    \    count += 1;\n        string = string[index + substring_len..].to_string();\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n   \
    \ assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp_3ui8twr.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    while\
    \ index < string.len() {\n        let mut index_of = string.find(&substring);\n\
    \        if index_of.is_none() {\n            break;\n        }\n        index_of\
    \ = index_of.unwrap();\n        count += 1;\n        string = string.split_off(index_of\
    \ + substring.len());\n    }\n    count\n}\n\nfn main() {\n    let candidate =\
    \ how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkdpg6_6a.rs:17:20\n   |\n\
    13 |         let mut index_of = string.find(&substring);\n   |               \
    \             ----------------------- expected due to this value\n...\n17 |  \
    \       index_of = index_of.unwrap();\n   |                    ^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `usize`\n   |\n   = note: expected enum `Option<usize>`\n\
    \              found type `usize`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n17 |         index_of = Some(index_of.unwrap());\n   |                \
    \    +++++                 +\n\nerror[E0369]: cannot add `usize` to `Option<usize>`\n\
    \  --> /tmp/tmpkdpg6_6a.rs:19:44\n   |\n19 |         string = string.split_off(index_of\
    \ + substring.len());\n   |                                   -------- ^ ---------------\
    \ usize\n   |                                   |\n   |                      \
    \             Option<usize>\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0369.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string_chars = string.chars();\n\
    \    let mut substring_chars = substring.chars();\n    let mut substring_first_char\
    \ = substring_chars.next();\n    while let Some(c) = string_chars.next() {\n \
    \       if c == substring_first_char.unwrap() {\n            let mut string_chars_clone\
    \ = string_chars.clone();\n            let mut substring_chars_clone = substring_chars.clone();\n\
    \            let mut match_count = 1;\n            while let Some(c) = substring_chars_clone.next()\
    \ {\n                if let Some(c2) = string_chars_clone.next() {\n         \
    \           if c == c2 {\n                        match_count += 1;\n        \
    \            } else {\n                        break;\n                    }\n\
    \                } else {\n                    break;\n                }\n   \
    \         }\n            if match_count == substring.len() {\n               \
    \ count += 1;\n                index += match_count;\n                string_chars\
    \ = string.chars().skip(index);\n                substring_chars = substring.chars();\n\
    \                substring_first_char = substring_chars.next();\n            }\
    \ else {\n                index += 1;\n            }\n        } else {\n     \
    \       index += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd_s9g372.rs:33:32\n   |\n\
    11 |     let mut string_chars = string.chars();\n   |                        \
    \    -------------- expected due to this value\n...\n33 |                 string_chars\
    \ = string.chars().skip(index);\n   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Chars`, found struct `Skip`\n   |\n   = note: expected struct\
    \ `Chars<'_>`\n              found struct `Skip<Chars<'_>>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      if string[index..].starts_with(&substring) {\n            count += 1;\n\
    \            index += substring_len;\n        } else {\n            index += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpqysp790m.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    while\
    \ index < string.len() {\n        let index = string.find(&substring);\n     \
    \   if index.is_none() {\n            break;\n        }\n        count += 1;\n\
    \        string = string[index.unwrap() + substring.len()..].to_string();\n  \
    \  }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpbdp8e7r9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut start = 0;\n    let mut end = substring.len();\n\
    \    while end <= string.len() {\n        if &string[start..end] == substring\
    \ {\n            count += 1;\n        }\n        start += 1;\n        end += 1;\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n   \
    \ assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       let mut found = false;\n        for (i, c) in substring.chars().enumerate()\
    \ {\n            if index + i >= string.len() {\n                break;\n    \
    \        }\n            if string.chars().nth(index + i).unwrap() == c {\n   \
    \             found = true;\n            } else {\n                found = false;\n\
    \                break;\n            }\n        }\n        if found {\n      \
    \      count += 1;\n            index += substring.len();\n        } else {\n\
    \            index += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `4`', /tmp/tmpmfnc369c.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    let\
    \ substring_len = substring.len();\n    while index < string.len() {\n       \
    \ if string.starts_with(&substring) {\n            count += 1;\n            string\
    \ = string[substring_len..].to_string();\n        } else {\n            string\
    \ = string[1..].to_string();\n        }\n        index += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp6km5b6q8.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      let sub_index = string[index..].find(&substring);\n        if sub_index.is_none()\
    \ {\n            break;\n        }\n        count += 1;\n        index += sub_index.unwrap()\
    \ + substring_len;\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp95hkkq_2.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       let index_of_substring = string[index..].find(&substring);\n        if\
    \ index_of_substring.is_none() {\n            break;\n        }\n        count\
    \ += 1;\n        index += index_of_substring.unwrap() + substring.len();\n   \
    \ }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp_c32bd9k.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    while\
    \ let Some(i) = string.find(&substring) {\n        count += 1;\n        index\
    \ += i + 1;\n        string = string[index..].to_string();\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'byte index 4 is out of bounds of `xyx`', library/core/src/str/mod.rs:107:9\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut start = 0;\n    let mut end = substring.len();\n\
    \    let string_len = string.len();\n    let substring_len = substring.len();\n\
    \    while end <= string_len {\n        if string[start..end] == substring {\n\
    \            count += 1;\n            start += 1;\n            end += 1;\n   \
    \     } else {\n            start += 1;\n            end += 1;\n        }\n  \
    \  }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       let slice = &string[index..];\n        if slice.starts_with(&substring)\
    \ {\n            count += 1;\n            index += substring.len();\n        }\
    \ else {\n            index += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpom1o6yjo.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    if\
    \ string.len() == 0 || substring.len() == 0 {\n        return 0;\n    }\n    let\
    \ mut count = 0;\n    let mut start = 0;\n    while start < string.len() {\n \
    \       let found = string[start..].find(&substring);\n        if found.is_none()\
    \ {\n            break;\n        }\n        count += 1;\n        start += found.unwrap()\
    \ + substring.len();\n    }\n    count\n}\n\nfn main() {\n    let candidate =\
    \ how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp5sycgpaq.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string_chars = string.chars();\n\
    \    let mut substring_chars = substring.chars();\n    let mut substring_char\
    \ = substring_chars.next();\n    for c in string_chars {\n        if c == substring_char.unwrap()\
    \ {\n            index += 1;\n            substring_char = substring_chars.next();\n\
    \            if substring_char == None {\n                count += 1;\n      \
    \          substring_char = substring_chars.next();\n            }\n        }\
    \ else {\n            index = 0;\n            substring_char = substring_chars.next();\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpc7c73hot.rs:15:32\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       let found = string[index..].find(&substring);\n        if found.is_none()\
    \ {\n            break;\n        }\n        count += 1;\n        index += found.unwrap()\
    \ + substring.len();\n    }\n    count\n}\n\nfn main() {\n    let candidate =\
    \ how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp2lp8lh3j.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      let slice = &string[index..];\n        if slice.starts_with(&substring)\
    \ {\n            count += 1;\n            index += substring_len;\n        } else\
    \ {\n            index += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp3dlojd7z.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    while\
    \ index < string.len() {\n        if string.starts_with(&substring) {\n      \
    \      count += 1;\n            string = string.chars().skip(substring.len()).collect();\n\
    \        } else {\n            string = string.chars().skip(1).collect();\n  \
    \      }\n        index += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp4gkvy6oy.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    let\
    \ substring_len = substring.len();\n    while index < string.len() {\n       \
    \ if string.starts_with(&substring) {\n            count += 1;\n            index\
    \ += substring_len;\n            string = string[substring_len..].to_string();\n\
    \        } else {\n            index += 1;\n            string = string[1..].to_string();\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpflj251y1.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string_chars = string.chars();\n\
    \    let substring_chars = substring.chars();\n    while let Some(c) = string_chars.nth(index)\
    \ {\n        if c == substring_chars.next().unwrap() {\n            let mut sub_chars\
    \ = substring_chars.clone();\n            let mut string_chars_clone = string_chars.clone();\n\
    \            let mut i = 0;\n            while let Some(c) = sub_chars.next()\
    \ {\n                if let Some(c2) = string_chars_clone.next() {\n         \
    \           if c == c2 {\n                        i += 1;\n                  \
    \  } else {\n                        break;\n                    }\n         \
    \       } else {\n                    break;\n                }\n            }\n\
    \            if i == substring.len() {\n                count += 1;\n        \
    \        index += i;\n            } else {\n                index += 1;\n    \
    \        }\n        } else {\n            index += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `substring_chars` as mutable, as it is not\
    \ declared as mutable\n  --> /tmp/tmp9v2wrok0.rs:14:17\n   |\n12 |     let substring_chars\
    \ = substring.chars();\n   |         --------------- help: consider changing this\
    \ to be mutable: `mut substring_chars`\n13 |     while let Some(c) = string_chars.nth(index)\
    \ {\n14 |         if c == substring_chars.next().unwrap() {\n   |            \
    \     ^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       let slice = &string[index..];\n        if slice.starts_with(&substring)\
    \ {\n            count += 1;\n            index += substring.len();\n        }\
    \ else {\n            index += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp8qzdfvy1.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      if string[index..].starts_with(&substring) {\n            count += 1;\n\
    \            index += substring_len;\n        } else {\n            index += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpgm_gdt4z.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    while\
    \ index < string.len() {\n        let index_option = string.find(&substring);\n\
    \        match index_option {\n            Some(index) => {\n                count\
    \ += 1;\n                string = string[index + substring.len()..].to_string();\n\
    \            }\n            None => break,\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpcxgmfdtb.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      let slice = &string[index..];\n        if slice.starts_with(&substring)\
    \ {\n            count += 1;\n            index += substring_len;\n        } else\
    \ {\n            index += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp4et0o7dv.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut i = 0;\n    while i < string.len() {\n        if\
    \ string[i..].starts_with(&substring) {\n            count += 1;\n           \
    \ i += substring.len();\n        } else {\n            i += 1;\n        }\n  \
    \  }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpc9qysfwr.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut string_chars\
    \ = string.chars();\n    let mut substring_chars = substring.chars();\n    let\
    \ mut string_char = string_chars.next();\n    let mut substring_char = substring_chars.next();\n\
    \    while let Some(c) = string_char {\n        if c == substring_char.unwrap()\
    \ {\n            i += 1;\n            j += 1;\n            if i == substring.len()\
    \ {\n                count += 1;\n                i = 0;\n                j =\
    \ 0;\n                substring_chars = substring.chars();\n                substring_char\
    \ = substring_chars.next();\n            }\n        } else {\n            i =\
    \ 0;\n            j = 0;\n            substring_chars = substring.chars();\n \
    \           substring_char = substring_chars.next();\n        }\n        string_char\
    \ = string_chars.next();\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpbinr2lpb.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      let sub_index = string[index..].find(&substring);\n        if sub_index.is_none()\
    \ {\n            break;\n        }\n        let sub_index = sub_index.unwrap();\n\
    \        count += 1;\n        index += sub_index + substring_len;\n    }\n   \
    \ count\n}\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpyyi88kq1.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    while\
    \ index < string.len() {\n        let mut found = false;\n        for (i, c) in\
    \ substring.chars().enumerate() {\n            if index + i < string.len() &&\
    \ string.chars().nth(index + i).unwrap() == c {\n                found = true;\n\
    \            } else {\n                found = false;\n                break;\n\
    \            }\n        }\n        if found {\n            count += 1;\n     \
    \       index += substring.len();\n        } else {\n            index += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp83irg8pw.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut i = 0;\n    let string_len = string.len();\n   \
    \ let substring_len = substring.len();\n    while i < string_len {\n        if\
    \ string[i..].starts_with(&substring) {\n            count += 1;\n           \
    \ i += substring_len;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp9gmvj8zi.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut start = 0;\n    let mut end = substring.len();\n\
    \    while end <= string.len() {\n        if string[start..end] == substring {\n\
    \            count += 1;\n        }\n        start += 1;\n        end += 1;\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n   \
    \ assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_length = string.len();\n\
    \    let substring_length = substring.len();\n    while index < string_length\
    \ {\n        let slice = &string[index..];\n        if slice.starts_with(&substring)\
    \ {\n            count += 1;\n            index += substring_length;\n       \
    \ } else {\n            index += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp9ntdmz7b.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       let mut found = false;\n        for (i, c) in substring.chars().enumerate()\
    \ {\n            if index + i < string.len() && string.chars().nth(index + i).unwrap()\
    \ == c {\n                found = true;\n            } else {\n              \
    \  found = false;\n                break;\n            }\n        }\n        if\
    \ found {\n            count += 1;\n            index += substring.len();\n  \
    \      } else {\n            index += 1;\n        }\n    }\n    count\n}\n\nfn\
    \ main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmppi5cq96a.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string_chars = string.chars();\n\
    \    let substring_chars = substring.chars();\n    while let Some(c) = string_chars.nth(index)\
    \ {\n        if c == substring_chars.next().unwrap() {\n            let mut string_chars_clone\
    \ = string_chars.clone();\n            let mut substring_chars_clone = substring_chars.clone();\n\
    \            let mut found = true;\n            for _ in 0..substring_chars.clone().count()\
    \ {\n                if substring_chars_clone.next() != string_chars_clone.next()\
    \ {\n                    found = false;\n                    break;\n        \
    \        }\n            }\n            if found {\n                count += 1;\n\
    \                index += substring_chars.clone().count();\n            }\n  \
    \      }\n        index += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `substring_chars` as mutable, as it is not\
    \ declared as mutable\n  --> /tmp/tmp1fgwvvoz.rs:14:17\n   |\n12 |     let substring_chars\
    \ = substring.chars();\n   |         --------------- help: consider changing this\
    \ to be mutable: `mut substring_chars`\n13 |     while let Some(c) = string_chars.nth(index)\
    \ {\n14 |         if c == substring_chars.next().unwrap() {\n   |            \
    \     ^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    while\
    \ index < string.len() {\n        let index_opt = string.find(&substring);\n \
    \       match index_opt {\n            Some(index) => {\n                count\
    \ += 1;\n                string = string[index + substring.len()..].to_string();\n\
    \            }\n            None => break,\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmphepg12qf.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       if let Some(i) = string[index..].find(&substring) {\n            count\
    \ += 1;\n            index += i + substring.len();\n        } else {\n       \
    \     break;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmppg81h7ae.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string_chars = string.chars();\n\
    \    let substring_chars = substring.chars();\n    let substring_len = substring.len();\n\
    \    loop {\n        match string_chars.nth(index) {\n            Some(c) => {\n\
    \                if c == substring_chars.nth(0).unwrap() {\n                 \
    \   let mut i = 1;\n                    let mut string_chars_clone = string_chars.clone();\n\
    \                    loop {\n                        match string_chars_clone.nth(index\
    \ + i) {\n                            Some(c) => {\n                         \
    \       if c == substring_chars.nth(i).unwrap() {\n                          \
    \          if i == substring_len - 1 {\n                                     \
    \   count += 1;\n                                        index += 1;\n       \
    \                                 break;\n                                   \
    \ }\n                                    i += 1;\n                           \
    \     } else {\n                                    index += 1;\n            \
    \                        break;\n                                }\n         \
    \                   }\n                            None => {\n               \
    \                 break;\n                            }\n                    \
    \    }\n                    }\n                } else {\n                    index\
    \ += 1;\n                }\n            }\n            None => {\n           \
    \     break;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n \
    \   let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\"\
    ), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `substring_chars` as mutable, as it is not\
    \ declared as mutable\n  --> /tmp/tmp43c2kkmf.rs:17:25\n   |\n12 |     let substring_chars\
    \ = substring.chars();\n   |         --------------- help: consider changing this\
    \ to be mutable: `mut substring_chars`\n...\n17 |                 if c == substring_chars.nth(0).unwrap()\
    \ {\n   |                         ^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\
    \nerror[E0596]: cannot borrow `substring_chars` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmp43c2kkmf.rs:23:41\n   |\n12 |     let substring_chars\
    \ = substring.chars();\n   |         --------------- help: consider changing this\
    \ to be mutable: `mut substring_chars`\n...\n23 |                            \
    \     if c == substring_chars.nth(i).unwrap() {\n   |                        \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut start = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while start + substring_len <=\
    \ string_len {\n        if &string[start..start + substring_len] == substring\
    \ {\n            count += 1;\n            start += substring_len;\n        } else\
    \ {\n            start += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpsm46qjgm.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    let\
    \ substring_len = substring.len();\n    while index < string.len() {\n       \
    \ if string.starts_with(&substring) {\n            count += 1;\n            string\
    \ = string[substring_len..].to_string();\n        } else {\n            string\
    \ = string[1..].to_string();\n        }\n        index += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpj88rj4uf.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       if let Some(i) = string[index..].find(&substring) {\n            count\
    \ += 1;\n            index += i + substring.len();\n        } else {\n       \
    \     break;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmppjgrjad1.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    while\
    \ index < string.len() {\n        let index = string.find(&substring);\n     \
    \   if index.is_none() {\n            break;\n        }\n        count += 1;\n\
    \        string = string[index.unwrap() + substring.len()..].to_string();\n  \
    \  }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpvgfdbl2b.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      if string[index..].starts_with(&substring) {\n            count += 1;\n\
    \            index += substring_len;\n        } else {\n            index += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpxqsbc7yg.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut start = 0;\n    let mut end = substring.len();\n\
    \    while end <= string.len() {\n        if string[start..end] == substring {\n\
    \            count += 1;\n        }\n        start += 1;\n        end += 1;\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n   \
    \ assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    while\
    \ index < string.len() {\n        let index_of_substring = string.find(&substring);\n\
    \        if index_of_substring.is_none() {\n            break;\n        }\n  \
    \      let index_of_substring = index_of_substring.unwrap();\n        count +=\
    \ 1;\n        index += index_of_substring + substring.len();\n        string =\
    \ string[index_of_substring + substring.len()..].to_string();\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `4`', /tmp/tmpne4rs4pv.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       if string[index..].starts_with(&substring) {\n            count += 1;\n\
    \            index += substring.len();\n        } else {\n            index +=\
    \ 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp5wuk1_te.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    while\
    \ index < string.len() {\n        if string.starts_with(&substring) {\n      \
    \      count += 1;\n            string = string.chars().skip(substring.len()).collect();\n\
    \        } else {\n            string = string.chars().skip(1).collect();\n  \
    \      }\n        index += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp0hbszl0_.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      let slice = &string[index..];\n        if slice.starts_with(&substring)\
    \ {\n            count += 1;\n            index += substring_len;\n        } else\
    \ {\n            index += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpob5vfe8f.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       let mut i = index;\n        let mut j = 0;\n        while i < string.len()\
    \ && j < substring.len() && string.chars().nth(i) == substring.chars().nth(j)\
    \ {\n            i += 1;\n            j += 1;\n        }\n        if j == substring.len()\
    \ {\n            count += 1;\n        }\n        index += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    let\
    \ substring_len = substring.len();\n    while let Some(pos) = string.find(&substring)\
    \ {\n        count += 1;\n        index += pos + substring_len;\n        string\
    \ = string[index..].to_string();\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'byte index 4 is out of bounds of `xyx`', library/core/src/str/mod.rs:107:9\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut start = 0;\n    let mut end = substring.len();\n\
    \    let string_len = string.len();\n    let substring_len = substring.len();\n\
    \    while end <= string_len {\n        let slice = &string[start..end];\n   \
    \     if slice == substring {\n            count += 1;\n        }\n        start\
    \ += 1;\n        end += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       if let Some(i) = string[index..].find(&substring) {\n            count\
    \ += 1;\n            index += i + substring.len();\n        } else {\n       \
    \     break;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpkhxgfxui.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string_chars = string.chars();\n\
    \    let substring_chars = substring.chars();\n    while let Some(c) = string_chars.nth(index)\
    \ {\n        if c == substring_chars.next().unwrap() {\n            let mut i\
    \ = 0;\n            let mut string_chars_clone = string_chars.clone();\n     \
    \       for s in substring_chars {\n                if s != string_chars_clone.next().unwrap()\
    \ {\n                    break;\n                }\n                i += 1;\n\
    \            }\n            if i == substring.len() - 1 {\n                count\
    \ += 1;\n                index += i;\n            }\n        }\n        index\
    \ += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `substring_chars` as mutable, as it is not\
    \ declared as mutable\n  --> /tmp/tmpzjdcxe61.rs:14:17\n   |\n12 |     let substring_chars\
    \ = substring.chars();\n   |         --------------- help: consider changing this\
    \ to be mutable: `mut substring_chars`\n13 |     while let Some(c) = string_chars.nth(index)\
    \ {\n14 |         if c == substring_chars.next().unwrap() {\n   |            \
    \     ^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror[E0382]: borrow\
    \ of moved value: `substring_chars`\n   --> /tmp/tmpzjdcxe61.rs:14:17\n    |\n\
    12  |     let substring_chars = substring.chars();\n    |         ---------------\
    \ move occurs because `substring_chars` has type `Chars<'_>`, which does not implement\
    \ the `Copy` trait\n13  |     while let Some(c) = string_chars.nth(index) {\n\
    14  |         if c == substring_chars.next().unwrap() {\n    |               \
    \  ^^^^^^^^^^^^^^^^^^^^^^ value borrowed here after move\n...\n17  |         \
    \    for s in substring_chars {\n    |                      --------------- `substring_chars`\
    \ moved due to this implicit call to `.into_iter()`, in previous iteration of\
    \ loop\n    |\nnote: this function takes ownership of the receiver `self`, which\
    \ moves `substring_chars`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0382, E0596.\nFor more information about\
    \ an error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    let\
    \ substring_len = substring.len();\n    while index < string.len() {\n       \
    \ let index_of_substring = string.find(&substring);\n        if index_of_substring.is_none()\
    \ {\n            break;\n        }\n        let index_of_substring = index_of_substring.unwrap();\n\
    \        count += 1;\n        index += index_of_substring + substring_len;\n \
    \       string = string[index_of_substring + substring_len..].to_string();\n \
    \   }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `4`', /tmp/tmpbnu5hrw8.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string_chars = string.chars();\n\
    \    let substring_chars = substring.chars();\n    loop {\n        match string_chars.nth(index)\
    \ {\n            Some(c) => {\n                if c == substring_chars.next().unwrap()\
    \ {\n                    let mut i = 0;\n                    let mut string_chars_clone\
    \ = string_chars.clone();\n                    for s in substring_chars {\n  \
    \                      match string_chars_clone.nth(i) {\n                   \
    \         Some(c) => {\n                                if c != s {\n        \
    \                            break;\n                                }\n     \
    \                       }\n                            None => break,\n      \
    \                  }\n                        i += 1;\n                    }\n\
    \                    if i == substring.len() - 1 {\n                        count\
    \ += 1;\n                        index += 1;\n                    } else {\n \
    \                       index += 1;\n                    }\n                }\
    \ else {\n                    index += 1;\n                }\n            }\n\
    \            None => break,\n        }\n    }\n    count\n}\n\nfn main() {\n \
    \   let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\"\
    ), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `substring_chars` as mutable, as it is not\
    \ declared as mutable\n  --> /tmp/tmp7xvdx04u.rs:16:25\n   |\n12 |     let substring_chars\
    \ = substring.chars();\n   |         --------------- help: consider changing this\
    \ to be mutable: `mut substring_chars`\n...\n16 |                 if c == substring_chars.next().unwrap()\
    \ {\n   |                         ^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\
    \nerror[E0382]: borrow of moved value: `substring_chars`\n   --> /tmp/tmp7xvdx04u.rs:16:25\n\
    \    |\n12  |     let substring_chars = substring.chars();\n    |         ---------------\
    \ move occurs because `substring_chars` has type `Chars<'_>`, which does not implement\
    \ the `Copy` trait\n...\n16  |                 if c == substring_chars.next().unwrap()\
    \ {\n    |                         ^^^^^^^^^^^^^^^^^^^^^^ value borrowed here\
    \ after move\n...\n19  |                     for s in substring_chars {\n    |\
    \                              --------------- `substring_chars` moved due to\
    \ this implicit call to `.into_iter()`, in previous iteration of loop\n    |\n\
    note: this function takes ownership of the receiver `self`, which moves `substring_chars`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0382, E0596.\nFor more information about an error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       let mut index_of = string[index..].find(&substring);\n        if index_of.is_none()\
    \ {\n            break;\n        }\n        count += 1;\n        index += index_of.unwrap()\
    \ + 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    while\
    \ index < string.len() {\n        if string.starts_with(&substring) {\n      \
    \      count += 1;\n            string = string.chars().skip(substring.len()).collect();\n\
    \        } else {\n            string = string.chars().skip(1).collect();\n  \
    \      }\n        index += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpxp734hv_.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut string_chars\
    \ = string.chars();\n    let mut substring_chars = substring.chars();\n    let\
    \ mut string_char = string_chars.next();\n    let mut substring_char = substring_chars.next();\n\
    \    while string_char.is_some() {\n        if string_char == substring_char {\n\
    \            i += 1;\n            j += 1;\n            string_char = string_chars.next();\n\
    \            substring_char = substring_chars.next();\n            if substring_char.is_none()\
    \ {\n                count += 1;\n                substring_chars = substring.chars();\n\
    \                substring_char = substring_chars.next();\n                j =\
    \ 0;\n            }\n        } else {\n            i += 1;\n            string_char\
    \ = string_chars.next();\n            if j > 0 {\n                substring_chars\
    \ = substring.chars();\n                substring_char = substring_chars.nth(j);\n\
    \                j = 0;\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp2jn2ched.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut i = 0;\n    while i < string.len() {\n        let\
    \ j = string[i..].find(&substring);\n        if j.is_none() {\n            break;\n\
    \        }\n        count += 1;\n        i += j.unwrap() + substring.len();\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n   \
    \ assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp1halr4ju.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    let\
    \ substring_length = substring.len();\n    while index < string.len() {\n    \
    \    if string.starts_with(&substring) {\n            count += 1;\n          \
    \  string = string[substring_length..].to_string();\n        } else {\n      \
    \      string = string[1..].to_string();\n        }\n        index += 1;\n   \
    \ }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp4qgn9e9v.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       if let Some(i) = string[index..].find(&substring) {\n            count\
    \ += 1;\n            index += i + substring.len();\n        } else {\n       \
    \     break;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpp_5v2e66.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      let mut i = 0;\n        while i < substring_len && index + i < string_len\
    \ && string.chars().nth(index + i) == substring.chars().nth(i) {\n           \
    \ i += 1;\n        }\n        if i == substring_len {\n            count += 1;\n\
    \            index += i;\n        } else {\n            index += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n   \
    \ assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpo856w3x9.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       let found = string[index..].find(&substring);\n        if found.is_none()\
    \ {\n            break;\n        }\n        count += 1;\n        index += found.unwrap()\
    \ + substring.len();\n    }\n    count\n}\n\nfn main() {\n    let candidate =\
    \ how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp0m4ifux6.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      let sub_index = string[index..].find(&substring);\n        if sub_index.is_none()\
    \ {\n            break;\n        }\n        count += 1;\n        index += sub_index.unwrap()\
    \ + substring_len;\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp8s9nj70d.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       let mut found = false;\n        for (i, c) in substring.chars().enumerate()\
    \ {\n            if index + i >= string.len() {\n                break;\n    \
    \        }\n            if string.chars().nth(index + i).unwrap() == c {\n   \
    \             found = true;\n            } else {\n                found = false;\n\
    \                break;\n            }\n        }\n        if found {\n      \
    \      count += 1;\n            index += substring.len();\n        } else {\n\
    \            index += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `4`', /tmp/tmp4tqk_ef1.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let string_len =\
    \ string.len();\n    let substring_len = substring.len();\n    let mut string_chars\
    \ = string.chars();\n    let mut substring_chars = substring.chars();\n    while\
    \ i < string_len {\n        if string_chars.next().unwrap() == substring_chars.next().unwrap()\
    \ {\n            j += 1;\n            if j == substring_len {\n              \
    \  count += 1;\n                j = 0;\n            }\n        } else {\n    \
    \        j = 0;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmp1qwrgv4k.rs:17:67\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       let mut sub_index = 0;\n        while sub_index < substring.len() && index\
    \ + sub_index < string.len() {\n            if string.chars().nth(index + sub_index)\
    \ != substring.chars().nth(sub_index) {\n                break;\n            }\n\
    \            sub_index += 1;\n        }\n        if sub_index == substring.len()\
    \ {\n            count += 1;\n            index += sub_index;\n        } else\
    \ {\n            index += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpwfzx92xv.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    while\
    \ let Some(pos) = string.find(&substring) {\n        index += pos;\n        string\
    \ = string[pos + substring.len()..].to_string();\n        count += 1;\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpmtox9eev.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       let sub_index = string[index..].find(&substring);\n        if sub_index.is_none()\
    \ {\n            break;\n        }\n        index += sub_index.unwrap();\n   \
    \     count += 1;\n        index += substring.len();\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp8cxl4ztt.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      let mut i = 0;\n        while i < substring_len && index + i < string_len\
    \ && string.chars().nth(index + i) == substring.chars().nth(i) {\n           \
    \ i += 1;\n        }\n        if i == substring_len {\n            count += 1;\n\
    \            index += substring_len;\n        } else {\n            index += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp_lrtg3cu.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut start = 0;\n    let mut end = substring.len();\n\
    \    while end <= string.len() {\n        if &string[start..end] == substring\
    \ {\n            count += 1;\n        }\n        start += 1;\n        end += 1;\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n   \
    \ assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      if string[index..].starts_with(&substring) {\n            count += 1;\n\
    \            index += substring_len;\n        } else {\n            index += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpxhdklbsx.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut i = 0;\n    let string_len = string.len();\n   \
    \ let substring_len = substring.len();\n    while i < string_len {\n        let\
    \ mut j = 0;\n        while j < substring_len && i + j < string_len && string.chars().nth(i\
    \ + j).unwrap() == substring.chars().nth(j).unwrap() {\n            j += 1;\n\
    \        }\n        if j == substring_len {\n            count += 1;\n       \
    \     i += j;\n        } else {\n            i += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpvi45xrg2.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    let\
    \ substring_length = substring.len();\n    while index < string.len() {\n    \
    \    if string.starts_with(&substring) {\n            count += 1;\n          \
    \  string = string[substring_length..].to_string();\n        } else {\n      \
    \      string = string[1..].to_string();\n        }\n        index += 1;\n   \
    \ }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp74pvg28d.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       let mut i = 0;\n        while i < substring.len() && index + i < string.len()\
    \ && string.chars().nth(index + i) == substring.chars().nth(i) {\n           \
    \ i += 1;\n        }\n        if i == substring.len() {\n            count +=\
    \ 1;\n        }\n        index += 1;\n    }\n    count\n}\n\nfn main() {\n   \
    \ let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\"\
    ), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string_chars = string.chars();\n\
    \    let substring_chars = substring.chars();\n    while let Some(c) = string_chars.nth(index)\
    \ {\n        if c == substring_chars.next().unwrap() {\n            let mut i\
    \ = 0;\n            let mut string_chars_clone = string_chars.clone();\n     \
    \       let mut substring_chars_clone = substring_chars.clone();\n           \
    \ while let Some(c) = string_chars_clone.next() {\n                if c == substring_chars_clone.next().unwrap()\
    \ {\n                    i += 1;\n                } else {\n                 \
    \   break;\n                }\n            }\n            if i == substring.len()\
    \ - 1 {\n                count += 1;\n                index += i;\n          \
    \  } else {\n                index += 1;\n            }\n        } else {\n  \
    \          index += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `substring_chars` as mutable, as it is not\
    \ declared as mutable\n  --> /tmp/tmp5hmumc0h.rs:14:17\n   |\n12 |     let substring_chars\
    \ = substring.chars();\n   |         --------------- help: consider changing this\
    \ to be mutable: `mut substring_chars`\n13 |     while let Some(c) = string_chars.nth(index)\
    \ {\n14 |         if c == substring_chars.next().unwrap() {\n   |            \
    \     ^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0596`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    while\
    \ index < string.len() {\n        let index_of_substring = string.find(&substring);\n\
    \        if index_of_substring.is_none() {\n            break;\n        }\n  \
    \      let index_of_substring = index_of_substring.unwrap();\n        count +=\
    \ 1;\n        index += index_of_substring + substring.len();\n        string =\
    \ string[index_of_substring + substring.len()..].to_string();\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `4`', /tmp/tmpaob2cye0.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    let\
    \ substring_len = substring.len();\n    while let Some(i) = string.find(&substring)\
    \ {\n        count += 1;\n        index += i + substring_len;\n        string\
    \ = string[index..].to_string();\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'byte index 4 is out of bounds of `xyx`', library/core/src/str/mod.rs:107:9\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut i = 0;\n    let string_len = string.len();\n   \
    \ let substring_len = substring.len();\n    while i < string_len {\n        if\
    \ &string[i..i + substring_len] == substring {\n            count += 1;\n    \
    \        i += substring_len;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n   \
    \ assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'byte index 10 is out of bounds of `cacacacac`',\
    \ library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       let mut i = 0;\n        while i < substring.len() && index + i < string.len()\
    \ {\n            if string.chars().nth(index + i) != substring.chars().nth(i)\
    \ {\n                break;\n            }\n            i += 1;\n        }\n \
    \       if i == substring.len() {\n            count += 1;\n            index\
    \ += i;\n        } else {\n            index += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpjfz44x25.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut start = 0;\n    while start < string.len() {\n \
    \       let index = string[start..].find(&substring);\n        if index.is_none()\
    \ {\n            break;\n        }\n        start += index.unwrap() + substring.len();\n\
    \        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate =\
    \ how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp3rs15gn8.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    while\
    \ index < string.len() {\n        let mut found = false;\n        for i in 0..substring.len()\
    \ {\n            if string.get(index + i..index + i + 1) == substring.get(i..i\
    \ + 1) {\n                found = true;\n            } else {\n              \
    \  found = false;\n                break;\n            }\n        }\n        if\
    \ found {\n            count += 1;\n            index += substring.len();\n  \
    \      } else {\n            index += 1;\n        }\n    }\n    count\n}\n\nfn\
    \ main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp9pkzzx57.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    let\
    \ substring_len = substring.len();\n    while index < string.len() {\n       \
    \ if string.starts_with(&substring) {\n            count += 1;\n            string\
    \ = string[substring_len..].to_string();\n        } else {\n            string\
    \ = string[1..].to_string();\n        }\n        index += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp2th4yvoa.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       if let Some(i) = string[index..].find(&substring) {\n            count\
    \ += 1;\n            index += i + substring.len();\n        } else {\n       \
    \     break;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpku1qktax.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    let\
    \ substring_len = substring.len();\n    while index < string.len() {\n       \
    \ let index_of_substring = string.find(&substring);\n        if index_of_substring.is_none()\
    \ {\n            break;\n        }\n        let index_of_substring = index_of_substring.unwrap();\n\
    \        count += 1;\n        index += index_of_substring + substring_len;\n \
    \       string = string[index_of_substring + substring_len..].to_string();\n \
    \   }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `4`', /tmp/tmpfjneadg1.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    while\
    \ index < string.len() {\n        if string.starts_with(&substring) {\n      \
    \      count += 1;\n            string = string.chars().skip(substring.len()).collect();\n\
    \        } else {\n            string = string.chars().skip(1).collect();\n  \
    \      }\n        index += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp2mjgc48q.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    while\
    \ index < string.len() {\n        let mut sub_index = 0;\n        let mut string_index\
    \ = index;\n        while sub_index < substring.len() && string_index < string.len()\
    \ {\n            if substring.chars().nth(sub_index) == string.chars().nth(string_index)\
    \ {\n                sub_index += 1;\n                string_index += 1;\n   \
    \         } else {\n                break;\n            }\n        }\n       \
    \ if sub_index == substring.len() {\n            count += 1;\n            index\
    \ += sub_index;\n        } else {\n            index += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpa3ljfw5z.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       if let Some(i) = string[index..].find(&substring) {\n            count\
    \ += 1;\n            index += i + substring.len();\n        } else {\n       \
    \     break;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpqsf65buv.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    while\
    \ let Some(i) = string.find(&substring) {\n        index += i + 1;\n        string\
    \ = string[i + 1..].to_string();\n        count += 1;\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    let\
    \ substring_len = substring.len();\n    while index < string.len() {\n       \
    \ if string.starts_with(&substring) {\n            count += 1;\n            string\
    \ = string[substring_len..].to_string();\n        } else {\n            string\
    \ = string[1..].to_string();\n        }\n        index += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp22idjfl2.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      let sub_index = string[index..].find(&substring);\n        if sub_index.is_none()\
    \ {\n            break;\n        }\n        let sub_index = sub_index.unwrap();\n\
    \        index += sub_index + substring_len;\n        count += 1;\n    }\n   \
    \ count\n}\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp_lvyth9a.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut start = 0;\n    let mut end = substring.len();\n\
    \    while end <= string.len() {\n        if &string[start..end] == substring\
    \ {\n            count += 1;\n        }\n        start += 1;\n        end += 1;\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n   \
    \ assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      if string[index..].starts_with(&substring) {\n            count += 1;\n\
    \            index += substring_len;\n        } else {\n            index += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpgng8n87b.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    let\
    \ substring_len = substring.len();\n    while let Some(pos) = string.find(&substring)\
    \ {\n        count += 1;\n        index += pos + substring_len;\n        string\
    \ = string[index..].to_string();\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'byte index 4 is out of bounds of `xyx`', library/core/src/str/mod.rs:107:9\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       let slice = &string[index..];\n        if slice.starts_with(&substring)\
    \ {\n            count += 1;\n            index += substring.len();\n        }\
    \ else {\n            index += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpkzm0tvyx.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    let\
    \ substring_len = substring.len();\n    while index < string.len() {\n       \
    \ let found = string.find(&substring);\n        if found.is_some() {\n       \
    \     count += 1;\n            index = found.unwrap() + substring_len;\n     \
    \       string = string[index..].to_string();\n        } else {\n            break;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `4`', /tmp/tmpubruylu6.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      if &string[index..index + substring_len] == substring {\n            count\
    \ += 1;\n            index += substring_len;\n        } else {\n            index\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'byte index 10 is out of bounds of `cacacacac`',\
    \ library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut start = 0;\n    let mut end = substring.len();\n\
    \    while end <= string.len() {\n        if string[start..end] == substring {\n\
    \            count += 1;\n        }\n        start += 1;\n        end += 1;\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n   \
    \ assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    let\
    \ substring_len = substring.len();\n    while index < string.len() {\n       \
    \ if string.starts_with(&substring) {\n            count += 1;\n            string\
    \ = string[substring_len..].to_string();\n        } else {\n            string\
    \ = string[1..].to_string();\n        }\n        index += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpykalt6so.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    while\
    \ index < string.len() {\n        let index_of_substring = string.find(&substring);\n\
    \        if index_of_substring.is_none() {\n            break;\n        }\n  \
    \      count += 1;\n        index = index_of_substring.unwrap() + 1;\n       \
    \ string = string[index..].to_string();\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `4`', /tmp/tmpn297owoo.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       if let Some(i) = string[index..].find(&substring) {\n            count\
    \ += 1;\n            index += i + substring.len();\n        } else {\n       \
    \     break;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp1h71y_5g.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      let mut i = 0;\n        let mut j = index;\n        while i < substring_len\
    \ && j < string_len && string.chars().nth(j).unwrap() == substring.chars().nth(i).unwrap()\
    \ {\n            i += 1;\n            j += 1;\n        }\n        if i == substring_len\
    \ {\n            count += 1;\n        }\n        index += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    while\
    \ index < string.len() {\n        let index_option = string.find(&substring);\n\
    \        match index_option {\n            Some(index) => {\n                count\
    \ += 1;\n                string = string[index + substring.len()..].to_string();\n\
    \            }\n            None => {\n                break;\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp269_l6je.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      if string[index..].starts_with(&substring) {\n            count += 1;\n\
    \            index += substring_len;\n        } else {\n            index += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpf1hgp804.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    while\
    \ index < string.len() {\n        let index_of_substring = string.find(&substring);\n\
    \        if index_of_substring.is_none() {\n            break;\n        }\n  \
    \      count += 1;\n        index = index_of_substring.unwrap() + 1;\n       \
    \ string = string[index..].to_string();\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `4`', /tmp/tmp1b1df8yy.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      if &string[index..index + substring_len] == substring {\n            count\
    \ += 1;\n            index += substring_len;\n        } else {\n            index\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'byte index 10 is out of bounds of `cacacacac`',\
    \ library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      if string[index..].starts_with(&substring) {\n            count += 1;\n\
    \            index += substring_len;\n        } else {\n            index += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmplbiwpxn9.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    while\
    \ index < string.len() {\n        let mut index_of = string.find(&substring);\n\
    \        if index_of.is_none() {\n            break;\n        }\n        index_of\
    \ = index_of.unwrap();\n        count += 1;\n        string = string.split_off(index_of\
    \ + substring.len());\n    }\n    count\n}\n\nfn main() {\n    let candidate =\
    \ how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm5c53luz.rs:17:20\n   |\n\
    13 |         let mut index_of = string.find(&substring);\n   |               \
    \             ----------------------- expected due to this value\n...\n17 |  \
    \       index_of = index_of.unwrap();\n   |                    ^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `usize`\n   |\n   = note: expected enum `Option<usize>`\n\
    \              found type `usize`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n17 |         index_of = Some(index_of.unwrap());\n   |                \
    \    +++++                 +\n\nerror[E0369]: cannot add `usize` to `Option<usize>`\n\
    \  --> /tmp/tmpm5c53luz.rs:19:44\n   |\n19 |         string = string.split_off(index_of\
    \ + substring.len());\n   |                                   -------- ^ ---------------\
    \ usize\n   |                                   |\n   |                      \
    \             Option<usize>\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0369.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut start = 0;\n    let mut end = substring.len();\n\
    \    let string_len = string.len();\n    let substring_len = substring.len();\n\
    \    let mut sub_string = substring.clone();\n    let mut string = string.clone();\n\
    \    while end <= string_len {\n        if string.contains(&sub_string) {\n  \
    \          count += 1;\n            start += 1;\n            end += 1;\n     \
    \       string = string[start..end].to_string();\n            sub_string = substring[start..end].to_string();\n\
    \        } else {\n            break;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'byte index 2 is out of bounds of `x`', library/core/src/str/mod.rs:107:9\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut string_chars\
    \ = string.chars();\n    let mut substring_chars = substring.chars();\n    let\
    \ mut string_char = string_chars.next();\n    let mut substring_char = substring_chars.next();\n\
    \    while string_char.is_some() {\n        if string_char == substring_char {\n\
    \            i += 1;\n            j += 1;\n            if j == substring.len()\
    \ {\n                count += 1;\n                j = 0;\n                substring_chars\
    \ = substring.chars();\n                substring_char = substring_chars.next();\n\
    \            }\n            string_char = string_chars.next();\n            substring_char\
    \ = substring_chars.next();\n        } else {\n            i += 1;\n         \
    \   string_chars = string[i..].chars();\n            string_char = string_chars.next();\n\
    \            substring_chars = substring.chars();\n            substring_char\
    \ = substring_chars.next();\n            j = 0;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpvbmxkdji.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut i = 0;\n    while i < string.len() {\n        if\
    \ &string[i..i + substring.len()] == substring {\n            count += 1;\n  \
    \          i += substring.len();\n        } else {\n            i += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'byte index 10 is out of bounds of `cacacacac`',\
    \ library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut start_index = 0;\n    let mut index = 0;\n    let\
    \ string_chars: Vec<char> = string.chars().collect();\n    let substring_chars:\
    \ Vec<char> = substring.chars().collect();\n    while index < string_chars.len()\
    \ {\n        if string_chars[index] == substring_chars[start_index] {\n      \
    \      start_index += 1;\n            if start_index == substring_chars.len()\
    \ {\n                count += 1;\n                start_index = 0;\n         \
    \   }\n        } else {\n            start_index = 0;\n        }\n        index\
    \ += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmprmvzsirv.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string = string.as_str();\n\
    \    let substring = substring.as_str();\n    let substring_len = substring.len();\n\
    \    while index < string.len() {\n        if &string[index..index + substring_len]\
    \ == substring {\n            count += 1;\n            index += substring_len;\n\
    \        } else {\n            index += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'byte index 10 is out of bounds of `cacacacac`',\
    \ library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      let mut i = 0;\n        while i < substring_len && index + i < string_len\
    \ {\n            if string.chars().nth(index + i).unwrap() != substring.chars().nth(i).unwrap()\
    \ {\n                break;\n            }\n            i += 1;\n        }\n \
    \       if i == substring_len {\n            count += 1;\n            index +=\
    \ i;\n        } else {\n            index += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpgt006onf.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      if string[index..].starts_with(&substring) {\n            count += 1;\n\
    \            index += substring_len;\n        } else {\n            index += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp3ky3c323.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let string_len = string.len();\n\
    \    let substring_len = substring.len();\n    while index < string_len {\n  \
    \      if string[index..].starts_with(&substring) {\n            count += 1;\n\
    \            index += substring_len;\n        } else {\n            index += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpe31m_qil.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut pos = 0;\n    let string_len = string.len();\n \
    \   let substring_len = substring.len();\n    while pos < string_len {\n     \
    \   if &string[pos..pos + substring_len] == substring {\n            count +=\
    \ 1;\n            pos += substring_len;\n        } else {\n            pos +=\
    \ 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n\
    \    assert_eq!(candidate(String::from(\"\"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"\
    xyxyxyx\"), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"\
    cacacacac\"), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"\
    john doe\"), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'byte index 10 is out of bounds of `cacacacac`',\
    \ library/core/src/str/mod.rs:107:9\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       let mut found = false;\n        for (i, c) in substring.chars().enumerate()\
    \ {\n            if index + i >= string.len() {\n                break;\n    \
    \        }\n            if string.chars().nth(index + i).unwrap() == c {\n   \
    \             found = true;\n            } else {\n                found = false;\n\
    \                break;\n            }\n        }\n        if found {\n      \
    \      count += 1;\n            index += substring.len();\n        } else {\n\
    \            index += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `4`', /tmp/tmpuc1m0obd.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    let mut string = string;\n    while\
    \ index < string.len() {\n        let index_of_substring = string.find(&substring);\n\
    \        if index_of_substring.is_none() {\n            break;\n        }\n  \
    \      count += 1;\n        index = index_of_substring.unwrap() + 1;\n       \
    \ string = string[index..].to_string();\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `4`', /tmp/tmp_zh47fvw.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       let mut found = false;\n        for i in 0..substring.len() {\n      \
    \      if string.chars().nth(index + i) == substring.chars().nth(i) {\n      \
    \          found = true;\n            } else {\n                found = false;\n\
    \                break;\n            }\n        }\n        if found {\n      \
    \      count += 1;\n            index += substring.len();\n        } else {\n\
    \            index += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmprd9jnub_.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut string_chars\
    \ = string.chars();\n    let mut substring_chars = substring.chars();\n    let\
    \ mut string_char = string_chars.next();\n    let mut substring_char = substring_chars.next();\n\
    \    while string_char.is_some() {\n        if string_char == substring_char {\n\
    \            if j == 0 {\n                i += 1;\n            }\n           \
    \ j += 1;\n            substring_char = substring_chars.next();\n            if\
    \ substring_char.is_none() {\n                count += 1;\n                substring_chars\
    \ = substring.chars();\n                substring_char = substring_chars.next();\n\
    \                j = 0;\n            }\n        } else {\n            substring_chars\
    \ = substring.chars();\n            substring_char = substring_chars.next();\n\
    \            j = 0;\n        }\n        string_char = string_chars.next();\n \
    \   }\n    count\n}\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpqk9z91ks.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut string =\
    \ string.as_bytes();\n    let substring = substring.as_bytes();\n    while i <\
    \ string.len() {\n        if string[i] == substring[j] {\n            i += 1;\n\
    \            j += 1;\n            if j == substring.len() {\n                count\
    \ += 1;\n                j = 0;\n            }\n        } else {\n           \
    \ i += 1;\n            j = 0;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpxw4x_ki2.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index != -1 {\n        index\
    \ = string[index..].find(&substring).unwrap_or(-1);\n        if index != -1 {\n\
    \            count += 1;\n            index += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\
    \"), String::from(\"x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"\
    ), String::from(\"x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"\
    ), String::from(\"cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"\
    ), String::from(\"john\")), 1);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpjrd2uu3r.rs:11:20\n\
    \   |\n11 |     while index != -1 {\n   |                    ^^ the trait `Neg`\
    \ is not implemented for `usize`\n   |\n   = help: the following other types implement\
    \ trait `Neg`:\n             &f32\n             &f64\n             &i128\n   \
    \          &i16\n             &i32\n             &i64\n             &i8\n    \
    \         &isize\n           and 8 others\n\nerror[E0600]: cannot apply unary\
    \ operator `-` to type `usize`\n  --> /tmp/tmpjrd2uu3r.rs:12:60\n   |\n12 |  \
    \       index = string[index..].find(&substring).unwrap_or(-1);\n   |        \
    \                                                    ^^\n   |                \
    \                                            |\n   |                         \
    \                                   cannot apply unary operator `-`\n   |    \
    \                                                        help: you may have meant\
    \ the maximum value of `usize`: `usize::MAX`\n   |\n   = note: unsigned values\
    \ cannot be negated\n\nerror[E0600]: cannot apply unary operator `-` to type `usize`\n\
    \  --> /tmp/tmpjrd2uu3r.rs:13:21\n   |\n13 |         if index != -1 {\n   |  \
    \                   ^^\n   |                     |\n   |                     cannot\
    \ apply unary operator `-`\n   |                     help: you may have meant\
    \ the maximum value of `usize`: `usize::MAX`\n   |\n   = note: unsigned values\
    \ cannot be negated\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0600.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfn how_many_times(string: String, substring: String) -> isize {\n    let\
    \ mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n \
    \       let mut found = false;\n        for i in 0..substring.len() {\n      \
    \      if string.chars().nth(index + i) == substring.chars().nth(i) {\n      \
    \          found = true;\n            } else {\n                found = false;\n\
    \                break;\n            }\n        }\n        if found {\n      \
    \      count += 1;\n            index += substring.len();\n        } else {\n\
    \            index += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = how_many_times;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"\
    x\")), 0);\n    assert_eq!(candidate(String::from(\"xyxyxyx\"), String::from(\"\
    x\")), 4);\n    assert_eq!(candidate(String::from(\"cacacacac\"), String::from(\"\
    cac\")), 4);\n    assert_eq!(candidate(String::from(\"john doe\"), String::from(\"\
    john\")), 1);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp12yqk7s9.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
