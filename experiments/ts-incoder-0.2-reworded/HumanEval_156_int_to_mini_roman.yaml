name: HumanEval_156_int_to_mini_roman
language: ts
prompt: "//Given a positive integer, obtain its roman numeral equivalent as a string,\n\
  // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
  // >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\
  \n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number:\
  \ number): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"\
  xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"\
  ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"\
  d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"\
  iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"\
  xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"\
  dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"\
  cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();"
completions: ["  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid\
    \ number: ${number}`);\n  }\n  const roman = int_to_roman(number);\n  return roman.toLowerCase();\n\
    }\n", "  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi,\
    \ \"\");\n}\n", "  if (number < 1 || number > 1000) {\n    throw new Error(`Invalid\
    \ number: ${number}`);\n  }\n  const roman = Array(number + 1).fill(0).map((_,\
    \ i) => i).map(\n    (_, i) => roman_numerals[i % roman_numerals.length]\n  );\n\
    \  return roman.join('');\n}\n", "  if (number < 1 || number > 1000) {\n    throw\
    \ Error(`Invalid number: ${number}`);\n  }\n  let roman = \"\";\n  let numDigits\
    \ = 1;\n  while (number >= numDigits) {\n    roman += int_to_roman(number % numDigits);\n\
    \    number /= numDigits;\n    numDigits++;\n  }\n  return roman;\n}\n", "  if\
    \ (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n\
    \  }\n\n  const roman = Array.from({ length: number }, (_, i) => i + 1).map(\n\
    \    (_, i) => roman_numerals[i]\n  );\n\n  return roman.join('');\n}\n", "  let\
    \ roman: string = \"\";\n  let num: number = number;\n  while (num > 0) {\n  \
    \  let remainder: number = num % 10;\n    roman += mini_roman[remainder];\n  \
    \  num /= 10;\n  }\n  return roman;\n}\n", "  if (number < 1 || number > 1000)\
    \ {\n    throw new Error(`Invalid number ${number}`);\n  }\n  const roman = Array(1000).fill(0).map((_,\
    \ i) => i).map(i => roman_numerals[i]);\n  return roman[number - 1];\n}\n", " \
    \ if (number < 1 || number > 1000) {\n    throw new Error(`Invalid number ${number}`);\n\
    \  }\n  const roman = roman_numeral_map[number];\n  if (!roman) {\n    throw new\
    \ Error(`Invalid number ${number}`);\n  }\n  return roman.toLowerCase();\n}\n",
  "  let roman: string[] = [];\n  let num: number = number;\n  let romanNum: number\
    \ = num;\n  let romanNumString: string = romanNum.toString();\n  let romanNumStringArray:\
    \ string[] = romanNumString.split(\"\");\n  let romanNumStringArrayLen: number\
    \ = romanNumStringArray.length;\n  let romanNumStringArrayMax: number = romanNumStringArrayLen\
    \ - 1;\n  let romanNumStringArrayMin: number = romanNumStringArrayLen - 2;\n \
    \ let romanNumStringArrayMid: number = romanNumStringArrayLen / 2;\n  let romanNumStringArrayMid2:\
    \ number = romanNumStringArrayLen / 3;\n  let romanNumStringArrayMid3: number\
    \ = romanNumStringArrayLen / 4;\n  let romanNumStringArrayMid4: number = romanNumStringArrayLen\
    \ / 5;\n  let romanNumStringArrayMid5: number = romanNumStringArrayLen / 6;\n\
    \  let romanNumStringArrayMid6: number = romanNumStringArrayLen / 7;\n  let romanNumStringArrayMid7:\
    \ number = romanNumStringArrayLen / 8;\n  let romanNumStringArrayMid8: number\
    \ = romanNumStringArrayLen / 9;\n  let romanNumStringArrayMid9: number = romanNumStringArrayLen\
    \ / 10;\n  let romanNumStringArrayMid10: number = romanNumStringArrayLen / 11;\n\
    \  let romanNumStringArrayMid11: number = romanNumStringArrayLen / 12;\n  let\
    \ romanNumStringArrayMid12: number = romanNumStringArrayLen / 13;\n  let romanNumStringArrayMid13:\
    \ number = romanNumStringArrayLen / 14;\n  let romanNumStringArrayMid14: number\
    \ = romanNumStringArrayLen / 15;\n  let romanNumStringArrayMid15: number = romanNumStringArrayLen\
    \ / 16;\n  let romanNumStringArrayMid16: number = romanNumStringArrayLen / 17;\n\
    \  let romanNumStringArrayMid17: number = romanNumStringArrayLen / 18;\n  let\
    \ romanNumStringArrayMid18: number = romanNumStringArrayLen / 19;\n  let romanNumStringArrayMid19:\
    \ number = romanNumStringArrayLen / 20;\n  let romanNumStringArrayMid20: number\
    \ = romanNumStringArrayLen / 21;\n  let romanNumStringArrayMid21: number = romanNumStringArrayLen\
    \ / 22;\n  let romanNumStringArrayMid22: number = ", "  if (number < 1 || number\
    \ > 1000) {\n    throw Error(`Invalid number: ${number}`);\n  }\n\n  let roman\
    \ = '';\n  let num = 0;\n\n  while (number > 0) {\n    num = (number % 1000) +\
    \ ((num > 0) ? 1 : 0);\n    roman += mini_roman[num];\n    number = Math.floor(number\
    \ / 1000);\n  }\n\n  return roman;\n}\n", "  const roman = int_to_roman(number);\n\
    \  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n", "  let roman: string\
    \ = \"\";\n  let num: number = number;\n  let roman_num: number = 0;\n  let roman_num_str:\
    \ string = \"\";\n  let roman_num_str_index: number = 0;\n  let roman_num_str_index2:\
    \ number = 0;\n  let roman_num_str_index3: number = 0;\n  let roman_num_str_index4:\
    \ number = 0;\n  let roman_num_str_index5: number = 0;\n  let roman_num_str_index6:\
    \ number = 0;\n  let roman_num_str_index7: number = 0;\n  let roman_num_str_index8:\
    \ number = 0;\n  let roman_num_str_index9: number = 0;\n  let roman_num_str_index10:\
    \ number = 0;\n  let roman_num_str_index11: number = 0;\n  let roman_num_str_index12:\
    \ number = 0;\n  let roman_num_str_index13: number = 0;\n  let roman_num_str_index14:\
    \ number = 0;\n  let roman_num_str_index15: number = 0;\n  let roman_num_str_index16:\
    \ number = 0;\n  let roman_num_str_index17: number = 0;\n  let roman_num_str_index18:\
    \ number = 0;\n  let roman_num_str_index19: number = 0;\n  let roman_num_str_index20:\
    \ number = 0;\n  let roman_num_str_index21: number = 0;\n  let roman_num_str_index22:\
    \ number = 0;\n  let roman_num_str_index23: number = 0;\n  let roman_num_str_index24:\
    \ number = 0;\n  let roman_num_str_index25: number = 0;\n  let roman_num_str_index26:\
    \ number = 0;\n  let roman_num_str_index27: number = 0;\n  let roman_num_str_index28:\
    \ number = 0;\n  let roman_num_str_index29: number = 0;\n  let roman_num_str_index30:\
    \ number = 0;\n  let roman_num_str_index31: number = 0;\n  let roman_num_str_index32:\
    \ number = 0;\n  let roman_num_str_index33: number = 0;\n  let roman_num_str_index34:\
    \ number = 0;\n  let roman_num_str_index35: number = 0;\n  let roman_num_str_index36:\
    \ number = 0;\n  let roman_num_str_index37: number = 0;\n  let roman_num_str_index38:\
    \ number = 0;\n  let roman_num_str_index39: number = 0;\n  let roman_num_str_index40:\
    \ number = 0;\n  let roman_num_str_index41: number = 0;\n  let roman_num_str_index42:\
    \ number = 0;\n  let roman_num_str_index43: number = 0;\n  let roman_num_str_index44:\
    \ number = 0;\n  let roman_num_str", "  const roman = int_to_roman(number);\n\
    \  return roman.toLowerCase();\n}\n", "  const roman = int_to_roman(number);\n\
    \  return roman_to_mini_roman(roman);\n}\n", "  const roman = int_to_roman(number);\n\
    \  return roman.toLowerCase().replace(/[a-z]/g, \"\");\n}\n", "  let roman = int_to_roman(number);\n\
    \  return roman.toLowerCase();\n}\n", "  if (number < 1 || number > 1000) {\n\
    \    throw new Error(`Invalid number ${number}`);\n  }\n  const roman = int_to_roman(number);\n\
    \  return roman.toLowerCase();\n}\n", "  const roman = roman_numeral_map[number];\n\
    \  if (!roman) {\n    throw new Error(`Invalid number: ${number}`);\n  }\n  return\
    \ roman;\n}\n", "  const roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/g,\
    \ \"\");\n}\n", "  let roman = int_to_roman(number);\n  return roman.toLowerCase().replace(/[a-z]/gi,\
    \ \"\");\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
