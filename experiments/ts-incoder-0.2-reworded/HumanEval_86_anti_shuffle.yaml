name: HumanEval_86_anti_shuffle
language: ts
prompt: "//Write a function that takes a string and returns an ordered version of\
  \ it.\n// Ordered version of string, is a string where all words (separated by space)\n\
  // are replaced by a new word where all the characters arranged in\n// ascending\
  \ order based on ascii value.\n// Note: You should keep the order of words and blank\
  \ spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\
  \n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\"\
  )\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s: string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"Hi\"\
  ),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"\
  number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
  Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
  );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"),\"\
  .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
completions: ["  const words = s.split(\" \");\n  const sortedWords = words.sort();\n\
    \  return sortedWords.join(\" \");\n}\n", "  return s.split(' ').sort().join('\
    \ ');\n}\n", "  return s.replace(/([a-z])([A-Z])/g, '$1 $2').replace(/([A-Z])([a-z])/g,\
    \ ' $1 $2').replace(/\\s+/g, ' ').trim();\n}\n", "  return s.split(' ').sort().join('\
    \ ');\n}\n", "  return s.split(' ').sort().join(' ');\n}\n", "  const words =\
    \ s.split(' ');\n  const result = [];\n  for (let i = 0; i < words.length; i++)\
    \ {\n    const word = words[i];\n    const index = word.length - 1;\n    while\
    \ (index >= 0) {\n      result.push(word.slice(0, index) + word.slice(index +\
    \ 1));\n      index--;\n    }\n  }\n  return result.join(' ');\n}\n", "  let new_s\
    \ = \"\";\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    if\
    \ (char === \" \") {\n      new_s += \"!\";\n    } else {\n      new_s += char;\n\
    \    }\n  }\n  return new_s;\n}\n", "  let newString = \"\";\n  for (let i = 0;\
    \ i < s.length; i++) {\n    let char = s[i];\n    if (char === \" \") {\n    \
    \  newString += char;\n    } else {\n      let index = alphabet.indexOf(char);\n\
    \      if (index > -1) {\n        newString += alphabet[alphabet.indexOf(char)\
    \ + 1];\n      } else {\n        newString += char;\n      }\n    }\n  }\n  return\
    \ newString;\n}\n", "  return s.replace(/\\s+/g, ' ').split(' ').sort().join('\
    \ ');\n}\n", "  return s.replace(/([a-z])([A-Z])/g, '$1$2').toLowerCase().replace(/\\\
    s+/g, '');\n}\n", "  const words = s.split(\" \");\n  const newWords = words.map((word)\
    \ => {\n    const chars = word.split(\"\");\n    chars.sort((a, b) => a - b);\n\
    \    return chars.join(\"\");\n  });\n  return newWords.join(\" \");\n}\n", " \
    \ const words = s.split(' ');\n  const new_words = [];\n  for (let i = 0; i <\
    \ words.length; i++) {\n    const word = words[i];\n    const new_word = word.split('').sort().join('');\n\
    \    new_words.push(new_word);\n  }\n  return new_words.join(' ');\n}\n", "  return\
    \ s.replace(/\\s+/g, ' ').split(' ').sort().join(' ');\n}\n", "  return s.replace(/\\\
    s+/g, \"\").split(\"\").sort().join(\"\");\n}\n", "  const words = s.split(' ');\n\
    \  const new_words = [];\n  for (let i = 0; i < words.length; i++) {\n    const\
    \ word = words[i];\n    const new_word = word;\n    for (let j = 0; j < word.length;\
    \ j++) {\n      const char = word.charAt(j);\n      const ascii = char.charCodeAt(0);\n\
    \      if (ascii >= 65 && ascii <= 90) {\n        new_word += char;\n      } else\
    \ if (ascii >= 97 && ascii <= 122) {\n        new_word += char.substring(1);\n\
    \      }\n    }\n    new_words.push(new_word);\n  }\n  return new_words.join('\
    \ ');\n}\n", "  return s.replace(/([A-Z])/g, function ($1) {\n    return $1.toUpperCase();\n\
    \  }).replace(/\\s+/g, ' ').split(' ').sort().join(' ');\n}\n", "  let new_s =\
    \ \"\";\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    if\
    \ (char === \" \") {\n      new_s += \"__\";\n    } else {\n      new_s += char;\n\
    \    }\n  }\n  return new_s;\n}\n", "  const words = s.split(' ');\n  const newWords\
    \ = words.map(word => {\n    const chars = word.split('');\n    const sortedChars\
    \ = chars.sort((a, b) => a - b);\n    return sortedChars.join('');\n  });\n  return\
    \ newWords.join(' ');\n}\n", "  const words = s.split(' ');\n  const newWords\
    \ = words.map(word => {\n    const chars = word.split('');\n    const sortedChars\
    \ = chars.sort((a, b) => {\n      return a.charCodeAt() - b.charCodeAt();\n  \
    \  });\n    return sortedChars.join('');\n  });\n  return newWords.join(' ');\n\
    }\n", "  const words = s.split(' ');\n  const newWords = words.map(word => {\n\
    \    const chars = word.split(\"\");\n    const sortedChars = chars.sort();\n\
    \    return sortedChars.join('');\n  });\n  return newWords.join(' ');\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
