name: HumanEval_115_max_fill
language: ts
prompt: "//You are given a rectangular grid of wells. Each row represents a single\
  \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
  \ has a corresponding bucket that can be used to extract water from it, \n// and\
  \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
  \ the wells.\n// Output the number of times you need to lower the buckets.\n// Example\
  \ 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example\
  \ 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]],\
  \ 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n//\
  \ Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n\
  // * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity\
  \ <= 10\nfunction max_fill(grid: number[][], capacity: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1,\
  \ 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0,\
  \ 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0,\
  \ 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1,\
  \ 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n\
  }\n\ntest();"
completions: ["    let result = 0;\n    for (let i = 0; i < grid.length; i++) {\n\
    \        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                let bucket = grid[i][j];\n                while (bucket\
    \ > 0) {\n                    bucket--;\n                    grid[i][j] = 0;\n\
    \                    result++;\n                }\n            }\n        }\n\
    \    }\n    return result;\n}\n", "    let buckets: number[][] = [];\n    for\
    \ (let i = 0; i < grid.length; i++) {\n        let bucket: number[] = [];\n  \
    \      for (let j = 0; j < grid[i].length; j++) {\n            bucket.push(0);\n\
    \        }\n        buckets.push(bucket);\n    }\n    \n    for (let i = 0; i\
    \ < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n\
    \            if (grid[i][j] === 1) {\n                buckets[i][j] += 1;\n  \
    \          }\n        }\n    }\n    \n    let result = 0;\n    for (let i = 0;\
    \ i < buckets.length; i++) {\n        for (let j = 0; j < buckets[i].length; j++)\
    \ {\n            if (buckets[i][j] > capacity) {\n                buckets[i][j]\
    \ -= capacity;\n                result += 1;\n            }\n        }\n    }\n\
    \    return result;\n}\n", "    let buckets = new Array(capacity).fill(0).map(()\
    \ => new Array(capacity).fill(0));\n    \n    for (let i = 0; i < grid.length;\
    \ i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            buckets[grid[i][j]][grid[i][j]]\
    \ += 1;\n        }\n    }\n    \n    let count = 0;\n    for (let i = 0; i < buckets.length;\
    \ i++) {\n        for (let j = 0; j < buckets[i].length; j++) {\n            if\
    \ (buckets[i][j] > 0) {\n                count += buckets[i][j];\n           \
    \     buckets[i][j] = 0;\n            }\n        }\n    }\n    \n    return count;\n\
    }\n", "    let rows: number[][] = grid.map(row => row.map(n => n == 1 ? 0 : capacity));\n\
    \    let max = 0;\n    for (let i = 0; i < rows.length; i++) {\n        let cur\
    \ = rows[i];\n        for (let j = 0; j < cur.length; j++) {\n            if (cur[j]\
    \ > max) {\n                max = cur[j];\n            }\n        }\n    }\n \
    \   return max;\n}\n", "    let buckets = grid.map(row => new Array(capacity).fill(0));\n\
    \    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length;\
    \ j++) {\n            buckets[i][grid[i][j]] += 1;\n        }\n    }\n    let\
    \ count = 0;\n    for (let i = 0; i < buckets.length; i++) {\n        let max\
    \ = 0;\n        for (let j = 0; j < buckets[i].length; j++) {\n            if\
    \ (buckets[i][j] > max) {\n                max = buckets[i][j];\n            }\n\
    \        }\n        if (max > 0) {\n            count += max - 1;\n        }\n\
    \    }\n    return count;\n}\n", "    let result = 0;\n    for (let i = 0; i <\
    \ grid.length; i++) {\n        let buckets = grid[i];\n        for (let j = 0;\
    \ j < buckets.length; j++) {\n            if (buckets[j] > 0) {\n            \
    \    buckets[j]--;\n                if (buckets[j] < 0) {\n                  \
    \  buckets[j] = 0;\n                }\n                result += buckets[j];\n\
    \            }\n        }\n    }\n    return result;\n}\n", "    let max = 0;\n\
    \    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length;\
    \ j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n\
    \                let count = 0;\n                while (bucket > 0) {\n      \
    \              count += bucket;\n                    bucket -= 1;\n          \
    \      }\n                if (count > max) {\n                    max = count;\n\
    \                }\n            }\n        }\n    }\n    return max;\n}\n", " \
    \   let result = 0;\n    for (let i = 0; i < grid.length; i++) {\n        let\
    \ buckets = grid[i];\n        for (let j = 0; j < buckets.length; j++) {\n   \
    \         if (buckets[j] > 0) {\n                buckets[j]--;\n             \
    \   result += 1;\n            }\n        }\n    }\n    return result;\n}", " \
    \   let count = 0;\n    let max = 0;\n    for (let i = 0; i < grid.length; i++)\
    \ {\n        let buckets = grid[i];\n        for (let j = 0; j < buckets.length;\
    \ j++) {\n            if (buckets[j] > 0) {\n                buckets[j]--;\n \
    \               count++;\n                if (buckets[j] > max) {\n          \
    \          max = buckets[j];\n                }\n            }\n        }\n  \
    \  }\n    return count;\n}\n", "    let result = 0;\n    for (let i = 0; i < grid.length;\
    \ i++) {\n        let buckets = grid[i];\n        for (let j = 0; j < buckets.length;\
    \ j++) {\n            if (buckets[j] > 0) {\n                buckets[j]--;\n \
    \               result += 1;\n            }\n        }\n    }\n    return result;\n\
    }\n", "    let result = 0;\n    for (let i = 0; i < grid.length; i++) {\n    \
    \    let bucket = grid[i][0];\n        let count = 0;\n        for (let j = 0;\
    \ j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n          \
    \      count += 1;\n                if (count > bucket) {\n                  \
    \  bucket = count;\n                }\n            }\n        }\n        result\
    \ += bucket;\n    }\n    return result;\n}\n", "    let result = 0;\n    for (let\
    \ i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[0].length;\
    \ j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n\
    \                let count = 0;\n                for (let x = i; x < grid.length;\
    \ x++) {\n                    for (let y = j; y < grid[0].length; y++) {\n   \
    \                     if (grid[x][y] === bucket) {\n                         \
    \   count++;\n                        }\n                    }\n             \
    \   }\n                if (count > capacity) {\n                    result = Math.max(result,\
    \ count - capacity);\n                }\n            }\n        }\n    }\n   \
    \ return result;\n}\n", "    let max = 0;\n    for (let i = 0; i < grid.length;\
    \ i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                let bucket = grid[i][j];\n                for (let\
    \ k = i; k < i + bucket; k++) {\n                    for (let l = j; l < j + bucket;\
    \ l++) {\n                        grid[k][l] = 0;\n                    }\n   \
    \             }\n                max += bucket;\n            }\n        }\n  \
    \  }\n    return max;\n}\n", "    let max = 0;\n    for (let i = 0; i < grid.length;\
    \ i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j]\
    \ === 1) {\n                let bucket = grid[i][j];\n                for (let\
    \ k = i; k < grid.length; k++) {\n                    for (let l = j; l < grid[k].length;\
    \ l++) {\n                        if (grid[k][l] === 0) {\n                  \
    \          bucket--;\n                            if (bucket === 0) {\n      \
    \                          max++;\n                                grid[k][l]\
    \ = 1;\n                                break;\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return max;\n}\n", "    let count = 0;\n    let\
    \ row = 0;\n    let col = 0;\n    let max = 0;\n    while (row < grid.length &&\
    \ col < grid[0].length) {\n        if (grid[row][col] == 1) {\n            grid[row][col]\
    \ = 0;\n            count += 1;\n        }\n        if (grid[row][col] == 0) {\n\
    \            grid[row][col] = 1;\n            max = Math.max(max, grid[row][col]);\n\
    \        }\n        row += 1;\n        col += 1;\n    }\n    return count;\n}\n",
  "    let result = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let\
    \ j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n   \
    \             let bucket = grid[i][j];\n                let count = 0;\n     \
    \           for (let x = i - 1; x <= i + 1; x++) {\n                    for (let\
    \ y = j - 1; y <= j + 1; y++) {\n                        if (x >= 0 && x < grid.length\
    \ && y >= 0 && y < grid[x].length) {\n                            if (grid[x][y]\
    \ === 1) {\n                                count++;\n                       \
    \     }\n                        }\n                    }\n                }\n\
    \                if (count > bucket) {\n                    bucket = count;\n\
    \                }\n                result += bucket - capacity;\n           \
    \ }\n        }\n    }\n    return result;\n}\n", "    let result = 0;\n    for\
    \ (let i = 0; i < grid.length; i++) {\n        let buckets = grid[i];\n      \
    \  for (let j = 0; j < buckets.length; j++) {\n            if (buckets[j] > 0)\
    \ {\n                buckets[j]--;\n                if (buckets[j] <= 0) {\n \
    \                   buckets[j] = capacity;\n                    result++;\n  \
    \              }\n            }\n        }\n    }\n    return result;\n}\n", " \
    \   let result = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for\
    \ (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n\
    \                let bucket = grid[i][j];\n                for (let k = 0; k <\
    \ bucket; k++) {\n                    grid[i][j] = 0;\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\n",
  "    let result = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let\
    \ j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 0) {\n   \
    \             let bucket = grid[i][j];\n                let count = 0;\n     \
    \           for (let k = i; k < i + bucket; k++) {\n                    for (let\
    \ l = j; l < j + bucket; l++) {\n                        count += grid[k][l];\n\
    \                    }\n                }\n                if (count > capacity)\
    \ {\n                    result = Math.max(result, count - capacity);\n      \
    \          }\n            }\n        }\n    }\n    return result;\n}\n", "   \
    \ let rowCount = grid.length\n    let colCount = grid[0].length\n    let maxCount\
    \ = 0\n    let minCount = Infinity\n    for (let row = 0; row < rowCount; row++)\
    \ {\n        for (let col = 0; col < colCount; col++) {\n            let bucket\
    \ = grid[row][col]\n            if (bucket === 0) {\n                let count\
    \ = min_fill(grid, row, col, capacity)\n                if (count > maxCount)\
    \ {\n                    maxCount = count\n                }\n               \
    \ if (count < minCount) {\n                    minCount = count\n            \
    \    }\n            }\n        }\n    }\n    return maxCount - minCount\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
