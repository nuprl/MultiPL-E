name: HumanEval_24_largest_divisor
language: ts
prompt: "//For a given number n, find the largest number that divides n evenly, smaller\
  \ than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n: number):\
  \ number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = largest_divisor;\n  assert.deepEqual(candidate(3),1);\n\
  \  assert.deepEqual(candidate(7),1);\n  assert.deepEqual(candidate(10),5);\n  assert.deepEqual(candidate(100),50);\n\
  \  assert.deepEqual(candidate(49),7);\n}\n\ntest();"
completions: ["  let max_divisor = 1;\n  let max_divisor_p = 0;\n  for (let i = 1;\
    \ i <= n; i++) {\n    if (n % i == 0) {\n      if (max_divisor < i) {\n      \
    \  max_divisor = i;\n        max_divisor_p = i;\n      }\n    }\n  }\n  return\
    \ max_divisor_p;\n}\n", "  let max_divisor = 1;\n  let max_divisor_p = 0;\n  for\
    \ (let i = 1; i < n; ++i) {\n    if (n % i == 0) {\n      if (max_divisor < i)\
    \ {\n        max_divisor = i;\n        max_divisor_p = i;\n      }\n    }\n  }\n\
    \  return max_divisor;\n}\n", "  let max_divisor = 1;\n  let max_divisor_p = 0;\n\
    \  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (max_divisor\
    \ < i) {\n        max_divisor = i;\n        max_divisor_p = i;\n      }\n    }\n\
    \  }\n  return max_divisor_p;\n}\n", "  let divisor = 1;\n  let factor = 2;\n\
    \  while (factor < n) {\n    if (n % factor === 0) {\n      divisor = factor;\n\
    \    }\n    factor++;\n  }\n  return divisor;\n}\n", "  let divisor = 1;\n  let\
    \ max_divisor = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n\
    \      divisor = i;\n      if (max_divisor < divisor) {\n        max_divisor =\
    \ divisor;\n      }\n    }\n  }\n  return max_divisor;\n}\n", "  let divisor =\
    \ 1;\n  let result = n;\n  while (result % divisor === 0) {\n    divisor *= 10;\n\
    \  }\n  while (result % divisor === 0) {\n    result /= divisor;\n  }\n  return\
    \ result;\n}\n", "  let max_divisor = 1;\n  let max_divisor_p = 0;\n  let max_divisor_p2\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      if (max_divisor\
    \ < i) {\n        max_divisor = i;\n        max_divisor_p = max_divisor_p2;\n\
    \      }\n      max_divisor_p2 = i;\n    }\n  }\n  return max_divisor;\n}\n",
  "  let max_divisor = 1;\n  let max_divisor_p = 0;\n  for (let i = 1; i <= n; i++)\
    \ {\n    if (n % i == 0) {\n      if (max_divisor < i) {\n        max_divisor\
    \ = i;\n        max_divisor_p = i;\n      }\n    }\n  }\n  return max_divisor;\n\
    }\n", "  let max_divisor = 1;\n  let max_divisor_p = 0;\n  let max_divisor_p2\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      if (max_divisor\
    \ < i) {\n        max_divisor = i;\n        max_divisor_p = i;\n      }\n    \
    \  if (max_divisor_p2 < i) {\n        max_divisor_p2 = i;\n      }\n    }\n  }\n\
    \  return max_divisor;\n}\n", "  let max_divisor = 1;\n  let max_divisor_p = 0;\n\
    \  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      if (max_divisor\
    \ < i) {\n        max_divisor = i;\n        max_divisor_p = i;\n      }\n    }\n\
    \  }\n  return max_divisor;\n}\n", "  let max_divisor = 1;\n  let max_divisor_p\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      if (max_divisor\
    \ < i) {\n        max_divisor = i;\n        max_divisor_p = i;\n      }\n    }\n\
    \  }\n  return max_divisor;\n}\n", "  let max_divisor = 1;\n  let max_divisor_p\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      if (max_divisor\
    \ < i) {\n        max_divisor = i;\n        max_divisor_p = i;\n      }\n    }\n\
    \  }\n  return max_divisor;\n}\n", "  let max_divisor = n;\n  let max_divisor_p\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      max_divisor\
    \ = i;\n      max_divisor_p = i;\n    }\n  }\n  return max_divisor;\n}\n", " \
    \ let max_divisor = 1;\n  let max_divisor_p = 0;\n  for (let i = 1; i <= n; i++)\
    \ {\n    if (n % i == 0) {\n      max_divisor = i;\n      max_divisor_p = i;\n\
    \    }\n  }\n  return max_divisor;\n}\n", "  let max_divisor = 1;\n  let max_divisor_p\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      if (max_divisor\
    \ < i) {\n        max_divisor = i;\n        max_divisor_p = i;\n      }\n    }\n\
    \  }\n  return max_divisor_p;\n}\n", "  let max_divisor = 1;\n  let max_divisor_p\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      if (max_divisor\
    \ < i) {\n        max_divisor = i;\n        max_divisor_p = i;\n      }\n    }\n\
    \  }\n  return max_divisor;\n}\n", "  let max_divisor = 1;\n  let max_divisor_p\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      if (max_divisor\
    \ < i) {\n        max_divisor = i;\n        max_divisor_p = i;\n      }\n    }\n\
    \  }\n  return max_divisor;\n}\n", "  let max_divisor = 1;\n  let max_divisor_p\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      if (max_divisor\
    \ < i) {\n        max_divisor = i;\n        max_divisor_p = i;\n      }\n    }\n\
    \  }\n  return max_divisor;\n}\n", "  let max_divisor = 1;\n  let max_divisor_p\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      if (max_divisor\
    \ < i) {\n        max_divisor = i;\n        max_divisor_p = i;\n      }\n    }\n\
    \  }\n  return max_divisor;\n}\n", "  let divisor = 1;\n  let max_divisor = n;\n\
    \  while (max_divisor % divisor === 0) {\n    max_divisor *= 2;\n    divisor++;\n\
    \  }\n  return max_divisor;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
