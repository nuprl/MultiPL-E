name: HumanEval_85_add
language: ts
prompt: "//Given a non-empty array of integers lst. add the even elements that are\
  \ at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst:\
  \ number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
  \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
  \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
completions: ["  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n}\n",
  "  let even = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0)\
    \ {\n      even += lst[i];\n    }\n  }\n  return even;\n}\n", "  let evenIndex\
    \ = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length &&\
    \ oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum +=\
    \ lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n\
    \      oddIndex++;\n    }\n  }\n  return sum;\n}\n", "  let evenSum = 0;\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum +=\
    \ lst[i];\n    }\n  }\n  return evenSum;\n}\n", "  let even: number[] = [];\n\
    \  let odd: number[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0) {\n      even.push(lst[i]);\n    } else {\n      odd.push(lst[i]);\n\
    \    }\n  }\n  return even.reduce((a, b) => a + b, 0) + odd.reduce((a, b) => a\
    \ + b, 0);\n}\n", "  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n\
    \  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex]\
    \ % 2 === 0 && lst[oddIndex] % 2 !== 0) {\n      sum += lst[evenIndex];\n    \
    \  evenIndex += 2;\n      oddIndex += 2;\n    } else {\n      sum += lst[oddIndex];\n\
    \      evenIndex += 1;\n      oddIndex += 1;\n    }\n  }\n  return sum;\n}\n",
  "  let evenIndex = 0;\n  let oddIndex = 1;\n  while (evenIndex < lst.length && oddIndex\
    \ < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0)\
    \ {\n      lst[evenIndex] += lst[oddIndex];\n      lst[oddIndex] = 0;\n    }\n\
    \    evenIndex += 2;\n    oddIndex += 2;\n  }\n  return lst[lst.length - 1];\n\
    }\n", "  let even = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ % 2 === 0) {\n      even += lst[i];\n    }\n  }\n  return even;\n}\n", "  let\
    \ even = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 ===\
    \ 0) {\n      even += lst[i];\n    }\n  }\n  return even;\n}\n", "  let evenIndex\
    \ = 0;\n  let oddIndex = 1;\n  while (oddIndex < lst.length) {\n    if (lst[evenIndex]\
    \ % 2 === 0) {\n      lst[evenIndex] += lst[oddIndex];\n    }\n    evenIndex++;\n\
    \    oddIndex++;\n  }\n  return lst[evenIndex];\n}\n", "  let evenIndex = 0;\n\
    \  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex\
    \ < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0)\
    \ {\n      sum += lst[evenIndex];\n      evenIndex += 2;\n      oddIndex += 2;\n\
    \    } else {\n      sum += lst[oddIndex];\n      evenIndex += 1;\n      oddIndex\
    \ += 1;\n    }\n  }\n  return sum;\n}\n", "  let even = 0;\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even += lst[i];\n\
    \    }\n  }\n  return even;\n}\n", "  let even = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] % 2 === 0) {\n      even += lst[i];\n    }\n  }\n  return\
    \ even;\n}\n", "  let even = 0;\n  for (let i = 0; i < lst.length; i++) {\n  \
    \  if (lst[i] % 2 === 0) {\n      even += lst[i];\n    }\n  }\n  return even;\n\
    }\n", "  let even = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ % 2 === 0) {\n      even += lst[i];\n    }\n  }\n  return even;\n}\n", "  let\
    \ even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (i % 2 === 0) {\n      even += lst[i];\n    } else {\n      odd += lst[i];\n\
    \    }\n  }\n  return even + odd;\n}\n", "  let even = 0;\n  for (let i = 0; i\
    \ < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even += lst[i];\n \
    \   }\n  }\n  return even;\n}\n", "  let evenSum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return\
    \ evenSum;\n}\n", "  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n\
    \  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n   \
    \   sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n\
    \      oddIndex++;\n    }\n  }\n  return sum;\n}\n", "  let evenIndex = 0;\n \
    \ let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex\
    \ < lst.length) {\n    if (lst[evenIndex] % 2 === 0 && lst[oddIndex] % 2 !== 0)\
    \ {\n      sum += lst[evenIndex];\n      evenIndex += 2;\n      oddIndex += 2;\n\
    \    } else {\n      sum += lst[oddIndex];\n      evenIndex += 1;\n      oddIndex\
    \ += 1;\n    }\n  }\n  return sum;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
