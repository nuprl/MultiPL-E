language: ts
name: HumanEval_43_pairs_sum_to_zero
results:
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpt380lvtm.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt380lvtm.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = i; j < l.length; j++) {\n      if (l[j] + l[i] === 0) {\n  \
    \      pair.push(l[j]);\n      }\n    }\n    if (pair.length > 0) {\n      pairs.push(pair);\n\
    \    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpm7z7qp1n.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpm7z7qp1n.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair[j]\
    \ = (l[i] + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i =\
    \ 0; i < pairs.length; i++) {\n    for (let j = 0; j < pairs[i].length; j++) {\n\
    \      if (pairs[i][j] !== 0) {\n        return false;\n      }\n    }\n  }\n\
    \  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpzk4_5ln5.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzk4_5ln5.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \    pairs.push([sum, l[i]]);\n  }\n  for (let i = 0; i < pairs.length; i++) {\n\
    \    for (let j = i + 1; j < pairs.length; j++) {\n      if (pairs[i][0] + pairs[j][0]\
    \ === 0 && pairs[i][1] === pairs[j][1]) {\n        return false;\n      }\n  \
    \  }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmprk_ycuqr.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprk_ycuqr.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = i + 1; j < l.length; j++) {\n      pair.push(l[i] + l[j]);\n\
    \    }\n    pairs.push(pair);\n  }\n  for (let i = 0; i < pairs.length; i++) {\n\
    \    let pair = pairs[i];\n    let sum = 0;\n    for (let j = 0; j < pair.length;\
    \ j++) {\n      sum += pair[j];\n    }\n    if (sum === 0) {\n      return true;\n\
    \    }\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpqn7kggez.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqn7kggez.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i != j && l[i] + l[j] ==\
    \ 0) {\n        pair.push(l[i]);\n        pair.push(l[j]);\n      }\n    }\n \
    \   if (pair.length == 2) {\n      pairs.push(pair);\n    }\n  }\n  return pairs.length\
    \ == 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpjpb6mjb9.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjpb6mjb9.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair[j]\
    \ = (l[i] + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  let zeros: number[]\
    \ = [];\n  for (let i = 0; i < pairs.length; i++) {\n    let pair = pairs[i];\n\
    \    for (let j = 0; j < pair.length; j++) {\n      if (pair[j] === 0) {\n   \
    \     zeros.push(pair[j]);\n      }\n    }\n  }\n  return zeros.length === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphez7nnr8.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphez7nnr8.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair.push(l[i]\
    \ + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i = 0; i <\
    \ pairs.length; i++) {\n    let pair = pairs[i];\n    let found = false;\n   \
    \ for (let j = 0; j < pair.length; j++) {\n      if (pair[j] === 0) {\n      \
    \  found = true;\n        break;\n      }\n    }\n    if (!found) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuohgqy22.js:46:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpuohgqy22.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i != j && l[i] + l[j] ==\
    \ 0) {\n        pair.push(l[i]);\n        pair.push(l[j]);\n      }\n    }\n \
    \   if (pair.length > 0) {\n      pairs.push(pair);\n    }\n  }\n  return pairs.length\
    \ > 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \    pairs.push([l[i], sum]);\n  }\n  for (let i = 0; i < pairs.length; i++) {\n\
    \    for (let j = i + 1; j < pairs.length; j++) {\n      if (pairs[i][1] > pairs[j][1])\
    \ {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpapook624.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpapook624.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf524zap2.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf524zap2.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair[j]\
    \ = (l[i] + l[j]) % 2 === 0;\n      }\n    }\n    pairs.push(pair);\n  }\n  return\
    \ pairs.every(pair => pair.every(p => p === true));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2wrqgmvt.ts(20,9): error TS2322: Type ''boolean''
    is not assignable to type ''number''.

    ../../../../../tmp/tmp2wrqgmvt.ts(25,46): error TS2367: This condition will always
    return ''false'' since the types ''number'' and ''true'' have no overlap.

    '
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i != j) {\n        pair[j]\
    \ = (l[i] + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i =\
    \ 0; i < pairs.length; i++) {\n    let pair = pairs[i];\n    for (let j = 0; j\
    \ < pair.length; j++) {\n      if (pair[j] != 0) {\n        return false;\n  \
    \    }\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxdg_3xnu.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxdg_3xnu.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpt380lvtm.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt380lvtm.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \    pairs.push([sum, l[i]]);\n  }\n  for (let i = 0; i < pairs.length; i++) {\n\
    \    for (let j = i + 1; j < pairs.length; j++) {\n      if (pairs[i][0] + pairs[j][0]\
    \ === 0 && pairs[i][1] === pairs[j][1]) {\n        return true;\n      }\n   \
    \ }\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2bx8_i42.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2bx8_i42.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair[j]\
    \ = (l[i] + l[j]) % 2 === 0;\n      }\n    }\n    pairs.push(pair);\n  }\n  for\
    \ (let i = 0; i < pairs.length; i++) {\n    let pair = pairs[i];\n    for (let\
    \ j = 0; j < pair.length; j++) {\n      if (pair[j]) {\n        return false;\n\
    \      }\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqpp7hpen.ts(20,9): error TS2322: Type ''boolean''
    is not assignable to type ''number''.

    '
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair[j]\
    \ = (l[i] + l[j]) % 2;\n      }\n    }\n    pairs.push(pair);\n  }\n  let pair_count\
    \ = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    for (let j = 0; j < pairs[i].length;\
    \ j++) {\n      if (pairs[i][j] === 0) {\n        pair_count++;\n      }\n   \
    \ }\n  }\n  return pair_count === 2;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpl2xbrktd.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpl2xbrktd.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair[j]\
    \ = l[i] + l[j];\n      }\n    }\n    pairs.push(pair);\n  }\n  let pair: number[]\
    \ = [];\n  for (let i = 0; i < pairs.length; i++) {\n    for (let j = 0; j < pairs[i].length;\
    \ j++) {\n      if (pairs[i][j] === 0) {\n        return false;\n      }\n   \
    \ }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpujihr72r.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpujihr72r.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  let pair: number[] = [];\n  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    pair = [l[i], l[i]];\n    pairs.push(pair);\n    sum += l[i];\n\
    \  }\n  for (let i = 0; i < pairs.length; i++) {\n    for (let j = 0; j < pairs.length;\
    \ j++) {\n      if (pairs[i][0] === pairs[j][0] && pairs[i][1] === pairs[j][1])\
    \ {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmperan83wl.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmperan83wl.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  let pair: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n\
    \    pair = [l[i], l[i]];\n    pairs.push(pair);\n  }\n  for (let i = 0; i < pairs.length;\
    \ i++) {\n    for (let j = i + 1; j < pairs.length; j++) {\n      if (pairs[i][0]\
    \ + pairs[j][0] === 0 && pairs[i][1] + pairs[j][1] === 0) {\n        return true;\n\
    \      }\n    }\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair.push(l[i]\
    \ + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i = 0; i <\
    \ pairs.length; i++) {\n    let pair = pairs[i];\n    if (pair.length > 1) {\n\
    \      return false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpodsve3rq.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpodsve3rq.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf524zap2.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf524zap2.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf524zap2.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf524zap2.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  if (l.length <\
    \ 2) {\n    return false;\n  }\n  const pairs: number[][] = [];\n  for (let i\
    \ = 0; i < l.length; i++) {\n    const pair = [l[i], l[i - 1]];\n    if (pairs.indexOf(pair)\
    \ === -1) {\n      pairs.push(pair);\n    }\n  }\n  return pairs.every(p => p[0]\
    \ === 0 && p[1] === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp79b6hvo0.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp79b6hvo0.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i == j) {\n        continue;\n\
    \      }\n      if (l[i] + l[j] == 0) {\n        pair.push(l[i]);\n        pair.push(l[j]);\n\
    \      }\n    }\n    if (pair.length == 2) {\n      pairs.push(pair);\n    }\n\
    \  }\n  return pairs.length == 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpe61z5q67.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpe61z5q67.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738789
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = i; j < l.length; j++) {\n      if (l[j] > 0) {\n        pair.push(l[j]);\n\
    \      }\n    }\n    if (pair.length >= 2) {\n      pairs.push(pair);\n    }\n\
    \  }\n  return pairs.every(pair => pair.reduce((a, b) => a + b) === 0);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpjym7rd22.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjym7rd22.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738789
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i === j) {\n        continue;\n\
    \      }\n      if (l[i] + l[j] === 0) {\n        pair.push(l[i]);\n        pair.push(l[j]);\n\
    \      }\n    }\n    if (pair.length > 0) {\n      pairs.push(pair);\n    }\n\
    \  }\n  return pairs.length === 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4os4m6xw.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4os4m6xw.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738789
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair.push(l[i]\
    \ + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  let pairs_sum_to_zero:\
    \ boolean = false;\n  for (let i = 0; i < pairs.length; i++) {\n    let pair =\
    \ pairs[i];\n    let sum = 0;\n    for (let j = 0; j < pair.length; j++) {\n \
    \     sum += pair[j];\n    }\n    if (sum === 0) {\n      pairs_sum_to_zero =\
    \ true;\n      break;\n    }\n  }\n  return pairs_sum_to_zero;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5,\
    \ 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0o_a_6im.js:45:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0o_a_6im.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738789
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf524zap2.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf524zap2.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair[j]\
    \ = l[i] + l[j];\n      }\n    }\n    pairs.push(pair);\n  }\n  return pairs.every(pair\
    \ => pair.every(n => n === 0));\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpizingdwi.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpizingdwi.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738789
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  let pair: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n\
    \    pair = [l[i], l[i]];\n    pairs.push(pair);\n  }\n  for (let i = 0; i < pairs.length;\
    \ i++) {\n    for (let j = i + 1; j < pairs.length; j++) {\n      if (pairs[i][0]\
    \ + pairs[j][0] === 0 && pairs[i][1] + pairs[j][1] === 0) {\n        return false;\n\
    \      }\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4flmi1s7.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4flmi1s7.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738789
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  let pair: number[] = [];\n  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    pair = [l[i], l[i]];\n    pairs.push(pair);\n    sum += l[i];\n\
    \  }\n  for (let i = 0; i < pairs.length; i++) {\n    for (let j = 0; j < pairs.length;\
    \ j++) {\n      if (pairs[i][0] + pairs[j][0] === sum) {\n        pairs.splice(j,\
    \ 1);\n      }\n    }\n  }\n  return pairs.length === 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpbwuh7x_g.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpbwuh7x_g.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738789
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpt380lvtm.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt380lvtm.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = i + 1; j < l.length; j++) {\n      pair.push(l[i] + l[j]);\n\
    \    }\n    pairs.push(pair);\n  }\n  for (let i = 0; i < pairs.length; i++) {\n\
    \    let pair = pairs[i];\n    for (let j = 0; j < pair.length; j++) {\n     \
    \ if (pair[j] < 0) {\n        return false;\n      }\n    }\n  }\n  return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9bcy4vv2.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9bcy4vv2.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738789
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf524zap2.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf524zap2.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf524zap2.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf524zap2.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpt380lvtm.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt380lvtm.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf524zap2.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf524zap2.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  let pair: number[] = [];\n  let sum = 0;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    pair = [l[i], l[i]];\n    pairs.push(pair);\n    sum += l[i];\n\
    \  }\n  for (let i = 0; i < pairs.length; i++) {\n    for (let j = i + 1; j <\
    \ pairs.length; j++) {\n      if (pairs[i][0] + pairs[j][0] === sum) {\n     \
    \   return false;\n      }\n    }\n  }\n  return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf11pb6jt.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf11pb6jt.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738789
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i == j) continue;\n     \
    \ if (l[i] + l[j] == 0) {\n        pair.push(l[i]);\n        pair.push(l[j]);\n\
    \      }\n    }\n    pairs.push(pair);\n  }\n  return pairs.some((pair) => pair.length\
    \ == 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738789
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpt380lvtm.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt380lvtm.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair.push(l[i]\
    \ + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  return pairs.some(pair\
    \ => pair.every(n => n === 0));\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9ux0xuxj.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9ux0xuxj.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738789
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpt380lvtm.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt380lvtm.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair = [l[i], l[i - 1]];\n\
    \    if (pairs.indexOf(pair) === -1) {\n      pairs.push(pair);\n    }\n  }\n\
    \  for (let i = 0; i < pairs.length; i++) {\n    for (let j = i + 1; j < pairs.length;\
    \ j++) {\n      if (pairs[i][0] + pairs[j][0] === 0 && pairs[i][1] + pairs[j][1]\
    \ === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp44_gazgw.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp44_gazgw.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738789
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair[j]\
    \ = l[i] + l[j];\n      }\n    }\n    pairs.push(pair);\n  }\n  let pair: number[]\
    \ = [];\n  for (let i = 0; i < pairs.length; i++) {\n    for (let j = 0; j < pairs[i].length;\
    \ j++) {\n      if (pairs[i][j] === 0) {\n        return false;\n      }\n   \
    \ }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpujihr72r.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpujihr72r.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair[j]\
    \ = (l[i] + l[j]) % 2 === 0 ? 1 : 0;\n      }\n    }\n    pairs.push(pair);\n\
    \  }\n  let pair: number[][] = [];\n  for (let i = 0; i < pairs.length; i++) {\n\
    \    for (let j = 0; j < pairs[i].length; j++) {\n      if (pairs[i][j] === 1)\
    \ {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpl5i8qkdq.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpl5i8qkdq.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738789
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length < 2;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpquysspnn.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpquysspnn.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738789
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf524zap2.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf524zap2.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair[j]\
    \ = (l[i] + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i =\
    \ 0; i < pairs.length; i++) {\n    let pair = pairs[i];\n    for (let j = 0; j\
    \ < pair.length; j++) {\n      if (pair[j] === 0) {\n        return true;\n  \
    \    }\n    }\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738790
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf524zap2.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf524zap2.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf524zap2.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf524zap2.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i === j) continue;\n    \
    \  if (l[i] + l[j] === 0) {\n        pair.push(l[i]);\n        pair.push(l[j]);\n\
    \      }\n    }\n    if (pair.length > 0) {\n      pairs.push(pair);\n    }\n\
    \  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738790
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair[j]\
    \ = l[i] + l[j];\n      }\n    }\n    pairs.push(pair);\n  }\n  let pair: number[][]\
    \ = [];\n  for (let i = 0; i < pairs.length; i++) {\n    for (let j = 0; j < pairs[i].length;\
    \ j++) {\n      if (pairs[i][j] === 0) {\n        return false;\n      }\n   \
    \ }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9trognhw.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9trognhw.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738790
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair.push(l[i]\
    \ + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i = 0; i <\
    \ pairs.length; i++) {\n    let pair = pairs[i];\n    let sum = 0;\n    for (let\
    \ j = 0; j < pair.length; j++) {\n      sum += pair[j];\n    }\n    if (sum ===\
    \ 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpk514_9ha.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk514_9ha.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738790
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair[j]\
    \ = (l[i] + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  return pairs_sum_to_zero_helper(pairs);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0p6_5ypi.ts(25,10): error TS2304: Cannot find name
    ''pairs_sum_to_zero_helper''.

    '
  timestamp: 1659738789
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair.push(l[i]\
    \ + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i = 0; i <\
    \ pairs.length; i++) {\n    for (let j = 0; j < pairs[i].length; j++) {\n    \
    \  if (pairs[i][j] !== 0) {\n        return false;\n      }\n    }\n  }\n  return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpd033im27.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpd033im27.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738789
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair = [l[i], l[i - 1]];\n\
    \    if (pairs.indexOf(pair) === -1) {\n      pairs.push(pair);\n    }\n  }\n\
    \  return pairs.every(p => p[0] === 0 && p[1] === 0);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8vai3opn.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8vai3opn.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738790
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpt380lvtm.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt380lvtm.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = i + 1; j < l.length; j++) {\n      pair[i] = l[i];\n      pair[j]\
    \ = l[j];\n    }\n    pairs.push(pair);\n  }\n  let pair: number[] = [];\n  for\
    \ (let i = 0; i < l.length; i++) {\n    pair[i] = l[i];\n  }\n  pairs.push(pair);\n\
    \  let pairs: number[][] = [];\n  for (let i = 0; i < pairs.length; i++) {\n \
    \   let pair: number[] = [];\n    for (let j = 0; j < pairs[i].length; j++) {\n\
    \      pair[j] = pairs[i][j];\n    }\n    pairs.push(pair);\n  }\n  let pairs:\
    \ number[][] = [];\n  for (let i = 0; i < pairs.length; i++) {\n    let pair:\
    \ number[] = [];\n    for (let j = 0; j < pairs[i].length; j++) {\n      pair[j]\
    \ = pairs[i][j];\n    }\n    pairs.push(pair);\n  }\n  let pairs: number[][] =\
    \ [];\n  for (let i = 0; i < pairs.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < pairs[i].length; j++) {\n      pair[j] = pairs[i][j];\n\
    \    }\n    pairs.push(pair);\n  }\n  let pairs: number[][] = [];\n  for (let\
    \ i = 0; i < pairs.length; i++) {\n    let pair: number[] = [];\n    for (let\
    \ j = 0; j < pairs[i].length; j++) {\n      pair[j] = pairs[i][j];\n    }\n  \
    \  pairs.push(pair);\n  }\n  let pairs: number[][] = [];\n  for (let i = 0; i\
    \ < pairs.length; i++) {\n    let pair: number[] = [];\n    for (let j = 0; j\
    \ < pairs[i].length; j++) {\n      pair[j] = pairs[i][j];\n    }\n    pairs.push(pair);\n\
    \  }\n  let pairs: number[][] = [];\n  for (let i = 0; i < pairs.length; i++)\
    \ {\n    let pair: number[] = [];\n    for (let j = 0; j < pairs[i].length; j++)\
    \ {\n      pair[j] = pairs[i][j];\n    }\n    pairs.push(pair);\n  }\n  let pairs:\
    \ number[][] = [];\n  for (let i = 0; i < pairs.length; i++) {\n    let pair:\
    \ number[] = [];\n    for (let j = 0; j < pairs[i].length; j++) {\n      pair[j]\
    \ = pairs[i][j];\n    }\n    pairs.push(pair);\n  }\n  let pairs: number[][] =\
    \ [];\n  for (let i = 0; i < pairs.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < pairs[i].length; j++) {\n      pair[j] = pairs[i][j];\n\
    \    }\n    pairs.push(pair);\n  }\n  let pairs: number[][] = [];\n  for (let\
    \ i = 0; i < pairs.length; i++) {\n    let pair: number[] = [];\n    for (let\
    \ j = 0; j < pairs[i].length; j++) {\n      pair[j] = pairs[i][j];\n    }\n  \
    \  pairs.push(pair);\n  }\n  let pairs: number[][] = [];\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwx3iqcup.ts(120,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738789
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair = [l[i], l[i - 1]];\n\
    \    pairs.push(pair);\n  }\n  let pair_count = 0;\n  for (let i = 0; i < pairs.length;\
    \ i++) {\n    let pair = pairs[i];\n    if (pair[0] === pair[1]) {\n      pair_count++;\n\
    \    }\n  }\n  return pair_count === 2;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp4lhltt6r.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4lhltt6r.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738790
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpt380lvtm.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt380lvtm.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf524zap2.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf524zap2.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair.push(l[i]\
    \ + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i = 0; i <\
    \ pairs.length; i++) {\n    let pair = pairs[i];\n    let sum = 0;\n    for (let\
    \ j = 0; j < pair.length; j++) {\n      sum += pair[j];\n    }\n    if (sum ===\
    \ 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpk514_9ha.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk514_9ha.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738790
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i != j) {\n        pair[j]\
    \ = (l[i] + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  let pair: number[][]\
    \ = [];\n  for (let i = 0; i < pairs.length; i++) {\n    for (let j = 0; j < pairs[i].length;\
    \ j++) {\n      if (pairs[i][j] != 0) {\n        pair.push(pairs[i][j]);\n   \
    \   }\n    }\n  }\n  return pair.length == 2;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5r6mn1p5.ts(29,19): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''number[]''.

    '
  timestamp: 1659738791
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length < 2;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpquysspnn.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpquysspnn.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738789
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n\
    \        pair.push(l[i]);\n        pair.push(l[j]);\n      }\n    }\n    if (pair.length\
    \ > 0) {\n      pairs.push(pair);\n    }\n  }\n  return pairs.length > 0;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738792
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair[j]\
    \ = (l[i] + l[j]) % 2 === 0;\n      }\n    }\n    pairs.push(pair);\n  }\n  for\
    \ (let i = 0; i < pairs.length; i++) {\n    let pair = pairs[i];\n    for (let\
    \ j = 0; j < pair.length; j++) {\n      if (pair[j]) {\n        return false;\n\
    \      }\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqpp7hpen.ts(20,9): error TS2322: Type ''boolean''
    is not assignable to type ''number''.

    '
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = i; j < l.length; j++) {\n      if (l[j] - l[i] === 0) {\n  \
    \      pair.push(l[j]);\n      }\n    }\n    if (pair.length !== 0) {\n      pairs.push(pair);\n\
    \    }\n  }\n  return pairs.length === 0;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpe8wgjn2f.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpe8wgjn2f.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738792
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpt380lvtm.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt380lvtm.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpt380lvtm.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt380lvtm.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf524zap2.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf524zap2.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  let pair: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n\
    \    pair = [l[i], l[i]];\n    pairs.push(pair);\n  }\n  for (let i = 0; i < pairs.length;\
    \ i++) {\n    for (let j = i + 1; j < pairs.length; j++) {\n      if (pairs[i][0]\
    \ + pairs[j][0] === 0 && pairs[i][1] + pairs[j][1] === 0) {\n        return true;\n\
    \      }\n    }\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair[j]\
    \ = (l[i] + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  let pair: number[][]\
    \ = [];\n  for (let i = 0; i < pairs.length; i++) {\n    for (let j = 0; j < pairs[i].length;\
    \ j++) {\n      if (pairs[i][j] === 0) {\n        return false;\n      }\n   \
    \ }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpx80kgq3o.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpx80kgq3o.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738792
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = i; j < l.length; j++) {\n      if (l[j] > 0) {\n        pair.push(l[j]);\n\
    \      }\n    }\n    if (pair.length > 0) {\n      pairs.push(pair);\n    }\n\
    \  }\n  return pairs.every((pair) => {\n    return pair.every((value) => {\n \
    \     return value === 0;\n    });\n  });\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpjpbqaigt.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjpbqaigt.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738792
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair[j]\
    \ = (l[i] + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i =\
    \ 0; i < pairs.length; i++) {\n    let pair = pairs[i];\n    let sum = 0;\n  \
    \  for (let j = 0; j < pair.length; j++) {\n      sum += pair[j];\n    }\n   \
    \ if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_r7icg3a.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_r7icg3a.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738792
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf524zap2.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf524zap2.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair[j]\
    \ = (l[i] + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i =\
    \ 0; i < pairs.length; i++) {\n    for (let j = 0; j < pairs[i].length; j++) {\n\
    \      if (pairs[i][j] !== 0) {\n        return false;\n      }\n    }\n  }\n\
    \  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpzk4_5ln5.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzk4_5ln5.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf524zap2.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf524zap2.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length < 2;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpquysspnn.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpquysspnn.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738789
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i != j) {\n        pair[j]\
    \ = l[i] + l[j];\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i = 0;\
    \ i < pairs.length; i++) {\n    let pair = pairs[i];\n    let sum = 0;\n    for\
    \ (let j = 0; j < pair.length; j++) {\n      sum += pair[j];\n    }\n    if (sum\
    \ == 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpadzc3brc.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpadzc3brc.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738792
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i != j) {\n        pair.push(l[i]\
    \ + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i = 0; i <\
    \ pairs.length; i++) {\n    let pair = pairs[i];\n    let pair_count = 0;\n  \
    \  for (let j = 0; j < pair.length; j++) {\n      if (pair[j] == 0) {\n      \
    \  pair_count++;\n      }\n    }\n    if (pair_count > 1) {\n      return true;\n\
    \    }\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3ep5maod.js:45:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3ep5maod.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738792
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair.push(l[i]\
    \ + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i = 0; i <\
    \ pairs.length; i++) {\n    for (let j = 0; j < pairs[i].length; j++) {\n    \
    \  if (pairs[i][j] === 0) {\n        return true;\n      }\n    }\n  }\n  return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738792
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i == j) {\n        continue;\n\
    \      }\n      if (l[i] + l[j] == 0) {\n        pair.push(l[i]);\n        pair.push(l[j]);\n\
    \      }\n    }\n    if (pair.length == 2) {\n      pairs.push(pair);\n    }\n\
    \  }\n  return pairs.length == 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpe61z5q67.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpe61z5q67.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738789
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpt380lvtm.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt380lvtm.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf524zap2.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf524zap2.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair = [l[i], l[i - 1]];\n\
    \    if (pairs.indexOf(pair) === -1) {\n      pairs.push(pair);\n    }\n  }\n\
    \  return pairs.every(pair => pair[0] === 0 && pair[1] === 0);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5,\
    \ 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptstx10oj.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptstx10oj.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738792
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  if (l.length <\
    \ 2) {\n    return false;\n  }\n  let pairs: number[][] = [];\n  for (let i =\
    \ 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n    \
    \  if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n      }\n    }\n\
    \  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpp2vj1vts.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpp2vj1vts.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738792
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = i; j < l.length; j++) {\n      if (l[j] > 0) {\n        pair.push(l[j]);\n\
    \      }\n    }\n    if (pair.length > 0) {\n      pairs.push(pair);\n    }\n\
    \  }\n  return pairs.some(pair => pair.reduce((a, b) => a + b) === 0);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpgw9mezs_.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgw9mezs_.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738792
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = i + 1; j < l.length; j++) {\n      pair.push(l[i] + l[j]);\n\
    \    }\n    pairs.push(pair);\n  }\n  return pairs.some(pair => pair.every(n =>\
    \ n === 0));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpdeovtimz.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdeovtimz.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738792
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    pairs.push([l[i],\
    \ l[i]]);\n    sum += l[i];\n  }\n  for (let i = 0; i < pairs.length; i++) {\n\
    \    for (let j = i + 1; j < pairs.length; j++) {\n      if (pairs[i][0] + pairs[j][0]\
    \ === sum) {\n        pairs.splice(j, 1);\n      }\n    }\n  }\n  return pairs.length\
    \ === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp02pw4f4e.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp02pw4f4e.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738792
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpt380lvtm.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt380lvtm.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i != j) {\n        pair[j]\
    \ = (l[i] + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i =\
    \ 0; i < pairs.length; i++) {\n    for (let j = 0; j < pairs[i].length; j++) {\n\
    \      if (pairs[i][j] != 0) {\n        return false;\n      }\n    }\n  }\n \
    \ return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpy3l72lfr.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpy3l72lfr.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738792
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair[j]\
    \ = (l[i] + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i =\
    \ 0; i < pairs.length; i++) {\n    for (let j = 0; j < pairs[i].length; j++) {\n\
    \      if (pairs[i][j] !== 0) {\n        return false;\n      }\n    }\n  }\n\
    \  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpzk4_5ln5.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzk4_5ln5.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpt380lvtm.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt380lvtm.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf524zap2.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf524zap2.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i != j) {\n        pair[j]\
    \ = (l[i] + l[j]) % 2;\n      }\n    }\n    pairs.push(pair);\n  }\n  let pair:\
    \ number[][] = [];\n  for (let i = 0; i < pairs.length; i++) {\n    for (let j\
    \ = 0; j < pairs[i].length; j++) {\n      if (pairs[i][j] != 0) {\n        pair.push(pairs[i][j]);\n\
    \      }\n    }\n  }\n  return pair.length == 2;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpx96oycii.ts(29,19): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''number[]''.

    '
  timestamp: 1659738792
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  if (l.length <\
    \ 2) {\n    return false;\n  }\n  let pairs: number[][] = [];\n  for (let i =\
    \ 0; i < l.length; i++) {\n    let pair: number[] = [];\n    for (let j = 0; j\
    \ < l.length; j++) {\n      if (i !== j) {\n        pair.push(l[i] + l[j]);\n\
    \      }\n    }\n    pairs.push(pair);\n  }\n  for (let i = 0; i < pairs.length;\
    \ i++) {\n    let pair = pairs[i];\n    for (let j = 0; j < pair.length; j++)\
    \ {\n      if (pair[j] === 0) {\n        return false;\n      }\n    }\n  }\n\
    \  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpt2cppb48.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt2cppb48.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738792
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n\
    \        pair.push(l[i]);\n        pair.push(l[j]);\n      }\n    }\n    if (pair.length\
    \ > 0) {\n      pairs.push(pair);\n    }\n  }\n  return pairs.length > 0;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738792
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair.push(l[i]\
    \ + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  let pair: number[][]\
    \ = [];\n  for (let i = 0; i < pairs.length; i++) {\n    for (let j = 0; j < pairs[i].length;\
    \ j++) {\n      if (pairs[i][j] === 0) {\n        return false;\n      }\n   \
    \ }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp25zyhcxf.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp25zyhcxf.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738792
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i != j) {\n        pair.push(l[i]\
    \ + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i = 0; i <\
    \ pairs.length; i++) {\n    for (let j = 0; j < pairs.length; j++) {\n      if\
    \ (i != j && pairs[i][0] == pairs[j][0] && pairs[i][1] == pairs[j][1]) {\n   \
    \     return false;\n      }\n    }\n  }\n  return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpsxsn2isc.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsxsn2isc.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738792
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i === j) {\n        continue;\n\
    \      }\n      if (l[j] - l[i] === 0) {\n        pair.push(l[j]);\n      }\n\
    \    }\n    if (pair.length > 0) {\n      pairs.push(pair);\n    }\n  }\n  return\
    \ pairs.some(pair => pair.length === 2);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1oryr9ml.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1oryr9ml.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738792
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  const n = l.length;\n\
    \  if (n < 2) return false;\n  const pairs: number[][] = [];\n  for (let i = 0;\
    \ i < n; i++) {\n    const pair = [l[i], l[i + 1]];\n    if (pairs.some(p => p[0]\
    \ === pair[0] && p[1] === pair[1])) return false;\n    pairs.push(pair);\n  }\n\
    \  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp1fbeeumy.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1fbeeumy.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738792
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = i; j < l.length; j++) {\n      pair[j] = (l[i] + l[j]);\n  \
    \  }\n    pairs.push(pair);\n  }\n  return pairs_sum_to_zero_helper(pairs);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt6j8x6tj.ts(23,10): error TS2304: Cannot find name
    ''pairs_sum_to_zero_helper''.

    '
  timestamp: 1659738792
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n\
    \    pairs.push([sum, l[i]]);\n  }\n  for (let i = 0; i < pairs.length; i++) {\n\
    \    for (let j = i + 1; j < pairs.length; j++) {\n      if (pairs[i][0] + pairs[j][0]\
    \ === 0 && pairs[i][1] === pairs[j][1]) {\n        return false;\n      }\n  \
    \  }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmprk_ycuqr.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprk_ycuqr.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpt380lvtm.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt380lvtm.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair[j]\
    \ = (l[i] + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  let pairs_sum_to_zero:\
    \ boolean = false;\n  for (let i = 0; i < pairs.length; i++) {\n    let pair =\
    \ pairs[i];\n    let sum = 0;\n    for (let j = 0; j < pair.length; j++) {\n \
    \     sum += pair[j];\n    }\n    if (sum === 0) {\n      pairs_sum_to_zero =\
    \ true;\n      break;\n    }\n  }\n  return pairs_sum_to_zero;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5,\
    \ 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpi4b2w864.js:45:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpi4b2w864.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738792
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair[j]\
    \ = (l[i] + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i =\
    \ 0; i < pairs.length; i++) {\n    let pair = pairs[i];\n    for (let j = 0; j\
    \ < pair.length; j++) {\n      if (pair[j] !== 0) {\n        return false;\n \
    \     }\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpsh39q7oh.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsh39q7oh.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738793
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    pairs.push([l[i],\
    \ l[i]]);\n    sum += l[i];\n  }\n  for (let i = 0; i < pairs.length; i++) {\n\
    \    for (let j = i + 1; j < pairs.length; j++) {\n      if (pairs[i][0] + pairs[j][0]\
    \ === sum) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphm6rtkch.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphm6rtkch.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738794
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i === j) {\n        continue;\n\
    \      }\n      if (l[i] + l[j] === 0) {\n        pair.push(l[i]);\n        pair.push(l[j]);\n\
    \      }\n    }\n    if (pair.length > 0) {\n      pairs.push(pair);\n    }\n\
    \  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738794
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpt380lvtm.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt380lvtm.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf524zap2.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf524zap2.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpt380lvtm.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt380lvtm.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  if (l.length <\
    \ 2) {\n    return false;\n  }\n  let pairs: number[][] = [];\n  for (let i =\
    \ 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n    \
    \  if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n      }\n    }\n\
    \  }\n  return pairs.length !== 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738794
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i != j) {\n        pair[j]\
    \ = (l[i] + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i =\
    \ 0; i < pairs.length; i++) {\n    for (let j = 0; j < pairs[i].length; j++) {\n\
    \      if (pairs[i][j] != 0) {\n        return false;\n      }\n    }\n  }\n \
    \ return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpy3l72lfr.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpy3l72lfr.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738792
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i != j) {\n        pair[j]\
    \ = (l[i] + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i =\
    \ 0; i < pairs.length; i++) {\n    let pair = pairs[i];\n    for (let j = 0; j\
    \ < pair.length; j++) {\n      if (pair[j] != 0) {\n        return false;\n  \
    \    }\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxdg_3xnu.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxdg_3xnu.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair.push(l[i]\
    \ + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  return pairs.some(pair\
    \ => pairs.every(pair => pair[0] === pair[1]));\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpgo67nxsv.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgo67nxsv.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738794
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair[j]\
    \ = (l[i] + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  let pair: number[][]\
    \ = [];\n  for (let i = 0; i < pairs.length; i++) {\n    let pair: number[] =\
    \ [];\n    for (let j = 0; j < pairs[i].length; j++) {\n      if (pairs[i][j]\
    \ === 0) {\n        return false;\n      }\n    }\n    pair.push(pairs[i]);\n\
    \  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpus9mk5j4.ts(33,15): error TS2345: Argument of type
    ''number[]'' is not assignable to parameter of type ''number''.

    '
  timestamp: 1659738794
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf524zap2.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf524zap2.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf524zap2.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf524zap2.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i === j) {\n        continue;\n\
    \      }\n      if (l[i] + l[j] === 0) {\n        pair.push(l[i]);\n        pair.push(l[j]);\n\
    \      }\n    }\n    if (pair.length !== 0) {\n      pairs.push(pair);\n    }\n\
    \  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738794
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair[j]\
    \ = (l[i] + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  let pair_count\
    \ = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    for (let j = 0; j < pairs[i].length;\
    \ j++) {\n      if (pairs[i][j] === 0) {\n        pair_count++;\n      }\n   \
    \ }\n  }\n  return pair_count === 2;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738794
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpt380lvtm.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt380lvtm.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i == j) {\n        pair.push(0);\n\
    \      } else {\n        pair.push(l[j]);\n      }\n    }\n    pairs.push(pair);\n\
    \  }\n  let pair: number[][] = [];\n  for (let i = 0; i < pairs.length; i++) {\n\
    \    for (let j = 0; j < pairs[i].length; j++) {\n      if (pairs[i][j] == 0)\
    \ {\n        pair.push(pairs[i]);\n      }\n    }\n  }\n  if (pair.length == 1)\
    \ {\n    return true;\n  }\n  return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp821iijdn.js:47:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp821iijdn.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738794
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  let pair: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n\
    \    pair = [l[i], l[i]];\n    pairs.push(pair);\n  }\n  for (let i = 0; i < pairs.length;\
    \ i++) {\n    for (let j = i + 1; j < pairs.length; j++) {\n      if (pairs[i][0]\
    \ + pairs[j][0] === 0 && pairs[i][1] + pairs[j][1] === 0) {\n        return true;\n\
    \      }\n    }\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = i + 1; j < l.length; j++) {\n      pair.push(l[i] + l[j]);\n\
    \    }\n    pairs.push(pair);\n  }\n  return pairs.every((pair) => pair.every((n)\
    \ => n === 0));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprrb4u1dx.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprrb4u1dx.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738794
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i === j) {\n        continue;\n\
    \      }\n      if (l[j] + l[i] === 0) {\n        pair.push(l[j]);\n        pair.push(l[i]);\n\
    \      }\n    }\n    if (pair.length > 0) {\n      pairs.push(pair);\n    }\n\
    \  }\n  return pairs.length > 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738794
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair.push(l[i]\
    \ + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  let pair: number[] =\
    \ [];\n  for (let i = 0; i < pairs.length; i++) {\n    for (let j = 0; j < pairs[i].length;\
    \ j++) {\n      if (pairs[i][j] === 0) {\n        return false;\n      }\n   \
    \ }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfyza0uyd.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfyza0uyd.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738794
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = i + 1; j < l.length; j++) {\n      pair.push(l[i] + l[j]);\n\
    \    }\n    pairs.push(pair);\n  }\n  return pairs.some(pair => pair.every(n =>\
    \ n === 0));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpdeovtimz.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdeovtimz.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738792
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair = [l[i], l[i - 1]];\n\
    \    pairs.push(pair);\n  }\n  let pair_count = 0;\n  for (let i = 0; i < pairs.length;\
    \ i++) {\n    for (let j = 0; j < pairs.length; j++) {\n      if (pairs[i][0]\
    \ + pairs[j][0] === pairs[i][1] + pairs[j][1]) {\n        pair_count++;\n    \
    \  }\n    }\n  }\n  return pair_count === 2;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0_77hpkk.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0_77hpkk.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738794
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i === j) {\n        pair.push(0);\n\
    \      } else {\n        pair.push(l[j]);\n      }\n    }\n    pairs.push(pair);\n\
    \  }\n  let pair: number[][] = [];\n  for (let i = 0; i < pairs.length; i++) {\n\
    \    for (let j = 0; j < pairs[i].length; j++) {\n      if (pairs[i][j] === 0)\
    \ {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpjfxbytag.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjfxbytag.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738794
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  if (l.length ===\
    \ 0) {\n    return false;\n  }\n  const pairs = l.map(x => [x, 0]);\n  let pair:\
    \ number[] | undefined;\n  for (let i = 0; i < l.length - 1; i++) {\n    pair\
    \ = pairs[i];\n    pair[1] = pair[0] + l[i + 1];\n    if (pairs.every(p => p[1]\
    \ === 0)) {\n      return true;\n    }\n  }\n  return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5,\
    \ 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfuuiwbjm.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfuuiwbjm.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738794
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i === j) {\n        continue;\n\
    \      }\n      pair.push(l[i] + l[j]);\n    }\n    pairs.push(pair);\n  }\n \
    \ let pair: number[] = [];\n  for (let i = 0; i < pairs.length; i++) {\n    if\
    \ (pairs[i].length === 2) {\n      pair.push(pairs[i][0]);\n      pair.push(pairs[i][1]);\n\
    \      if (pair[0] === 0 && pair[1] === 0) {\n        return true;\n      }\n\
    \    }\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpt2disf5r.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt2disf5r.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738794
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpt380lvtm.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt380lvtm.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738787
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i === j) {\n        continue;\n\
    \      }\n      if (l[i] + l[j] === 0) {\n        pair.push(l[i]);\n        pair.push(l[j]);\n\
    \      }\n    }\n    if (pair.length !== 0) {\n      pairs.push(pair);\n    }\n\
    \  }\n  return pairs.length === 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpjf0q2fvz.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjf0q2fvz.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738794
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = 0; j < l.length; j++) {\n      if (i != j) {\n        pair[j]\
    \ = (l[i] + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  let pair_count\
    \ = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    for (let j = 0; j < pairs[i].length;\
    \ j++) {\n      if (pairs[i][j] > 0) {\n        pair_count++;\n      }\n    }\n\
    \  }\n  return pair_count == 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmph37m3soj.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmph37m3soj.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738794
