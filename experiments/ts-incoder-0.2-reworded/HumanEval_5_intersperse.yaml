name: HumanEval_5_intersperse
language: ts
prompt: "//Insert a number 'delimeter' between every two consecutive elements of input\
  \ array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3],\
  \ 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers: number[], delimeter: number):\
  \ number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = intersperse;\n  assert.deepEqual(candidate([], 7),[]);\n\
  \  assert.deepEqual(candidate([5, 6, 3, 2], 8),[5, 8, 6, 8, 3, 8, 2]);\n  assert.deepEqual(candidate([2,\
  \ 2, 2], 2),[2, 2, 2, 2, 2]);\n}\n\ntest();"
completions: ["  const result = [];\n  let index = 0;\n  while (index < numbers.length)\
    \ {\n    result.push(numbers[index]);\n    result.push(delimeter);\n    result.push(numbers[index\
    \ + 1]);\n    index += 2;\n  }\n  return result;\n}\n", "  return numbers.reduce((acc,\
    \ cur, idx) => [...acc, cur, ...(idx % 2 ? [delimeter, cur] : [cur])], []);\n\
    }\n", "  const result: number[] = [];\n  for (let i = 0; i < numbers.length; i\
    \ += 2) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i\
    \ + 1]);\n  }\n  return result;\n}\n", "  const result: number[] = [];\n  for\
    \ (let i = 0; i < numbers.length; i += 2) {\n    result.push(numbers[i]);\n  \
    \  result.push(delimeter);\n    result.push(numbers[i + 1]);\n  }\n  return result;\n\
    }\n", "  const result: number[] = [];\n  for (let i = 0; i < numbers.length; i++)\
    \ {\n    if (i !== 0) {\n      result.push(delimeter);\n    }\n    result.push(numbers[i]);\n\
    \  }\n  return result;\n}\n", "  return numbers.reduce((acc, n) => {\n    acc.push(n);\n\
    \    return acc;\n  }, []).concat(numbers.splice(0, numbers.length - 1).join(delimeter));\n\
    }\n", "  const result: number[] = [];\n  let i = 0;\n  while (i < numbers.length)\
    \ {\n    result.push(numbers[i]);\n    i += 1;\n    if (i === delimeter) {\n \
    \     result.push(numbers[i]);\n      i += 1;\n    }\n  }\n  return result;\n\
    }\n", "  return numbers.reduce((acc, cur, i, arr) => {\n    if (i === 0) {\n \
    \     acc.push(cur);\n    } else {\n      acc.push(cur, delimeter);\n    }\n \
    \   return acc;\n  }, []);\n}\n", "  const result: number[] = [];\n  for (let\
    \ i = 0; i < numbers.length; i += 2) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n\
    \    result.push(numbers[i + 1]);\n  }\n  return result;\n}\n", "  const result:\
    \ number[] = [];\n  for (let i = 0; i < numbers.length - 1; i++) {\n    result.push(numbers[i]);\n\
    \    result.push(delimeter);\n    result.push(numbers[i + 1]);\n  }\n  return\
    \ result;\n}\n", "  const result = [];\n  for (let i = 0; i < numbers.length;\
    \ i += 2) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i\
    \ + 1]);\n  }\n  return result;\n}\n", "  const result = [];\n  for (let i = 0;\
    \ i < numbers.length - 1; i++) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n\
    \    result.push(numbers[i + 1]);\n  }\n  return result;\n}\n", "  const result:\
    \ number[] = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    if (i !==\
    \ 0) {\n      result.push(delimeter);\n    }\n    result.push(numbers[i]);\n \
    \ }\n  return result;\n}\n", "  const result: number[] = [];\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    result.push(numbers[i]);\n    if (i !== 0) {\n\
    \      result.push(delimeter);\n    }\n  }\n  return result;\n}\n", "  const result:\
    \ number[] = [];\n  let index = 0;\n  while (index < numbers.length) {\n    result.push(numbers[index]);\n\
    \    result.push(delimeter);\n    result.push(numbers[index + 1]);\n    index\
    \ += 2;\n  }\n  return result;\n}\n", "  const result: number[] = [];\n  for (let\
    \ i = 0; i < numbers.length; i += 2) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n\
    \    result.push(numbers[i + 1]);\n  }\n  return result;\n}\n", "  const result:\
    \ number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (i !==\
    \ 0) {\n      result.push(delimeter);\n    }\n    result.push(numbers[i]);\n \
    \ }\n  return result;\n}\n", "  const result: number[] = [];\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    if (i !== 0) {\n      result.push(delimeter);\n\
    \    }\n    result.push(numbers[i]);\n  }\n  return result;\n}\n", "  const result:\
    \ number[] = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n\
    \    i += 1;\n    if (i === delimeter) {\n      result.push(numbers[i]);\n   \
    \   i += 1;\n    }\n  }\n  return result;\n}\n", "  const result: number[] = [];\n\
    \  for (let i = 0; i < numbers.length; i += 2) {\n    result.push(numbers[i]);\n\
    \    result.push(delimeter);\n    result.push(numbers[i + 1]);\n  }\n  return\
    \ result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
