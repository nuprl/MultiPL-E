language: ts
name: HumanEval_47_median
results:
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp3y6cpmne.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp3y6cpmne.js:11:25)\n    at\
    \ median (/tmp/tmp3y6cpmne.js:12:17)\n    at median (/tmp/tmp3y6cpmne.js:12:17)\n\
    \    at median (/tmp/tmp3y6cpmne.js:12:17)\n    at median (/tmp/tmp3y6cpmne.js:12:17)\n\
    \    at median (/tmp/tmp3y6cpmne.js:12:17)\n    at median (/tmp/tmp3y6cpmne.js:12:17)\n\
    \    at median (/tmp/tmp3y6cpmne.js:12:17)\n    at median (/tmp/tmp3y6cpmne.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot compute\
    \ median of an empty array');\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpx0lwcd7c.js:8\n        throw new Error('Cannot compute median of\
    \ an empty array');\n        ^\n\nError: Cannot compute median of an empty array\n\
    \    at median (/tmp/tmpx0lwcd7c.js:8:15)\n    at median (/tmp/tmpx0lwcd7c.js:15:16)\n\
    \    at median (/tmp/tmpx0lwcd7c.js:15:16)\n    at median (/tmp/tmpx0lwcd7c.js:16:17)\n\
    \    at test (/tmp/tmpx0lwcd7c.js:22:22)\n    at Object.<anonymous> (/tmp/tmpx0lwcd7c.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2\
    \ - 1]\n  }\n  const mid = l.length / 2\n  const left = l.slice(0, mid)\n  const\
    \ right = l.slice(mid)\n  return median(left) + median(right)\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpozq3vbgg.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpozq3vbgg.js:11:18)\n    at median (/tmp/tmpozq3vbgg.js:13:27)\n\
    \    at median (/tmp/tmpozq3vbgg.js:13:27)\n    at median (/tmp/tmpozq3vbgg.js:13:27)\n\
    \    at median (/tmp/tmpozq3vbgg.js:13:27)\n    at median (/tmp/tmpozq3vbgg.js:13:27)\n\
    \    at median (/tmp/tmpozq3vbgg.js:13:27)\n    at median (/tmp/tmpozq3vbgg.js:13:27)\n\
    \    at median (/tmp/tmpozq3vbgg.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ left + right / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpf312paxv.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmpf312paxv.js:8:15)\n    at median (/tmp/tmpf312paxv.js:15:16)\n\
    \    at median (/tmp/tmpf312paxv.js:15:16)\n    at median (/tmp/tmpf312paxv.js:16:17)\n\
    \    at test (/tmp/tmpf312paxv.js:22:22)\n    at Object.<anonymous> (/tmp/tmpf312paxv.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 2
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = Math.floor(n / 2);\n\
    \  return median(l.slice(0, half), l.slice(half));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppiixls92.ts(15,35): error TS2554: Expected 1 arguments,
    but got 2.

    '
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n\
    \    return sorted[(sorted.length / 2) - 1];\n  }\n  return sorted[Math.floor(sorted.length\
    \ / 2)];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmpatxs2iqz.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpatxs2iqz.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  let left\
    \ = median(l.slice(0, half));\n  let right = median(l.slice(half));\n  return\
    \ ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_ex13822.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmp_ex13822.js:8:15)\n    at median (/tmp/tmp_ex13822.js:15:16)\n\
    \    at median (/tmp/tmp_ex13822.js:15:16)\n    at median (/tmp/tmp_ex13822.js:16:17)\n\
    \    at test (/tmp/tmp_ex13822.js:22:22)\n    at Object.<anonymous> (/tmp/tmp_ex13822.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n\
    \  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpdovq9rnu.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpdovq9rnu.js:11:18)\n    at median (/tmp/tmpdovq9rnu.js:13:27)\n\
    \    at median (/tmp/tmpdovq9rnu.js:13:27)\n    at median (/tmp/tmpdovq9rnu.js:13:27)\n\
    \    at median (/tmp/tmpdovq9rnu.js:13:27)\n    at median (/tmp/tmpdovq9rnu.js:13:27)\n\
    \    at median (/tmp/tmpdovq9rnu.js:13:27)\n    at median (/tmp/tmpdovq9rnu.js:13:27)\n\
    \    at median (/tmp/tmpdovq9rnu.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp2lihuhof.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp2lihuhof.js:14:25)\n    at\
    \ median (/tmp/tmp2lihuhof.js:15:17)\n    at median (/tmp/tmp2lihuhof.js:15:17)\n\
    \    at median (/tmp/tmp2lihuhof.js:15:17)\n    at median (/tmp/tmp2lihuhof.js:15:17)\n\
    \    at median (/tmp/tmp2lihuhof.js:15:17)\n    at median (/tmp/tmp2lihuhof.js:15:17)\n\
    \    at median (/tmp/tmp2lihuhof.js:15:17)\n    at median (/tmp/tmp2lihuhof.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n\
    \  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n \
    \ const right = median(l.slice(mid));\n  return Math.ceil((left + right) / 2);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpyr3yc9yc.js:15\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpyr3yc9yc.js:15:25)\n    at\
    \ median (/tmp/tmpyr3yc9yc.js:16:17)\n    at median (/tmp/tmpyr3yc9yc.js:16:17)\n\
    \    at median (/tmp/tmpyr3yc9yc.js:16:17)\n    at median (/tmp/tmpyr3yc9yc.js:16:17)\n\
    \    at median (/tmp/tmpyr3yc9yc.js:16:17)\n    at median (/tmp/tmpyr3yc9yc.js:16:17)\n\
    \    at median (/tmp/tmpyr3yc9yc.js:16:17)\n    at median (/tmp/tmpyr3yc9yc.js:16:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2) {\n    return l[mid];\n  }\n  const\
    \ left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return\
    \ ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmpo7r8xgg2.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo7r8xgg2.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const sorted = l.slice().sort((a, b) =>\
    \ a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len\
    \ - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  const medianOfMiddle\
    \ = Math.floor(len / 2);\n  const medianOfMiddle2 = Math.floor(len / 2);\n  if\
    \ (sorted[middle] >= sorted[medianOfMiddle]) {\n    return sorted[middle];\n \
    \ }\n  if (sorted[middle] >= sorted[medianOfMiddle2]) {\n    return sorted[medianOfMiddle];\n\
    \  }\n  return sorted[medianOfMiddle2];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmpyifl2c8y.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpyifl2c8y.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len\
    \ / 2);\n  const median1 = sorted[middle - 1];\n  const median2 = sorted[middle];\n\
    \  return (median1 + median2) / 2;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2.5\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmp0cx4pn0f.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0cx4pn0f.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2.5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_l9pwr7t.js:8\n        throw new Error(\"Cannot compute median\
    \ of an empty array\");\n        ^\n\nError: Cannot compute median of an empty\
    \ array\n    at median (/tmp/tmp_l9pwr7t.js:8:15)\n    at median (/tmp/tmp_l9pwr7t.js:15:16)\n\
    \    at median (/tmp/tmp_l9pwr7t.js:15:16)\n    at median (/tmp/tmp_l9pwr7t.js:16:17)\n\
    \    at test (/tmp/tmp_l9pwr7t.js:22:22)\n    at Object.<anonymous> (/tmp/tmp_l9pwr7t.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2) {\n    return l[mid];\n  }\n  const\
    \ left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return\
    \ ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmpo7r8xgg2.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo7r8xgg2.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp8u_j7aav.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp8u_j7aav.js:14:25)\n    at\
    \ median (/tmp/tmp8u_j7aav.js:15:17)\n    at median (/tmp/tmp8u_j7aav.js:15:17)\n\
    \    at median (/tmp/tmp8u_j7aav.js:15:17)\n    at median (/tmp/tmp8u_j7aav.js:15:17)\n\
    \    at median (/tmp/tmp8u_j7aav.js:15:17)\n    at median (/tmp/tmp8u_j7aav.js:15:17)\n\
    \    at median (/tmp/tmp8u_j7aav.js:15:17)\n    at median (/tmp/tmp8u_j7aav.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n\
    \  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpq8yslhzs.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpq8yslhzs.js:11:18)\n    at median (/tmp/tmpq8yslhzs.js:13:27)\n\
    \    at median (/tmp/tmpq8yslhzs.js:13:27)\n    at median (/tmp/tmpq8yslhzs.js:13:27)\n\
    \    at median (/tmp/tmpq8yslhzs.js:13:27)\n    at median (/tmp/tmpq8yslhzs.js:13:27)\n\
    \    at median (/tmp/tmpq8yslhzs.js:13:27)\n    at median (/tmp/tmpq8yslhzs.js:13:27)\n\
    \    at median (/tmp/tmpq8yslhzs.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp80_z3bkl.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmp80_z3bkl.js:8:15)\n    at median (/tmp/tmp80_z3bkl.js:14:16)\n\
    \    at median (/tmp/tmp80_z3bkl.js:14:16)\n    at median (/tmp/tmp80_z3bkl.js:15:17)\n\
    \    at test (/tmp/tmp80_z3bkl.js:21:22)\n    at Object.<anonymous> (/tmp/tmp80_z3bkl.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot calculate\
    \ median of an empty array');\n  }\n  const sorted = l.slice().sort((a, b) =>\
    \ a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len\
    \ - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle];\n\
    \  const median2 = sorted[middle + 1];\n  return (median1 + median2) / 2;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpd9if7ogt.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpd9if7ogt.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const sortedArray = l.slice().sort((a,\
    \ b) => a - b);\n  const mid = sortedArray.length / 2;\n  if (sortedArray.length\
    \ % 2 === 0) {\n    return sortedArray[mid];\n  }\n  return sortedArray[mid] +\
    \ sortedArray[mid + 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpy5xlw18p.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpy5xlw18p.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  const n = l.length\n  if (n < 2) return NaN\n  if (n\
    \ === 1) return l[0]\n  const mid = n >> 1\n  const a = l[mid]\n  const b = l[n\
    \ - 1]\n  const c = l[n - 2]\n  const d = (l[n - 3] - a) * (b - c)\n  return a\
    \ + b + c + d\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n11\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpj3jjv7sr.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj3jjv7sr.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 11,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length <= 1) return l[0];\n  const mid = l.length\
    \ / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpteg84gpo.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpteg84gpo.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n\
    \  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right\
    \ = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmps3okomx1.js:15\n    var left = median(l.slice(0, half));\n    \
    \                    ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmps3okomx1.js:15:25)\n    at\
    \ median (/tmp/tmps3okomx1.js:16:17)\n    at median (/tmp/tmps3okomx1.js:16:17)\n\
    \    at median (/tmp/tmps3okomx1.js:16:17)\n    at median (/tmp/tmps3okomx1.js:16:17)\n\
    \    at median (/tmp/tmps3okomx1.js:16:17)\n    at median (/tmp/tmps3okomx1.js:16:17)\n\
    \    at median (/tmp/tmps3okomx1.js:16:17)\n    at median (/tmp/tmps3okomx1.js:16:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const sortedArray = l.slice().sort((a,\
    \ b) => a - b);\n  const middleIndex = Math.floor(sortedArray.length / 2);\n \
    \ const medianValue = sortedArray[middleIndex];\n  return medianValue;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmpgg58igg9.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgg58igg9.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  let left\
    \ = median(l.slice(0, half));\n  let right = median(l.slice(half));\n  return\
    \ left + Math.ceil((right - left) / 2);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpgnpgfkfk.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmpgnpgfkfk.js:8:15)\n    at median (/tmp/tmpgnpgfkfk.js:15:16)\n\
    \    at median (/tmp/tmpgnpgfkfk.js:15:16)\n    at median (/tmp/tmpgnpgfkfk.js:16:17)\n\
    \    at test (/tmp/tmpgnpgfkfk.js:22:22)\n    at Object.<anonymous> (/tmp/tmpgnpgfkfk.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot compute\
    \ median of an empty array');\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp7hwboh4x.js:8\n        throw new Error('Cannot compute median of\
    \ an empty array');\n        ^\n\nError: Cannot compute median of an empty array\n\
    \    at median (/tmp/tmp7hwboh4x.js:8:15)\n    at median (/tmp/tmp7hwboh4x.js:15:16)\n\
    \    at median (/tmp/tmp7hwboh4x.js:15:16)\n    at median (/tmp/tmp7hwboh4x.js:16:17)\n\
    \    at test (/tmp/tmp7hwboh4x.js:22:22)\n    at Object.<anonymous> (/tmp/tmp7hwboh4x.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  const n = l.length;\n  if (n < 1) {\n    throw new Error(\"\
    median: empty array\");\n  }\n  if (n === 1) {\n    return l[0];\n  }\n  const\
    \ half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n\
    \  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpl9za1k3g.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpl9za1k3g.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpu3t65wed.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmpu3t65wed.js:8:15)\n    at median (/tmp/tmpu3t65wed.js:15:16)\n\
    \    at median (/tmp/tmpu3t65wed.js:15:16)\n    at median (/tmp/tmpu3t65wed.js:16:17)\n\
    \    at test (/tmp/tmpu3t65wed.js:22:22)\n    at Object.<anonymous> (/tmp/tmpu3t65wed.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp8u_j7aav.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp8u_j7aav.js:14:25)\n    at\
    \ median (/tmp/tmp8u_j7aav.js:15:17)\n    at median (/tmp/tmp8u_j7aav.js:15:17)\n\
    \    at median (/tmp/tmp8u_j7aav.js:15:17)\n    at median (/tmp/tmp8u_j7aav.js:15:17)\n\
    \    at median (/tmp/tmp8u_j7aav.js:15:17)\n    at median (/tmp/tmp8u_j7aav.js:15:17)\n\
    \    at median (/tmp/tmp8u_j7aav.js:15:17)\n    at median (/tmp/tmp8u_j7aav.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_l9pwr7t.js:8\n        throw new Error(\"Cannot compute median\
    \ of an empty array\");\n        ^\n\nError: Cannot compute median of an empty\
    \ array\n    at median (/tmp/tmp_l9pwr7t.js:8:15)\n    at median (/tmp/tmp_l9pwr7t.js:15:16)\n\
    \    at median (/tmp/tmp_l9pwr7t.js:15:16)\n    at median (/tmp/tmp_l9pwr7t.js:16:17)\n\
    \    at test (/tmp/tmp_l9pwr7t.js:22:22)\n    at Object.<anonymous> (/tmp/tmp_l9pwr7t.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right\
    \ = median(l.slice(mid));\n  return l.length < 3 ? left : (left + right) / 2;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpv88r5ifg.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpv88r5ifg.js:11:25)\n    at\
    \ median (/tmp/tmpv88r5ifg.js:12:17)\n    at median (/tmp/tmpv88r5ifg.js:12:17)\n\
    \    at median (/tmp/tmpv88r5ifg.js:12:17)\n    at median (/tmp/tmpv88r5ifg.js:12:17)\n\
    \    at median (/tmp/tmpv88r5ifg.js:12:17)\n    at median (/tmp/tmpv88r5ifg.js:12:17)\n\
    \    at median (/tmp/tmpv88r5ifg.js:12:17)\n    at median (/tmp/tmpv88r5ifg.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const sorted = l.slice().sort((a, b) =>\
    \ a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len\
    \ / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const medianOfMiddle\
    \ = median(sorted.slice(0, middle));\n  return medianOfMiddle + median(sorted.slice(middle,\
    \ len));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpupry10rc.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmpupry10rc.js:8:15)\n    at median (/tmp/tmpupry10rc.js:16:26)\n\
    \    at median (/tmp/tmpupry10rc.js:16:26)\n    at median (/tmp/tmpupry10rc.js:17:29)\n\
    \    at test (/tmp/tmpupry10rc.js:22:22)\n    at Object.<anonymous> (/tmp/tmpupry10rc.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2\
    \ - 1]\n  }\n  const mid = l.length / 2\n  const left = l.slice(0, mid)\n  const\
    \ right = l.slice(mid)\n  return median(left) + median(right)\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpozq3vbgg.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpozq3vbgg.js:11:18)\n    at median (/tmp/tmpozq3vbgg.js:13:27)\n\
    \    at median (/tmp/tmpozq3vbgg.js:13:27)\n    at median (/tmp/tmpozq3vbgg.js:13:27)\n\
    \    at median (/tmp/tmpozq3vbgg.js:13:27)\n    at median (/tmp/tmpozq3vbgg.js:13:27)\n\
    \    at median (/tmp/tmpozq3vbgg.js:13:27)\n    at median (/tmp/tmpozq3vbgg.js:13:27)\n\
    \    at median (/tmp/tmpozq3vbgg.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_g02bjee.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmp_g02bjee.js:8:15)\n    at median (/tmp/tmp_g02bjee.js:15:16)\n\
    \    at median (/tmp/tmp_g02bjee.js:15:16)\n    at median (/tmp/tmp_g02bjee.js:16:17)\n\
    \    at test (/tmp/tmp_g02bjee.js:22:22)\n    at Object.<anonymous> (/tmp/tmp_g02bjee.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const middle = Math.floor(l.length / 2);\n  const leftMedian\
    \ = median(l.slice(0, middle));\n  const rightMedian = median(l.slice(middle));\n\
    \  return leftMedian + rightMedian / 2;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp0alcnttg.js:11\n    var leftMedian = median(l.slice(0, middle));\n\
    \                              ^\n\nRangeError: Maximum call stack size exceeded\n\
    \    at Array.slice (<anonymous>)\n    at median (/tmp/tmp0alcnttg.js:11:31)\n\
    \    at median (/tmp/tmp0alcnttg.js:12:23)\n    at median (/tmp/tmp0alcnttg.js:12:23)\n\
    \    at median (/tmp/tmp0alcnttg.js:12:23)\n    at median (/tmp/tmp0alcnttg.js:12:23)\n\
    \    at median (/tmp/tmp0alcnttg.js:12:23)\n    at median (/tmp/tmp0alcnttg.js:12:23)\n\
    \    at median (/tmp/tmp0alcnttg.js:12:23)\n    at median (/tmp/tmp0alcnttg.js:12:23)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const mid = l.length / 2;\n  const sorted\
    \ = l.slice().sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return\
    \ sorted[mid];\n  }\n  return sorted[mid] + (sorted[mid] + sorted[mid + 1]) /\
    \ 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpdjjlc7er.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdjjlc7er.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpu3t65wed.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmpu3t65wed.js:8:15)\n    at median (/tmp/tmpu3t65wed.js:15:16)\n\
    \    at median (/tmp/tmpu3t65wed.js:15:16)\n    at median (/tmp/tmpu3t65wed.js:16:17)\n\
    \    at test (/tmp/tmpu3t65wed.js:22:22)\n    at Object.<anonymous> (/tmp/tmpu3t65wed.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw Error('Cannot compute\
    \ median of an empty array');\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp2frq_x30.js:8\n        throw Error('Cannot compute median of an\
    \ empty array');\n        ^\n\nError: Cannot compute median of an empty array\n\
    \    at median (/tmp/tmp2frq_x30.js:8:15)\n    at median (/tmp/tmp2frq_x30.js:15:16)\n\
    \    at median (/tmp/tmp2frq_x30.js:15:16)\n    at median (/tmp/tmp2frq_x30.js:16:17)\n\
    \    at test (/tmp/tmp2frq_x30.js:22:22)\n    at Object.<anonymous> (/tmp/tmp2frq_x30.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  l.sort((a, b) => a - b);\n  const mid =\
    \ l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return\
    \ (l[mid] + l[mid-1]) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpwru3rag_.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwru3rag_.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const mid = Math.floor(n / 2);\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpg0c3rsc9.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmpg0c3rsc9.js:8:15)\n    at median (/tmp/tmpg0c3rsc9.js:15:16)\n\
    \    at median (/tmp/tmpg0c3rsc9.js:15:16)\n    at median (/tmp/tmpg0c3rsc9.js:16:17)\n\
    \    at test (/tmp/tmpg0c3rsc9.js:22:22)\n    at Object.<anonymous> (/tmp/tmpg0c3rsc9.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp80_z3bkl.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmp80_z3bkl.js:8:15)\n    at median (/tmp/tmp80_z3bkl.js:14:16)\n\
    \    at median (/tmp/tmp80_z3bkl.js:14:16)\n    at median (/tmp/tmp80_z3bkl.js:15:17)\n\
    \    at test (/tmp/tmp80_z3bkl.js:21:22)\n    at Object.<anonymous> (/tmp/tmp80_z3bkl.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const mid = l.length / 2;\n  if (mid ===\
    \ 0) {\n    return l[mid];\n  }\n  if (mid === 1) {\n    return l[mid - 1] + l[mid\
    \ - 2];\n  }\n  const medianValue = l[mid];\n  const leftMedian = median(l.slice(0,\
    \ mid));\n  const rightMedian = median(l.slice(mid));\n  return medianValue +\
    \ Math.max(leftMedian, rightMedian);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpl6tirisp.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmpl6tirisp.js:8:15)\n    at median (/tmp/tmpl6tirisp.js:18:22)\n\
    \    at median (/tmp/tmpl6tirisp.js:18:22)\n    at median (/tmp/tmpl6tirisp.js:19:23)\n\
    \    at test (/tmp/tmpl6tirisp.js:25:22)\n    at Object.<anonymous> (/tmp/tmpl6tirisp.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const sorted = l.slice().sort((a, b) =>\
    \ a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len\
    \ - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  const medianOfMiddle\
    \ = median(sorted.slice(0, middle));\n  const medianOfRest = median(sorted.slice(middle));\n\
    \  return medianOfMiddle + medianOfRest;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp0l535bcv.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmp0l535bcv.js:8:15)\n    at median (/tmp/tmp0l535bcv.js:16:26)\n\
    \    at median (/tmp/tmp0l535bcv.js:16:26)\n    at median (/tmp/tmp0l535bcv.js:17:24)\n\
    \    at test (/tmp/tmp0l535bcv.js:23:22)\n    at Object.<anonymous> (/tmp/tmp0l535bcv.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const sortedArray = l.slice().sort((a,\
    \ b) => a - b);\n  const middle = Math.floor(sortedArray.length / 2);\n  if (sortedArray.length\
    \ % 2 === 0) {\n    return sortedArray[middle];\n  }\n  return sortedArray[middle\
    \ - 1] + sortedArray[middle];\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpbrjpb8v8.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbrjpb8v8.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = l.slice(0, mid);\n\
    \  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmph0vt632h.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmph0vt632h.js:11:18)\n    at median (/tmp/tmph0vt632h.js:13:27)\n\
    \    at median (/tmp/tmph0vt632h.js:13:27)\n    at median (/tmp/tmph0vt632h.js:13:27)\n\
    \    at median (/tmp/tmph0vt632h.js:13:27)\n    at median (/tmp/tmph0vt632h.js:13:27)\n\
    \    at median (/tmp/tmph0vt632h.js:13:27)\n    at median (/tmp/tmph0vt632h.js:13:27)\n\
    \    at median (/tmp/tmph0vt632h.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n \
    \ const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp1up1hx3z.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmp1up1hx3z.js:11:18)\n    at median (/tmp/tmp1up1hx3z.js:13:27)\n\
    \    at median (/tmp/tmp1up1hx3z.js:13:27)\n    at median (/tmp/tmp1up1hx3z.js:13:27)\n\
    \    at median (/tmp/tmp1up1hx3z.js:13:27)\n    at median (/tmp/tmp1up1hx3z.js:13:27)\n\
    \    at median (/tmp/tmp1up1hx3z.js:13:27)\n    at median (/tmp/tmp1up1hx3z.js:13:27)\n\
    \    at median (/tmp/tmp1up1hx3z.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp2lihuhof.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp2lihuhof.js:14:25)\n    at\
    \ median (/tmp/tmp2lihuhof.js:15:17)\n    at median (/tmp/tmp2lihuhof.js:15:17)\n\
    \    at median (/tmp/tmp2lihuhof.js:15:17)\n    at median (/tmp/tmp2lihuhof.js:15:17)\n\
    \    at median (/tmp/tmp2lihuhof.js:15:17)\n    at median (/tmp/tmp2lihuhof.js:15:17)\n\
    \    at median (/tmp/tmp2lihuhof.js:15:17)\n    at median (/tmp/tmp2lihuhof.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n === 1) {\n\
    \    return l[0];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0,\
    \ half));\n  const right = median(l.slice(half));\n  return ((left + right) /\
    \ 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmprlk64y9b.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprlk64y9b.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  if (l.length === 1) {\n    return l[0];\n\
    \  }\n  const middle = Math.floor(l.length / 2);\n  const left = l.slice(0, middle);\n\
    \  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpf1yv1j0a.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpf1yv1j0a.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_g02bjee.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmp_g02bjee.js:8:15)\n    at median (/tmp/tmp_g02bjee.js:15:16)\n\
    \    at median (/tmp/tmp_g02bjee.js:15:16)\n    at median (/tmp/tmp_g02bjee.js:16:17)\n\
    \    at test (/tmp/tmp_g02bjee.js:22:22)\n    at Object.<anonymous> (/tmp/tmp_g02bjee.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const mid = Math.floor(n / 2);\n\
    \  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left)\
    \ + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpsvog97qf.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmpsvog97qf.js:8:15)\n    at median (/tmp/tmpsvog97qf.js:17:12)\n\
    \    at median (/tmp/tmpsvog97qf.js:17:12)\n    at median (/tmp/tmpsvog97qf.js:17:27)\n\
    \    at test (/tmp/tmpsvog97qf.js:22:22)\n    at Object.<anonymous> (/tmp/tmpsvog97qf.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 2
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  const n = l.length;\n  if (n < 2) {\n    return l[0];\n\
    \  }\n  const half = Math.floor(n / 2);\n  if (n % 2) {\n    return median(l[half])\
    \ < median(l[half - 1]) ? l[half] : l[half - 1];\n  }\n  return median(l[half]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg439os8i.ts(13,19): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''number[]''.

    ../../../../../tmp/tmpg439os8i.ts(13,37): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''number[]''.

    ../../../../../tmp/tmpg439os8i.ts(15,17): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''number[]''.

    '
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n\
    \  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right\
    \ = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmps3okomx1.js:15\n    var left = median(l.slice(0, half));\n    \
    \                    ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmps3okomx1.js:15:25)\n    at\
    \ median (/tmp/tmps3okomx1.js:16:17)\n    at median (/tmp/tmps3okomx1.js:16:17)\n\
    \    at median (/tmp/tmps3okomx1.js:16:17)\n    at median (/tmp/tmps3okomx1.js:16:17)\n\
    \    at median (/tmp/tmps3okomx1.js:16:17)\n    at median (/tmp/tmps3okomx1.js:16:17)\n\
    \    at median (/tmp/tmps3okomx1.js:16:17)\n    at median (/tmp/tmps3okomx1.js:16:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute\
    \ median of an empty array\");\n  }\n  const sorted = l.slice().sort((a, b) =>\
    \ a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len\
    \ - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle\
    \ - 1];\n  const median2 = sorted[middle];\n  return (median1 + median2) / 2;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2.5\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmp3d3aqjbm.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp3d3aqjbm.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2.5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp2lihuhof.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp2lihuhof.js:14:25)\n    at\
    \ median (/tmp/tmp2lihuhof.js:15:17)\n    at median (/tmp/tmp2lihuhof.js:15:17)\n\
    \    at median (/tmp/tmp2lihuhof.js:15:17)\n    at median (/tmp/tmp2lihuhof.js:15:17)\n\
    \    at median (/tmp/tmp2lihuhof.js:15:17)\n    at median (/tmp/tmp2lihuhof.js:15:17)\n\
    \    at median (/tmp/tmp2lihuhof.js:15:17)\n    at median (/tmp/tmp2lihuhof.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const mid = l.length / 2;\n  const sorted\
    \ = l.slice().sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return\
    \ sorted[mid];\n  }\n  return sorted[mid] + (sorted[mid + 1] - sorted[mid]) /\
    \ 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpv_0pu4i6.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpv_0pu4i6.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const middle = Math.floor(l.length / 2);\n  const left = l.slice(0,\
    \ middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmps8hbx2hm.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmps8hbx2hm.js:11:18)\n    at median (/tmp/tmps8hbx2hm.js:13:27)\n\
    \    at median (/tmp/tmps8hbx2hm.js:13:27)\n    at median (/tmp/tmps8hbx2hm.js:13:27)\n\
    \    at median (/tmp/tmps8hbx2hm.js:13:27)\n    at median (/tmp/tmps8hbx2hm.js:13:27)\n\
    \    at median (/tmp/tmps8hbx2hm.js:13:27)\n    at median (/tmp/tmps8hbx2hm.js:13:27)\n\
    \    at median (/tmp/tmps8hbx2hm.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738175
- exit_code: 2
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = Math.floor(n / 2);\n\
    \  return median(l[half], l[n - half]);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyowo0bhk.ts(15,26): error TS2554: Expected 1 arguments,
    but got 2.

    '
  timestamp: 1659738174
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp8u_j7aav.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp8u_j7aav.js:14:25)\n    at\
    \ median (/tmp/tmp8u_j7aav.js:15:17)\n    at median (/tmp/tmp8u_j7aav.js:15:17)\n\
    \    at median (/tmp/tmp8u_j7aav.js:15:17)\n    at median (/tmp/tmp8u_j7aav.js:15:17)\n\
    \    at median (/tmp/tmp8u_j7aav.js:15:17)\n    at median (/tmp/tmp8u_j7aav.js:15:17)\n\
    \    at median (/tmp/tmp8u_j7aav.js:15:17)\n    at median (/tmp/tmp8u_j7aav.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return l.length / 2 === mid ? Math.min(left, right) : Math.max(left, right);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpndhg4ybe.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpndhg4ybe.js:14:25)\n    at\
    \ median (/tmp/tmpndhg4ybe.js:15:17)\n    at median (/tmp/tmpndhg4ybe.js:15:17)\n\
    \    at median (/tmp/tmpndhg4ybe.js:15:17)\n    at median (/tmp/tmpndhg4ybe.js:15:17)\n\
    \    at median (/tmp/tmpndhg4ybe.js:15:17)\n    at median (/tmp/tmpndhg4ybe.js:15:17)\n\
    \    at median (/tmp/tmpndhg4ybe.js:15:17)\n    at median (/tmp/tmpndhg4ybe.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738175
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const sorted = l.slice().sort((a, b) =>\
    \ a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[(sorted.length\
    \ - 1) / 2] as number;\n  }\n  const middle = sorted.length / 2;\n  return sorted[middle]\
    \ + (sorted[middle + 1] as number) / 2;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpssmeqgsq.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpssmeqgsq.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738175
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return l.length / 2 > mid ? right :\
    \ left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpy79p02s_.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpy79p02s_.js:11:25)\n    at\
    \ median (/tmp/tmpy79p02s_.js:12:17)\n    at median (/tmp/tmpy79p02s_.js:12:17)\n\
    \    at median (/tmp/tmpy79p02s_.js:12:17)\n    at median (/tmp/tmpy79p02s_.js:12:17)\n\
    \    at median (/tmp/tmpy79p02s_.js:12:17)\n    at median (/tmp/tmpy79p02s_.js:12:17)\n\
    \    at median (/tmp/tmpy79p02s_.js:12:17)\n    at median (/tmp/tmpy79p02s_.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738175
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n\
    \  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmplrh4c4dm.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmplrh4c4dm.js:11:18)\n    at median (/tmp/tmplrh4c4dm.js:13:27)\n\
    \    at median (/tmp/tmplrh4c4dm.js:13:27)\n    at median (/tmp/tmplrh4c4dm.js:13:27)\n\
    \    at median (/tmp/tmplrh4c4dm.js:13:27)\n    at median (/tmp/tmplrh4c4dm.js:13:27)\n\
    \    at median (/tmp/tmplrh4c4dm.js:13:27)\n    at median (/tmp/tmplrh4c4dm.js:13:27)\n\
    \    at median (/tmp/tmplrh4c4dm.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738175
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpu3t65wed.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmpu3t65wed.js:8:15)\n    at median (/tmp/tmpu3t65wed.js:15:16)\n\
    \    at median (/tmp/tmpu3t65wed.js:15:16)\n    at median (/tmp/tmpu3t65wed.js:16:17)\n\
    \    at test (/tmp/tmpu3t65wed.js:22:22)\n    at Object.<anonymous> (/tmp/tmpu3t65wed.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp2lihuhof.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp2lihuhof.js:14:25)\n    at\
    \ median (/tmp/tmp2lihuhof.js:15:17)\n    at median (/tmp/tmp2lihuhof.js:15:17)\n\
    \    at median (/tmp/tmp2lihuhof.js:15:17)\n    at median (/tmp/tmp2lihuhof.js:15:17)\n\
    \    at median (/tmp/tmp2lihuhof.js:15:17)\n    at median (/tmp/tmp2lihuhof.js:15:17)\n\
    \    at median (/tmp/tmp2lihuhof.js:15:17)\n    at median (/tmp/tmp2lihuhof.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  const n = l.length;\n  if (n < 2) {\n    return l[0];\n\
    \  }\n  const mid = Math.floor(n / 2);\n  const left = l.slice(0, mid);\n  const\
    \ right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp68qywvyb.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp68qywvyb.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738175
- exit_code: 2
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  return median(l[mid], l[mid-1]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptnmrcf6l.ts(14,25): error TS2554: Expected 1 arguments,
    but got 2.

    '
  timestamp: 1659738174
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left < right) ? left : right);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpckm62obn.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpckm62obn.js:14:25)\n    at\
    \ median (/tmp/tmpckm62obn.js:15:17)\n    at median (/tmp/tmpckm62obn.js:15:17)\n\
    \    at median (/tmp/tmpckm62obn.js:15:17)\n    at median (/tmp/tmpckm62obn.js:15:17)\n\
    \    at median (/tmp/tmpckm62obn.js:15:17)\n    at median (/tmp/tmpckm62obn.js:15:17)\n\
    \    at median (/tmp/tmpckm62obn.js:15:17)\n    at median (/tmp/tmpckm62obn.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738175
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute\
    \ median of an empty array\");\n  }\n  const sorted = l.slice().sort((a: number,\
    \ b: number) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n\
    \    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n\
    \  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmp9vwzbt9_.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9vwzbt9_.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738175
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp8jyz623n.js:8\n        throw new Error(\"Cannot compute median\
    \ of an empty array\");\n        ^\n\nError: Cannot compute median of an empty\
    \ array\n    at median (/tmp/tmp8jyz623n.js:8:15)\n    at median (/tmp/tmp8jyz623n.js:15:16)\n\
    \    at median (/tmp/tmp8jyz623n.js:15:16)\n    at median (/tmp/tmp8jyz623n.js:16:17)\n\
    \    at test (/tmp/tmp8jyz623n.js:22:22)\n    at Object.<anonymous> (/tmp/tmp8jyz623n.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738175
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const sortedArray = l.slice().sort((a,\
    \ b) => a - b);\n  const middleIndex = Math.floor(sortedArray.length / 2);\n \
    \ const median = sortedArray[middleIndex];\n  return median;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmpi16v7l80.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpi16v7l80.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738175
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2) {\n    return l[mid];\n  }\n  const\
    \ left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return\
    \ ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmpgsj114px.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgsj114px.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738175
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  const n = l.length;\n  if (n < 1) {\n    throw new Error(\"\
    median: empty array\");\n  }\n  if (n === 1) {\n    return l[0];\n  }\n  const\
    \ mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n  const right\
    \ = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmprkz5ebf3.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprkz5ebf3.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738175
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n\
    \  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right\
    \ = median(l.slice(half));\n  return ((left + right) / 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpx62jcdy0.js:15\n    var left = median(l.slice(0, half));\n    \
    \                    ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpx62jcdy0.js:15:25)\n    at\
    \ median (/tmp/tmpx62jcdy0.js:16:17)\n    at median (/tmp/tmpx62jcdy0.js:16:17)\n\
    \    at median (/tmp/tmpx62jcdy0.js:16:17)\n    at median (/tmp/tmpx62jcdy0.js:16:17)\n\
    \    at median (/tmp/tmpx62jcdy0.js:16:17)\n    at median (/tmp/tmpx62jcdy0.js:16:17)\n\
    \    at median (/tmp/tmpx62jcdy0.js:16:17)\n    at median (/tmp/tmpx62jcdy0.js:16:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738175
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot calculate\
    \ median of an empty array');\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpsn6ll0h9.js:8\n        throw new Error('Cannot calculate median\
    \ of an empty array');\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmpsn6ll0h9.js:8:15)\n    at median (/tmp/tmpsn6ll0h9.js:15:16)\n\
    \    at median (/tmp/tmpsn6ll0h9.js:15:16)\n    at median (/tmp/tmpsn6ll0h9.js:16:17)\n\
    \    at test (/tmp/tmpsn6ll0h9.js:22:22)\n    at Object.<anonymous> (/tmp/tmpsn6ll0h9.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738175
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpu3t65wed.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmpu3t65wed.js:8:15)\n    at median (/tmp/tmpu3t65wed.js:15:16)\n\
    \    at median (/tmp/tmpu3t65wed.js:15:16)\n    at median (/tmp/tmpu3t65wed.js:16:17)\n\
    \    at test (/tmp/tmpu3t65wed.js:22:22)\n    at Object.<anonymous> (/tmp/tmpu3t65wed.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n\
    \  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right\
    \ = median(l.slice(half));\n  return left + right;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp3slsv0z1.js:15\n    var left = median(l.slice(0, half));\n    \
    \                    ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp3slsv0z1.js:15:25)\n    at\
    \ median (/tmp/tmp3slsv0z1.js:16:17)\n    at median (/tmp/tmp3slsv0z1.js:16:17)\n\
    \    at median (/tmp/tmp3slsv0z1.js:16:17)\n    at median (/tmp/tmp3slsv0z1.js:16:17)\n\
    \    at median (/tmp/tmp3slsv0z1.js:16:17)\n    at median (/tmp/tmp3slsv0z1.js:16:17)\n\
    \    at median (/tmp/tmp3slsv0z1.js:16:17)\n    at median (/tmp/tmp3slsv0z1.js:16:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738175
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return left + right;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpm1ypoa1q.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpm1ypoa1q.js:11:25)\n    at\
    \ median (/tmp/tmpm1ypoa1q.js:12:17)\n    at median (/tmp/tmpm1ypoa1q.js:12:17)\n\
    \    at median (/tmp/tmpm1ypoa1q.js:12:17)\n    at median (/tmp/tmpm1ypoa1q.js:12:17)\n\
    \    at median (/tmp/tmpm1ypoa1q.js:12:17)\n    at median (/tmp/tmpm1ypoa1q.js:12:17)\n\
    \    at median (/tmp/tmpm1ypoa1q.js:12:17)\n    at median (/tmp/tmpm1ypoa1q.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738175
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot compute\
    \ median of an empty array');\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpx0lwcd7c.js:8\n        throw new Error('Cannot compute median of\
    \ an empty array');\n        ^\n\nError: Cannot compute median of an empty array\n\
    \    at median (/tmp/tmpx0lwcd7c.js:8:15)\n    at median (/tmp/tmpx0lwcd7c.js:15:16)\n\
    \    at median (/tmp/tmpx0lwcd7c.js:15:16)\n    at median (/tmp/tmpx0lwcd7c.js:16:17)\n\
    \    at test (/tmp/tmpx0lwcd7c.js:22:22)\n    at Object.<anonymous> (/tmp/tmpx0lwcd7c.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left < right) ? left : right);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpckm62obn.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpckm62obn.js:14:25)\n    at\
    \ median (/tmp/tmpckm62obn.js:15:17)\n    at median (/tmp/tmpckm62obn.js:15:17)\n\
    \    at median (/tmp/tmpckm62obn.js:15:17)\n    at median (/tmp/tmpckm62obn.js:15:17)\n\
    \    at median (/tmp/tmpckm62obn.js:15:17)\n    at median (/tmp/tmpckm62obn.js:15:17)\n\
    \    at median (/tmp/tmpckm62obn.js:15:17)\n    at median (/tmp/tmpckm62obn.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738175
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n \
    \ const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp1up1hx3z.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmp1up1hx3z.js:11:18)\n    at median (/tmp/tmp1up1hx3z.js:13:27)\n\
    \    at median (/tmp/tmp1up1hx3z.js:13:27)\n    at median (/tmp/tmp1up1hx3z.js:13:27)\n\
    \    at median (/tmp/tmp1up1hx3z.js:13:27)\n    at median (/tmp/tmp1up1hx3z.js:13:27)\n\
    \    at median (/tmp/tmp1up1hx3z.js:13:27)\n    at median (/tmp/tmp1up1hx3z.js:13:27)\n\
    \    at median (/tmp/tmp1up1hx3z.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp8u_j7aav.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp8u_j7aav.js:14:25)\n    at\
    \ median (/tmp/tmp8u_j7aav.js:15:17)\n    at median (/tmp/tmp8u_j7aav.js:15:17)\n\
    \    at median (/tmp/tmp8u_j7aav.js:15:17)\n    at median (/tmp/tmp8u_j7aav.js:15:17)\n\
    \    at median (/tmp/tmp8u_j7aav.js:15:17)\n    at median (/tmp/tmp8u_j7aav.js:15:17)\n\
    \    at median (/tmp/tmp8u_j7aav.js:15:17)\n    at median (/tmp/tmp8u_j7aav.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp8u_j7aav.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp8u_j7aav.js:14:25)\n    at\
    \ median (/tmp/tmp8u_j7aav.js:15:17)\n    at median (/tmp/tmp8u_j7aav.js:15:17)\n\
    \    at median (/tmp/tmp8u_j7aav.js:15:17)\n    at median (/tmp/tmp8u_j7aav.js:15:17)\n\
    \    at median (/tmp/tmp8u_j7aav.js:15:17)\n    at median (/tmp/tmp8u_j7aav.js:15:17)\n\
    \    at median (/tmp/tmp8u_j7aav.js:15:17)\n    at median (/tmp/tmp8u_j7aav.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n\
    \  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpv6bliouc.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmpv6bliouc.js:11:18)\n    at median (/tmp/tmpv6bliouc.js:13:27)\n\
    \    at median (/tmp/tmpv6bliouc.js:13:27)\n    at median (/tmp/tmpv6bliouc.js:13:27)\n\
    \    at median (/tmp/tmpv6bliouc.js:13:27)\n    at median (/tmp/tmpv6bliouc.js:13:27)\n\
    \    at median (/tmp/tmpv6bliouc.js:13:27)\n    at median (/tmp/tmpv6bliouc.js:13:27)\n\
    \    at median (/tmp/tmpv6bliouc.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738175
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = l.slice(0, mid);\n\
    \  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmph0vt632h.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmph0vt632h.js:11:18)\n    at median (/tmp/tmph0vt632h.js:13:27)\n\
    \    at median (/tmp/tmph0vt632h.js:13:27)\n    at median (/tmp/tmph0vt632h.js:13:27)\n\
    \    at median (/tmp/tmph0vt632h.js:13:27)\n    at median (/tmp/tmph0vt632h.js:13:27)\n\
    \    at median (/tmp/tmph0vt632h.js:13:27)\n    at median (/tmp/tmph0vt632h.js:13:27)\n\
    \    at median (/tmp/tmph0vt632h.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 0
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  l.sort((a, b) => a - b);\n  const half\
    \ = Math.floor(l.length / 2);\n  if (l.length % 2) {\n    return l[half];\n  }\n\
    \  return (l[half - 1] + l[half]) / 2;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738175
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle =\
    \ len >> 1;\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmpfapjja7_.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfapjja7_.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738175
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpu3t65wed.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmpu3t65wed.js:8:15)\n    at median (/tmp/tmpu3t65wed.js:15:16)\n\
    \    at median (/tmp/tmpu3t65wed.js:15:16)\n    at median (/tmp/tmpu3t65wed.js:16:17)\n\
    \    at test (/tmp/tmpu3t65wed.js:22:22)\n    at Object.<anonymous> (/tmp/tmpu3t65wed.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n\
    \  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n \
    \ const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpkl1ifoed.js:15\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpkl1ifoed.js:15:25)\n    at\
    \ median (/tmp/tmpkl1ifoed.js:16:17)\n    at median (/tmp/tmpkl1ifoed.js:16:17)\n\
    \    at median (/tmp/tmpkl1ifoed.js:16:17)\n    at median (/tmp/tmpkl1ifoed.js:16:17)\n\
    \    at median (/tmp/tmpkl1ifoed.js:16:17)\n    at median (/tmp/tmpkl1ifoed.js:16:17)\n\
    \    at median (/tmp/tmpkl1ifoed.js:16:17)\n    at median (/tmp/tmpkl1ifoed.js:16:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738175
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle =\
    \ Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmp8pj55vad.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8pj55vad.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738175
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n\
    \  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpdovq9rnu.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpdovq9rnu.js:11:18)\n    at median (/tmp/tmpdovq9rnu.js:13:27)\n\
    \    at median (/tmp/tmpdovq9rnu.js:13:27)\n    at median (/tmp/tmpdovq9rnu.js:13:27)\n\
    \    at median (/tmp/tmpdovq9rnu.js:13:27)\n    at median (/tmp/tmpdovq9rnu.js:13:27)\n\
    \    at median (/tmp/tmpdovq9rnu.js:13:27)\n    at median (/tmp/tmpdovq9rnu.js:13:27)\n\
    \    at median (/tmp/tmpdovq9rnu.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return l.indexOf(left) < l.indexOf(right)\
    \ ? left : right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp6wu6qq3g.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp6wu6qq3g.js:11:25)\n    at\
    \ median (/tmp/tmp6wu6qq3g.js:12:17)\n    at median (/tmp/tmp6wu6qq3g.js:12:17)\n\
    \    at median (/tmp/tmp6wu6qq3g.js:12:17)\n    at median (/tmp/tmp6wu6qq3g.js:12:17)\n\
    \    at median (/tmp/tmp6wu6qq3g.js:12:17)\n    at median (/tmp/tmp6wu6qq3g.js:12:17)\n\
    \    at median (/tmp/tmp6wu6qq3g.js:12:17)\n    at median (/tmp/tmp6wu6qq3g.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738179
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a: number, b: number) => a - b);\n  if (sorted.length\
    \ % 2 === 0) {\n    return sorted[(sorted.length - 1) / 2];\n  }\n  const middle\
    \ = sorted.length / 2;\n  const leftMedian = median(sorted.slice(0, middle));\n\
    \  const rightMedian = median(sorted.slice(middle));\n  return leftMedian + rightMedian\
    \ / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpdtloldgm.js:10\n    var sorted = l.slice().sort(function (a, b)\
    \ { return a - b; });\n                   ^\n\nRangeError: Maximum call stack\
    \ size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpdtloldgm.js:10:20)\n\
    \    at median (/tmp/tmpdtloldgm.js:16:23)\n    at median (/tmp/tmpdtloldgm.js:16:23)\n\
    \    at median (/tmp/tmpdtloldgm.js:16:23)\n    at median (/tmp/tmpdtloldgm.js:16:23)\n\
    \    at median (/tmp/tmpdtloldgm.js:16:23)\n    at median (/tmp/tmpdtloldgm.js:16:23)\n\
    \    at median (/tmp/tmpdtloldgm.js:16:23)\n    at median (/tmp/tmpdtloldgm.js:16:23)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738180
- exit_code: 2
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n\
    \  const m = n >> 1;\n  const mid = m >> 1;\n  const left = l[mid];\n  let right\
    \ = l[n - 1];\n  while (left < right) {\n    const mid2 = mid + 1;\n    const\
    \ mid3 = mid + 2;\n    if (mid3 > n) {\n      mid3 = n;\n    }\n    if (mid3 >=\
    \ mid2) {\n      left = mid + 1;\n    } else {\n      right = mid - 1;\n    }\n\
    \    const mid1 = mid + 1;\n    const mid4 = mid + 4;\n    if (mid4 > n) {\n \
    \     mid4 = n;\n    }\n    if (mid4 >= mid3) {\n      mid = mid + 1;\n    } else\
    \ {\n      mid = mid - 1;\n    }\n    if (left > right) {\n      left = mid -\
    \ 1;\n    } else {\n      right = mid + 1;\n    }\n  }\n  return left;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5x9ja9a0.ts(22,7): error TS2588: Cannot assign to
    ''mid3'' because it is a constant.

    ../../../../../tmp/tmp5x9ja9a0.ts(25,7): error TS2588: Cannot assign to ''left''
    because it is a constant.

    ../../../../../tmp/tmp5x9ja9a0.ts(32,7): error TS2588: Cannot assign to ''mid4''
    because it is a constant.

    ../../../../../tmp/tmp5x9ja9a0.ts(35,7): error TS2588: Cannot assign to ''mid''
    because it is a constant.

    ../../../../../tmp/tmp5x9ja9a0.ts(37,7): error TS2588: Cannot assign to ''mid''
    because it is a constant.

    ../../../../../tmp/tmp5x9ja9a0.ts(40,7): error TS2588: Cannot assign to ''left''
    because it is a constant.

    '
  timestamp: 1659738179
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpu3t65wed.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmpu3t65wed.js:8:15)\n    at median (/tmp/tmpu3t65wed.js:15:16)\n\
    \    at median (/tmp/tmpu3t65wed.js:15:16)\n    at median (/tmp/tmpu3t65wed.js:16:17)\n\
    \    at test (/tmp/tmpu3t65wed.js:22:22)\n    at Object.<anonymous> (/tmp/tmpu3t65wed.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpu3t65wed.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmpu3t65wed.js:8:15)\n    at median (/tmp/tmpu3t65wed.js:15:16)\n\
    \    at median (/tmp/tmpu3t65wed.js:15:16)\n    at median (/tmp/tmpu3t65wed.js:16:17)\n\
    \    at test (/tmp/tmpu3t65wed.js:22:22)\n    at Object.<anonymous> (/tmp/tmpu3t65wed.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const sorted: number[] = l.slice().sort((a,\
    \ b) => a - b);\n  let mid: number = sorted.length / 2;\n  if (sorted.length %\
    \ 2 === 0) {\n    mid = sorted.length / 2 - 1;\n  }\n  return sorted[mid];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmpxqlvu84m.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxqlvu84m.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738179
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmprplxq_sa.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmprplxq_sa.js:8:15)\n    at median (/tmp/tmprplxq_sa.js:14:16)\n\
    \    at median (/tmp/tmprplxq_sa.js:14:16)\n    at median (/tmp/tmprplxq_sa.js:15:17)\n\
    \    at test (/tmp/tmprplxq_sa.js:21:22)\n    at Object.<anonymous> (/tmp/tmprplxq_sa.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738179
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n\
    \  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n \
    \ const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpkl1ifoed.js:15\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpkl1ifoed.js:15:25)\n    at\
    \ median (/tmp/tmpkl1ifoed.js:16:17)\n    at median (/tmp/tmpkl1ifoed.js:16:17)\n\
    \    at median (/tmp/tmpkl1ifoed.js:16:17)\n    at median (/tmp/tmpkl1ifoed.js:16:17)\n\
    \    at median (/tmp/tmpkl1ifoed.js:16:17)\n    at median (/tmp/tmpkl1ifoed.js:16:17)\n\
    \    at median (/tmp/tmpkl1ifoed.js:16:17)\n    at median (/tmp/tmpkl1ifoed.js:16:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738175
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_g02bjee.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmp_g02bjee.js:8:15)\n    at median (/tmp/tmp_g02bjee.js:15:16)\n\
    \    at median (/tmp/tmp_g02bjee.js:15:16)\n    at median (/tmp/tmp_g02bjee.js:16:17)\n\
    \    at test (/tmp/tmp_g02bjee.js:22:22)\n    at Object.<anonymous> (/tmp/tmp_g02bjee.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2\
    \ - 1]\n  }\n  const mid = l.length / 2\n  const left = l.slice(0, mid)\n  const\
    \ right = l.slice(mid)\n  return median(left) + median(right)\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpozq3vbgg.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpozq3vbgg.js:11:18)\n    at median (/tmp/tmpozq3vbgg.js:13:27)\n\
    \    at median (/tmp/tmpozq3vbgg.js:13:27)\n    at median (/tmp/tmpozq3vbgg.js:13:27)\n\
    \    at median (/tmp/tmpozq3vbgg.js:13:27)\n    at median (/tmp/tmpozq3vbgg.js:13:27)\n\
    \    at median (/tmp/tmpozq3vbgg.js:13:27)\n    at median (/tmp/tmpozq3vbgg.js:13:27)\n\
    \    at median (/tmp/tmpozq3vbgg.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const mid = Math.floor(l.length / 2);\n\
    \  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  if (l[mid] >= 0) {\n\
    \    return median(l.slice(0, mid));\n  }\n  return median(l.slice(mid + 1));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpczs1h54p.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpczs1h54p.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738180
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp3y6cpmne.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp3y6cpmne.js:11:25)\n    at\
    \ median (/tmp/tmp3y6cpmne.js:12:17)\n    at median (/tmp/tmp3y6cpmne.js:12:17)\n\
    \    at median (/tmp/tmp3y6cpmne.js:12:17)\n    at median (/tmp/tmp3y6cpmne.js:12:17)\n\
    \    at median (/tmp/tmp3y6cpmne.js:12:17)\n    at median (/tmp/tmp3y6cpmne.js:12:17)\n\
    \    at median (/tmp/tmp3y6cpmne.js:12:17)\n    at median (/tmp/tmp3y6cpmne.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 2
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n === 1) {\n\
    \    return l[0];\n  }\n  if (n % 2 === 0) {\n    return median(l[Math.floor(n\
    \ / 2)]);\n  }\n  const mid = Math.floor(n / 2);\n  const left = median(l[mid]);\n\
    \  const right = median(l[n - mid]);\n  return left + right * 0.5;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg81135b1.ts(15,19): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''number[]''.

    ../../../../../tmp/tmpg81135b1.ts(18,23): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''number[]''.

    ../../../../../tmp/tmpg81135b1.ts(19,24): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''number[]''.

    '
  timestamp: 1659738179
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a: number, b: number) => a - b);\n  const len = sorted.length;\n\
    \  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle\
    \ = Math.floor(len / 2);\n  const median1 = sorted[middle];\n  const median2 =\
    \ sorted[middle + 1];\n  return median1 + (median2 - median1) / 2;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpcg5ywtxo.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcg5ywtxo.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738180
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const sorted = l.slice().sort((a, b) =>\
    \ a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len\
    \ - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmp2atd8qon.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2atd8qon.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738180
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    const mid = l.length /\
    \ 2;\n    const left = l.slice(0, mid);\n    const right = l.slice(mid);\n   \
    \ return median(left) + median(right);\n  }\n  return Math.ceil(l.length / 2);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmp26r1lat0.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp26r1lat0.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738180
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = Math.floor(l.length / 2);\n  const left = l.slice(0,\
    \ mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpe5_0ev9h.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpe5_0ev9h.js:11:18)\n    at median (/tmp/tmpe5_0ev9h.js:13:27)\n\
    \    at median (/tmp/tmpe5_0ev9h.js:13:27)\n    at median (/tmp/tmpe5_0ev9h.js:13:27)\n\
    \    at median (/tmp/tmpe5_0ev9h.js:13:27)\n    at median (/tmp/tmpe5_0ev9h.js:13:27)\n\
    \    at median (/tmp/tmpe5_0ev9h.js:13:27)\n    at median (/tmp/tmpe5_0ev9h.js:13:27)\n\
    \    at median (/tmp/tmpe5_0ev9h.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738180
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  const n = l.length;\n  if (n < 1) return undefined;\n\
    \  if (n === 1) return l[0];\n\n  const mid = Math.floor(n / 2);\n  const left\
    \ = l.slice(0, mid);\n  const right = l.slice(mid);\n\n  return median(left) +\
    \ median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpox_rmkmu.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox_rmkmu.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738180
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n\
    \  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right\
    \ = median(l.slice(half));\n  return left + right;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp3slsv0z1.js:15\n    var left = median(l.slice(0, half));\n    \
    \                    ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp3slsv0z1.js:15:25)\n    at\
    \ median (/tmp/tmp3slsv0z1.js:16:17)\n    at median (/tmp/tmp3slsv0z1.js:16:17)\n\
    \    at median (/tmp/tmp3slsv0z1.js:16:17)\n    at median (/tmp/tmp3slsv0z1.js:16:17)\n\
    \    at median (/tmp/tmp3slsv0z1.js:16:17)\n    at median (/tmp/tmp3slsv0z1.js:16:17)\n\
    \    at median (/tmp/tmp3slsv0z1.js:16:17)\n    at median (/tmp/tmp3slsv0z1.js:16:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738175
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp2lihuhof.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp2lihuhof.js:14:25)\n    at\
    \ median (/tmp/tmp2lihuhof.js:15:17)\n    at median (/tmp/tmp2lihuhof.js:15:17)\n\
    \    at median (/tmp/tmp2lihuhof.js:15:17)\n    at median (/tmp/tmp2lihuhof.js:15:17)\n\
    \    at median (/tmp/tmp2lihuhof.js:15:17)\n    at median (/tmp/tmp2lihuhof.js:15:17)\n\
    \    at median (/tmp/tmp2lihuhof.js:15:17)\n    at median (/tmp/tmp2lihuhof.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return l.length / 2 > mid ? left : right;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnuga0l8b.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpnuga0l8b.js:14:25)\n    at\
    \ median (/tmp/tmpnuga0l8b.js:15:17)\n    at median (/tmp/tmpnuga0l8b.js:15:17)\n\
    \    at median (/tmp/tmpnuga0l8b.js:15:17)\n    at median (/tmp/tmpnuga0l8b.js:15:17)\n\
    \    at median (/tmp/tmpnuga0l8b.js:15:17)\n    at median (/tmp/tmpnuga0l8b.js:15:17)\n\
    \    at median (/tmp/tmpnuga0l8b.js:15:17)\n    at median (/tmp/tmpnuga0l8b.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738180
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length <= 1) return l[0];\n  const mid = l.length\
    \ / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpteg84gpo.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpteg84gpo.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  const n = l.length;\n  if (n < 2) {\n    return l[0];\n\
    \  }\n  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp8nwqjemi.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8nwqjemi.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738180
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpu3t65wed.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmpu3t65wed.js:8:15)\n    at median (/tmp/tmpu3t65wed.js:15:16)\n\
    \    at median (/tmp/tmpu3t65wed.js:15:16)\n    at median (/tmp/tmpu3t65wed.js:16:17)\n\
    \    at test (/tmp/tmpu3t65wed.js:22:22)\n    at Object.<anonymous> (/tmp/tmpu3t65wed.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  l.sort((a, b) => a - b);\n  const mid =\
    \ l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return\
    \ (l[mid] + l[mid-1]) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpwru3rag_.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwru3rag_.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    const mid = l.length /\
    \ 2;\n    const left = median(l.slice(0, mid));\n    const right = median(l.slice(mid));\n\
    \    return Math.ceil((left + right) / 2);\n  }\n  return l[Math.floor(l.length\
    \ / 2)];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp_u5ffctw.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_u5ffctw.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738180
- exit_code: 2
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n\
    \  const half = n / 2;\n  let i = 0;\n  let m = 0;\n  while (i < half) {\n   \
    \ m = l[i];\n    i++;\n  }\n  while (i < n) {\n    m = l[i];\n    i++;\n    if\
    \ (m > l[half]) {\n      m = l[half];\n    }\n    half--;\n  }\n  return m;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbn5nzslf.ts(27,5): error TS2588: Cannot assign to
    ''half'' because it is a constant.

    '
  timestamp: 1659738180
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpu3t65wed.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmpu3t65wed.js:8:15)\n    at median (/tmp/tmpu3t65wed.js:15:16)\n\
    \    at median (/tmp/tmpu3t65wed.js:15:16)\n    at median (/tmp/tmpu3t65wed.js:16:17)\n\
    \    at test (/tmp/tmpu3t65wed.js:22:22)\n    at Object.<anonymous> (/tmp/tmpu3t65wed.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp3y6cpmne.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp3y6cpmne.js:11:25)\n    at\
    \ median (/tmp/tmp3y6cpmne.js:12:17)\n    at median (/tmp/tmp3y6cpmne.js:12:17)\n\
    \    at median (/tmp/tmp3y6cpmne.js:12:17)\n    at median (/tmp/tmp3y6cpmne.js:12:17)\n\
    \    at median (/tmp/tmp3y6cpmne.js:12:17)\n    at median (/tmp/tmp3y6cpmne.js:12:17)\n\
    \    at median (/tmp/tmp3y6cpmne.js:12:17)\n    at median (/tmp/tmp3y6cpmne.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot compute\
    \ median of an empty array');\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpt5wxvmm4.js:8\n        throw new Error('Cannot compute median of\
    \ an empty array');\n        ^\n\nError: Cannot compute median of an empty array\n\
    \    at median (/tmp/tmpt5wxvmm4.js:8:15)\n    at median (/tmp/tmpt5wxvmm4.js:15:16)\n\
    \    at median (/tmp/tmpt5wxvmm4.js:15:16)\n    at median (/tmp/tmpt5wxvmm4.js:16:17)\n\
    \    at test (/tmp/tmpt5wxvmm4.js:22:22)\n    at Object.<anonymous> (/tmp/tmpt5wxvmm4.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738180
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n\
    \  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right\
    \ = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmps3okomx1.js:15\n    var left = median(l.slice(0, half));\n    \
    \                    ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmps3okomx1.js:15:25)\n    at\
    \ median (/tmp/tmps3okomx1.js:16:17)\n    at median (/tmp/tmps3okomx1.js:16:17)\n\
    \    at median (/tmp/tmps3okomx1.js:16:17)\n    at median (/tmp/tmps3okomx1.js:16:17)\n\
    \    at median (/tmp/tmps3okomx1.js:16:17)\n    at median (/tmp/tmps3okomx1.js:16:17)\n\
    \    at median (/tmp/tmps3okomx1.js:16:17)\n    at median (/tmp/tmps3okomx1.js:16:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const sorted = l.slice().sort((a: number,\
    \ b: number) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n\
    \    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n\
    \  const median1 = sorted[middle];\n  const median2 = sorted[middle + 1];\n  return\
    \ median1 + median2 / (len / 2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4.6\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpznx2s49v.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpznx2s49v.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4.6,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738180
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2) {\n    return l[mid];\n  }\n  const\
    \ left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return\
    \ ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmpgsj114px.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgsj114px.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738175
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = Math.floor(l.length / 2);\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2)\
    \ | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpivi_sc16.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpivi_sc16.js:11:25)\n    at\
    \ median (/tmp/tmpivi_sc16.js:12:17)\n    at median (/tmp/tmpivi_sc16.js:12:17)\n\
    \    at median (/tmp/tmpivi_sc16.js:12:17)\n    at median (/tmp/tmpivi_sc16.js:12:17)\n\
    \    at median (/tmp/tmpivi_sc16.js:12:17)\n    at median (/tmp/tmpivi_sc16.js:12:17)\n\
    \    at median (/tmp/tmpivi_sc16.js:12:17)\n    at median (/tmp/tmpivi_sc16.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738180
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2\
    \ - 1]\n  }\n  const mid = l.length / 2\n  const left = l.slice(0, mid)\n  const\
    \ right = l.slice(mid)\n  return median(left) + median(right)\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpozq3vbgg.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpozq3vbgg.js:11:18)\n    at median (/tmp/tmpozq3vbgg.js:13:27)\n\
    \    at median (/tmp/tmpozq3vbgg.js:13:27)\n    at median (/tmp/tmpozq3vbgg.js:13:27)\n\
    \    at median (/tmp/tmpozq3vbgg.js:13:27)\n    at median (/tmp/tmpozq3vbgg.js:13:27)\n\
    \    at median (/tmp/tmpozq3vbgg.js:13:27)\n    at median (/tmp/tmpozq3vbgg.js:13:27)\n\
    \    at median (/tmp/tmpozq3vbgg.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n\
    \  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmplrh4c4dm.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmplrh4c4dm.js:11:18)\n    at median (/tmp/tmplrh4c4dm.js:13:27)\n\
    \    at median (/tmp/tmplrh4c4dm.js:13:27)\n    at median (/tmp/tmplrh4c4dm.js:13:27)\n\
    \    at median (/tmp/tmplrh4c4dm.js:13:27)\n    at median (/tmp/tmplrh4c4dm.js:13:27)\n\
    \    at median (/tmp/tmplrh4c4dm.js:13:27)\n    at median (/tmp/tmplrh4c4dm.js:13:27)\n\
    \    at median (/tmp/tmplrh4c4dm.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738175
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = Math.floor(n / 2);\n\
    \  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n\
    \  return left + right * 0.5;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpt9mw0ga_.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmpt9mw0ga_.js:8:15)\n    at median (/tmp/tmpt9mw0ga_.js:15:16)\n\
    \    at median (/tmp/tmpt9mw0ga_.js:15:16)\n    at median (/tmp/tmpt9mw0ga_.js:16:17)\n\
    \    at test (/tmp/tmpt9mw0ga_.js:22:22)\n    at Object.<anonymous> (/tmp/tmpt9mw0ga_.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738180
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const sortedArray = l.slice().sort((a,\
    \ b) => a - b);\n  const middle = Math.floor(sortedArray.length / 2);\n  if (sortedArray.length\
    \ % 2 === 0) {\n    return sortedArray[middle];\n  }\n  return sortedArray[middle\
    \ - 1] + sortedArray[middle];\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpbrjpb8v8.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbrjpb8v8.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 2
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n === 1) {\n\
    \    return l[0];\n  }\n  const mid = Math.floor(n / 2);\n  if (n % 2) {\n   \
    \ return median(l[mid]);\n  }\n  return median(l[mid], l[n - 1]);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6w763bnl.ts(16,19): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''number[]''.

    ../../../../../tmp/tmp6w763bnl.ts(18,25): error TS2554: Expected 1 arguments,
    but got 2.

    '
  timestamp: 1659738180
- exit_code: 2
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n === 1) {\n\
    \    return l[0];\n  }\n  const half = n / 2;\n  if (n % 2) {\n    return median(l[half])\
    \ < median(l[half - 1]) ? l[half] : l[half - 1];\n  }\n  return median(l[half]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj7rp3j_8.ts(16,19): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''number[]''.

    ../../../../../tmp/tmpj7rp3j_8.ts(16,37): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''number[]''.

    ../../../../../tmp/tmpj7rp3j_8.ts(18,17): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''number[]''.

    '
  timestamp: 1659738180
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len\
    \ / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmpj1i9cgl0.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj1i9cgl0.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738180
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2\
    \ - 1]\n  }\n  const mid = l.length / 2\n  const left = l.slice(0, mid)\n  const\
    \ right = l.slice(mid)\n  return median(left) + median(right)\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpozq3vbgg.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpozq3vbgg.js:11:18)\n    at median (/tmp/tmpozq3vbgg.js:13:27)\n\
    \    at median (/tmp/tmpozq3vbgg.js:13:27)\n    at median (/tmp/tmpozq3vbgg.js:13:27)\n\
    \    at median (/tmp/tmpozq3vbgg.js:13:27)\n    at median (/tmp/tmpozq3vbgg.js:13:27)\n\
    \    at median (/tmp/tmpozq3vbgg.js:13:27)\n    at median (/tmp/tmpozq3vbgg.js:13:27)\n\
    \    at median (/tmp/tmpozq3vbgg.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return l.length / 2 > mid ? right :\
    \ left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp334uz1we.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmp334uz1we.js:8:15)\n    at median (/tmp/tmp334uz1we.js:14:16)\n\
    \    at median (/tmp/tmp334uz1we.js:14:16)\n    at median (/tmp/tmp334uz1we.js:15:17)\n\
    \    at test (/tmp/tmp334uz1we.js:21:22)\n    at Object.<anonymous> (/tmp/tmp334uz1we.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738184
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmprplxq_sa.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmprplxq_sa.js:8:15)\n    at median (/tmp/tmprplxq_sa.js:14:16)\n\
    \    at median (/tmp/tmprplxq_sa.js:14:16)\n    at median (/tmp/tmprplxq_sa.js:15:17)\n\
    \    at test (/tmp/tmprplxq_sa.js:21:22)\n    at Object.<anonymous> (/tmp/tmprplxq_sa.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738179
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const mid = l.length / 2;\n  const sorted\
    \ = l.slice().sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return\
    \ sorted[mid];\n  }\n  const medianOfTwo = sorted[mid];\n  return medianOfTwo\
    \ + (sorted[mid-1] + sorted[mid+1]) / 2;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpa03x4w_j.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpa03x4w_j.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738184
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n\
    \  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpq8yslhzs.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpq8yslhzs.js:11:18)\n    at median (/tmp/tmpq8yslhzs.js:13:27)\n\
    \    at median (/tmp/tmpq8yslhzs.js:13:27)\n    at median (/tmp/tmpq8yslhzs.js:13:27)\n\
    \    at median (/tmp/tmpq8yslhzs.js:13:27)\n    at median (/tmp/tmpq8yslhzs.js:13:27)\n\
    \    at median (/tmp/tmpq8yslhzs.js:13:27)\n    at median (/tmp/tmpq8yslhzs.js:13:27)\n\
    \    at median (/tmp/tmpq8yslhzs.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len\
    \ / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmpj1i9cgl0.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj1i9cgl0.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738180
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = Math.floor(l.length / 2);\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return Math.ceil((left + right)\
    \ / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp0xy35xl5.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp0xy35xl5.js:11:25)\n    at\
    \ median (/tmp/tmp0xy35xl5.js:12:17)\n    at median (/tmp/tmp0xy35xl5.js:12:17)\n\
    \    at median (/tmp/tmp0xy35xl5.js:12:17)\n    at median (/tmp/tmp0xy35xl5.js:12:17)\n\
    \    at median (/tmp/tmp0xy35xl5.js:12:17)\n    at median (/tmp/tmp0xy35xl5.js:12:17)\n\
    \    at median (/tmp/tmp0xy35xl5.js:12:17)\n    at median (/tmp/tmp0xy35xl5.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738184
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  const n = l.length\n  if (n < 2) return l[0]\n  const\
    \ mid = n >> 1\n  const a = l[mid]\n  const b = l[n - 1]\n  const c = l[n - 2]\n\
    \  const d = (a + b + c) / 3\n  return d > 0 ? d : median([a, b, c])\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.6666666666666665\n\
    \nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpmcoluh5x.js:20:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpmcoluh5x.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.6666666666666665,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738185
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmimh_is4.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpmimh_is4.js:14:25)\n    at\
    \ median (/tmp/tmpmimh_is4.js:15:17)\n    at median (/tmp/tmpmimh_is4.js:15:17)\n\
    \    at median (/tmp/tmpmimh_is4.js:15:17)\n    at median (/tmp/tmpmimh_is4.js:15:17)\n\
    \    at median (/tmp/tmpmimh_is4.js:15:17)\n    at median (/tmp/tmpmimh_is4.js:15:17)\n\
    \    at median (/tmp/tmpmimh_is4.js:15:17)\n    at median (/tmp/tmpmimh_is4.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738184
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2\
    \ - 1]\n  }\n  const mid = l.length / 2\n  const left = l.slice(0, mid)\n  const\
    \ right = l.slice(mid)\n  return median(left) + median(right)\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpozq3vbgg.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpozq3vbgg.js:11:18)\n    at median (/tmp/tmpozq3vbgg.js:13:27)\n\
    \    at median (/tmp/tmpozq3vbgg.js:13:27)\n    at median (/tmp/tmpozq3vbgg.js:13:27)\n\
    \    at median (/tmp/tmpozq3vbgg.js:13:27)\n    at median (/tmp/tmpozq3vbgg.js:13:27)\n\
    \    at median (/tmp/tmpozq3vbgg.js:13:27)\n    at median (/tmp/tmpozq3vbgg.js:13:27)\n\
    \    at median (/tmp/tmpozq3vbgg.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmimh_is4.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpmimh_is4.js:14:25)\n    at\
    \ median (/tmp/tmpmimh_is4.js:15:17)\n    at median (/tmp/tmpmimh_is4.js:15:17)\n\
    \    at median (/tmp/tmpmimh_is4.js:15:17)\n    at median (/tmp/tmpmimh_is4.js:15:17)\n\
    \    at median (/tmp/tmpmimh_is4.js:15:17)\n    at median (/tmp/tmpmimh_is4.js:15:17)\n\
    \    at median (/tmp/tmpmimh_is4.js:15:17)\n    at median (/tmp/tmpmimh_is4.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738184
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const mid = Math.floor(l.length / 2);\n\
    \  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  if (l[mid] >= l[mid+1])\
    \ {\n    return l[mid];\n  }\n  return l[mid+1];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpek06eat0.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpek06eat0.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738184
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const sorted = l.slice().sort((a, b) =>\
    \ a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len\
    \ / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const medianOfMiddle\
    \ = median(sorted.slice(0, middle));\n  const medianOfRest = median(sorted.slice(middle));\n\
    \  return medianOfMiddle + medianOfRest;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp7ls10rv6.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmp7ls10rv6.js:8:15)\n    at median (/tmp/tmp7ls10rv6.js:16:26)\n\
    \    at median (/tmp/tmp7ls10rv6.js:16:26)\n    at median (/tmp/tmp7ls10rv6.js:17:24)\n\
    \    at test (/tmp/tmp7ls10rv6.js:23:22)\n    at Object.<anonymous> (/tmp/tmp7ls10rv6.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738184
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n\
    \  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmplrh4c4dm.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmplrh4c4dm.js:11:18)\n    at median (/tmp/tmplrh4c4dm.js:13:27)\n\
    \    at median (/tmp/tmplrh4c4dm.js:13:27)\n    at median (/tmp/tmplrh4c4dm.js:13:27)\n\
    \    at median (/tmp/tmplrh4c4dm.js:13:27)\n    at median (/tmp/tmplrh4c4dm.js:13:27)\n\
    \    at median (/tmp/tmplrh4c4dm.js:13:27)\n    at median (/tmp/tmplrh4c4dm.js:13:27)\n\
    \    at median (/tmp/tmplrh4c4dm.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738175
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2\
    \ - 1]\n  }\n  const mid = l.length / 2\n  const left = l.slice(0, mid)\n  const\
    \ right = l.slice(mid)\n  return median(left) + median(right)\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpozq3vbgg.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpozq3vbgg.js:11:18)\n    at median (/tmp/tmpozq3vbgg.js:13:27)\n\
    \    at median (/tmp/tmpozq3vbgg.js:13:27)\n    at median (/tmp/tmpozq3vbgg.js:13:27)\n\
    \    at median (/tmp/tmpozq3vbgg.js:13:27)\n    at median (/tmp/tmpozq3vbgg.js:13:27)\n\
    \    at median (/tmp/tmpozq3vbgg.js:13:27)\n    at median (/tmp/tmpozq3vbgg.js:13:27)\n\
    \    at median (/tmp/tmpozq3vbgg.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const mid = Math.floor(n / 2);\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return left + right / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp0amqnrg_.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmp0amqnrg_.js:8:15)\n    at median (/tmp/tmp0amqnrg_.js:15:16)\n\
    \    at median (/tmp/tmp0amqnrg_.js:15:16)\n    at median (/tmp/tmp0amqnrg_.js:16:17)\n\
    \    at test (/tmp/tmp0amqnrg_.js:22:22)\n    at Object.<anonymous> (/tmp/tmp0amqnrg_.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738184
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return left + right;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpvot8sbfe.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpvot8sbfe.js:11:25)\n    at\
    \ median (/tmp/tmpvot8sbfe.js:12:17)\n    at median (/tmp/tmpvot8sbfe.js:12:17)\n\
    \    at median (/tmp/tmpvot8sbfe.js:12:17)\n    at median (/tmp/tmpvot8sbfe.js:12:17)\n\
    \    at median (/tmp/tmpvot8sbfe.js:12:17)\n    at median (/tmp/tmpvot8sbfe.js:12:17)\n\
    \    at median (/tmp/tmpvot8sbfe.js:12:17)\n    at median (/tmp/tmpvot8sbfe.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738185
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const middle = Math.floor(l.length / 2);\n  const left = l.slice(0,\
    \ middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpvsdaodsd.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmpvsdaodsd.js:11:18)\n    at median (/tmp/tmpvsdaodsd.js:13:27)\n\
    \    at median (/tmp/tmpvsdaodsd.js:13:27)\n    at median (/tmp/tmpvsdaodsd.js:13:27)\n\
    \    at median (/tmp/tmpvsdaodsd.js:13:27)\n    at median (/tmp/tmpvsdaodsd.js:13:27)\n\
    \    at median (/tmp/tmpvsdaodsd.js:13:27)\n    at median (/tmp/tmpvsdaodsd.js:13:27)\n\
    \    at median (/tmp/tmpvsdaodsd.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738185
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  const sorted = l.slice().sort((a, b) => a - b);\n  if\
    \ (sorted.length % 2 === 0) {\n    return sorted[mid];\n  }\n  return sorted[mid]\
    \ + (sorted[mid + 1] - sorted[mid]) / 2;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmp0i1m0lr8.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0i1m0lr8.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738185
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  const n = l.length;\n  if (n < 2) {\n    return l[0];\n\
    \  }\n  const mid = Math.floor(n / 2);\n  const left = l.slice(0, mid);\n  const\
    \ right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp68qywvyb.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp68qywvyb.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738175
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len\
    \ / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmpj1i9cgl0.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj1i9cgl0.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738180
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot compute\
    \ median of an empty array');\n  }\n  const sorted = l.slice().sort((a, b) =>\
    \ a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len\
    \ / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle];\n\
    \  const median2 = sorted[middle + 1];\n  return (median1 + median2) / 2;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpu4bjm51g.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpu4bjm51g.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738185
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  if (l.length === 1) {\n    return l[0];\n\
    \  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n  const\
    \ right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpd5jhdk1u.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpd5jhdk1u.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738185
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot compute\
    \ median of an empty array');\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp7hwboh4x.js:8\n        throw new Error('Cannot compute median of\
    \ an empty array');\n        ^\n\nError: Cannot compute median of an empty array\n\
    \    at median (/tmp/tmp7hwboh4x.js:8:15)\n    at median (/tmp/tmp7hwboh4x.js:15:16)\n\
    \    at median (/tmp/tmp7hwboh4x.js:15:16)\n    at median (/tmp/tmp7hwboh4x.js:16:17)\n\
    \    at test (/tmp/tmp7hwboh4x.js:22:22)\n    at Object.<anonymous> (/tmp/tmp7hwboh4x.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return left + right;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpvot8sbfe.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpvot8sbfe.js:11:25)\n    at\
    \ median (/tmp/tmpvot8sbfe.js:12:17)\n    at median (/tmp/tmpvot8sbfe.js:12:17)\n\
    \    at median (/tmp/tmpvot8sbfe.js:12:17)\n    at median (/tmp/tmpvot8sbfe.js:12:17)\n\
    \    at median (/tmp/tmpvot8sbfe.js:12:17)\n    at median (/tmp/tmpvot8sbfe.js:12:17)\n\
    \    at median (/tmp/tmpvot8sbfe.js:12:17)\n    at median (/tmp/tmpvot8sbfe.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738185
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_g02bjee.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmp_g02bjee.js:8:15)\n    at median (/tmp/tmp_g02bjee.js:15:16)\n\
    \    at median (/tmp/tmp_g02bjee.js:15:16)\n    at median (/tmp/tmp_g02bjee.js:16:17)\n\
    \    at test (/tmp/tmp_g02bjee.js:22:22)\n    at Object.<anonymous> (/tmp/tmp_g02bjee.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n\
    \  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right\
    \ = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmps3okomx1.js:15\n    var left = median(l.slice(0, half));\n    \
    \                    ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmps3okomx1.js:15:25)\n    at\
    \ median (/tmp/tmps3okomx1.js:16:17)\n    at median (/tmp/tmps3okomx1.js:16:17)\n\
    \    at median (/tmp/tmps3okomx1.js:16:17)\n    at median (/tmp/tmps3okomx1.js:16:17)\n\
    \    at median (/tmp/tmps3okomx1.js:16:17)\n    at median (/tmp/tmps3okomx1.js:16:17)\n\
    \    at median (/tmp/tmps3okomx1.js:16:17)\n    at median (/tmp/tmps3okomx1.js:16:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2\
    \ - 1]\n  }\n  const mid = l.length / 2\n  const left = l.slice(0, mid)\n  const\
    \ right = l.slice(mid)\n  return median(left) + median(right)\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpozq3vbgg.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpozq3vbgg.js:11:18)\n    at median (/tmp/tmpozq3vbgg.js:13:27)\n\
    \    at median (/tmp/tmpozq3vbgg.js:13:27)\n    at median (/tmp/tmpozq3vbgg.js:13:27)\n\
    \    at median (/tmp/tmpozq3vbgg.js:13:27)\n    at median (/tmp/tmpozq3vbgg.js:13:27)\n\
    \    at median (/tmp/tmpozq3vbgg.js:13:27)\n    at median (/tmp/tmpozq3vbgg.js:13:27)\n\
    \    at median (/tmp/tmpozq3vbgg.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n\
    \  const half = Math.floor(n / 2);\n  const left = median(l.slice(0, half));\n\
    \  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpjv7ngj6e.js:15\n    var left = median(l.slice(0, half));\n    \
    \                    ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpjv7ngj6e.js:15:25)\n    at\
    \ median (/tmp/tmpjv7ngj6e.js:16:17)\n    at median (/tmp/tmpjv7ngj6e.js:16:17)\n\
    \    at median (/tmp/tmpjv7ngj6e.js:16:17)\n    at median (/tmp/tmpjv7ngj6e.js:16:17)\n\
    \    at median (/tmp/tmpjv7ngj6e.js:16:17)\n    at median (/tmp/tmpjv7ngj6e.js:16:17)\n\
    \    at median (/tmp/tmpjv7ngj6e.js:16:17)\n    at median (/tmp/tmpjv7ngj6e.js:16:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738185
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmimh_is4.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpmimh_is4.js:14:25)\n    at\
    \ median (/tmp/tmpmimh_is4.js:15:17)\n    at median (/tmp/tmpmimh_is4.js:15:17)\n\
    \    at median (/tmp/tmpmimh_is4.js:15:17)\n    at median (/tmp/tmpmimh_is4.js:15:17)\n\
    \    at median (/tmp/tmpmimh_is4.js:15:17)\n    at median (/tmp/tmpmimh_is4.js:15:17)\n\
    \    at median (/tmp/tmpmimh_is4.js:15:17)\n    at median (/tmp/tmpmimh_is4.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738184
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  if (l.length === 1) {\n    return l[0];\n\
    \  }\n  const mid = Math.floor(l.length / 2);\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2.625\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpwaoq5td6.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwaoq5td6.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2.625,\n \
    \ expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738185
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n\
    \  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right\
    \ = median(l.slice(half));\n  return ((left as number) * (right as number)) /\
    \ ((left + right) as number);\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp89tletic.js:15\n    var left = median(l.slice(0, half));\n    \
    \                    ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp89tletic.js:15:25)\n    at\
    \ median (/tmp/tmp89tletic.js:16:17)\n    at median (/tmp/tmp89tletic.js:16:17)\n\
    \    at median (/tmp/tmp89tletic.js:16:17)\n    at median (/tmp/tmp89tletic.js:16:17)\n\
    \    at median (/tmp/tmp89tletic.js:16:17)\n    at median (/tmp/tmp89tletic.js:16:17)\n\
    \    at median (/tmp/tmp89tletic.js:16:17)\n    at median (/tmp/tmp89tletic.js:16:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738185
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_g02bjee.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmp_g02bjee.js:8:15)\n    at median (/tmp/tmp_g02bjee.js:15:16)\n\
    \    at median (/tmp/tmp_g02bjee.js:15:16)\n    at median (/tmp/tmp_g02bjee.js:16:17)\n\
    \    at test (/tmp/tmp_g02bjee.js:22:22)\n    at Object.<anonymous> (/tmp/tmp_g02bjee.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n\
    \  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n\
    \  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmimh_is4.js:14\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpmimh_is4.js:14:25)\n    at\
    \ median (/tmp/tmpmimh_is4.js:15:17)\n    at median (/tmp/tmpmimh_is4.js:15:17)\n\
    \    at median (/tmp/tmpmimh_is4.js:15:17)\n    at median (/tmp/tmpmimh_is4.js:15:17)\n\
    \    at median (/tmp/tmpmimh_is4.js:15:17)\n    at median (/tmp/tmpmimh_is4.js:15:17)\n\
    \    at median (/tmp/tmpmimh_is4.js:15:17)\n    at median (/tmp/tmpmimh_is4.js:15:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738184
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = l.slice(0, mid);\n\
    \  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmph0vt632h.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmph0vt632h.js:11:18)\n    at median (/tmp/tmph0vt632h.js:13:27)\n\
    \    at median (/tmp/tmph0vt632h.js:13:27)\n    at median (/tmp/tmph0vt632h.js:13:27)\n\
    \    at median (/tmp/tmph0vt632h.js:13:27)\n    at median (/tmp/tmph0vt632h.js:13:27)\n\
    \    at median (/tmp/tmph0vt632h.js:13:27)\n    at median (/tmp/tmph0vt632h.js:13:27)\n\
    \    at median (/tmp/tmph0vt632h.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpu3t65wed.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmpu3t65wed.js:8:15)\n    at median (/tmp/tmpu3t65wed.js:15:16)\n\
    \    at median (/tmp/tmpu3t65wed.js:15:16)\n    at median (/tmp/tmpu3t65wed.js:16:17)\n\
    \    at test (/tmp/tmpu3t65wed.js:22:22)\n    at Object.<anonymous> (/tmp/tmpu3t65wed.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp80_z3bkl.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmp80_z3bkl.js:8:15)\n    at median (/tmp/tmp80_z3bkl.js:14:16)\n\
    \    at median (/tmp/tmp80_z3bkl.js:14:16)\n    at median (/tmp/tmp80_z3bkl.js:15:17)\n\
    \    at test (/tmp/tmp80_z3bkl.js:21:22)\n    at Object.<anonymous> (/tmp/tmp80_z3bkl.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n\
    \  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n \
    \ const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpkl1ifoed.js:15\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpkl1ifoed.js:15:25)\n    at\
    \ median (/tmp/tmpkl1ifoed.js:16:17)\n    at median (/tmp/tmpkl1ifoed.js:16:17)\n\
    \    at median (/tmp/tmpkl1ifoed.js:16:17)\n    at median (/tmp/tmpkl1ifoed.js:16:17)\n\
    \    at median (/tmp/tmpkl1ifoed.js:16:17)\n    at median (/tmp/tmpkl1ifoed.js:16:17)\n\
    \    at median (/tmp/tmpkl1ifoed.js:16:17)\n    at median (/tmp/tmpkl1ifoed.js:16:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738175
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  l.sort((a, b) => a - b);\n  const mid =\
    \ l.length / 2;\n  return l[mid];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmp9iwerdas.js:17:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9iwerdas.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738185
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n\
    \  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n \
    \ const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpn4wb_zqt.js:15\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpn4wb_zqt.js:15:25)\n    at\
    \ median (/tmp/tmpn4wb_zqt.js:16:17)\n    at median (/tmp/tmpn4wb_zqt.js:16:17)\n\
    \    at median (/tmp/tmpn4wb_zqt.js:16:17)\n    at median (/tmp/tmpn4wb_zqt.js:16:17)\n\
    \    at median (/tmp/tmpn4wb_zqt.js:16:17)\n    at median (/tmp/tmpn4wb_zqt.js:16:17)\n\
    \    at median (/tmp/tmpn4wb_zqt.js:16:17)\n    at median (/tmp/tmpn4wb_zqt.js:16:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738185
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_l9pwr7t.js:8\n        throw new Error(\"Cannot compute median\
    \ of an empty array\");\n        ^\n\nError: Cannot compute median of an empty\
    \ array\n    at median (/tmp/tmp_l9pwr7t.js:8:15)\n    at median (/tmp/tmp_l9pwr7t.js:15:16)\n\
    \    at median (/tmp/tmp_l9pwr7t.js:15:16)\n    at median (/tmp/tmp_l9pwr7t.js:16:17)\n\
    \    at test (/tmp/tmp_l9pwr7t.js:22:22)\n    at Object.<anonymous> (/tmp/tmp_l9pwr7t.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return left + right;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpm1ypoa1q.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpm1ypoa1q.js:11:25)\n    at\
    \ median (/tmp/tmpm1ypoa1q.js:12:17)\n    at median (/tmp/tmpm1ypoa1q.js:12:17)\n\
    \    at median (/tmp/tmpm1ypoa1q.js:12:17)\n    at median (/tmp/tmpm1ypoa1q.js:12:17)\n\
    \    at median (/tmp/tmpm1ypoa1q.js:12:17)\n    at median (/tmp/tmpm1ypoa1q.js:12:17)\n\
    \    at median (/tmp/tmpm1ypoa1q.js:12:17)\n    at median (/tmp/tmpm1ypoa1q.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738175
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n\
    \  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpdovq9rnu.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpdovq9rnu.js:11:18)\n    at median (/tmp/tmpdovq9rnu.js:13:27)\n\
    \    at median (/tmp/tmpdovq9rnu.js:13:27)\n    at median (/tmp/tmpdovq9rnu.js:13:27)\n\
    \    at median (/tmp/tmpdovq9rnu.js:13:27)\n    at median (/tmp/tmpdovq9rnu.js:13:27)\n\
    \    at median (/tmp/tmpdovq9rnu.js:13:27)\n    at median (/tmp/tmpdovq9rnu.js:13:27)\n\
    \    at median (/tmp/tmpdovq9rnu.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return left + right;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpm1ypoa1q.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpm1ypoa1q.js:11:25)\n    at\
    \ median (/tmp/tmpm1ypoa1q.js:12:17)\n    at median (/tmp/tmpm1ypoa1q.js:12:17)\n\
    \    at median (/tmp/tmpm1ypoa1q.js:12:17)\n    at median (/tmp/tmpm1ypoa1q.js:12:17)\n\
    \    at median (/tmp/tmpm1ypoa1q.js:12:17)\n    at median (/tmp/tmpm1ypoa1q.js:12:17)\n\
    \    at median (/tmp/tmpm1ypoa1q.js:12:17)\n    at median (/tmp/tmpm1ypoa1q.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738175
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n\
    \  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpv6bliouc.js:11\n    var left = l.slice(0, middle);\n          \
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice\
    \ (<anonymous>)\n    at median (/tmp/tmpv6bliouc.js:11:18)\n    at median (/tmp/tmpv6bliouc.js:13:27)\n\
    \    at median (/tmp/tmpv6bliouc.js:13:27)\n    at median (/tmp/tmpv6bliouc.js:13:27)\n\
    \    at median (/tmp/tmpv6bliouc.js:13:27)\n    at median (/tmp/tmpv6bliouc.js:13:27)\n\
    \    at median (/tmp/tmpv6bliouc.js:13:27)\n    at median (/tmp/tmpv6bliouc.js:13:27)\n\
    \    at median (/tmp/tmpv6bliouc.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738175
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n\
    \  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpdovq9rnu.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmpdovq9rnu.js:11:18)\n    at median (/tmp/tmpdovq9rnu.js:13:27)\n\
    \    at median (/tmp/tmpdovq9rnu.js:13:27)\n    at median (/tmp/tmpdovq9rnu.js:13:27)\n\
    \    at median (/tmp/tmpdovq9rnu.js:13:27)\n    at median (/tmp/tmpdovq9rnu.js:13:27)\n\
    \    at median (/tmp/tmpdovq9rnu.js:13:27)\n    at median (/tmp/tmpdovq9rnu.js:13:27)\n\
    \    at median (/tmp/tmpdovq9rnu.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if\
    \ (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle =\
    \ Math.floor(len / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle\
    \ + 1];\n  return (median1 + median2) / 2.0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpzssembtr.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzssembtr.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738185
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp80_z3bkl.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmp80_z3bkl.js:8:15)\n    at median (/tmp/tmp80_z3bkl.js:14:16)\n\
    \    at median (/tmp/tmp80_z3bkl.js:14:16)\n    at median (/tmp/tmp80_z3bkl.js:15:17)\n\
    \    at test (/tmp/tmp80_z3bkl.js:21:22)\n    at Object.<anonymous> (/tmp/tmp80_z3bkl.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length <= 1) {\n    return l[0];\n  }\n  const\
    \ mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n\
    \  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpevrjukj9.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpevrjukj9.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738185
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const mid = l.length / 2;\n  if (l.length\
    \ % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp80_z3bkl.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmp80_z3bkl.js:8:15)\n    at median (/tmp/tmp80_z3bkl.js:14:16)\n\
    \    at median (/tmp/tmp80_z3bkl.js:14:16)\n    at median (/tmp/tmp80_z3bkl.js:15:17)\n\
    \    at test (/tmp/tmp80_z3bkl.js:21:22)\n    at Object.<anonymous> (/tmp/tmp80_z3bkl.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw Error('Cannot compute\
    \ median of an empty array');\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp2frq_x30.js:8\n        throw Error('Cannot compute median of an\
    \ empty array');\n        ^\n\nError: Cannot compute median of an empty array\n\
    \    at median (/tmp/tmp2frq_x30.js:8:15)\n    at median (/tmp/tmp2frq_x30.js:15:16)\n\
    \    at median (/tmp/tmp2frq_x30.js:15:16)\n    at median (/tmp/tmp2frq_x30.js:16:17)\n\
    \    at test (/tmp/tmp2frq_x30.js:22:22)\n    at Object.<anonymous> (/tmp/tmp2frq_x30.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const mid = Math.floor(l.length / 2);\n\
    \  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0,\
    \ mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpas3zwt33.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmpas3zwt33.js:8:15)\n    at median (/tmp/tmpas3zwt33.js:14:16)\n\
    \    at median (/tmp/tmpas3zwt33.js:14:16)\n    at median (/tmp/tmpas3zwt33.js:15:17)\n\
    \    at test (/tmp/tmpas3zwt33.js:21:22)\n    at Object.<anonymous> (/tmp/tmpas3zwt33.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738185
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpu3t65wed.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmpu3t65wed.js:8:15)\n    at median (/tmp/tmpu3t65wed.js:15:16)\n\
    \    at median (/tmp/tmpu3t65wed.js:15:16)\n    at median (/tmp/tmpu3t65wed.js:16:17)\n\
    \    at test (/tmp/tmpu3t65wed.js:22:22)\n    at Object.<anonymous> (/tmp/tmpu3t65wed.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const middle = l.length / 2;\n  if (middle\
    \ === 0) {\n    return l[middle];\n  }\n  if (middle === 1) {\n    return l[0];\n\
    \  }\n  const medianValue = l[middle];\n  const leftMedian = median(l);\n  const\
    \ rightMedian = median(l.slice(middle + 1));\n  return medianValue + ((leftMedian\
    \ + rightMedian) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmproackb50.js:7\n    if (l.length === 0) {\n          ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at median (/tmp/tmproackb50.js:7:11)\n\
    \    at median (/tmp/tmproackb50.js:18:22)\n    at median (/tmp/tmproackb50.js:18:22)\n\
    \    at median (/tmp/tmproackb50.js:18:22)\n    at median (/tmp/tmproackb50.js:18:22)\n\
    \    at median (/tmp/tmproackb50.js:18:22)\n    at median (/tmp/tmproackb50.js:18:22)\n\
    \    at median (/tmp/tmproackb50.js:18:22)\n    at median (/tmp/tmproackb50.js:18:22)\n\
    \    at median (/tmp/tmproackb50.js:18:22)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738185
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  l.sort((a, b) => a - b);\n  const mid =\
    \ l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return\
    \ (l[mid] + l[mid-1]) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpwru3rag_.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwru3rag_.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpt2ti5zfx.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmpt2ti5zfx.js:8:15)\n    at median (/tmp/tmpt2ti5zfx.js:15:16)\n\
    \    at median (/tmp/tmpt2ti5zfx.js:15:16)\n    at median (/tmp/tmpt2ti5zfx.js:16:17)\n\
    \    at test (/tmp/tmpt2ti5zfx.js:22:22)\n    at Object.<anonymous> (/tmp/tmpt2ti5zfx.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738185
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  const n = l.length;\n  if (n < 2) {\n    return l[0];\n\
    \  }\n  const mid = Math.floor(n / 2);\n  const left = l.slice(0, mid);\n  const\
    \ right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp68qywvyb.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp68qywvyb.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738175
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const mid = l.length / 2;\n  if (mid %\
    \ 1 !== 0) {\n    throw new Error(\"Cannot calculate median of an array of uneven\
    \ length\");\n  }\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const\
    \ median1 = median(l.slice(0, mid));\n  const median2 = median(l.slice(mid));\n\
    \  return median1 + median2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp9l9jp9ur.js:12\n        throw new Error(\"Cannot calculate median\
    \ of an array of uneven length\");\n        ^\n\nError: Cannot calculate median\
    \ of an array of uneven length\n    at median (/tmp/tmp9l9jp9ur.js:12:15)\n  \
    \  at test (/tmp/tmp9l9jp9ur.js:24:22)\n    at Object.<anonymous> (/tmp/tmp9l9jp9ur.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738186
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  l.sort((a, b) => a - b);\n  const mid =\
    \ l.length / 2;\n  if (mid % 1 !== 0) {\n    return l[mid];\n  }\n  const lower\
    \ = l[mid];\n  const upper = l[mid + 1];\n  return lower + Math.ceil((upper -\
    \ lower) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmp3rmi74hl.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3rmi74hl.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738186
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2)\
    \ - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp51jhb0bk.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmp51jhb0bk.js:11:25)\n    at\
    \ median (/tmp/tmp51jhb0bk.js:12:17)\n    at median (/tmp/tmp51jhb0bk.js:12:17)\n\
    \    at median (/tmp/tmp51jhb0bk.js:12:17)\n    at median (/tmp/tmp51jhb0bk.js:12:17)\n\
    \    at median (/tmp/tmp51jhb0bk.js:12:17)\n    at median (/tmp/tmp51jhb0bk.js:12:17)\n\
    \    at median (/tmp/tmp51jhb0bk.js:12:17)\n    at median (/tmp/tmp51jhb0bk.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738186
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const mid = l.length / 2;\n  const sorted\
    \ = l.slice().sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return\
    \ sorted[mid];\n  }\n  return sorted[mid] + sorted[mid-1];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpnn52qndj.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpnn52qndj.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738186
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    const mid = l.length /\
    \ 2;\n    const left = l.slice(0, mid);\n    const right = l.slice(mid);\n   \
    \ return median(left) + median(right);\n  }\n  return Math.ceil(l.length / 2);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmp26r1lat0.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp26r1lat0.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738180
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n % 2 === 0)\
    \ {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left\
    \ = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return\
    \ (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpu3t65wed.js:8\n        throw new Error(\"Cannot calculate median\
    \ of an empty array\");\n        ^\n\nError: Cannot calculate median of an empty\
    \ array\n    at median (/tmp/tmpu3t65wed.js:8:15)\n    at median (/tmp/tmpu3t65wed.js:15:16)\n\
    \    at median (/tmp/tmpu3t65wed.js:15:16)\n    at median (/tmp/tmpu3t65wed.js:16:17)\n\
    \    at test (/tmp/tmpu3t65wed.js:22:22)\n    at Object.<anonymous> (/tmp/tmpu3t65wed.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const sortedArray = l.slice().sort((a,\
    \ b) => a - b);\n  const middle = Math.floor(sortedArray.length / 2);\n  if (sortedArray.length\
    \ % 2) {\n    return sortedArray[middle];\n  }\n  return sortedArray[middle -\
    \ 1] + sortedArray[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmp9lbud7fe.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9lbud7fe.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738187
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n\
    \  const right = median(l.slice(mid));\n  return left + Math.abs(right - left)\
    \ / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpoaheqet0.js:11\n    var left = median(l.slice(0, mid));\n     \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmpoaheqet0.js:11:25)\n    at\
    \ median (/tmp/tmpoaheqet0.js:12:17)\n    at median (/tmp/tmpoaheqet0.js:12:17)\n\
    \    at median (/tmp/tmpoaheqet0.js:12:17)\n    at median (/tmp/tmpoaheqet0.js:12:17)\n\
    \    at median (/tmp/tmpoaheqet0.js:12:17)\n    at median (/tmp/tmpoaheqet0.js:12:17)\n\
    \    at median (/tmp/tmpoaheqet0.js:12:17)\n    at median (/tmp/tmpoaheqet0.js:12:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738187
- exit_code: 2
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate\
    \ median of an empty array\");\n  }\n  const n = l.length;\n  if (n === 1) {\n\
    \    return l[0];\n  }\n  const half = Math.floor(n / 2);\n  if (n % 2) {\n  \
    \  return median(l[half]) < median(l[half - 1]) ? l[half] : l[half - 1];\n  }\n\
    \  return median(l[half]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkph2c_3_.ts(16,19): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''number[]''.

    ../../../../../tmp/tmpkph2c_3_.ts(16,37): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''number[]''.

    ../../../../../tmp/tmpkph2c_3_.ts(18,17): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''number[]''.

    '
  timestamp: 1659738186
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const\
    \ n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n\
    \  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right\
    \ = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmps3okomx1.js:15\n    var left = median(l.slice(0, half));\n    \
    \                    ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.slice (<anonymous>)\n    at median (/tmp/tmps3okomx1.js:15:25)\n    at\
    \ median (/tmp/tmps3okomx1.js:16:17)\n    at median (/tmp/tmps3okomx1.js:16:17)\n\
    \    at median (/tmp/tmps3okomx1.js:16:17)\n    at median (/tmp/tmps3okomx1.js:16:17)\n\
    \    at median (/tmp/tmps3okomx1.js:16:17)\n    at median (/tmp/tmps3okomx1.js:16:17)\n\
    \    at median (/tmp/tmps3okomx1.js:16:17)\n    at median (/tmp/tmps3okomx1.js:16:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738165
- exit_code: 1
  program: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l:\
    \ number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length\
    \ / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = l.slice(0, mid);\n\
    \  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmph0vt632h.js:11\n    var left = l.slice(0, mid);\n             \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n\
    \    at median (/tmp/tmph0vt632h.js:11:18)\n    at median (/tmp/tmph0vt632h.js:13:27)\n\
    \    at median (/tmp/tmph0vt632h.js:13:27)\n    at median (/tmp/tmph0vt632h.js:13:27)\n\
    \    at median (/tmp/tmph0vt632h.js:13:27)\n    at median (/tmp/tmph0vt632h.js:13:27)\n\
    \    at median (/tmp/tmph0vt632h.js:13:27)\n    at median (/tmp/tmph0vt632h.js:13:27)\n\
    \    at median (/tmp/tmph0vt632h.js:13:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738170
