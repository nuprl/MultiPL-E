language: ts
name: HumanEval_25_factorize
results:
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let i = 2;\n  while (i <= n) {\n\
    \    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else\
    \ {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738574
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n\
    \  let factorsCountArr: number[] = [];\n  let factorsCountArrLen: number[] = [];\n\
    \  let factorsCountArrLenLen: number[] = [];\n  let factorsCountArrLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLen: number[] = [];\n  let\
    \ factorsCountArrLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLen: number[] =\
    \ [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLen: number[] = [];\n \
    \ let factorsCountArrLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let\
    \ factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLen\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2k96bqsd.ts(54,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738574
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n\
    \  let factorsCountArray: number[] = [];\n  let factorsCountArrayIndex: number[]\
    \ = [];\n  let factorsCountArrayIndexIndex: number[] = [];\n  let factorsCountArrayIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountArrayIndexIndexIndexIndex: number[] = [];\n\
    \  let factorsCountArrayIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountArrayIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountArrayIndexIndexIndexIndex\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkxur99dq.ts(56,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738574
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n\
    \  let factorsCountMax: number[] = [];\n  let factorsCountMaxIndex: number[] =\
    \ [];\n  let factorsCountMaxIndexMax: number[] = [];\n  let factorsCountMaxIndexMaxIndex:\
    \ number[] = [];\n  let factorsCountMaxIndexMaxIndexMax: number[] = [];\n  let\
    \ factorsCountMaxIndexMaxIndexMaxIndex: number[] = [];\n  let factorsCountMaxIndexMaxIndexMaxIndexMax:\
    \ number[] = [];\n  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndex: number[]\
    \ = [];\n  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMax: number[] = [];\n\
    \  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax: number[] = [];\n\
    \  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax: number[] = [];\n\
    \  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax: number[]\
    \ = [];\n  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax:\
    \ number[] = [];\n  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax:\
    \ number[] = [];\n  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax:\
    \ number[] = [];\n  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax:\
    \ number[] = [];\n  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax:\
    \ number[] = [];\n  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax:\
    \ number[] = [];\n  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax:\
    \ number[] = [];\n  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax:\
    \ number[] = [];\n  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax:\
    \ number[] = [];\n  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax:\
    \ number[] = [];\n  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax:\
    \ number[] = [];\n  let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndex\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcc6lv3lo.ts(53,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738574
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let primeFactors: number[] = [];\n\
    \  let factorization: number[] = [];\n  let primeFactorsCount: number[] = [];\n\
    \  let factorizationCount: number[] = [];\n  let factorizationCountMax: number[]\
    \ = [];\n  let factorizationCountMaxIndex: number[] = [];\n  let factorizationCountMaxIndexCount:\
    \ number[] = [];\n  let factorizationCountMaxIndexCountIndex: number[] = [];\n\
    \  let factorizationCountMaxIndexCountIndexCount: number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndex:\
    \ number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCount: number[]\
    \ = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCountIndex: number[]\
    \ = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCountIndexCount:\
    \ number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCountIndexCountIndex:\
    \ number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCountIndexCountIndexCountIndex:\
    \ number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCountIndexCountIndexCountIndex:\
    \ number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex:\
    \ number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex:\
    \ number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ number[] = [];\n  let factorizationCountMaxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ number[] = [];\n  let \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppe2tq1cr.ts(40,9): error TS1005: '','' expected.

    ../../../../../tmp/tmppe2tq1cr.ts(56,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738574
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n >=\
    \ 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n\
    \    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fff59748060\n 1: 0x2b50984e2727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2b509907728e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b50989b1f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b5098b43760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b5098b4b0cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b5098d357db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b50986947f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738577
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factorsCount: number[]\
    \ = [];\n    let factorsCountArr: number[] = [];\n    let factorsCountArrLen:\
    \ number = 0;\n    let factorsCountArrMax: number = 0;\n    let factorsCountArrMaxIndex:\
    \ number = 0;\n    let factorsCountArrMaxValue: number = 0;\n    let factorsCountArrMaxIndexValue:\
    \ number = 0;\n    let factorsCountArrMaxValue2: number = 0;\n    let factorsCountArrMaxIndexValue2:\
    \ number = 0;\n    let factorsCountArrMaxValue3: number = 0;\n    let factorsCountArrMaxIndexValue3:\
    \ number = 0;\n    let factorsCountArrMaxValue4: number = 0;\n    let factorsCountArrMaxIndexValue4:\
    \ number = 0;\n    let factorsCountArrMaxValue5: number = 0;\n    let factorsCountArrMaxIndexValue5:\
    \ number = 0;\n    let factorsCountArrMaxValue6: number = 0;\n    let factorsCountArrMaxIndexValue6:\
    \ number = 0;\n    let factorsCountArrMaxValue7: number = 0;\n    let factorsCountArrMaxIndexValue7:\
    \ number = 0;\n    let factorsCountArrMaxValue8: number = 0;\n    let factorsCountArrMaxIndexValue8:\
    \ number = 0;\n    let factorsCountArrMaxValue9: number = 0;\n    let factorsCountArrMaxIndexValue9:\
    \ number = 0;\n    let factorsCountArrMaxValue10: number = 0;\n    let factorsCountArrMaxIndexValue10:\
    \ number = 0;\n    let factorsCountArrMaxValue11: number = 0;\n    let factorsCountArrMaxIndexValue11:\
    \ number = 0;\n    let factorsCountArrMaxValue12: number = 0;\n    let factorsCountArrMaxIndexValue12:\
    \ number = 0;\n    let factorsCountArrMaxValue13: number = 0;\n    let factorsCountArrMaxIndexValue13:\
    \ number = 0;\n    let factorsCountArrMaxValue14: number = 0;\n    let factorsCountArrMaxIndexValue14:\
    \ number = 0;\n    let factorsCountArrMaxValue15: number = 0;\n    let factorsCountArrMaxIndexValue15:\
    \ number = 0;\n    let factorsCountArrMaxValue16: number = 0;\n    let factorsCountArrMaxIndexValue16:\
    \ number = 0;\n    let factorsCountArrMaxValue17: number = 0;\n    let factorsCountArrMaxIndexValue17:\
    \ number = 0;\n    let factorsCountArrMaxValue18: number = 0;\n    let factorsCountArrMaxIndexValue18:\
    \ number = 0;\n    let factorsCountArrMaxValue19: number = 0;\n    let factors\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuzqtkt9x.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738574
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let primeFactors: number[] = [];\n\
    \  let isPrime: boolean;\n  let isPrimeFactor: boolean;\n  let isPrimeFactorFound:\
    \ boolean;\n  let isPrimeFactorFoundInFactors: boolean;\n  let isPrimeFactorFoundInPrimeFactors:\
    \ boolean;\n  let isPrimeFactorFoundInPrimeFactorsArray: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArrayIndex:\
    \ boolean;\n  let isPrimeFactorFoundInPrimeFactorsArrayLength: boolean;\n  let\
    \ isPrimeFactorFoundInPrimeFactorsArrayMaxIndex: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArrayMax:\
    \ boolean;\n  let isPrimeFactorFoundInPrimeFactorsArrayMinIndex: boolean;\n  let\
    \ isPrimeFactorFoundInPrimeFactorsArrayMin: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArraySum:\
    \ boolean;\n  let isPrimeFactorFoundInPrimeFactorsArraySumIndex: boolean;\n  let\
    \ isPrimeFactorFoundInPrimeFactorsArraySumLength: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArraySumMaxIndex:\
    \ boolean;\n  let isPrimeFactorFoundInPrimeFactorsArraySumMax: boolean;\n  let\
    \ isPrimeFactorFoundInPrimeFactorsArraySumMinIndex: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArraySumMin:\
    \ boolean;\n  let isPrimeFactorFoundInPrimeFactorsArraySum: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArraySumIndex:\
    \ boolean;\n  let isPrimeFactorFoundInPrimeFactorsArraySumLength: boolean;\n \
    \ let isPrimeFactorFoundInPrimeFactorsArraySumMaxIndex: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArraySumMax:\
    \ boolean;\n  let isPrimeFactorFoundInPrimeFactorsArraySumMinIndex: boolean;\n\
    \  let isPrimeFactorFoundInPrimeFactorsArraySumMin: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArraySum:\
    \ boolean;\n  let isPrimeFactorFoundInPrimeFactorsArraySumIndex: boolean;\n  let\
    \ isPrimeFactorFoundInPrimeFactorsArraySumLength: boolean;\n  let isPrimeFactorFoundInPrimeFactorsArraySumMaxIndex:\
    \ boolean;\n  let isPrimeFactorFoundInPrimeFactorsArraySumMax: boolean;\n  let\
    \ isPrimeFactorFoundInPrimeFactors\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5cxeel1c.ts(61,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738574
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor: number[] = [];\n  let\
    \ factorCount: number[] = [];\n  let factorCountIndex: number[] = [];\n  let factorCountIndexMax:\
    \ number[] = [];\n  let factorCountIndexMaxIndex: number[] = [];\n  let factorCountIndexMaxIndexIndex:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex2: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex3: number[] = [];\n  let factorCountIndexMaxIndexIndex4:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex5: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex6: number[] = [];\n  let factorCountIndexMaxIndexIndex7:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex8: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex9: number[] = [];\n  let factorCountIndexMaxIndexIndex10:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex11: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex12: number[] = [];\n  let factorCountIndexMaxIndexIndex13:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex14: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex15: number[] = [];\n  let factorCountIndexMaxIndexIndex16:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex17: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex18: number[] = [];\n  let factorCountIndexMaxIndexIndex19:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex20: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex21: number[] = [];\n  let factorCountIndexMaxIndexIndex22:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex23: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex24: number[] = [];\n  let factorCountIndexMaxIndexIndex25:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex26: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex27: number[] = [];\n  let factorCountIndexMaxIndexIndex28:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex29: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex30: number[] = [];\n  let factorCountIndexMaxIndexIndex31:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex32: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex33: number[] = [];\n  let factorCountIndexMaxIndexIndex34:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex35: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex36: number\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsdjq0w25.ts(69,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738574
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n)\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else\
    \ {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738574
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n > 1)\
    \ {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n\
    \    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fff94079380\n 1: 0x2af4b6407727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2af4b6f9c28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2af4b68d6f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2af4b6a68760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2af4b6a700cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2af4b6c5a7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2af4b65b97f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738577
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n !=\
    \ 1) {\n    while (n % factor == 0) {\n      factors.push(factor);\n      n =\
    \ n / factor;\n    }\n    factor++;\n  }\n  return factors;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffc3c402fd0\n 1: 0x2aaf5f50a727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2aaf6009f28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2aaf5f9d9f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2aaf5fb6b760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2aaf5fb730cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2aaf5fd5d7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2aaf5f6bc7f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738577
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factorsCount: number[]\
    \ = [];\n    let factorsCountMap: Map<number, number> = new Map();\n    let factorsCountMapKeys:\
    \ number[] = [];\n    let factorsCountMapValues: number[] = [];\n    let factorsCountMapKeysValues:\
    \ number[] = [];\n    let factorsCountMapKeysValuesCount: number[] = [];\n   \
    \ let factorsCountMapKeysValuesCountMap: Map<number, number> = new Map();\n  \
    \  let factorsCountMapKeysValuesCountMapKeys: number[] = [];\n    let factorsCountMapKeysValuesCountMapValues:\
    \ number[] = [];\n    let factorsCountMapKeysValuesCountMapValuesCount: number[]\
    \ = [];\n    let factorsCountMapKeysValuesCountMapValuesCountMap: Map<number,\
    \ number> = new Map();\n    let factorsCountMapKeysValuesCountMapValuesCountMapKeys:\
    \ number[] = [];\n    let factorsCountMapKeysValuesCountMapValuesCountMapValues:\
    \ number[] = [];\n    let factorsCountMapKeysValuesCountMapValuesCountMapValuesCount:\
    \ number[] = [];\n    let factorsCountMapKeysValuesCountMapValuesCountMapValuesCountMap:\
    \ Map<number, number> = new Map();\n    let factorsCountMapKeysValuesCountMapValuesCountMapValuesCountMapKeys:\
    \ number[] = [];\n    let factorsCountMapKeysValuesCountMapValuesCountMapValuesCountMapValues:\
    \ number[] = [];\n    let factorsCountMapKeysValuesCountMapValuesCountMapValuesCountMapValuesCount:\
    \ number[] = [];\n    let factorsCountMapKeysValuesCountMapValuesCountMapValuesCountMapValuesCountMap:\
    \ Map<number, number> = new Map();\n    let factorsCountMapKeysValuesCountMapValuesCountMapValuesCountMapValuesCountMapKeys:\
    \ number[] = [];\n    let factorsCountMapKeysValuesCountMapValuesCountMapValuesCountMapValuesCountMapValues:\
    \ number[] = [];\n    let factorsCountMapKeysValuesCountMapValuesCountMapValuesCountMapValuesCountMapValuesCount:\
    \ number[] = [];\n    let factorsCountMapKeysValuesCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMap:\
    \ Map<number, number> = new Map();\n    let factorsCountMapKeysValuesCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMapKeys:\
    \ number[] = [];\n    let factorsCountMapKeysValuesCountMapValuesCountMapValuesCountMapValuesCountMapValuesCountMapValues:\
    \ number[] = [];\n    let factorsCountMapKeysValues\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkzvoz5vu.ts(54,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738574
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i ===\
    \ 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp0d1f_l4_.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0d1f_l4_.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738574
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n\
    \    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n\
    \  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738574
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i as number);\n      while\
    \ (n % i === 0) {\n        n /= i;\n        factors.push(i as number);\n     \
    \ }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpv7q0k_93.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpv7q0k_93.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738574
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n !=\
    \ 1) {\n    if (n % factor == 0) {\n      factors.push(factor);\n      n = n /\
    \ factor;\n    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffc3d1a9e10\n 1: 0x2ab368326727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2ab368ebb28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2ab3687f5f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2ab368987760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2ab36898f0cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2ab368b797db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2ab3684d87f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738578
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i ===\
    \ 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp0d1f_l4_.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0d1f_l4_.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738574
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i as number);\n      while\
    \ (n % i === 0) {\n        n /= i;\n        factors.push(i as number);\n     \
    \ }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpv7q0k_93.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpv7q0k_93.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738574
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (n >= i)\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  \
    \  i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  2,\n  2\n]\n    at test (/tmp/tmpdp7b3n3o.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdp7b3n3o.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4 ],\n\
    \  expected: [ 2, 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738574
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  let factorization\
    \ = new Array(n);\n  for (let i = 1; i <= n; i++) {\n    factorization[i] = factor;\n\
    \    factor = 1;\n    for (let j = i; j <= n; j++) {\n      if (n % j === 0) {\n\
    \        factor *= j;\n        factorization[j] = factor;\n      }\n    }\n  }\n\
    \  for (let i = 1; i <= n; i++) {\n    if (factorization[i] === factor) {\n  \
    \    factors.push(factor);\n    }\n  }\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpmm6tlg5c.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmpmm6tlg5c.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738574
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(i);\n         \
    \   factors.push(n / i);\n        }\n    }\n    return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpbib4hdz6.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbib4hdz6.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738574
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n\
    \  let factorsCountArr: number[] = [];\n  let factorsCountArrLen: number[] = [];\n\
    \  let factorsCountArrLenLen: number[] = [];\n  let factorsCountArrLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLen: number[] = [];\n  let\
    \ factorsCountArrLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLen: number[] =\
    \ [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLen: number[] = [];\n \
    \ let factorsCountArrLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let\
    \ factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpge2cz61r.ts(54,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738574
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n !=\
    \ 1) {\n    while (n % factor == 0) {\n      factors.push(factor);\n      n /=\
    \ factor;\n    }\n    factor++;\n  }\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffd329013c0\n 1: 0x2ba56e7fa727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2ba56f38f28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2ba56ecc9f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2ba56ee5b760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2ba56ee630cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2ba56f04d7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2ba56e9ac7f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738577
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(i as number);\n\
    \            while (n % i === 0) {\n                n /= i;\n                factors.push(i\
    \ as number);\n            }\n        }\n    }\n    return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpkn_pbno0.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkn_pbno0.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738574
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n \
    \   }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpqmgd_59p.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqmgd_59p.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738576
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i as number);\n      while\
    \ (n % i === 0) {\n        n /= i;\n        factors.push(i as number);\n     \
    \ }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpv7q0k_93.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpv7q0k_93.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738574
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor: number[] = [];\n  let\
    \ i: number;\n  let j: number;\n  let factorCount: number;\n  let factorCountMax:\
    \ number;\n  let factorCountMin: number;\n  let factorCountSum: number;\n  let\
    \ factorCountSumMax: number;\n  let factorCountSumMin: number;\n  let factorCountSumSum:\
    \ number;\n  let factorCountSumSumMax: number;\n  let factorCountSumSumMin: number;\n\
    \  let factorCountSumSumSum: number;\n  let factorCountSumSumSumMax: number;\n\
    \  let factorCountSumSumSumMin: number;\n  let factorCountSumSumSumSum: number;\n\
    \  let factorCountSumSumSumSumMax: number;\n  let factorCountSumSumSumSumMin:\
    \ number;\n  let factorCountSumSumSumSumSum: number;\n  let factorCountSumSumSumSumSumMax:\
    \ number;\n  let factorCountSumSumSumSumSumMin: number;\n  let factorCountSumSumSumSumSumSum:\
    \ number;\n  let factorCountSumSumSumSumSumSumMax: number;\n  let factorCountSumSumSumSumSumSumMin:\
    \ number;\n  let factorCountSumSumSumSumSumSumSum: number;\n  let factorCountSumSumSumSumSumSumSumMax:\
    \ number;\n  let factorCountSumSumSumSumSumSumSumMin: number;\n  let factorCountSumSumSumSumSumSumSumSum:\
    \ number;\n  let factorCountSumSumSumSumSumSumSumSumMax: number;\n  let factorCountSumSumSumSumSumSumSumMin:\
    \ number;\n  let factorCountSumSumSumSumSumSumSumSum: number;\n  let factorCountSumSumSumSumSumSumSumSumMax:\
    \ number;\n  let factorCountSumSumSumSumSumSumSumSumMin: number;\n  let factorCountSumSumSumSumSumSumSumSumSum:\
    \ number;\n  let factorCountSumSumSumSumSumSumSumSumSumMax: number;\n  let factorCountSumSumSumSumSumSumSumSumMin:\
    \ number;\n  let factorCountSumSumSumSumSumSumSumSumSum: number;\n  let factorCountSumSumSumSumSumSumSumSumSumMax:\
    \ number;\n  let factorCountSumSumSumSumSumSumSumSumMin: number;\n  let factorCountSumSumSumSumSumSumSumSumSum:\
    \ number;\n  let factorCountSumSumSumSumSumSumSumSumSumMax: number;\n  let factorCountSumSumSumSumSumSumSumSumSumMin:\
    \ number;\n  let factorCountSumSumSumSumSumSumSumSumSumSum: number;\n  let factorCountSumSumSumSumSumSumSumSumSumMax:\
    \ number;\n  let factorCountSumSumSumSumSumSumSumSumSumMin: number;\n  let factorCountSumSumSumSumSumSumSumSumSumSum:\
    \ number;\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_r2xydiz.ts(74,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738576
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let factor = 1;\n  while (n >\
    \ 1) {\n    if (n % factor === 0) {\n      n /= factor;\n      factors.push(factor);\n\
    \    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffdaecbaae0\n 1: 0x2ae277e5d727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2ae2789f228e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2ae27832cf8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2ae2784be760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2ae2784c60cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2ae2786b07db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2ae27800f7f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738579
- exit_code: -1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  let factorization\
    \ = new Array(n + 1);\n  for (let i = 1; i <= n; i++) {\n    factorization[i]\
    \ = 0;\n  }\n  for (let i = 1; i <= n; i++) {\n    while (n % i == 0) {\n    \
    \  factorization[i]++;\n      n = n / i;\n    }\n  }\n  for (let i = 1; i <= n;\
    \ i++) {\n    if (factorization[i] > 0) {\n      factors.push(factor);\n     \
    \ factor *= i;\n      factorization[i]--;\n    }\n  }\n  return factors;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659738591
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n <= 1) return [];\n  let factors = [];\n  let i = 2;\n  while\
    \ (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n %\
    \ i === 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n    i++;\n\
    \  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpokxtvvp4.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpokxtvvp4.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738577
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(i);\n         \
    \   while (n % i === 0) {\n                n /= i;\n            }\n        }\n\
    \    }\n    if (n > 1) {\n        factors.push(n);\n    }\n    return factors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpvwn1ckbf.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvwn1ckbf.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738577
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factorsCount: number[]\
    \ = [];\n    let maxFactor: number = 0;\n    let minFactor: number = 1;\n    let\
    \ factor: number = 0;\n    let factorCount: number = 0;\n    let factorsArray:\
    \ number[] = [];\n    let factorsArrayCount: number[] = [];\n    let factorsArrayMax:\
    \ number[] = [];\n    let factorsArrayMin: number[] = [];\n    let factorsArraySum:\
    \ number[] = [];\n    let factorsArrayAvg: number[] = [];\n    let factorsArraySum2:\
    \ number[] = [];\n    let factorsArraySum3: number[] = [];\n    let factorsArraySum4:\
    \ number[] = [];\n    let factorsArraySum5: number[] = [];\n    let factorsArraySum6:\
    \ number[] = [];\n    let factorsArraySum7: number[] = [];\n    let factorsArraySum8:\
    \ number[] = [];\n    let factorsArraySum9: number[] = [];\n    let factorsArraySum10:\
    \ number[] = [];\n    let factorsArraySum11: number[] = [];\n    let factorsArraySum12:\
    \ number[] = [];\n    let factorsArraySum13: number[] = [];\n    let factorsArraySum14:\
    \ number[] = [];\n    let factorsArraySum15: number[] = [];\n    let factorsArraySum16:\
    \ number[] = [];\n    let factorsArraySum17: number[] = [];\n    let factorsArraySum18:\
    \ number[] = [];\n    let factorsArraySum19: number[] = [];\n    let factorsArraySum20:\
    \ number[] = [];\n    let factorsArraySum21: number[] = [];\n    let factorsArraySum22:\
    \ number[] = [];\n    let factorsArraySum23: number[] = [];\n    let factorsArraySum24:\
    \ number[] = [];\n    let factorsArraySum25: number[] = [];\n    let factorsArraySum26:\
    \ number[] = [];\n    let factorsArraySum27: number[] = [];\n    let factorsArraySum28:\
    \ number[] = [];\n    let factorsArraySum29: number[] = [];\n    let factorsArraySum30:\
    \ number[] = [];\n    let factorsArraySum31: number[] = [];\n    let factorsArraySum32:\
    \ number[] = [];\n    let factorsArraySum33: number[] = [];\n    let factorsArraySum34:\
    \ number[] = [];\n    let factorsArraySum35: number[] = [];\n    let factorsArraySum36:\
    \ number[] = [];\n    let factorsArraySum37: number[] = [];\n    let factorsArraySum38:\
    \ number[] = [];\n    let factorsArraySum39: \ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqu7a0i6t.ts(61,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpqu7a0i6t.ts(77,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738576
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n >=\
    \ 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n\
    \    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fff59748060\n 1: 0x2b50984e2727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2b509907728e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b50989b1f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b5098b43760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b5098b4b0cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b5098d357db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b50986947f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738577
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i ===\
    \ 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp0d1f_l4_.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0d1f_l4_.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738574
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n)\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else\
    \ {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738574
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  let i = 2;\n\
    \  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor);\n   \
    \   factor *= i;\n      i *= 2;\n    } else {\n      i++;\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpyjn6g2n5.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyjn6g2n5.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738577
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factorsCount: number[]\
    \ = [];\n    let isPrime: boolean;\n    let isPrimeCount: number[] = [];\n   \
    \ let isPrimePrime: boolean;\n    let isPrimePrimeCount: number[] = [];\n    let\
    \ isPrimePrimePrime: boolean;\n    let isPrimePrimePrimeCount: number[] = [];\n\
    \    let isPrimePrimePrimePrime: boolean;\n    let isPrimePrimePrimePrimeCount:\
    \ number[] = [];\n    let isPrimePrimePrimePrimePrime: boolean;\n    let isPrimePrimePrimePrimePrimeCount:\
    \ number[] = [];\n    let isPrimePrimePrimePrimePrimePrime: boolean;\n    let\
    \ isPrimePrimePrimePrimePrimePrimeCount: number[] = [];\n    let isPrimePrimePrimePrimePrimePrimePrime:\
    \ boolean;\n    let isPrimePrimePrimePrimePrimePrimePrimeCount: number[] = [];\n\
    \    let isPrimePrimePrimePrimePrimePrimePrimePrime: boolean;\n    let isPrimePrimePrimePrimePrimePrimePrimeCount:\
    \ number[] = [];\n    let isPrimePrimePrimePrimePrimePrimePrimePrime: boolean;\n\
    \    let isPrimePrimePrimePrimePrimePrimePrimePrimeCount: number[] = [];\n   \
    \ let isPrimePrimePrimePrimePrimePrimePrimePrimePrime: boolean;\n    let isPrimePrimePrimePrimePrimePrimePrimePrimeCount:\
    \ number[] = [];\n    let isPrimePrimePrimePrimePrimePrimePrimePrimePrime: boolean;\n\
    \    let isPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount: number[] = [];\n\
    \    let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime: boolean;\n    let\
    \ isPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount: number[] = [];\n    let\
    \ isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime: boolean;\n    let isPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount:\
    \ number[] = [];\n    let isPrimePrimePri\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjwapf76l.ts(56,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738577
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n \
    \   }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738577
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let primeFactors: number[]\
    \ = [];\n    let isPrime: boolean;\n    let isPrimeFactor: boolean;\n    let isPrimeFactorFound:\
    \ boolean;\n    let isPrimeFactorFoundInFactors: boolean;\n    let isPrimeFactorFoundInPrimeFactors:\
    \ boolean;\n    let isPrimeFactorFoundInPrimeFactorsArray: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex:\
    \ boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex2: boolean;\n  \
    \  let isPrimeFactorFoundInPrimeFactorsArrayIndex3: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex4:\
    \ boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex5: boolean;\n  \
    \  let isPrimeFactorFoundInPrimeFactorsArrayIndex6: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex7:\
    \ boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex8: boolean;\n  \
    \  let isPrimeFactorFoundInPrimeFactorsArrayIndex9: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex10:\
    \ boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex11: boolean;\n \
    \   let isPrimeFactorFoundInPrimeFactorsArrayIndex12: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex13:\
    \ boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex14: boolean;\n \
    \   let isPrimeFactorFoundInPrimeFactorsArrayIndex15: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex16:\
    \ boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex17: boolean;\n \
    \   let isPrimeFactorFoundInPrimeFactorsArrayIndex18: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex19:\
    \ boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex20: boolean;\n \
    \   let isPrimeFactorFoundInPrimeFactorsArrayIndex21: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex22:\
    \ boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex23: boolean;\n \
    \   let isPrimeFactorFoundInPrimeFactorsArrayIndex24: boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex25:\
    \ boolean;\n    let isPrimeFactorFoundInPrimeFactorsArrayIndex26\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbxnkyczg.ts(61,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738577
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n !=\
    \ 1) {\n    while (n % factor == 0) {\n      factors.push(factor);\n      n /=\
    \ factor;\n    }\n    factor++;\n  }\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffd329013c0\n 1: 0x2ba56e7fa727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2ba56f38f28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2ba56ecc9f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2ba56ee5b760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2ba56ee630cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2ba56f04d7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2ba56e9ac7f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738577
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors = [];\n  let factor = 1;\n  while (n != 1) {\n   \
    \ while (n % factor == 0) {\n      factors.push(factor);\n      n = n / factor;\n\
    \    }\n    factor++;\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fff23dde2d0\n 1: 0x2ae0b078f727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2ae0b132428e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2ae0b0c5ef8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2ae0b0df0760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2ae0b0df80cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2ae0b0fe27db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2ae0b09417f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738579
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (n >= i)\
    \ {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n\
    \    i++;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738577
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n\
    \  let factorsCountTemp: number[] = [];\n  let factorsCountTemp2: number[] = [];\n\
    \  let factorsCountTemp3: number[] = [];\n  let factorsCountTemp4: number[] =\
    \ [];\n  let factorsCountTemp5: number[] = [];\n  let factorsCountTemp6: number[]\
    \ = [];\n  let factorsCountTemp7: number[] = [];\n  let factorsCountTemp8: number[]\
    \ = [];\n  let factorsCountTemp9: number[] = [];\n  let factorsCountTemp10: number[]\
    \ = [];\n  let factorsCountTemp11: number[] = [];\n  let factorsCountTemp12: number[]\
    \ = [];\n  let factorsCountTemp13: number[] = [];\n  let factorsCountTemp14: number[]\
    \ = [];\n  let factorsCountTemp15: number[] = [];\n  let factorsCountTemp16: number[]\
    \ = [];\n  let factorsCountTemp17: number[] = [];\n  let factorsCountTemp18: number[]\
    \ = [];\n  let factorsCountTemp19: number[] = [];\n  let factorsCountTemp20: number[]\
    \ = [];\n  let factorsCountTemp21: number[] = [];\n  let factorsCountTemp22: number[]\
    \ = [];\n  let factorsCountTemp23: number[] = [];\n  let factorsCountTemp24: number[]\
    \ = [];\n  let factorsCountTemp25: number[] = [];\n  let factorsCountTemp26: number[]\
    \ = [];\n  let factorsCountTemp27: number[] = [];\n  let factorsCountTemp28: number[]\
    \ = [];\n  let factorsCountTemp29: number[] = [];\n  let factorsCountTemp30: number[]\
    \ = [];\n  let factorsCountTemp31: number[] = [];\n  let factorsCountTemp32: number[]\
    \ = [];\n  let factorsCountTemp33: number[] = [];\n  let factorsCountTemp34: number[]\
    \ = [];\n  let factorsCountTemp35: number[] = [];\n  let factorsCountTemp36: number[]\
    \ = [];\n  let factorsCountTemp37: number[] = [];\n  let factorsCountTemp38: number[]\
    \ = [];\n  let factorsCountTemp39: number[] = [];\n  let factorsCountTemp40: number[]\
    \ = [];\n  let factorsCountTemp41: number[] = [];\n  let factorsCountTemp42: number[]\
    \ = [];\n  let factorsCountTemp43: number[] = [];\n  let factorsCountTemp44: number[]\
    \ = [];\n  let factorsCountTemp45: number[] = [];\n  let factorsCountTemp46\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc86gwujd.ts(75,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738576
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factorsCount: number[]\
    \ = [];\n    let factorsCountMap: Map<number, number> = new Map();\n    let factorsCountMapKeys:\
    \ Set<number> = new Set();\n    let factorsCountMapValues: Set<number> = new Set();\n\
    \    let factorsCountMapKeysValues: Map<number, number> = new Map();\n    let\
    \ factorsCountMapKeysValuesValues: Map<number, number> = new Map();\n    let factorsCountMapKeysValuesValuesValues:\
    \ Map<number, number> = new Map();\n    let factorsCountMapKeysValuesValuesValuesValues:\
    \ Map<number, number> = new Map();\n    let factorsCountMapKeysValuesValuesValuesValuesValues:\
    \ Map<number, number> = new Map();\n    let factorsCountMapKeysValuesValuesValuesValuesValuesValues:\
    \ Map<number, number> = new Map();\n    let factorsCountMapKeysValuesValuesValuesValuesValuesValuesValuesValues:\
    \ Map<number, number> = new Map();\n    let factorsCountMapKeysValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpaaxguzfe.ts(40,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738577
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factorsCount: number[]\
    \ = [];\n    let factorsCountMax: number[] = [];\n    let factorsCountMaxIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexMax: number[] = [];\n    let factorsCountMaxIndexMaxIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexMaxIndexMax: number[] = [];\n  \
    \  let factorsCountMaxIndexMaxIndexMaxIndex: number[] = [];\n    let factorsCountMaxIndexMaxIndexMaxIndexMax:\
    \ number[] = [];\n    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndex: number[]\
    \ = [];\n    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMax: number[] = [];\n\
    \    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndex: number[] = [];\n\
    \    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax: number[] = [];\n\
    \    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndex: number[]\
    \ = [];\n    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax:\
    \ number[] = [];\n    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax:\
    \ number[] = [];\n    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax:\
    \ number[] = [];\n    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax:\
    \ number[] = [];\n    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax:\
    \ number[] = [];\n    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax:\
    \ number[] = [];\n    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax:\
    \ number[] = [];\n    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax:\
    \ number[] = [];\n    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax:\
    \ number[] = [];\n    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax:\
    \ number[] = [];\n    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax:\
    \ number[] = [];\n    let factorsCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndex\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5zf0pvcc.ts(53,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738577
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factorsCount: number[]\
    \ = [];\n    let factorsCountMax: number[] = [];\n    let factorsCountMaxIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndex: number[] = [];\n\
    \    let factorsCountMaxIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_vin5ikj.ts(55,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738577
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i ===\
    \ 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp0d1f_l4_.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0d1f_l4_.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738574
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factor = 1;\n    while\
    \ (n > 1) {\n        if (n % factor === 0) {\n            factors.push(factor);\n\
    \            n /= factor;\n        } else {\n            factor *= factor;\n \
    \       }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffc0f4c5c70\n 1: 0x2aad0cd05727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2aad0d89a28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2aad0d1d4f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2aad0d366760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2aad0d36e0cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2aad0d5587db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2aad0ceb77f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738580
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (n % i ===\
    \ 0) {\n    factors.push(i);\n    n /= i;\n    i++;\n  }\n  if (n > 1) {\n   \
    \ factors.push(n);\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  2,\n  2\n]\n    at test (/tmp/tmpklh1_iar.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpklh1_iar.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4 ],\n\
    \  expected: [ 2, 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738579
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  let i = 2;\n\
    \  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor);\n   \
    \   factor *= i;\n      i = 2;\n    } else {\n      i++;\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffec530ea50\n 1: 0x2b72d564e727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2b72d61e328e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b72d5b1f4a2  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b72d5cb2373  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b72d5cb48f0  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b72d5ea17db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b72d58007f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738581
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n\
    \  let factorsCountMax: number[] = [];\n  let factorsCountMaxIndex: number[] =\
    \ [];\n  let factorsCountMaxIndexCount: number[] = [];\n  let factorsCountMaxIndexCountMax:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndex: number[] = [];\n  let\
    \ factorsCountMaxIndexCountMaxIndexCount: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMax:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndex: number[]\
    \ = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCount: number[] =\
    \ [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMax: number[]\
    \ = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[]\
    \ = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCount:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMax:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndex:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCount:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMax:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndex:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCount:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMax:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndex:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCount:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMax:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndex:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCount\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbmo6vdv5.ts(53,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738579
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i as number);\n      while\
    \ (n % i === 0) {\n        n /= i;\n        factors.push(i as number);\n     \
    \ }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpv7q0k_93.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpv7q0k_93.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738574
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factor = 1;\n    while\
    \ (n > 1) {\n        if (n % factor === 0) {\n            factors.push(factor);\n\
    \            n /= factor;\n        } else {\n            factor *= factor;\n \
    \       }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffc0f4c5c70\n 1: 0x2aad0cd05727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2aad0d89a28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2aad0d1d4f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2aad0d366760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2aad0d36e0cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2aad0d5587db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2aad0ceb77f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738580
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n < 2) return [];\n  const factors: number[] = [];\n  let\
    \ i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n\
    \      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738579
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (true) {\n\
    \    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n\
    \        n /= i;\n      }\n    } else {\n      break;\n    }\n    i++;\n  }\n\
    \  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmp07is_ta0.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmp07is_ta0.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738579
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (n > 1) {\n\
    \    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n\
    \      i++;\n    }\n  }\n  if (n !== 1) factors.push(n);\n  return factors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738579
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  let i = 2;\n\
    \  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor);\n   \
    \   factor *= i;\n      i++;\n    } else {\n      factors.push(1);\n      factor\
    \ *= i;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpv4xpggxl.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpv4xpggxl.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738579
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++)\
    \ {\n    while (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n   \
    \ }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpa4j6ajw_.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpa4j6ajw_.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738579
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n)\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else\
    \ {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738574
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 1;\n  while (n % i ===\
    \ 0) {\n    factors.push(i);\n    n /= i;\n    i++;\n  }\n  if (n !== 1) factors.push(n);\n\
    \  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp2n0sevuq.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2n0sevuq.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738579
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n\
    \  let factorsCountTemp: number[] = [];\n  let factorsCountTemp2: number[] = [];\n\
    \  let factorsCountTemp3: number[] = [];\n  let factorsCountTemp4: number[] =\
    \ [];\n  let factorsCountTemp5: number[] = [];\n  let factorsCountTemp6: number[]\
    \ = [];\n  let factorsCountTemp7: number[] = [];\n  let factorsCountTemp8: number[]\
    \ = [];\n  let factorsCountTemp9: number[] = [];\n  let factorsCountTemp10: number[]\
    \ = [];\n  let factorsCountTemp11: number[] = [];\n  let factorsCountTemp12: number[]\
    \ = [];\n  let factorsCountTemp13: number[] = [];\n  let factorsCountTemp14: number[]\
    \ = [];\n  let factorsCountTemp15: number[] = [];\n  let factorsCountTemp16: number[]\
    \ = [];\n  let factorsCountTemp17: number[] = [];\n  let factorsCountTemp18: number[]\
    \ = [];\n  let factorsCountTemp19: number[] = [];\n  let factorsCountTemp20: number[]\
    \ = [];\n  let factorsCountTemp21: number[] = [];\n  let factorsCountTemp22: number[]\
    \ = [];\n  let factorsCountTemp23: number[] = [];\n  let factorsCountTemp24: number[]\
    \ = [];\n  let factorsCountTemp25: number[] = [];\n  let factorsCountTemp26: number[]\
    \ = [];\n  let factorsCountTemp27: number[] = [];\n  let factorsCountTemp28: number[]\
    \ = [];\n  let factorsCountTemp29: number[] = [];\n  let factorsCountTemp30: number[]\
    \ = [];\n  let factorsCountTemp31: number[] = [];\n  let factorsCountTemp32: number[]\
    \ = [];\n  let factorsCountTemp33: number[] = [];\n  let factorsCountTemp34: number[]\
    \ = [];\n  let factorsCountTemp35: number[] = [];\n  let factorsCountTemp36: number[]\
    \ = [];\n  let factorsCountTemp37: number[] = [];\n  let factorsCountTemp38: number[]\
    \ = [];\n  let factorsCountTemp39: number[] = [];\n  let factorsCountTemp40: number[]\
    \ = [];\n  let factorsCountTemp41: number[] = [];\n  let factorsCountTemp42: number[]\
    \ = [];\n  let factorsCountTemp43: number[] = [];\n  let factorsCountTemp44: number[]\
    \ = [];\n  let factorsCountTemp45: number[] = [];\n  let factorsCountTemp46\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc86gwujd.ts(75,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738576
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(i);\n         \
    \   while (n % i === 0) {\n                n /= i;\n                factors.push(i);\n\
    \            }\n        }\n    }\n    return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpfwk2o6f_.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpfwk2o6f_.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738579
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n\
    \  let isPrime = true;\n  let isFactor = true;\n  let factor: number[] = [];\n\
    \  let factorCount: number[] = [];\n  let primeFactors: number[] = [];\n  let\
    \ primeFactorsCount: number[] = [];\n  let isPrimeFactor = true;\n  let isPrimePrime\
    \ = true;\n  let isPrimePrimeFactor = true;\n  let isPrimePrimePrime = true;\n\
    \  let isPrimePrimePrimeFactor = true;\n  let isPrimePrimePrimePrime = true;\n\
    \  let isPrimePrimePrimePrimeFactor = true;\n  let isPrimePrimePrimePrimePrime\
    \ = true;\n  let isPrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimeFactor\
    \ = true;\n  let isPrimePrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimePrimeFactor\
    \ = true;\n  let isPrimePrimePrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimePrimePrimeFactor\
    \ = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimeFactor\
    \ = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrime = true;\n  let\
    \ isPrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor =\
    \ true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true;\n\
    \  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor = true;\n\
    \  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true;\n\
    \  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor =\
    \ true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmdw3xpxj.ts(60,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738579
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let i = 2;\n    while (i <=\
    \ n) {\n        if (n % i === 0) {\n            factors.push(i);\n           \
    \ while (n % i === 0) {\n                n /= i;\n            }\n        }\n \
    \       i++;\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpprsiyqtc.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpprsiyqtc.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738579
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(i);\n         \
    \   while (n % i === 0) {\n                n /= i;\n            }\n        }\n\
    \    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpgeppxk4o.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgeppxk4o.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738579
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i ===\
    \ 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp0d1f_l4_.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0d1f_l4_.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738574
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i ===\
    \ 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp0d1f_l4_.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0d1f_l4_.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738574
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(i);\n         \
    \   while (n % i === 0) {\n                n /= i;\n            }\n        }\n\
    \    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpyj47p_6r.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyj47p_6r.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738579
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let factor = 1;\n  while (n >=\
    \ factor) {\n    factors.push(factor);\n    n /= factor;\n    factor++;\n  }\n\
    \  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpz2tkthoj.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpz2tkthoj.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738579
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 1;\n  while (n % i ===\
    \ 0) {\n    factors.push(i);\n    n /= i;\n    i++;\n  }\n  if (n !== 1) {\n \
    \   factors.push(n);\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpbs_w7gdx.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbs_w7gdx.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738579
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factor = 1;\n    while\
    \ (n > 1) {\n        if (n % factor === 0) {\n            factors.push(factor);\n\
    \            n /= factor;\n        } else {\n            factor *= factor;\n \
    \       }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffc0f4c5c70\n 1: 0x2aad0cd05727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2aad0d89a28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2aad0d1d4f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2aad0d366760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2aad0d36e0cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2aad0d5587db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2aad0ceb77f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738580
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor: number[] = [];\n  let\
    \ factorCount: number[] = [];\n  let factorCountIndex: number[] = [];\n  let factorCountIndexMax:\
    \ number[] = [];\n  let factorCountIndexMaxIndex: number[] = [];\n  let factorCountIndexMaxIndexIndex:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex2: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex3: number[] = [];\n  let factorCountIndexMaxIndexIndex4:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex5: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex6: number[] = [];\n  let factorCountIndexMaxIndexIndex7:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex8: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex9: number[] = [];\n  let factorCountIndexMaxIndexIndex10:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex11: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex12: number[] = [];\n  let factorCountIndexMaxIndexIndex13:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex14: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex15: number[] = [];\n  let factorCountIndexMaxIndexIndex16:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex17: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex18: number[] = [];\n  let factorCountIndexMaxIndexIndex19:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex20: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex21: number[] = [];\n  let factorCountIndexMaxIndexIndex22:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex23: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex24: number[] = [];\n  let factorCountIndexMaxIndexIndex25:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex26: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex27: number[] = [];\n  let factorCountIndexMaxIndexIndex28:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex29: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex30: number[] = [];\n  let factorCountIndexMaxIndexIndex31:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex32: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex33: number[] = [];\n  let factorCountIndexMaxIndexIndex34:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex35: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex36: number\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsdjq0w25.ts(69,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738574
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors = [];\n  let i = 1;\n  while (n > 1) {\n    if (n\
    \ % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n     \
    \ i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fff89aa3270\n 1: 0x2b70a33e0727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2b70a3f7528e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b70a38aff8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b70a3a41760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b70a3a490cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b70a3c337db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b70a35927f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738582
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors = [];\n    let factor = 1;\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            factors.push(factor);\n\
    \            factor *= i;\n            while (n % factor === 0) {\n          \
    \      n /= factor;\n                factor++;\n            }\n        } else\
    \ {\n            i++;\n        }\n    }\n    if (n !== 1) {\n        factors.push(factor);\n\
    \    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpk8o6y_v9.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmpk8o6y_v9.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738580
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(i);\n         \
    \   while (n % i === 0) {\n                n /= i;\n            }\n        }\n\
    \    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpgeppxk4o.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgeppxk4o.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738579
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(i);\n         \
    \   while (n % i === 0) {\n                n /= i;\n                factors.push(i);\n\
    \            }\n        }\n    }\n    if (n != 1) {\n        factors.push(n);\n\
    \    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpiuf2ih61.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpiuf2ih61.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2, 2\
    \ ],\n  expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738581
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    let factor = 1;\n    while\
    \ (n > 1) {\n        if (n % factor === 0) {\n            factors.push(factor);\n\
    \            n /= factor;\n        } else {\n            factor *= factor;\n \
    \       }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffc548d4b10\n 1: 0x2ab04fdd0727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2ab05096528e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2ab05029ff8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2ab050431760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2ab0504390cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2ab0506237db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2ab04ff827f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738585
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n < 2) {\n    return [];\n  }\n  const factors: number[] =\
    \ [];\n  let i = 2;\n  while (i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738581
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n === 0) {\n    return [];\n  }\n\n  const factors: number[]\
    \ = [];\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i);\n\
    \      n = n / i;\n    } else {\n      i++;\n    }\n  }\n\n  return factors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpgzncdwuo.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgzncdwuo.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738581
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors = [];\n    for (let i = 2; i <= Math.sqrt(n); i++)\
    \ {\n        if (n % i === 0) {\n            factors.push(i);\n            while\
    \ (n % i === 0) {\n                n /= i;\n            }\n        }\n    }\n\
    \    if (n > 1) {\n        factors.push(n);\n    }\n    return factors;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmps5otr4ou.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmps5otr4ou.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738581
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n \
    \   }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738577
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n === 1) {\n    return [1];\n  }\n  const factors: number[]\
    \ = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n\
    \      factors.push(i as number);\n      while (n % i === 0) {\n        n /= i;\n\
    \      }\n    }\n  }\n  if (n !== 1) {\n    factors.push(n as number);\n  }\n\
    \  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpxvdn6sbo.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxvdn6sbo.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738582
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 1;\n  while (n % i ===\
    \ 0) {\n    factors.push(i);\n    i = i * 2;\n  }\n  if (n !== i) {\n    factors.push(i);\n\
    \  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  4\n]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpd8gqjpee.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpd8gqjpee.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 4\
    \ ],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738581
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n > 1)\
    \ {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n\
    \    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fff94079380\n 1: 0x2af4b6407727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2af4b6f9c28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2af4b68d6f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2af4b6a68760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2af4b6a700cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2af4b6c5a7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2af4b65b97f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738577
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factor: number[] = [];\n\
    \    let factorCount: number = 0;\n    let i: number;\n    let j: number;\n  \
    \  let factorCountArr: number[] = [];\n    let factorArr: number[] = [];\n   \
    \ let factorCountArrLen: number = 0;\n    let factorArrLen: number = 0;\n    let\
    \ factorCountArrMax: number = 0;\n    let factorArrMax: number = 0;\n    let factorCountArrMin:\
    \ number = 0;\n    let factorArrMin: number = 0;\n    let factorCountArrSum: number\
    \ = 0;\n    let factorArrSum: number = 0;\n    let factorCountArrAvg: number =\
    \ 0;\n    let factorArrAvg: number = 0;\n    let factorCountArrSumSq: number =\
    \ 0;\n    let factorArrSumSq: number = 0;\n    let factorCountArrAvgSq: number\
    \ = 0;\n    let factorArrAvgSq: number = 0;\n    let factorCountArrSumSqMin: number\
    \ = 0;\n    let factorArrSumSqMin: number = 0;\n    let factorCountArrAvgSqMin:\
    \ number = 0;\n    let factorArrAvgSqMin: number = 0;\n    let factorCountArrSumSqMax:\
    \ number = 0;\n    let factorArrSumSqMax: number = 0;\n    let factorCountArrAvgSqMax:\
    \ number = 0;\n    let factorArrAvgSqMax: number = 0;\n    let factorCountArrSumSqMinMax:\
    \ number = 0;\n    let factorArrSumSqMinMax: number = 0;\n    let factorCountArrAvgSqMinMax:\
    \ number = 0;\n    let factorArrAvgSqMinMax: number = 0;\n    let factorCountArrSumSqMinMaxSq:\
    \ number = 0;\n    let factorArrSumSqMinMaxSq: number = 0;\n    let factorCountArrAvgSqMinMaxSq:\
    \ number = 0;\n    let factorArrAvgSqMinMaxSq: number = 0;\n    let factorCountArrSumSqMinMaxSqMin:\
    \ number = 0;\n    let factorArrSumSqMinMaxSqMin: number = 0;\n    let factorCountArrAvgSqMinMaxSqMin:\
    \ number = 0;\n    let factorArrAvgSqMinMaxSqMin: number = 0;\n    let factorCountArrSumSqMinMaxSqMax:\
    \ number = 0;\n    let factorArrSumSqMinMaxSqMax: number = 0;\n    let factorCountArrAvgSqMinMaxSqMax:\
    \ number = 0;\n    let factorArrAvgSqMinMaxSqMax: number = 0;\n    let factorCountArrSumSqMinMaxSqMinMax:\
    \ number = 0;\n    let factorArrSumSqMinMaxSqMinMax: number = 0;\n    let factorCountArrAvgSqMinMaxSqMinMax:\
    \ number = 0;\n    let factorArrAvgSqMinMaxSqMinMax: \ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5me01e63.ts(60,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp5me01e63.ts(76,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738581
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    let i = 2;\n    while (i\
    \ <= Math.sqrt(n)) {\n        if (n % i === 0) {\n            factors.push(i);\n\
    \            while (n % i === 0) {\n                n /= i;\n                factors.push(i);\n\
    \            }\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors.push(n);\n\
    \    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpf5afll39.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpf5afll39.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2, 2\
    \ ],\n  expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738582
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n > 1)\
    \ {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n\
    \    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fff94079380\n 1: 0x2af4b6407727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2af4b6f9c28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2af4b68d6f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2af4b6a68760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2af4b6a700cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2af4b6c5a7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2af4b65b97f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738577
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 1;\n  while (n % i ===\
    \ 0) {\n    factors.push(i);\n    n /= i;\n    i++;\n  }\n  if (n !== 1) {\n \
    \   factors.push(n);\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpbs_w7gdx.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbs_w7gdx.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738579
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i as number);\n      while\
    \ (n % i === 0) {\n        n /= i;\n        factors.push(i as number);\n     \
    \ }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpv7q0k_93.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpv7q0k_93.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738574
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n\
    \  let factorsSum: number[] = [];\n  let factorsSumCount: number[] = [];\n  let\
    \ factorsSumCountSum: number[] = [];\n  let factorsSumCountSumCount: number[]\
    \ = [];\n  let factorsSumCountSumCountSum: number[] = [];\n  let factorsSumCountSumCountSumCount:\
    \ number[] = [];\n  let factorsSumCountSumCountSumCountSum: number[] = [];\n \
    \ let factorsSumCountSumCountSumCountSumCount: number[] = [];\n  let factorsSumCountSumCountSumCountSumCountSum:\
    \ number[] = [];\n  let factorsSumCountSumCountSumCountSumCountSumCount: number[]\
    \ = [];\n  let factorsSumCountSumCountSumCountSumCountSumCountSum: number[] =\
    \ [];\n  let factorsSumCountSumCountSumCountSumCountSumCountSumCount: number[]\
    \ = [];\n  let factorsSumCountSumCountSumCountSumCountSumCountSumCountSum: number[]\
    \ = [];\n  let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCount:\
    \ number[] = [];\n  let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum:\
    \ number[] = [];\n  let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount:\
    \ number[] = [];\n  let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum:\
    \ number[] = [];\n  let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount:\
    \ number[] = [];\n  let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum:\
    \ number[] = [];\n  let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount:\
    \ number[] = [];\n  let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum:\
    \ number[] = [];\n  let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount:\
    \ number[] = [];\n  let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum:\
    \ number[] = [];\n  let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount:\
    \ number[] = [];\n  let factorsSum\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeffz3k6n.ts(54,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738581
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factor = 1;\n    while\
    \ (n > 1) {\n        if (n % factor === 0) {\n            factors.push(factor);\n\
    \            n /= factor;\n        } else {\n            factor *= factor;\n \
    \       }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffc0f4c5c70\n 1: 0x2aad0cd05727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2aad0d89a28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2aad0d1d4f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2aad0d366760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2aad0d36e0cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2aad0d5587db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2aad0ceb77f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738580
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(i);\n         \
    \   n = n / i;\n        }\n    }\n    return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp32qi9v73.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp32qi9v73.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738582
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let i = 1;\n  while (n >= i) {\n\
    \    let f = i;\n    while (n % f === 0) {\n      f = f + 1;\n    }\n    factors.push(f);\n\
    \    i = f + 1;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3\n]\n\n\
    should loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpdqn_5vk9.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdqn_5vk9.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3 ],\n \
    \ expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738582
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  let factorization:\
    \ number[] = [];\n  let factorizationIndex = 0;\n  while (n > 1) {\n    if (n\
    \ % factor === 0) {\n      factors.push(factor);\n      factorization[factorizationIndex]\
    \ = factor;\n      factorizationIndex++;\n      n /= factor;\n    } else {\n \
    \     factor++;\n    }\n  }\n  if (n !== 1) {\n    factors.push(1);\n    factorization[factorizationIndex]\
    \ = n;\n    factorizationIndex++;\n  }\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fff6a6d5f60\n 1: 0x2af6c7964727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2af6c84f928e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2af6c7e33f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2af6c7fc5760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2af6c7fcd0cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2af6c81b77db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2af6c7b167f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738587
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors = [];\n    let factor = 1;\n    while (n > 1) {\n\
    \        if (n % factor === 0) {\n            factors.push(factor);\n        \
    \    n /= factor;\n        } else {\n            factor *= factor;\n        }\n\
    \    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fffad9fd240\n 1: 0x2ab0ea19a727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2ab0ead2f28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2ab0ea669f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2ab0ea7fb760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2ab0ea8030cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2ab0ea9ed7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2ab0ea34c7f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738585
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factor: number[] = [];\n\
    \    let factorCount: number[] = [];\n    let factorCountIndex: number[] = [];\n\
    \    let factorCountIndexMax: number[] = [];\n    let factorCountIndexMaxIndex:\
    \ number[] = [];\n    let factorCountIndexMaxIndexIndex: number[] = [];\n    let\
    \ factorCountIndexMaxIndexIndex2: number[] = [];\n    let factorCountIndexMaxIndexIndex3:\
    \ number[] = [];\n    let factorCountIndexMaxIndexIndex4: number[] = [];\n   \
    \ let factorCountIndexMaxIndexIndex5: number[] = [];\n    let factorCountIndexMaxIndexIndex6:\
    \ number[] = [];\n    let factorCountIndexMaxIndexIndex7: number[] = [];\n   \
    \ let factorCountIndexMaxIndexIndex8: number[] = [];\n    let factorCountIndexMaxIndexIndex9:\
    \ number[] = [];\n    let factorCountIndexMaxIndexIndex10: number[] = [];\n  \
    \  let factorCountIndexMaxIndexIndex11: number[] = [];\n    let factorCountIndexMaxIndexIndex12:\
    \ number[] = [];\n    let factorCountIndexMaxIndexIndex13: number[] = [];\n  \
    \  let factorCountIndexMaxIndexIndex14: number[] = [];\n    let factorCountIndexMaxIndexIndex15:\
    \ number[] = [];\n    let factorCountIndexMaxIndexIndex16: number[] = [];\n  \
    \  let factorCountIndexMaxIndexIndex17: number[] = [];\n    let factorCountIndexMaxIndexIndex18:\
    \ number[] = [];\n    let factorCountIndexMaxIndexIndex19: number[] = [];\n  \
    \  let factorCountIndexMaxIndexIndex20: number[] = [];\n    let factorCountIndexMaxIndexIndex21:\
    \ number[] = [];\n    let factorCountIndexMaxIndexIndex22: number[] = [];\n  \
    \  let factorCountIndexMaxIndexIndex23: number[] = [];\n    let factorCountIndexMaxIndexIndex24:\
    \ number[] = [];\n    let factorCountIndexMaxIndexIndex25: number[] = [];\n  \
    \  let factorCountIndexMaxIndexIndex26: number[] = [];\n    let factorCountIndexMaxIndexIndex27:\
    \ number[] = [];\n    let factorCountIndexMaxIndexIndex28: number[] = [];\n  \
    \  let factorCountIndexMaxIndexIndex29: number[] = [];\n    let factorCountIndexMaxIndexIndex30:\
    \ number[] = [];\n    let factorCountIndexMaxIndexIndex31: number[] = [];\n  \
    \  let factorCountIndexMaxIndexIndex32: number[] = [];\n    let factorCountIndexMaxIndexIndex33:\
    \ number[] = [];\n    let factorCountIndexMaxIndexIndex34: number[] = [];\n  \
    \  let factorCountIndexMaxIndexIndex35: number[] = [];\n    let factorCountIndexMaxIndexIndex36:\
    \ number\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp730kqgm_.ts(69,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738582
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= Math.sqrt(n))\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0)\
    \ {\n        n /= i;\n        factors.push(i);\n      }\n    }\n    i++;\n  }\n\
    \  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpd228uvid.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpd228uvid.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738582
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (n % i ===\
    \ 0) {\n    factors.push(i);\n    n /= i;\n    i++;\n  }\n  if (n !== 1) {\n \
    \   factors.push(n);\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  2,\n  2\n]\n    at test (/tmp/tmpe85sjh6z.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpe85sjh6z.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4 ],\n\
    \  expected: [ 2, 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738582
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n)\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else\
    \ {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738574
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let i = 1;\n  while (n != 1) {\n\
    \    while (n % i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n\
    \  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fffabd3ffd0\n 1: 0x2b8981a9a727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2b898262f28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b8981f69f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b89820fb760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b89821030cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b89822ed7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b8981c4c7f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738585
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n < 2) {\n    return [];\n  }\n  const factors = [];\n  let\
    \ i = 2;\n  while (i <= n) {\n    const isPrime = true;\n    for (let j = 2; j\
    \ < i; j++) {\n      if (n % j === 0) {\n        isPrime = false;\n        break;\n\
    \      }\n    }\n    if (isPrime) {\n      factors.push(i);\n      i = i * 2;\n\
    \    } else {\n      i = i * 2;\n    }\n  }\n  return factors;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplj_pr6if.ts(20,9): error TS2588: Cannot assign to
    ''isPrime'' because it is a constant.

    '
  timestamp: 1659738582
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 1;\n  while (n > 1) {\n\
    \    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else\
    \ {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffd0bd2d740\n 1: 0x2b4a05bbd727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2b4a0675228e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b4a0608cf8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b4a0621e760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b4a062260cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b4a064107db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b4a05d6f7f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738585
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factor = 1;\n    let primeFactor\
    \ = 1;\n    let primeFactorCount = 0;\n    let factorCount = 0;\n    let isPrime\
    \ = true;\n    let isPrimeCount = 0;\n    let isPrimeFactor = true;\n    let isPrimeFactorCount\
    \ = 0;\n    let isPrimePrime = true;\n    let isPrimePrimeCount = 0;\n    let\
    \ isPrimePrimeFactor = true;\n    let isPrimePrimeFactorCount = 0;\n    let isPrimePrimePrime\
    \ = true;\n    let isPrimePrimePrimeCount = 0;\n    let isPrimePrimePrimeFactor\
    \ = true;\n    let isPrimePrimePrimeFactorCount = 0;\n    let isPrimePrimePrimePrime\
    \ = true;\n    let isPrimePrimePrimePrimeCount = 0;\n    let isPrimePrimePrimePrimeFactor\
    \ = true;\n    let isPrimePrimePrimePrimeFactorCount = 0;\n    let isPrimePrimePrimePrimePrime\
    \ = true;\n    let isPrimePrimePrimePrimePrimeCount = 0;\n    let isPrimePrimePrimePrimePrimeFactor\
    \ = true;\n    let isPrimePrimePrimePrimePrimeFactorCount = 0;\n    let isPrimePrimePrimePrimePrimePrime\
    \ = true;\n    let isPrimePrimePrimePrimePrimeCount = 0;\n    let isPrimePrimePrimePrimePrimePrimeFactor\
    \ = true;\n    let isPrimePrimePrimePrimePrimePrimeFactorCount = 0;\n    let isPrimePrimePrimePrimePrimePrimePrime\
    \ = true;\n    let isPrimePrimePrimePrimePrimePrimePrimeCount = 0;\n    let isPrimePrimePrimePrimePrimePrimePrimeFactor\
    \ = true;\n    let isPrimePrimePrimePrimePrimePrimePrimeFactorCount = 0;\n   \
    \ let isPrimePrimePrimePrimePrimePrimePrimePrime = true;\n    let isPrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0;\n    let isPrimePrimePrimePrimePrimePrimePrimePrimeFactor = true;\n   \
    \ let isPrimePrimePrimePrimePrimePrimePrimePrimeFactorCount = 0;\n    let isPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true;\n    let isPrimePrimePrimePrimePrimePrimePrimePrimeCount = 0;\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvuj86br6.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738583
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor: number[] = [];\n  let\
    \ i: number;\n  let j: number;\n  let factorCount: number = 0;\n  let factorsCount:\
    \ number = 0;\n  let factorsCountMax: number = 0;\n  let factorsCountMin: number\
    \ = 0;\n  let factorsCountMaxIndex: number = 0;\n  let factorsCountMinIndex: number\
    \ = 0;\n  let factorsCountMaxIndex2: number = 0;\n  let factorsCountMinIndex2:\
    \ number = 0;\n  let factorsCountMaxIndex3: number = 0;\n  let factorsCountMinIndex3:\
    \ number = 0;\n  let factorsCountMaxIndex4: number = 0;\n  let factorsCountMinIndex4:\
    \ number = 0;\n  let factorsCountMaxIndex5: number = 0;\n  let factorsCountMinIndex5:\
    \ number = 0;\n  let factorsCountMaxIndex6: number = 0;\n  let factorsCountMinIndex6:\
    \ number = 0;\n  let factorsCountMaxIndex7: number = 0;\n  let factorsCountMinIndex7:\
    \ number = 0;\n  let factorsCountMaxIndex8: number = 0;\n  let factorsCountMinIndex8:\
    \ number = 0;\n  let factorsCountMaxIndex9: number = 0;\n  let factorsCountMinIndex9:\
    \ number = 0;\n  let factorsCountMaxIndex10: number = 0;\n  let factorsCountMinIndex10:\
    \ number = 0;\n  let factorsCountMaxIndex11: number = 0;\n  let factorsCountMinIndex11:\
    \ number = 0;\n  let factorsCountMaxIndex12: number = 0;\n  let factorsCountMinIndex12:\
    \ number = 0;\n  let factorsCountMaxIndex13: number = 0;\n  let factorsCountMinIndex13:\
    \ number = 0;\n  let factorsCountMaxIndex14: number = 0;\n  let factorsCountMinIndex14:\
    \ number = 0;\n  let factorsCountMaxIndex15: number = 0;\n  let factorsCountMinIndex15:\
    \ number = 0;\n  let factorsCountMaxIndex16: number = 0;\n  let factorsCountMinIndex16:\
    \ number = 0;\n  let factorsCountMaxIndex17: number = 0;\n  let factorsCountMinIndex17:\
    \ number = 0;\n  let factorsCountMaxIndex18: number = 0;\n  let factorsCountMinIndex18:\
    \ number = 0;\n  let factorsCountMaxIndex19: number = 0;\n  let factorsCountMinIndex19:\
    \ number = 0;\n  let factorsCountMaxIndex20: number = 0;\n  let factorsCountMinIndex20:\
    \ number = 0;\n  let factorsCountMaxIndex21: number = 0;\n  let factorsCountMinIndex21:\
    \ number = 0;\n  let factorsCountMax\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmq5mey0w.ts(78,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738583
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let primeFactors: number[]\
    \ = [];\n    let isPrime: boolean;\n    let isPrimeSet: boolean;\n    let isPrimeSet2:\
    \ boolean;\n    let isPrimeSet3: boolean;\n    let isPrimeSet4: boolean;\n   \
    \ let isPrimeSet5: boolean;\n    let isPrimeSet6: boolean;\n    let isPrimeSet7:\
    \ boolean;\n    let isPrimeSet8: boolean;\n    let isPrimeSet9: boolean;\n   \
    \ let isPrimeSet10: boolean;\n    let isPrimeSet11: boolean;\n    let isPrimeSet12:\
    \ boolean;\n    let isPrimeSet13: boolean;\n    let isPrimeSet14: boolean;\n \
    \   let isPrimeSet15: boolean;\n    let isPrimeSet16: boolean;\n    let isPrimeSet17:\
    \ boolean;\n    let isPrimeSet18: boolean;\n    let isPrimeSet19: boolean;\n \
    \   let isPrimeSet20: boolean;\n    let isPrimeSet21: boolean;\n    let isPrimeSet22:\
    \ boolean;\n    let isPrimeSet23: boolean;\n    let isPrimeSet24: boolean;\n \
    \   let isPrimeSet25: boolean;\n    let isPrimeSet26: boolean;\n    let isPrimeSet27:\
    \ boolean;\n    let isPrimeSet28: boolean;\n    let isPrimeSet29: boolean;\n \
    \   let isPrimeSet30: boolean;\n    let isPrimeSet31: boolean;\n    let isPrimeSet32:\
    \ boolean;\n    let isPrimeSet33: boolean;\n    let isPrimeSet34: boolean;\n \
    \   let isPrimeSet35: boolean;\n    let isPrimeSet36: boolean;\n    let isPrimeSet37:\
    \ boolean;\n    let isPrimeSet38: boolean;\n    let isPrimeSet39: boolean;\n \
    \   let isPrimeSet40: boolean;\n    let isPrimeSet41: boolean;\n    let isPrimeSet42:\
    \ boolean;\n    let isPrimeSet43: boolean;\n    let isPrimeSet44: boolean;\n \
    \   let isPrimeSet45: boolean;\n    let isPrimeSet46: boolean;\n    let isPrimeSet47:\
    \ boolean;\n    let isPrimeSet48: boolean;\n    let isPrimeSet49: boolean;\n \
    \   let isPrimeSet50: boolean;\n    let isPrimeSet51: boolean;\n    let isPrimeSet52:\
    \ boolean;\n    let isPrimeSet53: boolean;\n    let isPrimeSet54: boolean;\n \
    \   let isPrimeSet55: boolean;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps6hylynn.ts(86,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738584
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n > 1)\
    \ {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n\
    \    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fff94079380\n 1: 0x2af4b6407727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2af4b6f9c28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2af4b68d6f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2af4b6a68760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2af4b6a700cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2af4b6c5a7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2af4b65b97f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738577
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n\
    \  let isPrime = true;\n  let isPrimeCount: number[] = [];\n  let isPrimePrime\
    \ = true;\n  let isPrimePrimeCount: number[] = [];\n  let isPrimePrimePrime =\
    \ true;\n  let isPrimePrimePrimeCount: number[] = [];\n  let isPrimePrimePrimePrime\
    \ = true;\n  let isPrimePrimePrimePrimeCount: number[] = [];\n  let isPrimePrimePrimePrimePrime\
    \ = true;\n  let isPrimePrimePrimePrimePrimeCount: number[] = [];\n  let isPrimePrimePrimePrimePrimePrime\
    \ = true;\n  let isPrimePrimePrimePrimePrimePrimeCount: number[] = [];\n  let\
    \ isPrimePrimePrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimePrimePrimeCount:\
    \ number[] = [];\n  let isPrimePrimePrimePrimePrimePrimePrimePrime = true;\n \
    \ let isPrimePrimePrimePrimePrimePrimePrimePrimeCount: number[] = [];\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount: number[]\
    \ = [];\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true;\n\
    \  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount: number[]\
    \ = [];\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount:\
    \ number[] = [];\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount:\
    \ number[] = [];\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmhg1w3o9.ts(54,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738583
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n >=\
    \ 1) {\n    while (n % factor === 0) {\n      factors.push(factor);\n      n /=\
    \ factor;\n    }\n    factor++;\n  }\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fffb6615540\n 1: 0x2af7cf032727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2af7cfbc728e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2af7cf501f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2af7cf693760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2af7cf69b0cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2af7cf8857db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2af7cf1e47f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738587
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor: number[] = [];\n  let\
    \ i: number;\n  let j: number;\n  let factorCount: number;\n  let factorCountMax:\
    \ number;\n  let factorCountMin: number;\n  let factorCountSum: number;\n  let\
    \ factorCountSumMax: number;\n  let factorCountSumMin: number;\n  let factorCountSumSum:\
    \ number;\n  let factorCountSumSumMax: number;\n  let factorCountSumSumMin: number;\n\
    \  let factorCountSumSumSum: number;\n  let factorCountSumSumSumMax: number;\n\
    \  let factorCountSumSumSumMin: number;\n  let factorCountSumSumSumSum: number;\n\
    \  let factorCountSumSumSumSumMax: number;\n  let factorCountSumSumSumSumMin:\
    \ number;\n  let factorCountSumSumSumSumSum: number;\n  let factorCountSumSumSumSumSumMax:\
    \ number;\n  let factorCountSumSumSumSumSumMin: number;\n  let factorCountSumSumSumSumSumSum:\
    \ number;\n  let factorCountSumSumSumSumSumSumMax: number;\n  let factorCountSumSumSumSumSumSumMin:\
    \ number;\n  let factorCountSumSumSumSumSumSumSum: number;\n  let factorCountSumSumSumSumSumSumSumMax:\
    \ number;\n  let factorCountSumSumSumSumSumSumSumMin: number;\n  let factorCountSumSumSumSumSumSumSumSum:\
    \ number;\n  let factorCountSumSumSumSumSumSumSumSumMax: number;\n  let factorCountSumSumSumSumSumSumSumMin:\
    \ number;\n  let factorCountSumSumSumSumSumSumSumSum: number;\n  let factorCountSumSumSumSumSumSumSumSumMax:\
    \ number;\n  let factorCountSumSumSumSumSumSumSumSumMin: number;\n  let factorCountSumSumSumSumSumSumSumSumSum:\
    \ number;\n  let factorCountSumSumSumSumSumSumSumSumSumMax: number;\n  let factorCountSumSumSumSumSumSumSumSumMin:\
    \ number;\n  let factorCountSumSumSumSumSumSumSumSumSum: number;\n  let factorCountSumSumSumSumSumSumSumSumSumMax:\
    \ number;\n  let factorCountSumSumSumSumSumSumSumSumMin: number;\n  let factorCountSumSumSumSumSumSumSumSumSum:\
    \ number;\n  let factorCountSumSumSumSumSumSumSumSumSumMax: number;\n  let factorCountSumSumSumSumSumSumSumSumSumMin:\
    \ number;\n  let factorCountSumSumSumSumSumSumSumSumSumSum: number;\n  let factorCountSumSumSumSumSumSumSumSumSumSumMax:\
    \ number;\n  let factorCountSumSumSumSumSumSumSumSumSumMin: number;\n  let factorCountSumSumSumSumSumSumSumSumSumSum\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxeqg815u.ts(74,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738584
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factor: number[] = [];\n\
    \    let i: number;\n    let j: number;\n    let factorCount: number = 0;\n  \
    \  let factorsCount: number = 0;\n    let factorsCountMax: number = Math.sqrt(n);\n\
    \    let factorsCountMin: number = Math.floor(factorsCountMax);\n    let factorsCountMaxInRange:\
    \ number = factorsCountMax - factorsCountMin;\n    let factorsCountMinInRange:\
    \ number = factorsCountMin - 1;\n    let factorsCountMaxInRangeInRange: number\
    \ = factorsCountMaxInRange - factorsCountMinInRange;\n    let factorsCountMinInRangeInRange:\
    \ number = factorsCountMinInRange + 1;\n    let factorsCountMaxInRangeInRangeInRange:\
    \ number = factorsCountMaxInRangeInRange + 1;\n    let factorsCountMinInRangeInRangeInRange:\
    \ number = factorsCountMinInRangeInRange + 2;\n    let factorsCountMaxInRangeInRangeInRangeInRange:\
    \ number = factorsCountMaxInRangeInRangeInRange + 2;\n    let factorsCountMinInRangeInRangeInRangeInRange:\
    \ number = factorsCountMinInRangeInRangeInRange + 3;\n    let factorsCountMaxInRangeInRangeInRangeInRange:\
    \ number = factorsCountMaxInRangeInRangeInRange + 3;\n    let factorsCountMinInRangeInRangeInRangeInRange:\
    \ number = factorsCountMinInRangeInRangeInRange + 4;\n    let factorsCountMaxInRangeInRangeInRangeInRange:\
    \ number = factorsCountMaxInRangeInRangeInRange + 4;\n    let factorsCountMinInRangeInRangeInRangeInRange:\
    \ number = factorsCountMinInRangeInRangeInRange + 5;\n    let factorsCountMaxInRangeInRangeInRangeInRange:\
    \ number = factorsCountMaxInRangeInRangeInRange + 5;\n    let factorsCountMinInRangeInRangeInRangeInRange:\
    \ number = factorsCountMinInRangeInRangeInRange + 6;\n    let factorsCountMaxInRangeInRangeInRangeInRange:\
    \ number = factorsCountMaxInRangeInRangeInRange + 6;\n    let factorsCountMinInRangeInRangeInRangeInRange:\
    \ number = factorsCountMinInRangeInRangeInRange + 7;\n    let factorsCountMaxInRangeInRangeInRangeInRange:\
    \ number = factorsCountMaxInRangeInRangeInRange + 7;\n    let factorsCountMinInRangeInRangeInRangeIn\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo4qmrbp5.ts(53,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738584
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors = [];\n  let i = 1;\n  while (n > 1) {\n    if (n\
    \ % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i++;\n\
    \    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffd328ce1b0\n 1: 0x2ab714e8f727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2ab715a2428e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2ab71535ef8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2ab7154f0760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2ab7154f80cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2ab7156e27db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2ab7150417f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738587
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    let i = 2;\n    while (i\
    \ <= n) {\n        while (n % i === 0) {\n            factors.push(i);\n     \
    \       n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors.push(n);\n\
    \    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738584
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n)\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0)\
    \ {\n        n /= i;\n      }\n    } else {\n      i++;\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpfwn9xs9h.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfwn9xs9h.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738584
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    let factor = 1;\n    while\
    \ (n > 1) {\n        if (n % factor === 0) {\n            factors.push(factor);\n\
    \            n /= factor;\n        } else {\n            factor *= factor;\n \
    \       }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffc548d4b10\n 1: 0x2ab04fdd0727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2ab05096528e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2ab05029ff8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2ab050431760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2ab0504390cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2ab0506237db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2ab04ff827f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738585
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(i);\n         \
    \   while (n % i === 0) {\n                n /= i;\n                factors.push(i);\n\
    \            }\n        }\n    }\n    if (n > 1) {\n        factors.push(n);\n\
    \    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpy_w4ek9w.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpy_w4ek9w.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2, 2\
    \ ],\n  expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738584
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n \
    \   }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpqmgd_59p.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqmgd_59p.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738576
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            while (n % i === 0) {\n    \
    \            n /= i;\n                factors.push(i);\n            }\n      \
    \      if (n !== 1) {\n                factors.push(n);\n            }\n     \
    \   }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpqks1b2wz.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqks1b2wz.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738584
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n < 2) return [];\n  let factors: number[] = [];\n  let i\
    \ = 2;\n  while (true) {\n    if (n % i === 0) {\n      factors.push(i);\n   \
    \   n /= i;\n    } else {\n      i++;\n    }\n    if (n === 1) break;\n  }\n \
    \ return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738584
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n < 2) {\n    return [];\n  }\n\n  const factors: number[]\
    \ = [];\n  let i = 2;\n  while (i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738584
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factorsCount: number[]\
    \ = [];\n    let factorsCountArr: number[] = [];\n    let factorsCountArrLen:\
    \ number = 0;\n    let factorsCountArrMax: number = 0;\n    let factorsCountArrMaxIndex:\
    \ number = 0;\n    let factorsCountArrMaxValue: number = 0;\n    let factorsCountArrMaxValueIndex:\
    \ number = 0;\n    let factorsCountArrMaxValueIndex2: number = 0;\n    let factorsCountArrMaxValueIndex3:\
    \ number = 0;\n    let factorsCountArrMaxValueIndex4: number = 0;\n    let factorsCountArrMaxValueIndex5:\
    \ number = 0;\n    let factorsCountArrMaxValueIndex6: number = 0;\n    let factorsCountArrMaxValueIndex7:\
    \ number = 0;\n    let factorsCountArrMaxValueIndex8: number = 0;\n    let factorsCountArrMaxValueIndex9:\
    \ number = 0;\n    let factorsCountArrMaxValueIndex10: number = 0;\n    let factorsCountArrMaxValueIndex11:\
    \ number = 0;\n    let factorsCountArrMaxValueIndex12: number = 0;\n    let factorsCountArrMaxValueIndex13:\
    \ number = 0;\n    let factorsCountArrMaxValueIndex14: number = 0;\n    let factorsCountArrMaxValueIndex15:\
    \ number = 0;\n    let factorsCountArrMaxValueIndex16: number = 0;\n    let factorsCountArrMaxValueIndex17:\
    \ number = 0;\n    let factorsCountArrMaxValueIndex18: number = 0;\n    let factorsCountArrMaxValueIndex19:\
    \ number = 0;\n    let factorsCountArrMaxValueIndex20: number = 0;\n    let factorsCountArrMaxValueIndex21:\
    \ number = 0;\n    let factorsCountArrMaxValueIndex22: number = 0;\n    let factorsCountArrMaxValueIndex23:\
    \ number = 0;\n    let factorsCountArrMaxValueIndex24: number = 0;\n    let factorsCountArrMaxValueIndex25:\
    \ number = 0;\n    let factorsCountArrMaxValueIndex26: number = 0;\n    let factorsCountArrMaxValueIndex27:\
    \ number = 0;\n    let factorsCountArrMaxValueIndex28: number = 0;\n    let factorsCountArrMaxValueIndex29:\
    \ number = 0;\n    let factorsCountArrMaxValueIndex30: number = 0;\n    let factorsCountArrMaxValueIndex31:\
    \ number = 0;\n    let factorsCountArrMaxValueIndex32: number = 0;\n    let factorsCountArrMaxValueIndex33:\
    \ number = 0;\n    let factorsCountArrMaxValueIndex34: number = 0;\n    let factorsCountArrMaxValue\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxdwlgse6.ts(69,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738584
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 1;\n  while (n >= i)\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else\
    \ {\n      i++;\n    }\n  }\n  if (n > 1) {\n    factors.push(1);\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffee65ff420\n 1: 0x2b3331945727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2b33324da28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b3331e14f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b3331fa6760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b3331fae0cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b33321987db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b3331af77f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738588
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    const primeFactors: number[]\
    \ = [];\n    let factor: number[] = [];\n    let primeFactor: number[] = [];\n\
    \    let i: number;\n    let j: number;\n    let factorCount: number;\n    let\
    \ primeFactorCount: number;\n    let factorIndex: number;\n    let primeFactorIndex:\
    \ number;\n    let factorsCount: number;\n    let primeFactorsCount: number;\n\
    \    let factorsIndex: number;\n    let primeFactorsIndex: number;\n    let factorsLength:\
    \ number;\n    let primeFactorsLength: number;\n    let factorsMax: number;\n\
    \    let primeFactorsMax: number;\n    let factorsMin: number;\n    let primeFactorsMin:\
    \ number;\n    let factorsSum: number;\n    let primeFactorsSum: number;\n   \
    \ let factorsProduct: number;\n    let primeFactorsProduct: number;\n    let factorsProductSum:\
    \ number;\n    let primeFactorsProductSum: number;\n    let factorsProductProduct:\
    \ number;\n    let primeFactorsProductProduct: number;\n    let factorsProductProductSum:\
    \ number;\n    let primeFactorsProductProductSum: number;\n    let factorsProductProductProduct:\
    \ number;\n    let primeFactorsProductProductProduct: number;\n    let factorsProductProductProductSum:\
    \ number;\n    let primeFactorsProductProductProductSum: number;\n    let factorsProductProductProductProduct:\
    \ number;\n    let primeFactorsProductProductProductProduct: number;\n    let\
    \ factorsProductProductProductProductSum: number;\n    let primeFactorsProductProductProductSum:\
    \ number;\n    let factorsProductProductProductProduct: number;\n    let primeFactorsProductProductProductProduct:\
    \ number;\n    let factorsProductProductProductProductSum: number;\n    let primeFactorsProductProductProductSum:\
    \ number;\n    let factorsProductProductProductProduct: number;\n    let primeFactorsProductProductProductProduct:\
    \ number;\n    let factorsProductProductProductProductSum: number;\n    let primeFactorsProductProductProductSum:\
    \ number;\n    let factorsProductProductProductProduct: number;\n    let primeFactorsProductProductProductProduct:\
    \ number;\n    let factorsProductProductProductProductSum: number;\n    let primeFactorsProductProductProductSum:\
    \ number;\n    let factorsProductProductProductProduct: number;\n    let primeFactorsProductProductProductProduct:\
    \ number;\n    let factorsProductProductProductProductSum: number;\n    let primeFactorsProductProductProductSum:\
    \ number;\n    let factorsProductProductProductProduct: number;\n    let primeFactorsProductProductProductProduct:\
    \ number;\n    let factorsProductProductProductProductSum: number;\n    let primeFactorsProductProductProductSum:\
    \ number;\n    let factorsProductProductProductProduct: number;\n    let primeFactorsProductProductProductProduct:\
    \ number;\n    let factorsProductProductProductProductSum: number;\n    let primeFactorsProductProductProductSum:\
    \ number;\n    let factorsProductProduct\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5f05h8ar.ts(90,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738585
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  const factorsCount: number[]\
    \ = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n\
    \      factors.push(i);\n      factorsCount.push(1);\n      while (n % i === 0)\
    \ {\n        n /= i;\n        factorsCount[factorsCount.length - 1]++;\n     \
    \ }\n    }\n  }\n  return [factors, factorsCount];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvgpwvha0.ts(23,11): error TS2322: Type ''number[]''
    is not assignable to type ''number''.

    ../../../../../tmp/tmpvgpwvha0.ts(23,20): error TS2322: Type ''number[]'' is not
    assignable to type ''number''.

    '
  timestamp: 1659738585
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factor: number[] = [];\n\
    \    let factorCount: number[] = [];\n    let factorCountIndex: number[] = [];\n\
    \    let factorCountIndexIndex: number[] = [];\n    let factorCountIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndex: number[] = [];\n  \
    \  let factorCountIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndex\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj933st45.ts(58,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738585
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    let i = 2;\n    while (i\
    \ <= Math.sqrt(n)) {\n        if (n % i === 0) {\n            factors.push(i);\n\
    \            while (n % i === 0) {\n                n /= i;\n                factors.push(i);\n\
    \            }\n        }\n        i++;\n    }\n    return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp8dax7a2h.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8dax7a2h.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738586
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (n % i ===\
    \ 0) {\n    factors.push(i);\n    n /= i;\n    i++;\n  }\n  if (n > 1) {\n   \
    \ factors.push(n);\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  2,\n  2\n]\n    at test (/tmp/tmpklh1_iar.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpklh1_iar.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4 ],\n\
    \  expected: [ 2, 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738579
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let factor = 1;\n  while (n >\
    \ 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n\
    \    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffedc139c50\n 1: 0x2b67cae8e727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2b67cba2328e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b67cb35df8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b67cb4ef760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b67cb4f70cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b67cb6e17db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b67cb0407f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738589
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factorsCount: number[]\
    \ = [];\n    let factorsCountMax: number[] = [];\n    let factorsCountMaxIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndex: number[] = [];\n\
    \    let factorsCountMaxIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_vin5ikj.ts(55,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738577
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n !=\
    \ 1) {\n    while (n % factor == 0) {\n      factors.push(factor);\n      n /=\
    \ factor;\n    }\n    factor++;\n  }\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffd329013c0\n 1: 0x2ba56e7fa727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2ba56f38f28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2ba56ecc9f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2ba56ee5b760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2ba56ee630cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2ba56f04d7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2ba56e9ac7f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738577
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let factor = 1;\n  while (n >\
    \ 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n\
    \    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffedc139c50\n 1: 0x2b67cae8e727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2b67cba2328e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b67cb35df8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b67cb4ef760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b67cb4f70cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b67cb6e17db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b67cb0407f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738589
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor: number[] = [];\n  let\
    \ i: number;\n  let j: number;\n  let factorCount: number = 0;\n  let factorCountMax:\
    \ number = 0;\n  let factorCountMaxIndex: number = 0;\n  let factorCountMaxValue:\
    \ number = 0;\n  let factorCountMaxValueIndex: number = 0;\n  let factorCountMaxValueIndex2:\
    \ number = 0;\n  let factorCountMaxValueIndex3: number = 0;\n  let factorCountMaxValueIndex4:\
    \ number = 0;\n  let factorCountMaxValueIndex5: number = 0;\n  let factorCountMaxValueIndex6:\
    \ number = 0;\n  let factorCountMaxValueIndex7: number = 0;\n  let factorCountMaxValueIndex8:\
    \ number = 0;\n  let factorCountMaxValueIndex9: number = 0;\n  let factorCountMaxValueIndex10:\
    \ number = 0;\n  let factorCountMaxValueIndex11: number = 0;\n  let factorCountMaxValueIndex12:\
    \ number = 0;\n  let factorCountMaxValueIndex13: number = 0;\n  let factorCountMaxValueIndex14:\
    \ number = 0;\n  let factorCountMaxValueIndex15: number = 0;\n  let factorCountMaxValueIndex16:\
    \ number = 0;\n  let factorCountMaxValueIndex17: number = 0;\n  let factorCountMaxValueIndex18:\
    \ number = 0;\n  let factorCountMaxValueIndex19: number = 0;\n  let factorCountMaxValueIndex20:\
    \ number = 0;\n  let factorCountMaxValueIndex21: number = 0;\n  let factorCountMaxValueIndex22:\
    \ number = 0;\n  let factorCountMaxValueIndex23: number = 0;\n  let factorCountMaxValueIndex24:\
    \ number = 0;\n  let factorCountMaxValueIndex25: number = 0;\n  let factorCountMaxValueIndex26:\
    \ number = 0;\n  let factorCountMaxValueIndex27: number = 0;\n  let factorCountMaxValueIndex28:\
    \ number = 0;\n  let factorCountMaxValueIndex29: number = 0;\n  let factorCountMaxValueIndex30:\
    \ number = 0;\n  let factorCountMaxValueIndex31: number = 0;\n  let factorCountMaxValueIndex32:\
    \ number = 0;\n  let factorCountMaxValueIndex33: number = 0;\n  let factorCountMaxValueIndex34:\
    \ number = 0;\n  let factorCountMaxValueIndex35: number = 0;\n  let factorCountMaxValueIndex36:\
    \ number = 0;\n  let factorCountMaxValueIndex37: number = 0;\n  let factorCountMaxValueIndex38:\
    \ number = 0;\n  let factorCountMaxValueIndex39: number = 0;\n  let factorCountMaxValueIndex40:\
    \ number = 0;\n  let factorCountMaxValueIndex41: number = 0;\n  let factorCountMaxValueIndex42:\
    \ number = 0;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppiqi5_h2.ts(78,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738586
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factorsCount: number[]\
    \ = [];\n    let factorsSum: number[] = [];\n    let factorsSumCount: number[]\
    \ = [];\n    let factorsSumCountSum: number[] = [];\n    let factorsSumCountSumCount:\
    \ number[] = [];\n    let factorsSumCountSumCountSum: number[] = [];\n    let\
    \ factorsSumCountSumCountSumCount: number[] = [];\n    let factorsSumCountSumCountSumCountSum:\
    \ number[] = [];\n    let factorsSumCountSumCountSumCountSumCount: number[] =\
    \ [];\n    let factorsSumCountSumCountSumCountSumCountSum: number[] = [];\n  \
    \  let factorsSumCountSumCountSumCountSumCountSumCount: number[] = [];\n    let\
    \ factorsSumCountSumCountSumCountSumCountSumCountSum: number[] = [];\n    let\
    \ factorsSumCountSumCountSumCountSumCountSumCountSumCount: number[] = [];\n  \
    \  let factorsSumCountSumCountSumCountSumCountSumCountSumCountSum: number[] =\
    \ [];\n    let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCount:\
    \ number[] = [];\n    let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum:\
    \ number[] = [];\n    let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount:\
    \ number[] = [];\n    let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum:\
    \ number[] = [];\n    let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount:\
    \ number[] = [];\n    let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum:\
    \ number[] = [];\n    let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount:\
    \ number[] = [];\n    let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum:\
    \ number[] = [];\n    let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount:\
    \ number[] = [];\n    let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum:\
    \ number[] = [];\n    let factorsSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCountSumCount:\
    \ number[] = [];\n    let factorsSum\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_2rpxetv.ts(54,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738586
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors = [];\n  let factor = 1;\n  while (n > 1) {\n    if\
    \ (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    }\
    \ else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffe444a1b30\n 1: 0x2b10c7097727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2b10c7c2c28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b10c7566f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b10c76f8760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b10c77000cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b10c78ea7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b10c72497f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738589
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factorization: number[]\
    \ = [];\n    let factorizationCount: number = 0;\n    let factorizationNumber:\
    \ number = 0;\n    let factorizationNumbers: number[] = [];\n    let factorizationNumbersCount:\
    \ number = 0;\n    let factorizationNumbersIndex: number = 0;\n    let factorizationNumbersIndexCount:\
    \ number = 0;\n    let factorizationNumbersIndexNumber: number = 0;\n    let factorizationNumbersIndexNumberCount:\
    \ number = 0;\n    let factorizationNumbersIndexNumberNumber: number = 0;\n  \
    \  let factorizationNumbersIndexNumberNumberCount: number = 0;\n    let factorizationNumbersIndexNumberNumberNumber:\
    \ number = 0;\n    let factorizationNumbersIndexNumberNumberNumberCount: number\
    \ = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumber: number = 0;\n\
    \    let factorizationNumbersIndexNumberNumberNumberNumberCount: number = 0;\n\
    \    let factorizationNumbersIndexNumberNumberNumberNumberNumber: number = 0;\n\
    \    let factorizationNumbersIndexNumberNumberNumberNumberNumberCount: number\
    \ = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumberNumber:\
    \ number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumberNumberCount:\
    \ number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumberNumberNumber:\
    \ number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumberNumberNumberCount:\
    \ number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumberNumberNumberNumber:\
    \ number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumberNumberNumberNumberCount:\
    \ number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumberNumberNumberNumberNumber:\
    \ number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumberNumberNumberNumberNumberCount:\
    \ number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber:\
    \ number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberCount:\
    \ number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber:\
    \ number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberCount:\
    \ number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber:\
    \ number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberCount:\
    \ number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber:\
    \ number = 0;\n    let factorizationNumbersIndexNumberNumberNumberNumberNumberNumber\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpydzc9wv7.ts(61,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738586
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  let factorization\
    \ = 1;\n  let factorizations = [];\n  while (n > 1) {\n    if (n % factor ===\
    \ 0) {\n      factors.push(factor);\n      factorizations.push(factorization);\n\
    \      factorization *= factor;\n      factorization = 1;\n      factor = 1;\n\
    \    } else {\n      factor *= factor;\n    }\n    n--;\n  }\n  return factors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp9f2uk3v7.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9f2uk3v7.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738587
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  let factorization\
    \ = [];\n  let factorizationIndex = 0;\n  let factorizationIndexMax = factorizationIndex\
    \ + factors.length;\n  while (factorizationIndex < factorizationIndexMax) {\n\
    \    factors.push(factor);\n    factor *= n;\n    factorization[factorizationIndex]\
    \ = factor;\n    factorizationIndex++;\n  }\n  return factors;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpjubesk5g.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpjubesk5g.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738587
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factor = 1;\n    let factorization:\
    \ number[] = [];\n    let factorizationIndex = 0;\n    let factorizationIndexMax\
    \ = factorization.length - 1;\n    let factorizationIndexMin = 0;\n    let factorizationIndexMaxMin\
    \ = factorizationIndexMax - 1;\n    let factorizationIndexMinMax = factorizationIndexMin\
    \ + 1;\n    let factorizationIndexMaxMinMin = factorizationIndexMaxMin + 1;\n\
    \    let factorizationIndexMinMaxMin = factorizationIndexMaxMin + 1;\n    let\
    \ factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin\
    \ = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin\
    \ + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n\
    \    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n    let\
    \ factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin\
    \ = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin\
    \ + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n\
    \    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n    let\
    \ factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin\
    \ = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin\
    \ + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n\
    \    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n    let\
    \ factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin\
    \ = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin\
    \ + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n\
    \    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n    let\
    \ factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin\
    \ = factorizationIndexMaxMin + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin\
    \ + 1;\n    let factorizationIndexMinMaxMinMin = factorizationIndexMaxMin + 1;\n\
    \    let \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjdw3l5mp.ts(46,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpjdw3l5mp.ts(62,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738586
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let factor = 1;\n  while (n >\
    \ 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n\
    \    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffedc139c50\n 1: 0x2b67cae8e727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2b67cba2328e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b67cb35df8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b67cb4ef760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b67cb4f70cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b67cb6e17db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b67cb0407f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738589
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n < 2) {\n    return [];\n  }\n\n  const factors: number[]\
    \ = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i\
    \ as number);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738587
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 1;\n  while (n % i ===\
    \ 0) {\n    factors.push(i);\n    n /= i;\n    i++;\n  }\n  if (n !== 1) factors.push(n);\n\
    \  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp2n0sevuq.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2n0sevuq.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738579
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i ===\
    \ 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp0d1f_l4_.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0d1f_l4_.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738574
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n\
    \  let factorsCountMax: number[] = [];\n  let factorsCountMaxIndex: number[] =\
    \ [];\n  let factorsCountMaxIndexCount: number[] = [];\n  let factorsCountMaxIndexCountMax:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndex: number[] = [];\n  let\
    \ factorsCountMaxIndexCountMaxIndexCount: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMax:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndex: number[]\
    \ = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCount: number[] =\
    \ [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMax: number[]\
    \ = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[]\
    \ = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCount:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMax:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndex:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCount:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMax:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndex:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCount:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMax:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndex:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCount:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMax:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndex:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCount\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbmo6vdv5.ts(53,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738579
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 1;\n  while (n % i ===\
    \ 0) {\n    factors.push(i);\n    i = i * 2;\n  }\n  if (n > 1) {\n    factors.push(n);\n\
    \  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpb0zhdy9p.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpb0zhdy9p.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 2\
    \ ],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738587
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factor: number[] = [];\n\
    \    let factorCount: number[] = [];\n    let factorCountIndex: number[] = [];\n\
    \    let factorCountIndexIndex: number[] = [];\n    let factorCountIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndex: number[] = [];\n  \
    \  let factorCountIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndex\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj933st45.ts(58,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738585
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i ===\
    \ 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp0d1f_l4_.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0d1f_l4_.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738574
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factorsCount: number[]\
    \ = [];\n    let maxFactor: number = 1;\n    let minFactor: number = 1;\n    let\
    \ factor: number = 1;\n    let factorsCount: number = 0;\n    let maxFactor: number\
    \ = 1;\n    let minFactor: number = 1;\n    let factor: number = 1;\n    let factorsCount:\
    \ number = 0;\n    let maxFactor: number = 1;\n    let minFactor: number = 1;\n\
    \    let factor: number = 1;\n    let factorsCount: number = 0;\n    let maxFactor:\
    \ number = 1;\n    let minFactor: number = 1;\n    let factor: number = 1;\n \
    \   let factorsCount: number = 0;\n    let maxFactor: number = 1;\n    let minFactor:\
    \ number = 1;\n    let factor: number = 1;\n    let factorsCount: number = 0;\n\
    \    let maxFactor: number = 1;\n    let minFactor: number = 1;\n    let factor:\
    \ number = 1;\n    let factorsCount: number = 0;\n    let maxFactor: number =\
    \ 1;\n    let minFactor: number = 1;\n    let factor: number = 1;\n    let factorsCount:\
    \ number = 0;\n    let maxFactor: number = 1;\n    let minFactor: number = 1;\n\
    \    let factor: number = 1;\n    let factorsCount: number = 0;\n    let maxFactor:\
    \ number = 1;\n    let minFactor: number = 1;\n    let factor: number = 1;\n \
    \   let factorsCount: number = 0;\n    let maxFactor: number = 1;\n    let minFactor:\
    \ number = 1;\n    let factor: number = 1;\n    let factorsCount: number = 0;\n\
    \    let maxFactor: number = 1;\n    let minFactor: number = 1;\n    let factor:\
    \ number = 1;\n    let factorsCount: number = 0;\n    let maxFactor: number =\
    \ 1;\n    let minFactor: number = 1;\n    let factor: number = 1;\n    let factorsCount:\
    \ number = 0;\n    let maxFactor: number = 1;\n    let minFactor: number = 1;\n\
    \    let factor: number = 1;\n    let factorsCount: number = 0;\n    let maxFactor:\
    \ number = 1;\n    let minFactor: number = 1;\n    let factor: number = 1;\n \
    \   let factorsCount: number = 0;\n    let maxFactor: number = 1;\n    let minFactor:\
    \ number = 1;\n    let factor: number = 1;\n    let factorsCount: number = 0;\n\
    \    let maxFactor: number = 1;\n    let minFactor: number = 1;\n    let factor:\
    \ number = 1;\n    let factorsCount: number = 0;\n    let maxFactor: number =\
    \ 1;\n    let minFactor: number = 1;\n    let factor: number = 1;\n    let factorsCount:\
    \ number = 0;\n    let maxFactor: number = 1;\n    let minFactor: number = 1;\n\
    \    let factor: number = 1;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc55hvfa_.ts(101,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738587
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors = [];\n  let i = 2;\n  while (i <= n) {\n    if (n\
    \ % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n     \
    \ i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738587
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n < 2) return [];\n  let factors: number[] = [];\n  let i\
    \ = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n  }\n  if\
    \ (n > 1) {\n    factors.push(1);\n  }\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  3,\n  19\n]\n    at test (/tmp/tmpoyamus5e.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpoyamus5e.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 3, 19 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738588
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n < 2) {\n    return [];\n  }\n\n  const factors: number[]\
    \ = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i\
    \ as number);\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738587
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n !=\
    \ 1) {\n    while (n % factor == 0) {\n      factors.push(factor);\n      n /=\
    \ factor;\n    }\n    factor++;\n  }\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffd329013c0\n 1: 0x2ba56e7fa727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2ba56f38f28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2ba56ecc9f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2ba56ee5b760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2ba56ee630cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2ba56f04d7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2ba56e9ac7f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738577
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factorsCount: number[]\
    \ = [];\n    let factorsCountMax: number[] = [];\n    let factorsCountMaxIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndex: number[] = [];\n\
    \    let factorsCountMaxIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_vin5ikj.ts(55,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738577
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n >=\
    \ 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n\
    \    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fff59748060\n 1: 0x2b50984e2727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2b509907728e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b50989b1f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b5098b43760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b5098b4b0cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b5098d357db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b50986947f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738577
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  const primes: number[] = [];\n\
    \  let factor = 1;\n  let prime = 1;\n  let primeFactor = 1;\n  let isPrime =\
    \ true;\n  let isPrimeFactor = true;\n  let isPrimePrime = true;\n  let isPrimePrimeFactor\
    \ = true;\n  let isPrimePrimePrime = true;\n  let isPrimePrimePrimeFactor = true;\n\
    \  let isPrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimeFactor = true;\n\
    \  let isPrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimeFactor\
    \ = true;\n  let isPrimePrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimeFactor\
    \ = true;\n  let isPrimePrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimePrimeFactor\
    \ = true;\n  let isPrimePrimePrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimePrimePrimeFactor\
    \ = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrime = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimeFactor\
    \ = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrime = true;\n  let\
    \ isPrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor =\
    \ true;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true;\n\
    \  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor = true;\n\
    \  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor = true;\n\
    \  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true;\n\
    \  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor =\
    \ true;\n  let isPrimePrimePri\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptnkbgj11.ts(60,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738587
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factor: number[] = [];\n\
    \    let factorCount: number[] = [];\n    let factorCountIndex: number[] = [];\n\
    \    let factorCountIndexIndex: number[] = [];\n    let factorCountIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndex: number[] = [];\n  \
    \  let factorCountIndexIndexIndexIndexIndex: number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorCountIndex\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj933st45.ts(58,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738585
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n < 2) return [];\n  let factors: number[] = [];\n  let factor\
    \ = 1;\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n\
    \      n /= factor;\n    } else {\n      factor *= factor;\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fff143b1460\n 1: 0x2b6c61e55727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2b6c629ea28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b6c62324f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b6c624b6760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b6c624be0cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b6c626a87db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b6c620077f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738590
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n === 1) return [];\n  let factors = [];\n  let i = 2;\n \
    \ while (i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n\
    \ /= i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738588
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n)\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0)\
    \ {\n        n /= i;\n        factors.push(i);\n      }\n    }\n    i++;\n  }\n\
    \  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp69egy6lq.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmp69egy6lq.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738588
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (true) {\n\
    \    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n\
    \        n /= i;\n      }\n    } else {\n      break;\n    }\n    i++;\n  }\n\
    \  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmp07is_ta0.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmp07is_ta0.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738579
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n !=\
    \ 1) {\n    while (n % factor == 0) {\n      factors.push(factor);\n      n /=\
    \ factor;\n    }\n    factor++;\n  }\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffd329013c0\n 1: 0x2ba56e7fa727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2ba56f38f28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2ba56ecc9f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2ba56ee5b760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2ba56ee630cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2ba56f04d7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2ba56e9ac7f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738577
- exit_code: -1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  let factorization\
    \ = [];\n  let factorizationIndex = 0;\n  while (n != 1) {\n    if (n % factor\
    \ == 0) {\n      factors.push(factor);\n      factor *= factorization[factorizationIndex];\n\
    \      factorizationIndex++;\n    } else {\n      factorization[factorizationIndex]\
    \ = factor;\n      factorizationIndex++;\n      factor = 1;\n    }\n    n /= factor;\n\
    \  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659738603
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n > 1)\
    \ {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n\
    \    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fff94079380\n 1: 0x2af4b6407727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2af4b6f9c28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2af4b68d6f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2af4b6a68760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2af4b6a700cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2af4b6c5a7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2af4b65b97f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738577
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n)\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0)\
    \ {\n        n /= i;\n        factors.push(i);\n      }\n    }\n    i++;\n  }\n\
    \  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp69egy6lq.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmp69egy6lq.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738588
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  const primeFactors = primeFactorization(n);\n\
    \  for (let i = 0; i < primeFactors.length; i++) {\n    const factor = primeFactors[i];\n\
    \    for (let j = 0; j < factor; j++) {\n      factors.push(factor);\n    }\n\
    \  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy_waih75.ts(12,24): error TS2304: Cannot find name
    ''primeFactorization''.

    '
  timestamp: 1659738589
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n\
    \  let factorsCountArr: number[] = [];\n  let factorsCountArrLen: number[] = [];\n\
    \  let factorsCountArrLenLen: number[] = [];\n  let factorsCountArrLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLen: number[] = [];\n  let\
    \ factorsCountArrLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLen: number[] =\
    \ [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLen: number[] = [];\n \
    \ let factorsCountArrLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let\
    \ factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpge2cz61r.ts(54,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738574
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let factor = 1;\n  while (n >=\
    \ 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n\
    \    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffde150a960\n 1: 0x2b098a213727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2b098ada828e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b098a6e2f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b098a874760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b098a87c0cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b098aa667db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b098a3c57f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738592
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i ===\
    \ 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp0d1f_l4_.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0d1f_l4_.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738574
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i as number);\n      while\
    \ (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp2ghg29rn.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2ghg29rn.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738589
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n\
    \  let factorsCountArr: number[] = [];\n  let factorsCountArrLen: number[] = [];\n\
    \  let factorsCountArrLenLen: number[] = [];\n  let factorsCountArrLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLen: number[] = [];\n  let\
    \ factorsCountArrLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLen: number[] =\
    \ [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLen: number[] = [];\n \
    \ let factorsCountArrLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let\
    \ factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLen: number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen:\
    \ number[] = [];\n  let factorsCountArrLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpge2cz61r.ts(54,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738574
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factorsCount: number[]\
    \ = [];\n    let factorsCountMax: number[] = [];\n    let factorsCountMaxIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndex: number[] = [];\n\
    \    let factorsCountMaxIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_vin5ikj.ts(55,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738577
- exit_code: -1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (n / i >\
    \ 0) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n   \
    \ }\n    i++;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659738604
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i as number);\n      while\
    \ (n % i === 0) {\n        n /= i;\n        factors.push(i as number);\n     \
    \ }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpv7q0k_93.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpv7q0k_93.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738574
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let i = 2;\n  while (n >= i) {\n\
    \    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n\
    \      i++;\n    }\n  }\n  if (n > 1) {\n    factors.push(1);\n  }\n  return factors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738589
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n)\
    \ {\n    if (n % i === 0) {\n      factors.push(i as number);\n      n /= i;\n\
    \    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738589
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (true) {\n\
    \    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n\
    \        n /= i;\n      }\n    } else {\n      break;\n    }\n    i++;\n  }\n\
    \  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmp07is_ta0.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmp07is_ta0.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738579
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n <= 1) return [];\n  const factors: number[] = [];\n  for\
    \ (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n\
    \      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n    \
    \  }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpehcjap4s.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpehcjap4s.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738589
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor: number[] = [];\n  let\
    \ factorCount: number[] = [];\n  let factorCountIndex: number[] = [];\n  let factorCountIndexMax:\
    \ number[] = [];\n  let factorCountIndexMaxIndex: number[] = [];\n  let factorCountIndexMaxIndexIndex:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex2: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex3: number[] = [];\n  let factorCountIndexMaxIndexIndex4:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex5: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex6: number[] = [];\n  let factorCountIndexMaxIndexIndex7:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex8: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex9: number[] = [];\n  let factorCountIndexMaxIndexIndex10:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex11: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex12: number[] = [];\n  let factorCountIndexMaxIndexIndex13:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex14: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex15: number[] = [];\n  let factorCountIndexMaxIndexIndex16:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex17: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex18: number[] = [];\n  let factorCountIndexMaxIndexIndex19:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex20: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex21: number[] = [];\n  let factorCountIndexMaxIndexIndex22:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex23: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex24: number[] = [];\n  let factorCountIndexMaxIndexIndex25:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex26: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex27: number[] = [];\n  let factorCountIndexMaxIndexIndex28:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex29: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex30: number[] = [];\n  let factorCountIndexMaxIndexIndex31:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex32: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex33: number[] = [];\n  let factorCountIndexMaxIndexIndex34:\
    \ number[] = [];\n  let factorCountIndexMaxIndexIndex35: number[] = [];\n  let\
    \ factorCountIndexMaxIndexIndex36: number\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsdjq0w25.ts(69,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738574
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (n % i ===\
    \ 0) {\n    factors.push(i);\n    while (n % i === 0) {\n      n /= i;\n     \
    \ i++;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  2,\n  2\n]\n    at test (/tmp/tmpj0th8n6t.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpj0th8n6t.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4 ],\n\
    \  expected: [ 2, 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738589
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n)\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else\
    \ {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738574
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factorsCount: number[]\
    \ = [];\n    let maxFactor: number = 0;\n    let minFactor: number = 0;\n    let\
    \ factor: number = 0;\n    let factorsCountIndex: number = 0;\n    let factorsCountLength:\
    \ number = 0;\n    let factorsCountMax: number = 0;\n    let factorsCountMin:\
    \ number = 0;\n    let factorsCountSum: number = 0;\n    let factorsCountSumIndex:\
    \ number = 0;\n    let factorsCountSumLength: number = 0;\n    let factorsCountSumMax:\
    \ number = 0;\n    let factorsCountSumMin: number = 0;\n    let factorsCountSumSum:\
    \ number = 0;\n    let factorsCountSumSumIndex: number = 0;\n    let factorsCountSumSumLength:\
    \ number = 0;\n    let factorsCountSumSumMax: number = 0;\n    let factorsCountSumSumMin:\
    \ number = 0;\n    let factorsCountSumSumSum: number = 0;\n    let factorsCountSumSumSumIndex:\
    \ number = 0;\n    let factorsCountSumSumSumLength: number = 0;\n    let factorsCountSumSumSumMax:\
    \ number = 0;\n    let factorsCountSumSumSumMin: number = 0;\n    let factorsCountSumSumSumSum:\
    \ number = 0;\n    let factorsCountSumSumSumSumIndex: number = 0;\n    let factorsCountSumSumSumSumLength:\
    \ number = 0;\n    let factorsCountSumSumSumSumMax: number = 0;\n    let factorsCountSumSumSumSumMin:\
    \ number = 0;\n    let factorsCountSumSumSumSumSum: number = 0;\n    let factorsCountSumSumSumSumSumIndex:\
    \ number = 0;\n    let factorsCountSumSumSumSumSumLength: number = 0;\n    let\
    \ factorsCountSumSumSumSumSumMax: number = 0;\n    let factorsCountSumSumSumSumSumMin:\
    \ number = 0;\n    let factorsCountSumSumSumSumSumSum: number = 0;\n    let factorsCountSumSumSumSumSumSumIndex:\
    \ number = 0;\n    let factorsCountSumSumSumSumSumSumLength: number = 0;\n   \
    \ let factorsCountSumSumSumSumSumSumMax: number = 0;\n    let factorsCountSumSumSumSumSumSumMin:\
    \ number = 0;\n    let factorsCountSumSumSumSumSumSumSum: number = 0;\n    let\
    \ factorsCountSumSumSumSumSumSumSumIndex: number = 0;\n    let factorsCountSumSumSumSumSumSumSumLength:\
    \ number = 0;\n    let factorsCountSumSumSumSumSumSumSumMax: number = 0;\n   \
    \ let factorsCountSumSumSumSum\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp093nzgfv.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738589
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n > 1)\
    \ {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n\
    \    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fff94079380\n 1: 0x2af4b6407727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2af4b6f9c28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2af4b68d6f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2af4b6a68760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2af4b6a700cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2af4b6c5a7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2af4b65b97f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738577
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n)\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else\
    \ {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738589
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n \
    \   }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpqmgd_59p.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqmgd_59p.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738576
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n !=\
    \ 1) {\n    while (n % factor == 0) {\n      factors.push(factor);\n      n /=\
    \ factor;\n    }\n    factor++;\n  }\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffd329013c0\n 1: 0x2ba56e7fa727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2ba56f38f28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2ba56ecc9f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2ba56ee5b760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2ba56ee630cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2ba56f04d7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2ba56e9ac7f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738577
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors = [];\n  let i = 1;\n  while (n > 1) {\n    if (n\
    \ % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i++;\n\
    \    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffd328ce1b0\n 1: 0x2ab714e8f727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2ab715a2428e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2ab71535ef8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2ab7154f0760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2ab7154f80cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2ab7156e27db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2ab7150417f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738587
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors = [];\n    let i = 2;\n    while (i <= n) {\n\
    \        while (n % i === 0) {\n            factors.push(i);\n            n /=\
    \ i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors.push(n);\n\
    \    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738589
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factorsCount: number[]\
    \ = [];\n    let factorsCountMax: number[] = [];\n    let factorsCountMaxIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndex: number[] = [];\n\
    \    let factorsCountMaxIndexIndexIndexIndexIndex: number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_vin5ikj.ts(55,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738577
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let i = 2;\n    while (i <=\
    \ n) {\n        while (n % i === 0) {\n            factors.push(i);\n        \
    \    n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738590
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factorsCount: number[]\
    \ = [];\n    let factorsCountMap: Map<number, number> = new Map();\n    let factorsCountMapCount:\
    \ number[] = [];\n    let factorsCountMapCountMap: Map<number, Map<number, number>>\
    \ = new Map();\n    let factorsCountMapCountMapCount: number[] = [];\n    let\
    \ factorsCountMapCountMapCountMap: Map<number, Map<number, Map<number, number>>>\
    \ = new Map();\n    let factorsCountMapCountMapCountMapCount: number[] = [];\n\
    \    let factorsCountMapCountMapCountMapCountMap: Map<number, Map<number, Map<number,\
    \ Map<number, number>>>> = new Map();\n    let factorsCountMapCountMapCountMapCountMapCount:\
    \ number[] = [];\n    let factorsCountMapCountMapCountMapCountMapCountMap: Map<number,\
    \ Map<number, Map<number, Map<number, Map<number, number>>>>[] = new Map();\n\
    \    let factorsCountMapCountMapCountMapCountMapCountMapCount: number[] = [];\n\
    \    let factorsCountMapCountMapCountMapCountMapCountMapCountMap: Map<number,\
    \ Map<number, Map<number, Map<number, Map<number, Map<number, number>>>>[]> =\
    \ new Map();\n    let factorsCountMapCountMapCountMapCountMapCountMapCountMapCount:\
    \ number[] = [];\n    let factorsCountMapCountMapCountMapCountMapCountMapCountMapCount:\
    \ Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number,\
    \ Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number,\
    \ Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number,\
    \ Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number,\
    \ Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number,\
    \ Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number,\
    \ Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number,\
    \ Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number,\
    \ Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number,\
    \ Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number,\
    \ Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number,\
    \ Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number,\
    \ Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number,\
    \ Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number,\
    \ Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number,\
    \ Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number,\
    \ Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzymwu1s9.ts(21,131): error TS1005: ''>'' expected.

    ../../../../../tmp/tmpzymwu1s9.ts(23,152): error TS1005: ''>'' expected.

    ../../../../../tmp/tmpzymwu1s9.ts(26,9): error TS1005: ''>'' expected.

    ../../../../../tmp/tmpzymwu1s9.ts(42,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738589
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        while (n % i === 0) {\n            factors.push(i);\n      \
    \      n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.push(n);\n\
    \    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738590
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n\
    \  let factorsCountMax: number[] = [];\n  let factorsCountMaxIndex: number[] =\
    \ [];\n  let factorsCountMaxIndexIndex: number[] = [];\n  let factorsCountMaxIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountMaxIndexIndexIndexIndex: number[] = [];\n\
    \  let factorsCountMaxIndexIndexIndexIndexIndex: number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndex: number[] =\
    \ [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let factorsCountMaxIndexIndexIndexIndex\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpibqvavz1.ts(56,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738590
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 1;\n  while (n % i ===\
    \ 0) {\n    factors.push(i);\n    n /= i;\n    i++;\n  }\n  if (n > 1) {\n   \
    \ factors.push(n);\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmprsh3x6qi.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmprsh3x6qi.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738590
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(i);\n         \
    \   factors.push(n / i);\n        }\n    }\n    return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpj8sr3d05.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj8sr3d05.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738590
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n > 1)\
    \ {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n\
    \    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fff94079380\n 1: 0x2af4b6407727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2af4b6f9c28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2af4b68d6f8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2af4b6a68760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2af4b6a700cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2af4b6c5a7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2af4b65b97f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738577
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n  while (i <= n)\
    \ {\n    if (n % i === 0) {\n      factors.push(i as number);\n      n /= i;\n\
    \    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738589
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 1;\n  while (n > 1) {\n\
    \    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else\
    \ {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffd0bd2d740\n 1: 0x2b4a05bbd727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2b4a0675228e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b4a0608cf8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b4a0621e760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b4a062260cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b4a064107db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b4a05d6f7f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738585
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors = [];\n    let factor = 1;\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            factors.push(factor);\n\
    \            factor *= i;\n        }\n        i++;\n    }\n    return factors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp3adjgt6n.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3adjgt6n.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738590
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factorsCount: number[] = [];\n\
    \  let factorsCountMax: number[] = [];\n  let factorsCountMaxIndex: number[] =\
    \ [];\n  let factorsCountMaxIndexCount: number[] = [];\n  let factorsCountMaxIndexCountMax:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndex: number[] = [];\n  let\
    \ factorsCountMaxIndexCountMaxIndexCount: number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMax:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndex: number[]\
    \ = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCount: number[] =\
    \ [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMax: number[]\
    \ = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndex: number[]\
    \ = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCount:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMax:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndex:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCount:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMax:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndex:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCount:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMax:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndex:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCount:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMax:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCountMaxIndexCount:\
    \ number[] = [];\n  let factorsCountMaxIndexCountMaxIndexCountMaxIndex\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplm57lmna.ts(53,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738590
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  while (n > 1)\
    \ {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n = n / factor;\n\
    \    } else {\n      factor *= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fffd4c24db0\n 1: 0x2b1b7f06d727\
    \  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 2: 0x2b1b7fc0228e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b1b7f53cf8b  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b1b7f6ce760  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b1b7f6d60cd  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b1b7f8c07db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b1b7f21f7f9  [/home/a.guha/.conda/envs/polyglot-codegen-evaluation/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659738593
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n <= 1) return [];\n  const factors: number[] = [];\n  for\
    \ (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n\
    \      while (n % i === 0) {\n        n /= i;\n        factors.push(i);\n    \
    \  }\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpehcjap4s.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpehcjap4s.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738589
