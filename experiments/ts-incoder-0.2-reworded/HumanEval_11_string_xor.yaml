name: HumanEval_11_string_xor
language: ts
prompt: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
  \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
  010\", \"110\")\n// \"100\"\nfunction string_xor(a: string, b: string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
  , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
  \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
completions: ["  let xorResult = '';\n  for (let i = 0; i < a.length; i++) {\n   \
    \ xorResult += (a[i] ^ b[i]);\n  }\n  return xorResult;\n}\n", "  var result =\
    \ '';\n  var i = 0;\n  while (i < a.length && i < b.length) {\n    var xor = (a[i]\
    \ || '') ^ b[i];\n    result += xor ? xor : '0';\n    i++;\n  }\n  return result;\n\
    }\n", "    const result: string = \"\";\n    for (let i = 0; i < a.length; i++)\
    \ {\n        result += (a[i] ^ b[i]);\n    }\n    return result;\n}\n", "  const\
    \ a_arr = a.split('');\n  const b_arr = b.split('');\n  const result = a_arr.map((x,\
    \ i) => x ^ b_arr[i]).join('');\n  return result;\n}\n", "  const result = [];\n\
    \  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n\
    \  return result.join('');\n}\n", "  let result = '';\n  for (let i = 0; i < a.length;\
    \ i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n}\n", "  return\
    \ binary_xor(binary_to_int(a), binary_to_int(b));\n}\n", "  let result = '';\n\
    \  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n \
    \ return result;\n}\n", "  return bin2hex(binxor_binary(a, b));\n}\n", "  return\
    \ bin2hex(binxor_binary(a, b));\n}\n", "  return a + string_xor(b, a);\n}\n",
  "  return a.split('').map(function (c: string) {\n    return c ^ b\n  }).join('')\n\
    }\n", "    return a + string_xor(b, a);\n}\n", "    return binary_xor(parseInt(a,\
    \ 2), parseInt(b, 2));\n}\n", "  return a + b;\n}\n", "  return a.split('').map(function(c)\
    \ {\n    return c ^ b.charAt(0);\n  }).join('');\n}\n", "  return binary_xor(parseInt(a,\
    \ 2), parseInt(b, 2));\n}\n", "  let result = '';\n  for (let i = 0; i < a.length;\
    \ i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n}\n", "  return\
    \ bin2hex(xor_binary(a, b));\n}\n", "  return bin2hex(xor_binary(a, b));\n}\n",
  "  return bin2hex(binxor_binary(hex2bin(a), hex2bin(b)));\n}\n", "    return binary_xor(parseInt(a,\
    \ 2), parseInt(b, 2));\n}\n", "    return binary_xor(binary_to_int(a), binary_to_int(b));\n\
    }\n", "  return bin2hex(bin2bin(bin2bin(a, 2) ^ bin2bin(b, 2)));\n}\n", "    return\
    \ a ^ b;\n}\n", "  let result = '';\n  for (let i = 0; i < a.length; i++) {\n\
    \    result += a.charCodeAt(i) ^ b.charCodeAt(i);\n  }\n  return result;\n}\n",
  "  return a.split('').map((c) => c ^ b[b.length - 1 - a.indexOf(c)]).join('');\n\
    }\n", "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0))\
    \ & 0xff\n  );\n}\n", "  return a + b.split('').map(function(c) {\n    return\
    \ String.fromCharCode(c.charCodeAt(0) ^ 32);\n  }).join('');\n}\n", "    return\
    \ binary_xor(parseInt(a, 2), parseInt(b, 2));\n}\n", "    return a.split('').map(function(c)\
    \ {\n        return c ^ b.charAt(0);\n    }).join('');\n}\n", "  return a + string_xor(b,\
    \ a);\n}\n", "  let result: string = \"\";\n  for (let i = 0; i < a.length; i++)\
    \ {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n}\n", "  return a.split('').map(function(c)\
    \ {\n    return c ^ b.charAt(0);\n  }).join('');\n}\n", "    return binary_xor(parseInt(a,\
    \ 2), parseInt(b, 2));\n}\n", "  return a + string_xor(b, a);\n}\n", "  return\
    \ bin2hex(xor_binary(a, b));\n}\n", "  var result = '';\n  var i = 0;\n  while\
    \ (i < a.length && i < b.length) {\n    var c = a.charCodeAt(i) - b.charCodeAt(i);\n\
    \    result += String.fromCharCode(c);\n    i += 1;\n  }\n  while (i < a.length)\
    \ {\n    result += a.charAt(i);\n    i += 1;\n  }\n  while (i < b.length) {\n\
    \    result += b.charAt(i);\n    i += 1;\n  }\n  return result;\n}\n", "  return\
    \ binary_xor(parseInt(a, 2), parseInt(b, 2));\n}\n", "  var result = '';\n  var\
    \ i = 0;\n  while (i < a.length && i < b.length) {\n    var c = a.charCodeAt(i)\
    \ - b.charCodeAt(i);\n    if (c < 0) {\n      result += String.fromCharCode(c\
    \ + 256);\n      i++;\n    } else if (c > 0) {\n      result += String.fromCharCode(c);\n\
    \      i++;\n    } else {\n      result += String.fromCharCode(256);\n      i++;\n\
    \    }\n  }\n  while (i < a.length) {\n    result += String.fromCharCode(a.charCodeAt(i));\n\
    \    i++;\n  }\n  while (i < b.length) {\n    result += String.fromCharCode(b.charCodeAt(i));\n\
    \    i++;\n  }\n  return result;\n}\n", "  return a ^ b;\n}\n", "  let xor = a.charCodeAt(0)\
    \ ^ b.charCodeAt(0);\n  return String.fromCharCode(xor);\n}\n", "  return bin2hex(xor_binary(a,\
    \ b));\n}\n", "  return bin2hex(bin2bin(a) ^ bin2bin(b));\n}\n", "  let result\
    \ = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n\
    \  }\n  return result;\n}\n", "  return bin2hex(xor_binary(a, b));\n}\n", "  var\
    \ result = '';\n  var i = 0;\n  while (i < a.length && i < b.length) {\n    var\
    \ c = a.charCodeAt(i) & b.charCodeAt(i);\n    result += String.fromCharCode(c);\n\
    \    i++;\n  }\n  while (i < a.length) {\n    result += a.charAt(i);\n    i++;\n\
    \  }\n  while (i < b.length) {\n    result += b.charAt(i);\n    i++;\n  }\n  return\
    \ result;\n}\n", "  return a ^ b;\n}\n", "    const result: string = a.slice(0,\
    \ a.length - 1) + b.slice(0, b.length - 1);\n    for (let i = 0; i < result.length;\
    \ i++) {\n        result[i] = result[i] ^ a[i];\n    }\n    return result;\n}\n",
  "    let result: string = \"\";\n    for (let i = 0; i < a.length; i++) {\n    \
    \    result += (a[i] ^ b[i]);\n    }\n    return result;\n}\n", "  let result\
    \ = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n\
    \  }\n  return result;\n}\n", "    return binary_xor(parseInt(a, 2), parseInt(b,\
    \ 2));\n}\n", "  return bin2hex(xor_binary(a, b));\n}\n", "    return a.split('').map(function\
    \ (c) { return c ^ b[b.length - 1 - a.indexOf(c)]; }).join('');\n}\n", "  var\
    \ result = '';\n  var i = 0;\n  var j = 0;\n  while (i < a.length && j < b.length)\
    \ {\n    var c = a.charCodeAt(i++) ^ b.charCodeAt(j++);\n    result += String.fromCharCode(c);\n\
    \  }\n  return result;\n}\n", "  return bin2hex(bin2bin(a) ^ bin2bin(b));\n}\n",
  "  return bin2hex(xor_binary(a, b));\n}\n", "  return bin2hex(xor_binary(hex2bin(a),\
    \ hex2bin(b)));\n}\n", "  return bin2hex(binXor(hex2bin(a), hex2bin(b)));\n}\n",
  "    return binary_xor(binary_to_binary(a), binary_to_binary(b));\n}\n", "    return\
    \ a + string_xor(b, a);\n}\n", "  return bin2hex(bin2bin(a) ^ bin2bin(b));\n}\n",
  "  return binary_xor(parseInt(a, 2), parseInt(b, 2));\n}\n", "  return bin2hex(xor_binary(a,\
    \ b));\n}\n", "  return bin2hex(xor_bin2hex(a_bin2hex(a), b_bin2hex(b)));\n}\n",
  "  return a.split('').map(function (c: string) { return c ^ b; }).join('');\n}\n",
  "  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i]\
    \ ^ b[i]);\n  }\n  return result.join('');\n}\n", "  return bin2hex(bin2bin(a)\
    \ ^ bin2bin(b));\n}\n", "  return bin2hex(xor_binary(a, b));\n}\n", "  return\
    \ a + b;\n}\n", "  var result = '';\n  var i = 0;\n  while (i < a.length && i\
    \ < b.length) {\n    result += String.fromCharCode(\n      (a.charCodeAt(i) ^\
    \ b.charCodeAt(i)) & 0xff);\n    i++;\n  }\n  return result;\n}\n", "  const result\
    \ = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n\
    \  }\n  return result.join('');\n}\n", "    return binary_xor(binary_to_binary(a),\
    \ binary_to_binary(b));\n}\n", "    return binary_xor(parseInt(a, 2), parseInt(b,\
    \ 2));\n}\n", "    return bin2hex(xor_binary(a, b));\n}\n", "  return binary_xor(parseInt(a,\
    \ 2), parseInt(b, 2));\n}\n", "  return bin2hex(xor_binary(a, b));\n}\n", "  let\
    \ result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^\
    \ b[i]);\n  }\n  return result;\n}\n", "  return a.split('').map(function(c) {\n\
    \    return c ^ b[b.length - 1 - a.indexOf(c)];\n  }).join('');\n}\n", "  return\
    \ bin2hex(binxor_binary(a, b));\n}\n", "  const a_arr = a.split('');\n  const\
    \ b_arr = b.split('');\n  let res = '';\n  for (let i = 0; i < a_arr.length; i++)\
    \ {\n    res += a_arr[i] ^ b_arr[i];\n  }\n  return res;\n}\n", "    return binary_xor(parseInt(a,\
    \ 2), parseInt(b, 2));\n}\n", "  return binary_xor(binary_to_binary(a), binary_to_binary(b));\n\
    }\n", "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0))\
    \ & 0xff\n  );\n}\n", "  return bin2hex(xor_binary(a, b));\n}\n", "  var result\
    \ = '';\n  var i = 0;\n  var j = 0;\n  while (i < a.length && j < b.length) {\n\
    \    var k = a[i] ^ b[j];\n    result += String.fromCharCode(k);\n    i++;\n \
    \   j++;\n  }\n  return result;\n}\n", "  const result = [];\n  for (let i = 0;\
    \ i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n\
    }\n", "    return binary_xor(binary_to_int(a), binary_to_int(b));\n}\n", "  return\
    \ binary_xor(parseInt(a, 2), parseInt(b, 2));\n}\n", "    return binary_xor(parseInt(a,\
    \ 2), parseInt(b, 2));\n}\n", "  return String.fromCharCode(\n    (a.charCodeAt(0)\
    \ ^ b.charCodeAt(0)) & 0xff\n  );\n}\n", "    return a + string_xor(b, a);\n}\n",
  "  return binary_xor(parseInt(a, 2), parseInt(b, 2));\n}\n", "  return a.split('').map(function(c)\
    \ {\n    return c ^ b.charAt(0);\n  }).join('');\n}\n", "  const a_arr = a.split('');\n\
    \  const b_arr = b.split('');\n  let result = '';\n  for (let i = 0; i < a_arr.length;\
    \ i++) {\n    result += a_arr[i] ^ b_arr[i];\n  }\n  return result;\n}\n", " \
    \   return binary_xor(parseInt(a, 2), parseInt(b, 2));\n}\n", "  return binary_xor(parseInt(a,\
    \ 2), parseInt(b, 2));\n}\n", "    let result: string = \"\";\n    for (let i\
    \ = 0; i < a.length; i++) {\n        result += (a[i] ^ b[i]);\n    }\n    return\
    \ result;\n}\n", "  return binary_xor(parseInt(a, 2), parseInt(b, 2));\n}\n",
  "  return binary_xor(binary_to_binary(a), binary_to_binary(b));\n}\n", "  let result\
    \ = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n\
    \  }\n  return result;\n}\n", "  const result: string = a.split('').map((c) =>\
    \ c ^ b).join('');\n  return result;\n}\n", "  return bin2hex(binxor_binary(a,\
    \ b));\n}\n", "    const len = Math.min(a.length, b.length);\n    let res = \"\
    \";\n    for (let i = 0; i < len; i++) {\n        res += (a[i] ^ b[i]);\n    }\n\
    \    return res;\n}\n", "  return bin2hex(xor_binary(a, b));\n}\n", "  return\
    \ a + b.split('').map(function(c) {\n    return c ^ 1;\n  }).join('');\n}\n",
  "  return a + string_xor(b, a);\n}\n", "  return a.split('').map(function (c) {\n\
    \    return c ^ b.charAt(0);\n  }).join('');\n}\n", "  let result = '';\n  for\
    \ (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return\
    \ result;\n}\n", "  return a.split('').map(function(c) {\n    return c ^ b.charAt(0);\n\
    \  }).join('');\n}\n", "  return a ^ b;\n}\n", "  return a + b.split('').map(function\
    \ (c) { return c === '1' ? '0' : '1'; }).join('');\n}\n", "  return String.fromCharCode(\n\
    \    (a.charCodeAt(0) ^ b.charCodeAt(0)) & 0xff\n  );\n}\n", "  return bin2hex(binxor_binary(a,\
    \ b));\n}\n", "  return a + b.split('').map(function (c: string) {\n    return\
    \ c === '0' ? '1' : '0';\n  }).join('');\n}\n", "  return bin2hex(xor_binary(hex2bin(a),\
    \ hex2bin(b)));\n}\n", "    let result = '';\n    for (let i = 0; i < a.length;\
    \ i++) {\n        result += String.fromCharCode(\n            (a.charCodeAt(i)\
    \ ^ b.charCodeAt(i)) & 0xff);\n    }\n    return result;\n}\n", "  return a +\
    \ string_xor(b, a);\n}\n", "  var result = '';\n  var i = 0;\n  while (i < a.length\
    \ && i < b.length) {\n    var c = a.charCodeAt(i) & b.charCodeAt(i);\n    result\
    \ += String.fromCharCode(c);\n    i++;\n  }\n  while (i < a.length) {\n    result\
    \ += a.charAt(i);\n    i++;\n  }\n  while (i < b.length) {\n    result += b.charAt(i);\n\
    \    i++;\n  }\n  return result;\n}\n", "  return a ^ b;\n}\n", "  var result\
    \ = '';\n  var i = 0;\n  while (i < a.length && i < b.length) {\n    var c = a.charCodeAt(i)\
    \ - b.charCodeAt(i);\n    if (c !== 0) {\n      result += String.fromCharCode(c);\n\
    \    } else {\n      result += '0';\n    }\n    i++;\n  }\n  while (i < a.length)\
    \ {\n    result += '0';\n    i++;\n  }\n  while (i < b.length) {\n    result +=\
    \ String.fromCharCode(a.charCodeAt(i) - b.charCodeAt(i));\n    i++;\n  }\n  return\
    \ result;\n}\n", "  return a ^ b;\n}\n", "  return bin2hex(xor_binary(a, b));\n\
    }\n", "  return a ^ b;\n}\n", "  return binary_xor(parseInt(a, 2), parseInt(b,\
    \ 2));\n}\n", "  return bin2hex(binxor_binary(a, b));\n}\n", "    const a_arr\
    \ = a.split('');\n    const b_arr = b.split('');\n    let result = '';\n    for\
    \ (let i = 0; i < a_arr.length; i++) {\n        result += a_arr[i] ^ b_arr[i];\n\
    \    }\n    return result;\n}\n", "  return a + string_xor(b, a);\n}\n", "  return\
    \ a.split('').map((x, i) => x ^ b[i]).join('');\n}\n", "    return binary_xor(parseInt(a,\
    \ 2), parseInt(b, 2));\n}\n", "  return binary_xor(binary_to_int(a), binary_to_int(b));\n\
    }\n", "  return bin2hex(xor_binary(a, b));\n}\n", "  const a_arr = a.split('');\n\
    \  const b_arr = b.split('');\n  const res = '';\n  for (let i = 0; i < a_arr.length;\
    \ i++) {\n    res += a_arr[i] ^ b_arr[i];\n  }\n  return res;\n}\n", "    return\
    \ binary_xor(parseInt(a, 2), parseInt(b, 2));\n}\n", "  return bin2hex(xor_binary(a,\
    \ b));\n}\n", "  return bin2hex(xor_binary(a, b));\n}\n", "  return binary_xor(parseInt(a,\
    \ 2), parseInt(b, 2));\n}\n", "  let res = \"\";\n  for (let i = 0; i < a.length;\
    \ i++) {\n    res += (a[i] ^ b[i]);\n  }\n  return res;\n}\n", "  return bin2hex(xor_binary(a,\
    \ b));\n}\n", "  const result = [];\n  for (let i = 0; i < a.length; i++) {\n\
    \    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n}\n", "    const\
    \ result = [];\n    for (let i = 0; i < a.length; i++) {\n        result.push(a[i]\
    \ ^ b[i]);\n    }\n    return result.join('');\n}\n", "  return a + string_xor(b,\
    \ a);\n}\n", "    return a.split('').map(function (c) { return c ^ b[c]; }).join('');\n\
    }\n", "  return a + b.split('').map(function (c) { return c === '1' ? '0' : '1';\
    \ }).join('');\n}\n", "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0))\
    \ & 0xff\n  );\n}\n", "  return bin2hex(xor_binary(a, b));\n}\n", "  let result\
    \ = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n\
    \  }\n  return result;\n}\n", "  return bin2hex(bin2bin(a) ^ bin2bin(b));\n}\n",
  "  return bin2hex(binxor_binary(a, b));\n}\n", "  let result = '';\n  for (let i\
    \ = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n\
    }\n", "  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result\
    \ += (a[i] ^ b[i]);\n  }\n  return result;\n}\n", "    return binary_xor(parseInt(a,\
    \ 2), parseInt(b, 2));\n}\n", "  return a ^ b;\n}\n", "    return binary_xor(binary_to_int(a),\
    \ binary_to_int(b));\n}\n", "  return a.split('').map(function(c) {\n    return\
    \ c ^ b.charAt(0);\n  }).join('');\n}\n", "  const result = [];\n  for (let i\
    \ = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n\
    }\n", "    return binary_xor(parseInt(a, 2), parseInt(b, 2));\n}\n", "  return\
    \ a + b.split('').map(function(c) {\n    return c === '1' ? '0' : '1';\n  }).join('');\n\
    }\n", "  var result = '';\n  var i = 0;\n  while (i < a.length && i < b.length)\
    \ {\n    var c = a.charCodeAt(i) & b.charCodeAt(i);\n    result += String.fromCharCode(c);\n\
    \    i++;\n  }\n  while (i < a.length) {\n    result += a.charAt(i);\n    i++;\n\
    \  }\n  while (i < b.length) {\n    result += b.charAt(i);\n    i++;\n  }\n  return\
    \ result;\n}\n", "    return binary_xor(parseInt(a, 2), parseInt(b, 2));\n}\n",
  "  const result: string = a.slice(0, a.length - b.length) + b.slice(0, b.length);\n\
    \  return result;\n}\n", "    return a.split(\"\").reduce((acc, curr, i) => {\n\
    \        return acc ^ curr;\n    }, b.split(\"\").reduce((acc, curr, i) => {\n\
    \        return acc ^ curr;\n    }));\n}\n", "  let result = '';\n  for (let i\
    \ = 0; i < a.length; i++) {\n    result += a.charCodeAt(i) ^ b.charCodeAt(i);\n\
    \  }\n  return result;\n}\n", "    let result: string = \"\";\n    for (let i\
    \ = 0; i < a.length; i++) {\n        result += (a[i] ^ b[i]);\n    }\n    return\
    \ result;\n}\n", "  return binary_xor(parseInt(a, 2), parseInt(b, 2));\n}\n",
  "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0)) & 0xff\n\
    \  );\n}\n", "  let result = '';\n  for (let i = 0; i < a.length; i++) {\n   \
    \ result += (a[i] ^ b[i]);\n  }\n  return result;\n}\n", "  const result: string\
    \ = a.split('').map((c) => c ^ b).join('');\n  return result;\n}\n", "  return\
    \ bin2hex(binxor_binary(hex2bin(a), hex2bin(b)));\n}\n", "  const result = [];\n\
    \  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n\
    \  return result.join('');\n}\n", "  return binary_xor(binary_to_int(a), binary_to_int(b));\n\
    }\n", "  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result\
    \ += (a[i] ^ b[i]);\n  }\n  return result;\n}\n", "  return a ^ b;\n}\n", "  return\
    \ a + b.split('').map(function(c) {\n    return c ^ a;\n  }).join('');\n}\n",
  "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0)) & 0xff\n\
    \  );\n}\n", "  return String.fromCharCode(\n    (a.charCodeAt(0) ^ b.charCodeAt(0))\
    \ & 0xff\n  );\n}\n", "  const result: string = a.slice(0, a.length - 1) + b.slice(0,\
    \ b.length - 1);\n  return result;\n}\n", "    return binary_xor(parseInt(a, 2),\
    \ parseInt(b, 2));\n}\n", "  return bin2hex(binxor_binary(a, b));\n}\n", "  return\
    \ bin2hex(bin2bin(a) ^ bin2bin(b));\n}\n", "  var result = '';\n  var i = 0;\n\
    \  var j = 0;\n  while (i < a.length && j < b.length) {\n    var xor = (a[i] ||\
    \ 0) ^ b[j] || 0;\n    result += String.fromCharCode(xor);\n    i++;\n    j++;\n\
    \  }\n  return result;\n}\n", "  const result: string = a.split('').map(x => x\
    \ ^ b[0]).join('');\n  return result;\n}\n", "  return a ^ b;\n}\n", "  let result\
    \ = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n\
    \  }\n  return result;\n}\n", "    const result: string = \"\";\n    for (let\
    \ i = 0; i < a.length; i++) {\n        result += (a[i] ^ b[i]);\n    }\n    return\
    \ result;\n}\n", "    return binary_xor(binary_to_int(a), binary_to_int(b));\n\
    }\n", "    return a + string_xor(b, a);\n}\n", "  return a ^ b;\n}\n", "  return\
    \ a.split(\"\").reduce((prev, curr, i) => {\n    return prev ^ curr;\n  }, b.split(\"\
    \").reduce((prev, curr, i) => {\n    return prev ^ curr;\n  }));\n}\n", "  var\
    \ result = '';\n  var i = 0;\n  while (i < a.length && i < b.length) {\n    var\
    \ c = a.charCodeAt(i) - b.charCodeAt(i);\n    if (c < 0) {\n      result += String.fromCharCode(c\
    \ + 26);\n    } else {\n      result += String.fromCharCode(c + 26);\n    }\n\
    \    i += 1;\n  }\n  while (i < a.length) {\n    result += String.fromCharCode(26);\n\
    \    i += 1;\n  }\n  while (i < b.length) {\n    result += String.fromCharCode(26);\n\
    \    i += 1;\n  }\n  return result;\n}\n", "  const result: string = a.slice(0,\
    \ a.length - b.length) + b.slice(0, b.length);\n  return result;\n}\n", "    let\
    \ result = \"\";\n    for (let i = 0; i < a.length; i++) {\n        result +=\
    \ (a[i] ^ b[i]);\n    }\n    return result;\n}\n", "  return a.split('').map((x,\
    \ i) => x ^ b[i]).join('');\n}\n", "  return bin2hex(xor_binary(hex2bin(a), hex2bin(b)));\n\
    }\n", "    let result = \"\";\n    for (let i = 0; i < a.length; i++) {\n    \
    \    result += (a[i] ^ b[i]);\n    }\n    return result;\n}\n", "  return a.split('').map((x,\
    \ i) => x ^ b[i]).join('');\n}\n", "  let result = '';\n  for (let i = 0; i <\
    \ a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n}\n",
  "    const result: string = a.length > b.length ? a : b;\n    for (let i = 0; i\
    \ < result.length; i++) {\n        result[i] = result[i] ^ b[i];\n    }\n    return\
    \ result;\n}\n", "    const len = Math.min(a.length, b.length);\n    let res =\
    \ \"\";\n    for (let i = 0; i < len; i++) {\n        res += (a[i] ^ b[i]);\n\
    \    }\n    return res;\n}\n", "  let result = \"\";\n  for (let i = 0; i < a.length;\
    \ i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
