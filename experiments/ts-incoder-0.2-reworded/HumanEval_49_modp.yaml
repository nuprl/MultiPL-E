name: HumanEval_49_modp
language: ts
prompt: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
  // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n//\
  \ 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
  \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
  \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
  \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
completions: ["  if (n < p) {\n    return n;\n  }\n  return n % p;\n}\n", "  if (n\
    \ < p) {\n    return n;\n  }\n  return n % p;\n}\n", "  if (n < p) {\n    return\
    \ n;\n  }\n  if (n === p || n !== n) {\n    return n;\n  }\n  if (n === (p | 0))\
    \ {\n    return p;\n  }\n  if (n === (p + p | 0)) {\n    return (p + p | 0);\n\
    \  }\n  if (n === (p | 0) - 1) {\n    return p;\n  }\n  if (n === (p + p | 0)\
    \ - 1) {\n    return (p + p | 0);\n  }\n  if (n === (p | 0) - 2) {\n    return\
    \ p;\n  }\n  if (n === (p + p | 0) - 2) {\n    return (p + p | 0);\n  }\n  if\
    \ (n === (p | 0) - 3) {\n    return p;\n  }\n  if (n === (p + p | 0) - 3) {\n\
    \    return (p + p | 0);\n  }\n  if (n === (p | 0) - 4) {\n    return p;\n  }\n\
    \  if (n === (p + p | 0) - 4) {\n    return (p + p | 0);\n  }\n  if (n === (p\
    \ | 0) - 5) {\n    return p;\n  }\n  if (n === (p + p | 0) - 5) {\n    return\
    \ (p + p | 0);\n  }\n  if (n === (p | 0) - 6) {\n    return p;\n  }\n  if (n ===\
    \ (p + p | 0) - 6) {\n    return (p + p | 0);\n  }\n  if (n === (p | 0) - 7) {\n\
    \    return p;\n  }\n  if (n === (p + p | 0) - 7) {\n    return (p + p | 0);\n\
    \  }\n  if (n === (p | 0) - 8) {\n    return p;\n  }\n  if (n === (p + p | 0)\
    \ - 8) {\n    return (p + p | 0);\n  }\n  if (n === (p | 0) - 9) {\n    return\
    \ p;\n  }\n  if (n === (p + p | 0) - 9) {\n    return (p + p | 0);\n  }\n  if\
    \ (n === (p | 0) - 10) {\n    return p;\n  }\n  if (n === (p + p | 0) - 10) {\n\
    \    return (p + p | 0);\n  }\n  if (n === (p | 0) - 11) {\n    return p;\n  }\n\
    \  if (n === (p + p | 0) - 11) {\n    return (p + p | 0);\n  }\n  return n;\n\
    }\n", "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n", "  let res =\
    \ 1;\n  for (let i = 0; i < p; i++) {\n    res *= n;\n  }\n  return res;\n}\n",
  "  if (n < p) {\n    return n;\n  }\n  if (n === p) {\n    return n;\n  }\n  if\
    \ (n < 1) {\n    return 1;\n  }\n  if (n > 1) {\n    return modp(n - 1, p);\n\
    \  }\n  return p;\n}\n", "  if (n < p) {\n    return n - p;\n  }\n  return p;\n\
    }\n", "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n", "  let res =\
    \ 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) + n;\n  }\n  return\
    \ res;\n}\n", "  if (n < p) {\n    return n - p;\n  }\n  return p;\n}\n", "  if\
    \ (n < p) {\n    return n - p;\n  }\n  return p;\n}\n", "  return ((n % p) + p)\
    \ % p;\n}\n", "  if (n < p) {\n    return n;\n  }\n  return n % p;\n}\n", "  return\
    \ ((n % p) + p) % p;\n}\n", "  if (n < p) {\n    return n;\n  }\n  let r = n -\
    \ (n & p);\n  return (r & p) | (r & ~p);\n}\n", "  if (n < p) {\n    return n\
    \ - p;\n  }\n  return p;\n}\n", "  if (n < p) {\n    return n;\n  }\n  if (n ===\
    \ p || n === p % p) {\n    return n;\n  }\n  if (n % p === 0) {\n    return p;\n\
    \  }\n  if (p * p < n) {\n    return p + (n - p);\n  }\n  if (p % p === 0) {\n\
    \    return p;\n  }\n  return modp(p - 1, p);\n}\n", "  if (n < p) {\n    return\
    \ n - p;\n  }\n  return p;\n}\n", "  let res = 1;\n  for (let i = 0; i < p; i++)\
    \ {\n    res *= n;\n  }\n  return res;\n}\n", "  return ((n % p) + p) % p;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
