name: HumanEval_43_pairs_sum_to_zero
language: ts
prompt: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
  \ true if there are two distinct elements in the array that\n// sum to zero, and\
  \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
  \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
  \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
  // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
  \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
  \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3, 9,\
  \ -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
  \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
  \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
completions: ["  let pairs: number[][] = [];\n  for (let i = 0; i < l.length; i++)\
    \ {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0)\
    \ {\n        pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length\
    \ > 1;\n}\n", "  let pairs: number[][] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    let pair: number[] = [];\n    for (let j = i; j < l.length; j++)\
    \ {\n      if (l[j] + l[i] === 0) {\n        pair.push(l[j]);\n      }\n    }\n\
    \    if (pair.length > 0) {\n      pairs.push(pair);\n    }\n  }\n  return pairs.length\
    \ > 0;\n}\n", "  let pairs: number[][] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    let pair: number[] = [];\n    for (let j = 0; j < l.length; j++)\
    \ {\n      if (i !== j) {\n        pair[j] = (l[i] + l[j]);\n      }\n    }\n\
    \    pairs.push(pair);\n  }\n  for (let i = 0; i < pairs.length; i++) {\n    for\
    \ (let j = 0; j < pairs[i].length; j++) {\n      if (pairs[i][j] !== 0) {\n  \
    \      return false;\n      }\n    }\n  }\n  return true;\n}\n", "  let pairs:\
    \ number[][] = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i\
    \ + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i],\
    \ l[j]]);\n      }\n    }\n  }\n  return pairs.length > 0;\n}\n", "  let pairs:\
    \ number[][] = [];\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n \
    \   sum += l[i];\n    pairs.push([sum, l[i]]);\n  }\n  for (let i = 0; i < pairs.length;\
    \ i++) {\n    for (let j = i + 1; j < pairs.length; j++) {\n      if (pairs[i][0]\
    \ + pairs[j][0] === 0 && pairs[i][1] === pairs[j][1]) {\n        return false;\n\
    \      }\n    }\n  }\n  return true;\n}\n", "  let pairs: number[][] = [];\n \
    \ for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length !== 0;\n}\n", "  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n\
    \    for (let j = i + 1; j < l.length; j++) {\n      pair.push(l[i] + l[j]);\n\
    \    }\n    pairs.push(pair);\n  }\n  for (let i = 0; i < pairs.length; i++) {\n\
    \    let pair = pairs[i];\n    let sum = 0;\n    for (let j = 0; j < pair.length;\
    \ j++) {\n      sum += pair[j];\n    }\n    if (sum === 0) {\n      return true;\n\
    \    }\n  }\n  return false;\n}\n", "  let pairs: number[][] = [];\n  for (let\
    \ i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n\
    \      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n      }\n\
    \    }\n  }\n  return pairs.length > 0;\n}\n", "  let pairs: number[][] = [];\n\
    \  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n    for\
    \ (let j = 0; j < l.length; j++) {\n      if (i != j && l[i] + l[j] == 0) {\n\
    \        pair.push(l[i]);\n        pair.push(l[j]);\n      }\n    }\n    if (pair.length\
    \ == 2) {\n      pairs.push(pair);\n    }\n  }\n  return pairs.length == 0;\n\
    }\n", "  let pairs: number[][] = [];\n  for (let i = 0; i < l.length; i++) {\n\
    \    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n\
    \        pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length\
    \ > 0;\n}\n", "  let pairs: number[][] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j]\
    \ === 0) {\n        pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length\
    \ !== 0;\n}\n", "  let pairs: number[][] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    let pair: number[] = [];\n    for (let j = 0; j < l.length; j++)\
    \ {\n      if (i !== j) {\n        pair[j] = (l[i] + l[j]);\n      }\n    }\n\
    \    pairs.push(pair);\n  }\n  let zeros: number[] = [];\n  for (let i = 0; i\
    \ < pairs.length; i++) {\n    let pair = pairs[i];\n    for (let j = 0; j < pair.length;\
    \ j++) {\n      if (pair[j] === 0) {\n        zeros.push(pair[j]);\n      }\n\
    \    }\n  }\n  return zeros.length === 0;\n}\n", "  let pairs: number[][] = [];\n\
    \  for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n    for\
    \ (let j = 0; j < l.length; j++) {\n      if (i !== j) {\n        pair.push(l[i]\
    \ + l[j]);\n      }\n    }\n    pairs.push(pair);\n  }\n  for (let i = 0; i <\
    \ pairs.length; i++) {\n    let pair = pairs[i];\n    let found = false;\n   \
    \ for (let j = 0; j < pair.length; j++) {\n      if (pair[j] === 0) {\n      \
    \  found = true;\n        break;\n      }\n    }\n    if (!found) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "  let pairs: number[][] = [];\n \
    \ for (let i = 0; i < l.length; i++) {\n    let pair: number[] = [];\n    for\
    \ (let j = 0; j < l.length; j++) {\n      if (i != j && l[i] + l[j] == 0) {\n\
    \        pair.push(l[i]);\n        pair.push(l[j]);\n      }\n    }\n    if (pair.length\
    \ > 0) {\n      pairs.push(pair);\n    }\n  }\n  return pairs.length > 0;\n}\n",
  "  let pairs: number[][] = [];\n  for (let i = 0; i < l.length; i++) {\n    for\
    \ (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n     \
    \   pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length !==\
    \ 0;\n}\n", "  let pairs: number[][] = [];\n  for (let i = 0; i < l.length; i++)\
    \ {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0)\
    \ {\n        pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length\
    \ !== 0;\n}\n", "  let pairs: number[][] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j]\
    \ === 0) {\n        pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length\
    \ !== 0;\n}\n", "  let pairs: number[][] = [];\n  let sum = 0;\n  for (let i =\
    \ 0; i < l.length; i++) {\n    sum += l[i];\n    pairs.push([l[i], sum]);\n  }\n\
    \  for (let i = 0; i < pairs.length; i++) {\n    for (let j = i + 1; j < pairs.length;\
    \ j++) {\n      if (pairs[i][1] > pairs[j][1]) {\n        return false;\n    \
    \  }\n    }\n  }\n  return true;\n}\n", "  let pairs: number[][] = [];\n  for\
    \ (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++)\
    \ {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n     \
    \ }\n    }\n  }\n  return pairs.length !== 0;\n}\n", "  let pairs: number[][]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length <= 1;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
