name: HumanEval_103_rounded_avg
language: ts
prompt: "//You are given two positive integers n and m, and your task is to compute\
  \ the\n// average of the integers from n through m (including n and m). \n// Round\
  \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
  \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
  \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20,\
  \ 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number): string| number\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
  0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
  \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
  );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
  \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
  );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
  \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
  \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
completions: ["  if (n < m) {\n    return -1;\n  }\n  const n = Math.ceil(n);\n  const\
    \ m = Math.ceil(m);\n  const result = [];\n  for (let i = n; i <= m; i++) {\n\
    \    result.push(i);\n  }\n  return result.join('');\n}\n", "    if (n < m) {\n\
    \        return -1;\n    }\n    let result = 0;\n    for (let i = n; i <= m; i++)\
    \ {\n        result += i;\n    }\n    return result / 2;\n}\n", "  if (n < m)\
    \ {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n\
    \    result += i;\n  }\n  return result / 2;\n}\n", "  if (n <= m) {\n    return\
    \ -1\n  }\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n\
    \  return sum / m\n}\n", "  if (n < m) {\n    return -1;\n  }\n  const avg = Math.floor((n\
    \ + m) / 2);\n  return `${(avg).toString(2)}`.padStart(avg.toString(2).length\
    \ + 1, '0');\n}\n", "    if (n <= m) {\n        return -1\n    }\n    let result:\
    \ number = (n + m) / 2\n    let resultString: string = result.toString(2)\n  \
    \  let resultStringLength = resultString.length\n    let resultStringHalfLength:\
    \ number = resultStringLength / 2\n    let resultStringHalfLengthString: string\
    \ = resultStringHalfLength.toString(2)\n    let resultStringHalfLengthStringLength\
    \ = resultStringHalfLengthString.length\n    let resultStringHalfLengthStringHalfLength:\
    \ number = resultStringHalfLengthStringLength / 2\n    let resultStringHalfLengthStringHalfLengthString:\
    \ string = resultStringHalfLengthStringHalfLength.toString(2)\n    let resultStringHalfLengthStringHalfLengthStringHalfLength:\
    \ number = resultStringHalfLengthStringHalfLengthStringHalfLength.toString(2)\n\
    \    let resultStringHalfLengthStringHalfLengthStringHalfLengthString: number\
    \ = resultStringHalfLengthStringHalfLengthStringHalfLength.toString(2)\n    let\
    \ resultStringHalfLengthStringHalfLengthStringHalfLengthStringString: number =\
    \ resultStringHalfLengthStringHalfLengthStringHalfLength.toString(2)\n    let\
    \ resultStringHalfLengthStringHalfLengthStringHalfLengthStringStringString: number\
    \ = resultStringHalfLengthStringHalfLengthStringHalfLength.toString(2)\n    let\
    \ resultStringHalfLengthStringHalfLengthStringHalfLengthStringStringString: number\
    \ = resultStringHalfLengthStringHalfLengthStringHalfLength.toString(2)\n    let\
    \ resultStringHalfLengthStringHalfLengthStringHalfLengthStringStringString: number\
    \ = resultStringHalfLengthStringHalfLengthStringHalfLength.toString(2)\n    let\
    \ resultStringHalfLengthStringHalfLengthStringHalfLengthStringStringString: number\
    \ = resultStringHalfLengthStringHalfLengthStringHalfLength.toString(2)\n    let\
    \ resultStringHalfLengthStringHalfLengthStringHalfLengthStringStringStringString:\
    \ number = resultStringHalfLengthStringHalfLengthStringHalfLength.toString(2)\n\
    \    let resultStringHalfLengthStringHalfLengthStringHalfLengthStringStringStringString:\
    \ number = resultStringHalfLengthStringHalfLengthStringHalfLength.toString(2)\n\
    \    let resultStringHalfLengthStringHalfLengthStringHalfLengthStringStringStringString:\
    \ number = resultStringHalfLengthStringHalfLengthStringHalfLength.toString(2)\n\
    \    let resultStringHalfLengthStringHalfLengthStringHalfLengthStringStringStringString:\
    \ number = resultStringHalfLengthStringHalfLengthStringHalfLength.toString(2)\n\
    \    let resultStringHalfLengthStringHalfLengthStringHalfLengthStringStringStringString:\
    \ number = resultStringHalfLengthStringHalfLengthStringHalfLength.toString(2)\n\
    \    let resultStringHalfLengthStringHalfLengthStringHalfLengthStringStringStringString:\
    \ number = resultStringHalfLengthStringHalfLengthStringHalfLength.toString(2)\n\
    \    let ", "    if (n < m) {\n        return -1;\n    }\n    let result = 0;\n\
    \    for (let i = n; i <= m; i++) {\n        result += i;\n    }\n    return result\
    \ / 2;\n}\n", "    if (n <= m) {\n        return -1\n    }\n    let result: number\
    \ = (n + m) / 2\n    let resultString: string = result.toString(2)\n    let resultStringLength\
    \ = resultString.length\n    let resultStringHalfLength: number = resultStringLength\
    \ / 2\n    let resultStringHalf: string = resultString.substr(0, resultStringHalfLength)\n\
    \    let resultStringHalfPlusOne: string = resultString.substr(resultStringHalfLength\
    \ + 1)\n    let resultStringHalfPlusOneLength: number = resultStringHalfPlusOne.length\n\
    \    let resultStringHalfPlusOneHalfLength: number = resultStringHalfPlusOneLength\
    \ / 2\n    let resultStringHalfPlusOneHalf: string = resultStringHalfPlusOne.substr(0,\
    \ resultStringHalfPlusOneHalfLength)\n    let resultStringHalfPlusOneHalfPlusOne:\
    \ string = resultStringHalfPlusOne.substr(resultStringHalfPlusOneHalfLength +\
    \ 1)\n    let resultStringHalfPlusOneHalfPlusOneLength: number = resultStringHalfPlusOneHalfPlusOne.length\n\
    \    let resultStringHalfPlusOneHalfPlusOneHalfLength: number = resultStringHalfPlusOneHalfPlusOneLength\
    \ / 2\n    let resultStringHalfPlusOneHalfPlusOneHalf: string = resultStringHalfPlusOneHalfPlusOne.substr(0,\
    \ resultStringHalfPlusOneHalfPlusOneHalfLength)\n    let resultStringHalfPlusOneHalfPlusOneHalfPlusOne:\
    \ string = resultStringHalfPlusOneHalfPlusOne.substr(resultStringHalfPlusOneHalfPlusOneHalfLength\
    \ + 1)\n    let resultStringHalfPlusOneHalfPlusOneHalfPlusOneLength: number =\
    \ resultStringHalfPlusOneHalfPlusOneHalfPlusOneLength / 2\n    let resultStringHalfPlusOneHalfPlusOneHalfPlusOneHalf:\
    \ string = resultStringHalfPlusOneHalfPlusOneHalfPlusOne.substr(0, resultStringHalfPlusOneHalfPlusOneHalfPlusOneHalfLength)\n\
    \    let resultStringHalfPlusOneHalfPlusOneHalfPlusOneHalfPlusOne: string = resultStringHalfPlusOneHalfPlusOneHalfPlusOne.substr(resultStringHalfPlusOneHalfPlusOneHalfPlusOneHalfLength\
    \ + 1)\n    let resultStringHalfPlusOneHalfPlusOneHalfPlusOneHalfPlusOneLength:\
    \ number = resultStringHalfPlusOneHalfPlusOneHalfPlusOneHalfLength / 2\n    let\
    \ resultStringHalfPlusOneHalfPlusOneHalfPlusOneHalfPlusOneHalf: string = resultStringHalfPlusOneHalfPlusOneHalfPlusOneHalfPlusOne.substr(0,\
    \ resultStringHalfPlusOneHalfPlusOneHalfPlusOneHalfPlusOneHalfLength)\n    let\
    \ resultStringHalfPlusOneHalfPlusOneHalfPlusOneHalfPlusOneHalfPlus", "  if (n\
    \ < m) {\n    return -1;\n  }\n  const result = (n + (m - n)) / 2;\n  return result.toString(2);\n\
    }\n", "    if (n < m) {\n        return -1;\n    }\n    const avg = Math.floor((n\
    \ + m) / 2);\n    return `${(avg).toString(2)}`.padStart(avg.toString(2).length\
    \ + 1, '0');\n}\n", "  if (n < m) {\n    return -1;\n  }\n  const n = Math.max(m,\
    \ n);\n  const result: string = n.toString(2);\n  const l = result.length;\n \
    \ const r = l - 1;\n  const d = n - m;\n  const s = d < 0 ? 1 : 0;\n  const m\
    \ = d % 2;\n  const b = d < 0 ? 1 : 0;\n  const c = m ? 1 : 0;\n  const e = m\
    \ ? 1 : 0;\n  const f = m ? 1 : 0;\n  const g = m ? 1 : 0;\n  const h = m ? 1\
    \ : 0;\n  const i = m ? 1 : 0;\n  const j = m ? 1 : 0;\n  const k = m ? 1 : 0;\n\
    \  const l = m ? 1 : 0;\n  const m = m ? 1 : 0;\n  const n = m ? 1 : 0;\n  const\
    \ o = m ? 1 : 0;\n  const p = m ? 1 : 0;\n  const q = m ? 1 : 0;\n  const r =\
    \ m ? 1 : 0;\n  const s = m ? 1 : 0;\n  const t = m ? 1 : 0;\n  const u = m ?\
    \ 1 : 0;\n  const v = m ? 1 : 0;\n  const w = m ? 1 : 0;\n  const x = m ? 1 :\
    \ 0;\n  const y = m ? 1 : 0;\n  const z = m ? 1 : 0;\n  const a = m ? 1 : 0;\n\
    \  const b = m ? 1 : 0;\n  const c = m ? 1 : 0;\n  const d = m ? 1 : 0;\n  const\
    \ e = m ? 1 : 0;\n  const f = m ? 1 : 0;\n  const g = m ? 1 : 0;\n  const h =\
    \ m ? 1 : 0;\n  const i = m ? 1 : 0;\n  const j = m ? 1 : 0;\n  const k = m ?\
    \ 1 : 0;\n  const l = m ? 1 : 0;\n  const m = m ? 1 : 0;\n  const n = m ? 1 :\
    \ 0;\n  const o = m ? 1 : 0;\n  const p = m ? 1 : 0;\n  const q = m ? 1 : 0;\n\
    \  const r = m ? 1 : 0;\n  const s = m ? 1 : 0;\n  const t = m ? 1 : 0;\n  const\
    \ u = m ? 1 : 0;\n  const v = m ? 1 : 0;\n  const w = m ? 1 : 0;\n  const x =\
    \ m ? 1 : 0;\n  const y = m ? 1 : 0;\n  const z = m ? 1 : 0;\n  const a = m ?\
    \ 1 : 0;\n  const b = m ? 1 : 0;\n  const c = m ? 1 : 0;\n  const d = m ? 1 :\
    \ 0;\n  const e = m ? 1 : 0;\n  const f = m ? 1 : 0;\n  const g = m ? 1 : 0;\n\
    \  const h = m ? 1 : 0;\n  const i = m ? 1 : 0;\n  const j = m ? 1 : 0;\n  const\
    \ k = m ? 1 : 0;\n  const l = m ? 1 : 0;\n  const m = m ? 1 : 0;\n  const n =\
    \ m ? 1 : 0;\n  const o = m ? 1 : 0;\n  const p = m ? 1 : 0;\n  const q = m ?\
    \ 1 : 0;\n  const r = m ? 1 : 0;\n  const s = m ? 1 : 0;\n  const t = m ? 1 :\
    \ 0;\n  const u = m ? 1 : 0;\n  const v = m ? 1 : 0;\n  const w = m ? 1 : 0;\n\
    \  const x = m ? 1 : 0;\n  const y = m ? 1 : 0;\n  const z = m ? 1 : 0;\n  const\
    \ a = ", "  if (n <= m) {\n    return -1\n  }\n  let sum = 0\n  for (let i = n;\
    \ i <= m; i++) {\n    sum += i\n  }\n  return sum / 2\n}\n", "  if (n > m) {\n\
    \    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum\
    \ += i;\n  }\n  return sum / 2;\n}\n", "  if (n > m) {\n    return -1;\n  }\n\
    \  const bin = n.toString(2);\n  const len = bin.length;\n  const half = len /\
    \ 2;\n  const left = bin.slice(0, half);\n  const right = bin.slice(half);\n \
    \ const sum = parseInt(left, 2) + parseInt(right, 2);\n  const avg = sum / 2;\n\
    \  return avg.toString(2);\n}\n", "    if (n >= m) {\n        return -1;\n   \
    \ }\n    const result: number = (n - m) / 2;\n    const resultString: string =\
    \ result.toString(2);\n    const resultStringLength = resultString.length;\n \
    \   if (resultStringLength > 1) {\n        return -1;\n    }\n    return resultString;\n\
    }\n", "  if (n < m) {\n    return -1;\n  }\n  const n = Math.ceil(n / 2);\n  const\
    \ m = Math.ceil(m / 2);\n  const binary = \"\";\n  for (let i = n; i <= m; i++)\
    \ {\n    binary += i;\n  }\n  return parseInt(binary, 2);\n}\n", "  if (n > m)\
    \ {\n    return -1;\n  }\n  const n = Math.ceil(n / 2);\n  const m = Math.ceil(m\
    \ / 2);\n  const sum = (n - m) * 2;\n  const binary = sum.toString(2);\n  while\
    \ (binary.length % 2 !== 0) {\n    binary = '0' + binary;\n  }\n  return binary;\n\
    }\n", "  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i =\
    \ n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", "  if\
    \ (n <= m) return n;\n  if (n > m) return -1;\n  const result: number = (n - m)\
    \ / 2;\n  const resultString = result.toString(2);\n  return resultString.padStart(resultString.length,\
    \ '0');\n}\n", "  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for\
    \ (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n",
  "  if (n < m) {\n    return -1;\n  }\n  const n = Math.max(m, n);\n  const m = Math.min(n,\
    \ m);\n  const s = n - m;\n  const d = (1 << s) >> 1;\n  const r = n >> s;\n \
    \ const r2 = r >> 1;\n  const r3 = r2 >> 1;\n  const r4 = r3 >> 1;\n  const r5\
    \ = r4 >> 1;\n  const r6 = r5 >> 1;\n  const r7 = r6 >> 1;\n  const r8 = r7 >>\
    \ 1;\n  const r9 = r8 >> 1;\n  const r10 = r9 >> 1;\n  const r11 = r10 >> 1;\n\
    \  const r12 = r11 >> 1;\n  const r13 = r12 >> 1;\n  const r14 = r13 >> 1;\n \
    \ const r15 = r14 >> 1;\n  const r16 = r15 >> 1;\n  const r17 = r16 >> 1;\n  const\
    \ r18 = r17 >> 1;\n  const r19 = r18 >> 1;\n  const r20 = r19 >> 1;\n  const r21\
    \ = r20 >> 1;\n  const r22 = r21 >> 1;\n  const r23 = r22 >> 1;\n  const r24 =\
    \ r23 >> 1;\n  const r25 = r24 >> 1;\n  const r26 = r25 >> 1;\n  const r27 = r26\
    \ >> 1;\n  const r28 = r27 >> 1;\n  const r29 = r28 >> 1;\n  const r30 = r29 >>\
    \ 1;\n  const r31 = r30 >> 1;\n  const r32 = r31 >> 1;\n  const r33 = r32 >> 1;\n\
    \  const r34 = r33 >> 1;\n  const r35 = r34 >> 1;\n  const r36 = r35 >> 1;\n \
    \ const r37 = r36 >> 1;\n  const r38 = r37 >> 1;\n  const r39 = r38 >> 1;\n  const\
    \ r40 = r39 >> 1;\n  const r41 = r40 >> 1;\n  const r42 = r41 >> 1;\n  const r43\
    \ = r42 >> 1;\n  const r44 = r43 >> 1;\n  const r45 = r44 >> 1;\n  const r46 =\
    \ r45 >> 1;\n  const r47 = r46 >> 1;\n  const r48 = r47 >> 1;\n  const r49 = r48\
    \ >> 1;\n  const r50 = r49 >> 1;\n  const r51 = r50 >> 1;\n  const r52 = r51 >>\
    \ 1;\n  const r53 = r52 >> 1;\n  const r54 = r53 >> 1;\n  const r55 = r54 >> 1;\n\
    \  const r56 = r55 >> 1;\n  const r57 = r56 >> 1;\n", "  if (n <= m) return \"\
    0b\" + n.toString(2);\n  return -1;\n}\n", "  if (n > m) {\n    return -1;\n \
    \ }\n  let result: number = n + (n - m) / 2;\n  return result.toString(2);\n}\n",
  "    if (n > m) {\n        return -1;\n    }\n    let result = 0;\n    for (let\
    \ i = n; i <= m; i++) {\n        result += i;\n    }\n    return result / 2;\n\
    }\n", "  if (n >= m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i =\
    \ n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", "  if\
    \ (n <= m) {\n    return -1\n  }\n  let result: number = 0\n  for (let i = n;\
    \ i <= m; i++) {\n    result += i\n  }\n  return result / 2\n}\n", "  if (n >\
    \ m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m; i++)\
    \ {\n    result += i;\n  }\n  return result / 2;\n}\n", "  if (n >= m) {\n   \
    \ return -1;\n  }\n  const nums = Array.from({ length: m + 1 }, (_, i) => i);\n\
    \  nums.splice(n, 0, n);\n  const avg = nums.reduce((acc, val) => acc + val, 0)\
    \ / nums.length;\n  return Math.round(avg * Math.pow(2, 32)).toString(2);\n}\n",
  "  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
    \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", "  if (n > m)\
    \ {\n    return -1;\n  }\n  const binary = \"\";\n  for (let i = n; i <= m; i++)\
    \ {\n    binary += i.toString(2);\n  }\n  return parseInt(binary, 2);\n}\n", " \
    \   if (n < m) {\n        return -1;\n    }\n    let result = 0;\n    for (let\
    \ i = n; i <= m; i++) {\n        result += i;\n    }\n    return result / 2;\n\
    }\n", "  if (n > m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i =\
    \ n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", "  if\
    \ (n <= m) return n;\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n  \
    \  result += i;\n  }\n  return result / 2;\n}\n", "  if (n <= m) return -1\n \
    \ let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  return sum\
    \ / m\n}\n", "  if (n <= m) {\n    return -1\n  }\n  let sum = 0\n  for (let i\
    \ = n; i <= m; i++) {\n    sum += i\n  }\n  return sum / m\n}\n", "  if (n <=\
    \ m) {\n    return -1\n  }\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n\
    \    sum += i\n  }\n  return sum / m\n}\n", "    if (n <= m) {\n        return\
    \ -1\n    }\n    let result = 0\n    for (let i = n; i <= m; i++) {\n        result\
    \ += i\n    }\n    return result / 2\n}\n", "  if (n < m) {\n    return -1;\n\
    \  }\n  const result: number = (n - m) / 2;\n  return result > 0 ? `${result.toString(2)}`\
    \ : `-${result.toString(2)}`;\n}\n", "  if (n > m) {\n    return -1;\n  }\n  let\
    \ result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return\
    \ result / 2;\n}\n", "  if (n > m) {\n    return -1;\n  }\n  let result = 0;\n\
    \  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n\
    }\n", "  if (n > m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) /\
    \ 2);\n  return `${(avg).toString(2)}`;\n}\n", "  if (n < m) {\n    return -1;\n\
    \  }\n  const avg = n / m;\n  return Math.round(avg * Math.pow(2, 32)).toString(2);\n\
    }\n", "    if (n <= m) return n;\n    return -1;\n}\n", "  if (n < m) {\n    return\
    \ -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result +=\
    \ i;\n  }\n  return result / 2;\n}\n", "  if (n < m) {\n    return -1;\n  }\n\
    \  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return\
    \ sum / 2;\n}\n", "  if (n >= m) {\n    return -1;\n  }\n  let result = 0;\n \
    \ for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n\
    }\n", "  if (n < m) {\n    return -1;\n  }\n  const bin = n.toString(2);\n  const\
    \ len = bin.length;\n  let sum = 0;\n  for (let i = len - 1; i >= 0; i--) {\n\
    \    sum += parseInt(bin.charAt(i), 2);\n  }\n  return sum / Math.pow(2, len);\n\
    }\n", "  if (n <= m) return \"0b\" + n.toString(2);\n  return -1;\n}\n", "  if\
    \ (n > m) {\n    return -1;\n  }\n  const avg = n / m;\n  const bin = parseInt(avg,\
    \ 2);\n  return bin;\n}\n", "  if (n < m) {\n    return -1;\n  }\n  let sum =\
    \ 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n\
    }\n", "  if (n > m) {\n    return -1;\n  }\n  const num: number = n - m;\n  const\
    \ bin: number = num.toString(2);\n  const len: number = bin.length;\n  return\
    \ len > 1 ? bin.substr(0, len - 1) : bin;\n}\n", "    if (n <= m) {\n        return\
    \ -1\n    }\n    let result: number = 0\n    for (let i = n; i <= m; i++) {\n\
    \        result += i\n    }\n    return result / 2\n}\n", "  if (n < m) {\n  \
    \  return -1;\n  }\n  const n = Math.max(m, n);\n  const m = Math.min(n, m);\n\
    \  const binary = \"\";\n  for (let i = n; i <= m; i++) {\n    binary += i.toString(2);\n\
    \  }\n  return parseInt(binary, 2);\n}\n", "  if (n > m) {\n    return -1;\n \
    \ }\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n \
    \ }\n  return result / 2;\n}\n", "  if (n >= m) {\n    return -1;\n  }\n  const\
    \ result = (n - m) / 2;\n  const binary = result.toString(2);\n  while (binary.length\
    \ < m) {\n    binary = \"0\" + binary;\n  }\n  return binary;\n}\n", "  if (n\
    \ < m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  const\
    \ bin = binary(avg);\n  return bin;\n}\n", "  if (n < m) {\n    return -1;\n \
    \ }\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n \
    \ }\n  return result / 2;\n}\n", "  if (n >= m) {\n    return -1;\n  }\n  const\
    \ numBits = Math.ceil(Math.log2(m));\n  const numBytes = numBits / 8;\n  const\
    \ numBitsLeft = numBits % 8;\n  const numBytesInBits = numBytes * 8;\n  const\
    \ numBitsInByte = numBytesInBits / 8;\n  const numBitsLeft = numBytesInBits %\
    \ 8;\n  const numBitsInBytesLeft = numBitsInByte * 8;\n  const numBitsLeft = numBytesInBits\
    \ % 8;\n  const numBitsInBytesLeft = numBitsInBytesLeft / 8;\n  const numBitsLeft\
    \ = numBytesInBits % 8;\n  const numBitsInBytesLeft = numBitsInBytesLeft / 8;\n\
    \  const numBitsLeft = numBytesInBits % 8;\n  const numBitsInBytesLeft = numBitsInBytesLeft\
    \ / 8;\n  const numBitsLeft = numBytesInBits % 8;\n  const numBitsInBytesLeft\
    \ = numBitsInBytesLeft / 8;\n  const numBitsLeft = numBytesInBits % 8;\n  const\
    \ numBitsInBytesLeft = numBitsInBytesLeft / 8;\n  const numBitsLeft = numBytesInBits\
    \ % 8;\n  const numBitsInBytesLeft = numBitsInBytesLeft / 8;\n  const numBitsLeft\
    \ = numBytesInBits % 8;\n  const numBitsInBytesLeft = numBitsInBytesLeft / 8;\n\
    \  const numBitsLeft = numBytesInBits % 8;\n  const numBitsInBytesLeft = numBitsInBytesLeft\
    \ / 8;\n  const numBitsLeft = numBytesInBits % 8;\n  const numBitsInBytesLeft\
    \ = numBitsInBytesLeft / 8;\n  const numBitsLeft = numBytesInBits % 8;\n  const\
    \ numBitsInBytesLeft = numBitsInBytesLeft / 8;\n  const numBitsLeft = numBytesInBits\
    \ % 8;\n  const numBitsInBytesLeft = numBitsInBytesLeft / 8;\n  const numBitsLeft\
    \ = numBytesInBits % 8;\n  const numBitsInBytesLeft = numBitsInBytesLeft / 8;\n\
    \  const numBitsLeft = numBytesInBits % 8;\n  const numBitsInBytesLeft = numBitsInBytesLeft\
    \ / 8;\n  const numBitsLeft = numBytesInBits % 8;\n  const numBitsInBytesLeft\
    \ = numBitsInBytesLeft / 8;\n  const numBitsLeft = numBytesInBits % 8;\n  const\
    \ numBitsInBytesLeft = numBitsInBytesLeft / 8;\n  const numBitsLeft = numBytesInBits\
    \ % 8;\n  const numBitsInBytesLeft = numBitsInBytesLeft / 8;\n  const numBitsLeft\
    \ = ", "  if (n <= m) {\n    return -1\n  }\n  let sum = 0\n  for (let i = n;\
    \ i <= m; i++) {\n    sum += i\n  }\n  return sum / 2\n}\n", "  if (n < m) {\n\
    \    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum\
    \ += i;\n  }\n  return sum / 2;\n}\n", "  if (n > m) {\n    return -1;\n  }\n\
    \  const result = (n - m) / 2;\n  return result + result.toString(2);\n}\n", " \
    \   if (n >= m) {\n        return -1;\n    }\n    let result = 0;\n    for (let\
    \ i = n; i <= m; i++) {\n        result += i;\n    }\n    return result / 2;\n\
    }\n", "  if (n < m) {\n    return -1;\n  }\n  const n = Math.max(m, n);\n  const\
    \ m = Math.min(n, m);\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum\
    \ += i;\n  }\n  return sum / m;\n}\n", "  if (n < m) {\n    return -1;\n  }\n\
    \  const avg = Math.floor((n + m) / 2);\n  return toBinary(avg);\n}\n", "  if\
    \ (n <= m) return \"0b\" + n.toString(2);\n  return -1;\n}\n", "  if (n > m) {\n\
    \    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  return bin(avg);\n\
    }\n", "  if (n > m) {\n    return -1;\n  }\n  const result = (n - m) / 2;\n  return\
    \ result.toString(2);\n}\n", "  if (n > m) {\n    return -1;\n  }\n  const result\
    \ = new Array(n + 1).fill(0);\n  for (let i = n; i <= m; i++) {\n    result[i]\
    \ = result[i] | 1;\n  }\n  result[n] = result[n] | 1;\n  return result.map((x)\
    \ => x.toString(2)).join('');\n}\n", "  if (n < m) {\n    return -1;\n  }\n  const\
    \ n = Math.ceil(n / 2);\n  const m = Math.ceil(m / 2);\n  const sum = (n - m)\
    \ * 2;\n  const bin = sum.toString(2);\n  const len = bin.length;\n  return len\
    \ > 1 ? bin.substr(0, len - 1) : bin;\n}\n", "  if (n <= m) {\n    return -1\n\
    \  }\n  let result: number = n\n  let remainder: number = m\n  while (result >=\
    \ remainder) {\n    result -= remainder\n    remainder += 1\n  }\n  return result.toString(2)\n\
    }\n", "  if (n > m) {\n    return -1;\n  }\n  const result = (n - m) / 2;\n  return\
    \ result.toString(2);\n}\n", "  if (n < m) {\n    return -1;\n  }\n  let result\
    \ = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return result\
    \ / 2;\n}\n", "  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for (let\
    \ i = n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", " \
    \ if (n >= m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
    \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", "  if (n < m)\
    \ {\n    return -1;\n  }\n  const avg = n + (m - n) / 2;\n  return parseInt(avg.toString(2),\
    \ 2);\n}\n", "  if (n > m) {\n    return -1;\n  }\n  const n = Math.min(n, m);\n\
    \  const m = Math.max(m, n);\n  const binary = \"\";\n  for (let i = n; i <= m;\
    \ i++) {\n    binary += i.toString(2);\n  }\n  return parseInt(binary, 2);\n}\n",
  "  if (n >= m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
    \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", "  if (n >= m)\
    \ {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n\
    \    result += i;\n  }\n  return result / 2;\n}\n", "    if (n < m) {\n      \
    \  return -1;\n    }\n    let result = 0;\n    for (let i = n; i <= m; i++) {\n\
    \        result += i;\n    }\n    return result / 2;\n}\n", "  if (n > m) {\n\
    \    return -1;\n  }\n  const result: number = (n - m) / 2;\n  return result.toString(2);\n\
    }\n", "  if (n > m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i =\
    \ n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", "  if\
    \ (n < m) {\n    return -1;\n  }\n  const avg = n / m;\n  const binary = avg.toString(2);\n\
    \  const len = binary.length;\n  const result = new Array(len + 1);\n  result[0]\
    \ = binary;\n  for (let i = 1; i < len; i++) {\n    result[i] = binary[i - 1]\
    \ + binary[i];\n  }\n  return parseInt(result.reverse().join(''), 2);\n}\n", " \
    \ if (n >= m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n\
    \  const bin = binary(avg);\n  return bin;\n}\n", "  if (n > m) {\n    return\
    \ -1;\n  }\n  const result = (n - m) / 2;\n  return result < 0 ? result * 2 +\
    \ m : result;\n}\n", "  if (n < m) {\n    return -1;\n  }\n  const avg = Math.floor((n\
    \ + m) / 2);\n  return bin(avg);\n}\n", "  if (n > m) {\n    return -1;\n  }\n\
    \  const result = (n - m) / 2;\n  return result.toString(2);\n}\n", "    if (n\
    \ >= m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i\
    \ <= m; i++) {\n        sum += i;\n    }\n    let avg = sum / 2;\n    let binary\
    \ = \"\";\n    while (avg > 0) {\n        binary = binary + \"1\";\n        avg\
    \ -= 1;\n    }\n    return binary;\n}\n", "  if (n < m) {\n    return -1;\n  }\n\
    \  const avg = Math.floor((n + m) / 2);\n  return bin(avg);\n}\n", "  if (n <\
    \ m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m; i++)\
    \ {\n    result += i;\n  }\n  return result / 2;\n}\n", "  if (n > m) {\n    return\
    \ -1;\n  }\n  const binary = \"\";\n  for (let i = n; i <= m; i++) {\n    binary\
    \ += i.toString(2);\n  }\n  return parseInt(binary, 2);\n}\n", "  if (n < m) {\n\
    \    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n  \
    \  result += i;\n  }\n  return result / 2;\n}\n", "  if (n < m) {\n    return\
    \ -1;\n  }\n  const binary = \"\";\n  for (let i = n; i <= m; i++) {\n    binary\
    \ += i.toString(2);\n  }\n  return parseInt(binary, 2);\n}\n", "  if (n > m) {\n\
    \    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n  \
    \  result += i;\n  }\n  return result / 2;\n}\n", "  if (n < m) {\n    return\
    \ -1;\n  }\n  const n = Math.max(m, n);\n  let result = '';\n  for (let i = n;\
    \ i <= m; i++) {\n    result += i.toString(2);\n  }\n  return result;\n}\n", " \
    \   if (n < m) {\n        return -1;\n    }\n    let result = 0;\n    for (let\
    \ i = n; i <= m; i++) {\n        result += i;\n    }\n    return result / 2;\n\
    }\n", "    if (n <= m) return -1\n    let result: number = (n - m) / 2 + m\n \
    \   let resultString = result.toString(2)\n    if (resultString.length % 2 ===\
    \ 1) resultString = \"0\" + resultString\n    return resultString\n}\n", "  if\
    \ (n > m) {\n    return -1;\n  }\n  const result: number = (n - m) / 2;\n  const\
    \ resultString: string = result.toString(2);\n  return resultString.padStart(resultString.length,\
    \ '0');\n}\n", "  if (n > m) {\n    return -1;\n  }\n  const bin = n.toString(2);\n\
    \  const len = bin.length;\n  const mid = len / 2;\n  const left = bin.slice(0,\
    \ mid);\n  const right = bin.slice(mid, len);\n  const sum = parseInt(left, 2)\
    \ + parseInt(right, 2);\n  const avg = sum / 2;\n  return avg.toString(2);\n}\n",
  "    if (n < m) {\n        return -1;\n    }\n    let result = 0;\n    for (let\
    \ i = n; i <= m; i++) {\n        result += i;\n    }\n    return result / 2;\n\
    }\n", "  if (n > m) {\n    return -1;\n  }\n  const result = (n - m) / 2;\n  return\
    \ result.toString(2);\n}\n", "  if (n < m) {\n    return -1;\n  }\n  let result\
    \ = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return result\
    \ / 2;\n}\n", "  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for (let\
    \ i = n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", " \
    \ if (n <= m) {\n    return -1\n  }\n  let result = 0\n  for (let i = n; i <=\
    \ m; i++) {\n    result += i\n  }\n  return result / 2\n}\n", "  if (n <= m) return\
    \ n;\n  if (n > m) return -1;\n  const s = `${n}${m}`;\n  const i = s.indexOf('m');\n\
    \  if (i < 0) return -1;\n  return `${s.slice(0, i)}${s.slice(i + 1)}`;\n}\n",
  "  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
    \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", "  if (n < m)\
    \ {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  return bin(avg);\n\
    }\n", "  if (n >= m) return -1;\n  const bin = n.toString(2);\n  const len = bin.length;\n\
    \  const half = len / 2;\n  const left = bin.slice(0, half);\n  const right =\
    \ bin.slice(half);\n  const sum = parseInt(left, 2) + parseInt(right, 2);\n  return\
    \ sum / 2;\n}\n", "  if (n > m) {\n    return -1;\n  }\n  const binary = \"\"\
    ;\n  for (let i = n; i <= m; i++) {\n    binary += i.toString(2);\n  }\n  return\
    \ parseInt(binary, 2);\n}\n", "  if (n < m) {\n    return -1;\n  }\n  let result\
    \ = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return result\
    \ / 2;\n}\n", "  if (n > m) {\n    return -1;\n  }\n  let result = 0;\n  for (let\
    \ i = n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", " \
    \ if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m;\
    \ i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n", "  if (n > m) {\n    return\
    \ -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n\
    \  }\n  return sum / 2;\n}\n", "    if (n > m) {\n        return -1;\n    }\n\
    \    let result: number = n + (m >> 1);\n    let remainder: number = m - (result\
    \ >> 1);\n    let resultString: string = result.toString(2);\n    let remainderString:\
    \ string = remainder.toString(2);\n    let resultStringLength = resultString.length;\n\
    \    let remainderStringLength = remainderString.length;\n    if (resultStringLength\
    \ > remainderStringLength) {\n        return resultString.substr(0, remainderStringLength);\n\
    \    }\n    return remainderString;\n}\n", "  if (n < m) {\n    return -1;\n \
    \ }\n  const n = Math.min(n, m);\n  const m = Math.max(m, n);\n  const binary\
    \ = \"\";\n  for (let i = n; i <= m; i++) {\n    binary += i.toString(2);\n  }\n\
    \  return parseInt(binary, 2);\n}\n", "  if (n < m) {\n    return -1;\n  }\n \
    \ const avg = Math.floor((n + m) / 2);\n  return `${(avg).toString(2)}`.padStart(avg.toString().length\
    \ + 1, '0');\n}\n", "    if (n >= m) {\n        return -1;\n    }\n    const result:\
    \ number = (n - m) / 2;\n    const resultString = result.toString(2);\n    const\
    \ resultLength = resultString.length;\n    let resultStringLength = resultLength;\n\
    \    let resultStringChars = resultStringLength;\n    let resultStringCharsLeft\
    \ = resultStringLength;\n    let resultStringCharsRight = resultStringLength;\n\
    \    let resultStringCharsMiddle = resultStringLength;\n    let resultStringCharsMiddleLeft\
    \ = 0;\n    let resultStringCharsMiddleRight = 0;\n    let resultStringCharsMiddleMiddle\
    \ = 0;\n    let resultStringCharsMiddleMiddleLeft = 0;\n    let resultStringCharsMiddleMiddleRight\
    \ = 0;\n    let resultStringCharsMiddleMiddleMiddle = 0;\n    let resultStringCharsMiddleMiddleMiddleLeft\
    \ = 0;\n    let resultStringCharsMiddleMiddleMiddleRight = 0;\n    let resultStringCharsMiddleMiddleMiddleMiddle\
    \ = 0;\n    let resultStringCharsMiddleMiddleMiddleLeft = 0;\n    let resultStringCharsMiddleMiddleMiddleRight\
    \ = 0;\n    let resultStringCharsMiddleMiddleMiddleMiddle = 0;\n    let resultStringCharsMiddleMiddleMiddleMiddleLeft\
    \ = 0;\n    let resultStringCharsMiddleMiddleMiddleMiddleRight = 0;\n    let resultStringCharsMiddleMiddleMiddleMiddle\
    \ = 0;\n    let resultStringCharsMiddleMiddleMiddleMiddleLeft = 0;\n    let resultStringCharsMiddleMiddleMiddleMiddleRight\
    \ = 0;\n    let resultStringCharsMiddleMiddleMiddleMiddle = 0;\n    let resultStringCharsMiddleMiddleMiddleMiddleLeft\
    \ = 0;\n    let resultStringCharsMiddleMiddleMiddleMiddleRight = 0;\n    let resultStringCharsMiddleMiddleMiddleMiddle\
    \ = 0;\n    let resultStringCharsMiddleMiddleMiddleMiddleLeft = 0;\n    let resultStringCharsMiddleMiddleMiddleMiddleRight\
    \ = 0;\n    let resultStringCharsMiddleMiddleMiddleMiddle = 0;\n    let resultStringCharsMiddleMiddleMiddleMiddleLeft\
    \ = 0;\n    let resultStringCharsMiddleMiddleMiddleMiddleRight = 0;\n    let resultStringCharsMiddleMiddleMiddleMiddle\
    \ = 0;\n    let resultStringCharsMiddleMiddleMiddleMiddleLeft = 0;\n    let resultStringCharsMiddleMiddleMiddleMiddleRight\
    \ = 0;\n    let resultStringCharsMiddleMiddleMiddleMiddle = 0;\n    let resultStringCharsMiddleMiddleMiddleMiddleLeft\
    \ = 0;\n    let resultStringCharsMiddleMiddleMiddleMiddleRight = 0;\n    let resultStringCharsMiddleMiddleMiddleMiddle\
    \ = 0;\n    let resultStringCharsMiddleMiddleMiddleMiddleLeft = 0;\n    let resultStringCharsMiddleMiddleMiddleMiddleRight\
    \ = 0;\n    let resultStringCharsMiddleMiddleMiddleMiddle = 0;\n    let resultStringCharsMiddleMiddleMiddleMiddleLeft\
    \ = 0;\n    let resultStringCharsMiddleMiddleMiddleMiddle", "  if (n <= m) {\n\
    \    return -1\n  }\n  let result = 0\n  for (let i = n; i <= m; i++) {\n    result\
    \ += i\n  }\n  return result / 2\n}\n", "    if (n <= m) return -1\n    let result\
    \ = 0\n    for (let i = n; i <= m; i++) {\n        result += i\n    }\n    return\
    \ result / 2\n}\n", "  if (n < m) {\n    return -1;\n  }\n  const result = (n\
    \ - m) / 2;\n  const binary = result.toString(2);\n  while (binary.length < m)\
    \ {\n    binary = '0' + binary;\n  }\n  return binary;\n}\n", "  if (n >= m) {\n\
    \    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n  \
    \  result += i;\n  }\n  return result / 2;\n}\n", "  if (n > m) {\n    return\
    \ -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n  const bin = binary(avg);\n\
    \  return bin.slice(0, bin.length - 1);\n}\n", "  if (n < m) {\n    return -1;\n\
    \  }\n  const n = Math.max(m, n);\n  let result = '';\n  for (let i = n; i <=\
    \ m; i++) {\n    result += i.toString(2);\n  }\n  return result;\n}\n", "    if\
    \ (n >= m) {\n        return -1;\n    }\n    const result: number = (n - m) /\
    \ 2;\n    const resultString = result.toString(2);\n    if (resultString.length\
    \ % 2 === 1) {\n        resultString = '0' + resultString;\n    }\n    return\
    \ resultString;\n}\n", "  if (n >= m) {\n    return -1;\n  }\n  const result =\
    \ (n - m) / 2;\n  return result + result;\n}\n", "  if (n < m) {\n    return -1;\n\
    \  }\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n\
    \  }\n  return result / 2;\n}\n", "  if (n < m) {\n    return -1;\n  }\n  let\
    \ result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return\
    \ result / 2;\n}\n", "    if (n > m) {\n        return -1;\n    }\n    let result\
    \ = 0;\n    for (let i = n; i <= m; i++) {\n        result += i;\n    }\n    return\
    \ result / 2;\n}\n", "  if (n > m) {\n    return -1;\n  }\n  const result = n\
    \ + (m >> 1);\n  return result > m ? -1 : result;\n}\n", "  if (n > m) {\n   \
    \ return -1;\n  }\n  const result: number = (n - m) / 2;\n  const resultStr =\
    \ result.toString(2);\n  const resultLen = resultStr.length;\n  if (resultLen\
    \ === 1) {\n    return `0b${resultStr}`;\n  }\n  return `0b${resultStr.substr(0,\
    \ resultLen - 1)}`;\n}\n", "  if (n >= m) {\n    return -1;\n  }\n  const result:\
    \ number = (n - m) / 2;\n  return result.toString(2);\n}\n", "  if (n <= m) return\
    \ n;\n  return -1;\n}\n", "  if (n >= m) {\n    return -1;\n  }\n  const binary\
    \ = n.toString(2);\n  const decimal = m.toString(2);\n  const length = binary.length;\n\
    \  const decimalLength = decimal.length;\n  let result = \"\";\n  let carry =\
    \ 0;\n  for (let i = 0; i < length; i++) {\n    const bin = binary[i];\n    const\
    \ dec = decimal[i];\n    const sum = parseInt(bin, 2) + parseInt(dec, 2) + carry;\n\
    \    carry = sum >= 10 ? 1 : 0;\n    result += parseInt(sum, 2);\n  }\n  if (carry\
    \ > 0) {\n    result += \"1\";\n  }\n  return result;\n}\n", "  if (n < m) {\n\
    \    return -1;\n  }\n  let result: number = n + (m - n) / 2;\n  return result\
    \ < 10 ? `0b${result}` : result;\n}\n", "  if (n > m) {\n    return -1;\n  }\n\
    \  const avg = Math.floor((n + m) / 2);\n  return bin(avg);\n}\n", "  if (n >\
    \ m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m; i++)\
    \ {\n    result += i;\n  }\n  return result / 2;\n}\n", "  if (n <= m) {\n   \
    \ return -1\n  }\n  const avg = Math.floor((n + m) / 2)\n  return bin(avg)\n}\n",
  "  if (n <= m) {\n    return -1\n  }\n  const binary = n.toString(2)\n  const len\
    \ = binary.length\n  const half = len / 2\n  const left = binary.slice(0, half)\n\
    \  const right = binary.slice(half)\n  const sum = left + right\n  const avg =\
    \ sum / 2\n  return avg.toString(2)\n}\n", "  if (n >= m) {\n    return -1;\n\
    \  }\n  const n = Math.ceil(n);\n  const m = Math.ceil(m);\n  const binary = \"\
    \";\n  for (let i = n; i <= m; i++) {\n    binary += i.toString(2);\n  }\n  return\
    \ binary;\n}\n", "  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for\
    \ (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n",
  "    if (n <= m) {\n        return -1\n    }\n    let sum = 0\n    for (let i =\
    \ n; i <= m; i++) {\n        sum += i\n    }\n    return sum / m\n}\n", "  if\
    \ (n >= m) return -1;\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n \
    \   result += i;\n  }\n  return result / 2;\n}\n", "  if (n < m) {\n    return\
    \ -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result +=\
    \ i;\n  }\n  return result / 2;\n}\n", "  if (n <= m) {\n    return -1\n  }\n\
    \  let result: number = n + (m / 2)\n  let remainder: number = m % 2\n  if (remainder\
    \ === 0) {\n    return result\n  }\n  result = result + remainder\n  return result\n\
    }\n", "  if (n > m) {\n    return -1;\n  }\n  let result: number = n + (m - n)\
    \ / 2;\n  return result.toString(2);\n}\n", "    if (n < m) {\n        return\
    \ -1;\n    }\n    let result = 0;\n    for (let i = n; i <= m; i++) {\n      \
    \  result += i;\n    }\n    return result / 2;\n}\n", "  if (n < m) {\n    return\
    \ -1;\n  }\n  const n = Math.ceil(n / 2);\n  const m = Math.ceil(m / 2);\n  let\
    \ sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum\
    \ / 2;\n}\n", "  if (n <= m) return n;\n  return -1;\n}\n", "    if (n < m) {\n\
    \        return -1;\n    }\n    let result = 0;\n    for (let i = n; i <= m; i++)\
    \ {\n        result += i;\n    }\n    return result / 2;\n}\n", "  if (n >= m)\
    \ {\n    return -1;\n  }\n  const bin = binary(n, m);\n  const binLen = bin.length;\n\
    \  const binStr = bin.substr(binLen - 1);\n  const binNum = parseInt(binStr, 2);\n\
    \  return binNum.toString(2);\n}\n", "  if (n > m) {\n    return -1;\n  }\n  const\
    \ binary = bin(n);\n  const decimal = decimal(n);\n  const decimal2 = decimal(m);\n\
    \  const binary2 = bin(m);\n  const binary3 = binary2.slice(0, binary2.length\
    \ - decimal2);\n  const binary4 = binary3.slice(0, binary3.length - decimal);\n\
    \  const binary5 = binary4.slice(0, binary4.length - decimal2);\n  const binary6\
    \ = binary5.slice(0, binary5.length - decimal);\n  const binary7 = binary6.slice(0,\
    \ binary6.length - decimal2);\n  const binary8 = binary7.slice(0, binary7.length\
    \ - decimal);\n  const binary9 = binary8.slice(0, binary8.length - decimal2);\n\
    \  const binary10 = binary9.slice(0, binary9.length - decimal);\n  const binary11\
    \ = binary10.slice(0, binary10.length - decimal2);\n  const binary12 = binary11.slice(0,\
    \ binary11.length - decimal);\n  const binary13 = binary12.slice(0, binary12.length\
    \ - decimal2);\n  const binary14 = binary13.slice(0, binary13.length - decimal);\n\
    \  const binary15 = binary14.slice(0, binary14.length - decimal2);\n  const binary16\
    \ = binary15.slice(0, binary15.length - decimal);\n  const binary17 = binary16.slice(0,\
    \ binary16.length - decimal2);\n  const binary18 = binary17.slice(0, binary17.length\
    \ - decimal);\n  const binary19 = binary18.slice(0, binary18.length - decimal2);\n\
    \  const binary20 = binary19.slice(0, binary19.length - decimal);\n  const binary21\
    \ = binary20.slice(0, binary20.length - decimal2);\n  const binary22 = binary21.slice(0,\
    \ binary21.length - decimal);\n  const binary23 = binary22.slice(0, binary22.length\
    \ - decimal2);\n  const binary24 = binary23.slice(0, binary23.length - decimal);\n\
    \  const binary25 = binary24.slice(0, binary24.length - decimal2);\n  const binary26\
    \ = binary25.slice(0, binary25.length - decimal);\n  const binary27 = binary26.slice(0,\
    \ binary26.length - decimal2);\n  const binary28 = binary27.slice(0, binary27.length\
    \ - decimal);\n  const binary29 = binary28.slice(0, binary28.length - decimal2);\n\
    \  const binary30 = binary29.slice(0, binary29.length - decimal);\n  const binary31\
    \ = binary30.slice(0, binary30.length - decimal2);\n  const binary32 = binary31.slice(0,\
    \ binary31.length - decimal);\n  const binary33 = binary32.slice(0, binary32.length\
    \ - decimal2);\n  const binary34 = binary33.slice(0, binary33.length - decimal);\n\
    \  const binary35 = binary34.slice(0, binary34.length - decimal2);\n  const binary36\
    \ = binary35.slice(0, binary35.length - decimal);\n  const binary37 = binary36.slice(0,\
    \ binary36.length - decimal2);\n  const binary38 = binary37.slice(0, binary37.length\
    \ - decimal);\n  const binary39 = binary38.slice(0, binary38.length - decimal2);\n\
    \  const binary40", "  if (n <= m) {\n    return -1\n  }\n  const avg = Math.floor((n\
    \ + m) / 2)\n  return `${(avg).toString(2)}`\n}\n", "  if (n > m) {\n    return\
    \ -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result +=\
    \ i;\n  }\n  return result / 2;\n}\n", "  if (n > m) {\n    return -1;\n  }\n\
    \  const result = (n - m) / 2;\n  return result.toString(2);\n}\n", "  if (n >\
    \ m) {\n    return -1;\n  }\n  const result = (n + (m - n)) / 2;\n  return parseInt(result.toString(2),\
    \ 2);\n}\n", "    if (n > m) {\n        return -1;\n    }\n    let result: number\
    \ = 0;\n    for (let i = n; i <= m; i++) {\n        result += i;\n    }\n    return\
    \ result / 2;\n}\n", "  if (n > m) {\n    return -1;\n  }\n  let result = 0;\n\
    \  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n\
    }\n", "  if (n > m) {\n    return -1;\n  }\n  const numBits = Math.ceil(Math.log2(m));\n\
    \  const numBytes = numBits / 8;\n  const numByteBytes = numBytes * 8;\n  const\
    \ numByteBits = numBytes * 8;\n  const numBitsBits = numBits * 8;\n  const numBitsBytes\
    \ = numBitsBits / 8;\n  const numBitsByteBytes = numBitsBytes * 8;\n  const numBitsByteBits\
    \ = numBitsBytes * 8;\n  const numByteByteByteBytes = numByteBytes * 8;\n  const\
    \ numByteByteByteByteBytes = numByteByteBytes * 8;\n  const numByteByteByteByteByteBytes\
    \ = numByteByteByteBytes * 8;\n  const numBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBit",
  "  if (n <= m) {\n    return -1\n  }\n  let result = 0\n  for (let i = n; i <= m;\
    \ i++) {\n    result += i\n  }\n  return result / 2\n}\n", "  if (n > m) {\n \
    \   return -1;\n  }\n  const result = (n - m) / 2;\n  return parseInt(result.toString(2),\
    \ 2);\n}\n", "  if (n < m) {\n    return -1;\n  }\n  const n = Math.max(m, n);\n\
    \  const m = Math.min(n, m);\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n\
    \    sum += i;\n  }\n  return sum / m;\n}\n", "  if (n < m) {\n    return -1;\n\
    \  }\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n\
    \  }\n  return result / 2;\n}\n", "  if (n > m) {\n    return -1;\n  }\n  let\
    \ result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return\
    \ result / 2;\n}\n", "  if (n >= m) {\n    return -1;\n  }\n  const result: number\
    \ = (n - m) / 2;\n  return result.toString(2);\n}\n", "  if (n <= m) {\n    return\
    \ -1;\n  }\n  const n = Math.max(m, n);\n  const m = Math.min(n, m);\n  const\
    \ binary = \"\";\n  for (let i = n; i <= m; i++) {\n    binary += i.toString(2);\n\
    \  }\n  return parseInt(binary, 2);\n}\n", "  if (n < m) {\n    return -1;\n \
    \ }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return\
    \ sum / m;\n}\n", "  if (n > m) {\n    return -1;\n  }\n  const avg = Math.floor((n\
    \ + m) / 2);\n  return `${(avg).toString(2)}`;\n}\n", "  if (n < m) {\n    return\
    \ -1;\n  }\n  const avg = n / m;\n  const bin = String(Math.round(avg * Math.pow(2,\
    \ 32)));\n  return bin.length % 2 ? \"0b\" + bin : \"0b\" + bin.substr(0, bin.length\
    \ - 1) + \"1\";\n}\n", "  if (n <= m) return -1\n  const n = Math.min(n, m)\n\
    \  const m = Math.max(m, n)\n  const binary = n.toString(2)\n  const len = binary.length\n\
    \  const half = len / 2\n  const left = binary.slice(0, half)\n  const right =\
    \ binary.slice(half)\n  const sum = left + right\n  const avg = sum / 2\n  return\
    \ parseInt(avg, 2)\n}\n", "  if (n >= m) {\n    return -1;\n  }\n  let result\
    \ = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return result\
    \ / 2;\n}\n", "  if (n > m) {\n    return -1;\n  }\n  const n = Math.ceil(n /\
    \ 2);\n  const m = Math.ceil(m / 2);\n  const binary = \"\";\n  for (let i = n;\
    \ i <= m; i++) {\n    binary += i;\n  }\n  return parseInt(binary, 2);\n}\n",
  "  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m;\
    \ i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n", "    if (n < m) {\n   \
    \     return -1;\n    }\n    let result = 0;\n    for (let i = n; i <= m; i++)\
    \ {\n        result += i;\n    }\n    return result / 2;\n}\n", "  if (n <= m)\
    \ {\n    return -1\n  }\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n   \
    \ sum += i\n  }\n  return sum / 2\n}\n", "  if (n < m) {\n    return -1;\n  }\n\
    \  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n\
    \  return result / 2;\n}\n", "  if (n > m) {\n    return -1;\n  }\n  const n =\
    \ Math.ceil(n / 2);\n  const m = Math.ceil(m / 2);\n  const binary = \"\";\n \
    \ for (let i = n; i <= m; i++) {\n    binary += i;\n  }\n  return parseInt(binary,\
    \ 2);\n}\n", "  if (n < m) {\n    return -1;\n  }\n  const n = Math.max(m, n);\n\
    \  const m = Math.min(n, m);\n  const binary = \"\";\n  for (let i = n; i <= m;\
    \ i++) {\n    binary += i.toString(2);\n  }\n  return parseInt(binary, 2);\n}\n",
  "  if (n > m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n \
    \ return `${(avg).toString(2)}`.padStart(avg.toString(2).length + 1, '0');\n}\n",
  "  if (n <= m) return \"0b\" + n.toString(2);\n  else return -1;\n}\n", "  if (n\
    \ > m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m; i++)\
    \ {\n    result += i;\n  }\n  return result / 2;\n}\n", "  if (n < m) {\n    return\
    \ -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n\
    \  }\n  return sum / 2;\n}\n", "  if (n >= m) {\n    return -1;\n  }\n  let result\
    \ = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return result\
    \ / 2;\n}\n", "    if (n > m) {\n        return -1;\n    }\n    const result:\
    \ number = (n - m) / 2;\n    const binary: number = result.toString(2);\n    const\
    \ zeros: number = binary.length;\n    const zeros_after_rounding: number = zeros\
    \ - Math.ceil(zeros / 2);\n    const rounding_zeros: number = zeros_after_rounding\
    \ - zeros;\n    const rounding_zeros_after_rounding: number = rounding_zeros -\
    \ Math.ceil(rounding_zeros / 2);\n    const rounding_zeros_after_rounding_to_zeros:\
    \ number = rounding_zeros_after_rounding - rounding_zeros;\n    const rounding_zeros_after_rounding_to_zeros_after_rounding:\
    \ number = rounding_zeros_after_rounding_to_zeros - Math.ceil(rounding_zeros_after_rounding\
    \ / 2);\n    const rounding_zeros_after_rounding_to_zeros_after_rounding_to_zeros:\
    \ number = rounding_zeros_after_rounding_to_zeros_after_rounding - rounding_zeros_after_rounding;\n\
    \    const rounding_zeros_after_rounding_to_zeros_after_rounding_to_zeros_after_rounding:\
    \ number = rounding_zeros_after_rounding_to_zeros_after_rounding_to_zeros - Math.ceil(rounding_zeros_after_rounding_to_zeros\
    \ / 2);\n    const rounding_zeros_after_rounding_to_zeros_after_rounding_to_zeros_after_rounding_to_zeros:\
    \ number = rounding_zeros_after_rounding_to_zeros_after_rounding_to_zeros_after_rounding\
    \ - rounding_zeros_after_rounding_to_zeros_after_rounding;\n    const rounding_zeros_after_rounding_to_zeros_after_rounding_to_zeros_after_rounding_to_zeros_after_rounding:\
    \ number = rounding_zeros_after_rounding_to_zeros_after_rounding_to_zeros_after_rounding_to_zeros_after_rounding\
    \ - rounding_zeros_after_rounding_to_zeros_after_rounding_to_zeros_after_rounding;\n\
    \    const rounding_zeros_after_rounding_to_zeros_after_rounding_to_zeros_after_rounding_to_zeros_after_rounding_to_zeros_after_rounding:\
    \ number = rounding_zeros_after_rounding_to_zeros_after_rounding_to_zeros_after_rounding_to_zeros_after_rounding_to_zeros_after_rounding\
    \ - rounding_zeros_after_rounding_to_zeros_after_rounding_to_zeros_after_rounding_to_zeros_after_rounding;\n\
    \    const rounding_zeros_after_rounding_to_zeros_after_rounding_to_zeros_after_rounding_to_zeros_after_rounding_to_zeros_after_rounding_to_zeros_after_rounding:\
    \ number = rounding_zeros_after_rounding_", "  if (n >= m) {\n    return -1;\n\
    \  }\n  const result = (n - m) / 2;\n  return result.toString(2);\n}\n", "  if\
    \ (n >= m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++)\
    \ {\n    sum += i;\n  }\n  return sum / 2;\n}\n", "  if (n < m) {\n    return\
    \ -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result +=\
    \ i;\n  }\n  return result / 2;\n}\n", "  if (n > m) {\n    return -1;\n  }\n\
    \  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return\
    \ sum / 2;\n}\n", "    if (n > m) {\n        return -1;\n    }\n    let result\
    \ = 0;\n    for (let i = n; i <= m; i++) {\n        result += i;\n    }\n    return\
    \ result / 2;\n}\n", "  if (n < m) {\n    return -1;\n  }\n  const n = Math.max(m,\
    \ n);\n  const m = Math.min(n, m);\n  const binary = \"\";\n  for (let i = n;\
    \ i <= m; i++) {\n    binary += i.toString(2);\n  }\n  return parseInt(binary,\
    \ 2);\n}\n", "  if (n >= m) {\n    return -1;\n  }\n  const avg = Math.floor((n\
    \ + m) / 2);\n  return `${avg}${(avg % 2 === 0) ? '1' : '0'}`;\n}\n", "  if (n\
    \ > m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m; i++)\
    \ {\n    result += i;\n  }\n  return result / 2;\n}\n", "  if (n <= m) {\n   \
    \ return -1\n  }\n  let result = 0\n  for (let i = n; i <= m; i++) {\n    result\
    \ += i\n  }\n  return result / 2\n}\n", "  if (n > m) {\n    return -1;\n  }\n\
    \  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n\
    \  return result / 2;\n}\n", "  if (n >= m) {\n    return -1;\n  }\n  const result\
    \ = (n - m) / 2;\n  return result.toString(2);\n}\n", "  if (n > m) {\n    return\
    \ -1;\n  }\n  const binary = \"\";\n  for (let i = n; i <= m; i++) {\n    const\
    \ bin = i.toString(2);\n    while (bin.length < 8) {\n      bin = \"0\" + bin;\n\
    \    }\n    binary += bin;\n  }\n  return parseInt(binary, 2);\n}\n", "  if (n\
    \ >= m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m; i++)\
    \ {\n    result += i;\n  }\n  return result / 2;\n}\n", "  if (n > m) {\n    return\
    \ -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result +=\
    \ i;\n  }\n  return result / 2;\n}\n", "  if (n < m) {\n    return -1;\n  }\n\
    \  const n = Math.max(m, n);\n  const s = n.toString(2);\n  const l = s.length\
    \ - 1;\n  const r = s.substr(0, l);\n  const r = parseInt(r, 2);\n  return r;\n\
    }\n", "  if (n <= m) {\n    return -1\n  }\n  let result = 0\n  for (let i = n;\
    \ i <= m; i++) {\n    result += i\n  }\n  return result / 2\n}\n", "  if (n >=\
    \ m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m; i++)\
    \ {\n    result += i;\n  }\n  return result / 2;\n}\n", "  if (n < m) {\n    return\
    \ -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result +=\
    \ i;\n  }\n  return result / 2;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
