name: HumanEval_103_rounded_avg
language: ts
prompt: "//You are given two positive integers n and m, and your task is to compute\
  \ the\n// average of the integers from n through m (including n and m). \n// Round\
  \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
  \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
  \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20,\
  \ 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number): string| number\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
  0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
  \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
  );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
  \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
  );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
  \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
  \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
completions: ["  if (n < m) {\n    return -1;\n  }\n  const n = Math.ceil(n);\n  const\
    \ m = Math.ceil(m);\n  const result = [];\n  for (let i = n; i <= m; i++) {\n\
    \    result.push(i);\n  }\n  return result.join('');\n}\n", "    if (n < m) {\n\
    \        return -1;\n    }\n    let result = 0;\n    for (let i = n; i <= m; i++)\
    \ {\n        result += i;\n    }\n    return result / 2;\n}\n", "  if (n < m)\
    \ {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n\
    \    result += i;\n  }\n  return result / 2;\n}\n", "  if (n <= m) {\n    return\
    \ -1\n  }\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n\
    \  return sum / m\n}\n", "  if (n < m) {\n    return -1;\n  }\n  const avg = Math.floor((n\
    \ + m) / 2);\n  return `${(avg).toString(2)}`.padStart(avg.toString(2).length\
    \ + 1, '0');\n}\n", "    if (n <= m) {\n        return -1\n    }\n    let result:\
    \ number = (n + m) / 2\n    let resultString: string = result.toString(2)\n  \
    \  let resultStringLength = resultString.length\n    let resultStringHalfLength:\
    \ number = resultStringLength / 2\n    let resultStringHalfLengthString: string\
    \ = resultStringHalfLength.toString(2)\n    let resultStringHalfLengthStringLength\
    \ = resultStringHalfLengthString.length\n    let resultStringHalfLengthStringHalfLength:\
    \ number = resultStringHalfLengthStringLength / 2\n    let resultStringHalfLengthStringHalfLengthString:\
    \ string = resultStringHalfLengthStringHalfLength.toString(2)\n    let resultStringHalfLengthStringHalfLengthStringHalfLength:\
    \ number = resultStringHalfLengthStringHalfLengthStringHalfLength.toString(2)\n\
    \    let resultStringHalfLengthStringHalfLengthStringHalfLengthString: number\
    \ = resultStringHalfLengthStringHalfLengthStringHalfLength.toString(2)\n    let\
    \ resultStringHalfLengthStringHalfLengthStringHalfLengthStringString: number =\
    \ resultStringHalfLengthStringHalfLengthStringHalfLength.toString(2)\n    let\
    \ resultStringHalfLengthStringHalfLengthStringHalfLengthStringStringString: number\
    \ = resultStringHalfLengthStringHalfLengthStringHalfLength.toString(2)\n    let\
    \ resultStringHalfLengthStringHalfLengthStringHalfLengthStringStringString: number\
    \ = resultStringHalfLengthStringHalfLengthStringHalfLength.toString(2)\n    let\
    \ resultStringHalfLengthStringHalfLengthStringHalfLengthStringStringString: number\
    \ = resultStringHalfLengthStringHalfLengthStringHalfLength.toString(2)\n    let\
    \ resultStringHalfLengthStringHalfLengthStringHalfLengthStringStringString: number\
    \ = resultStringHalfLengthStringHalfLengthStringHalfLength.toString(2)\n    let\
    \ resultStringHalfLengthStringHalfLengthStringHalfLengthStringStringStringString:\
    \ number = resultStringHalfLengthStringHalfLengthStringHalfLength.toString(2)\n\
    \    let resultStringHalfLengthStringHalfLengthStringHalfLengthStringStringStringString:\
    \ number = resultStringHalfLengthStringHalfLengthStringHalfLength.toString(2)\n\
    \    let resultStringHalfLengthStringHalfLengthStringHalfLengthStringStringStringString:\
    \ number = resultStringHalfLengthStringHalfLengthStringHalfLength.toString(2)\n\
    \    let resultStringHalfLengthStringHalfLengthStringHalfLengthStringStringStringString:\
    \ number = resultStringHalfLengthStringHalfLengthStringHalfLength.toString(2)\n\
    \    let resultStringHalfLengthStringHalfLengthStringHalfLengthStringStringStringString:\
    \ number = resultStringHalfLengthStringHalfLengthStringHalfLength.toString(2)\n\
    \    let resultStringHalfLengthStringHalfLengthStringHalfLengthStringStringStringString:\
    \ number = resultStringHalfLengthStringHalfLengthStringHalfLength.toString(2)\n\
    \    let ", "    if (n < m) {\n        return -1;\n    }\n    let result = 0;\n\
    \    for (let i = n; i <= m; i++) {\n        result += i;\n    }\n    return result\
    \ / 2;\n}\n", "    if (n <= m) {\n        return -1\n    }\n    let result: number\
    \ = (n + m) / 2\n    let resultString: string = result.toString(2)\n    let resultStringLength\
    \ = resultString.length\n    let resultStringHalfLength: number = resultStringLength\
    \ / 2\n    let resultStringHalf: string = resultString.substr(0, resultStringHalfLength)\n\
    \    let resultStringHalfPlusOne: string = resultString.substr(resultStringHalfLength\
    \ + 1)\n    let resultStringHalfPlusOneLength: number = resultStringHalfPlusOne.length\n\
    \    let resultStringHalfPlusOneHalfLength: number = resultStringHalfPlusOneLength\
    \ / 2\n    let resultStringHalfPlusOneHalf: string = resultStringHalfPlusOne.substr(0,\
    \ resultStringHalfPlusOneHalfLength)\n    let resultStringHalfPlusOneHalfPlusOne:\
    \ string = resultStringHalfPlusOne.substr(resultStringHalfPlusOneHalfLength +\
    \ 1)\n    let resultStringHalfPlusOneHalfPlusOneLength: number = resultStringHalfPlusOneHalfPlusOne.length\n\
    \    let resultStringHalfPlusOneHalfPlusOneHalfLength: number = resultStringHalfPlusOneHalfPlusOneLength\
    \ / 2\n    let resultStringHalfPlusOneHalfPlusOneHalf: string = resultStringHalfPlusOneHalfPlusOne.substr(0,\
    \ resultStringHalfPlusOneHalfPlusOneHalfLength)\n    let resultStringHalfPlusOneHalfPlusOneHalfPlusOne:\
    \ string = resultStringHalfPlusOneHalfPlusOne.substr(resultStringHalfPlusOneHalfPlusOneHalfLength\
    \ + 1)\n    let resultStringHalfPlusOneHalfPlusOneHalfPlusOneLength: number =\
    \ resultStringHalfPlusOneHalfPlusOneHalfPlusOneLength / 2\n    let resultStringHalfPlusOneHalfPlusOneHalfPlusOneHalf:\
    \ string = resultStringHalfPlusOneHalfPlusOneHalfPlusOne.substr(0, resultStringHalfPlusOneHalfPlusOneHalfPlusOneHalfLength)\n\
    \    let resultStringHalfPlusOneHalfPlusOneHalfPlusOneHalfPlusOne: string = resultStringHalfPlusOneHalfPlusOneHalfPlusOne.substr(resultStringHalfPlusOneHalfPlusOneHalfPlusOneHalfLength\
    \ + 1)\n    let resultStringHalfPlusOneHalfPlusOneHalfPlusOneHalfPlusOneLength:\
    \ number = resultStringHalfPlusOneHalfPlusOneHalfPlusOneHalfLength / 2\n    let\
    \ resultStringHalfPlusOneHalfPlusOneHalfPlusOneHalfPlusOneHalf: string = resultStringHalfPlusOneHalfPlusOneHalfPlusOneHalfPlusOne.substr(0,\
    \ resultStringHalfPlusOneHalfPlusOneHalfPlusOneHalfPlusOneHalfLength)\n    let\
    \ resultStringHalfPlusOneHalfPlusOneHalfPlusOneHalfPlusOneHalfPlus", "  if (n\
    \ < m) {\n    return -1;\n  }\n  const result = (n + (m - n)) / 2;\n  return result.toString(2);\n\
    }\n", "    if (n < m) {\n        return -1;\n    }\n    const avg = Math.floor((n\
    \ + m) / 2);\n    return `${(avg).toString(2)}`.padStart(avg.toString(2).length\
    \ + 1, '0');\n}\n", "  if (n < m) {\n    return -1;\n  }\n  const n = Math.max(m,\
    \ n);\n  const result: string = n.toString(2);\n  const l = result.length;\n \
    \ const r = l - 1;\n  const d = n - m;\n  const s = d < 0 ? 1 : 0;\n  const m\
    \ = d % 2;\n  const b = d < 0 ? 1 : 0;\n  const c = m ? 1 : 0;\n  const e = m\
    \ ? 1 : 0;\n  const f = m ? 1 : 0;\n  const g = m ? 1 : 0;\n  const h = m ? 1\
    \ : 0;\n  const i = m ? 1 : 0;\n  const j = m ? 1 : 0;\n  const k = m ? 1 : 0;\n\
    \  const l = m ? 1 : 0;\n  const m = m ? 1 : 0;\n  const n = m ? 1 : 0;\n  const\
    \ o = m ? 1 : 0;\n  const p = m ? 1 : 0;\n  const q = m ? 1 : 0;\n  const r =\
    \ m ? 1 : 0;\n  const s = m ? 1 : 0;\n  const t = m ? 1 : 0;\n  const u = m ?\
    \ 1 : 0;\n  const v = m ? 1 : 0;\n  const w = m ? 1 : 0;\n  const x = m ? 1 :\
    \ 0;\n  const y = m ? 1 : 0;\n  const z = m ? 1 : 0;\n  const a = m ? 1 : 0;\n\
    \  const b = m ? 1 : 0;\n  const c = m ? 1 : 0;\n  const d = m ? 1 : 0;\n  const\
    \ e = m ? 1 : 0;\n  const f = m ? 1 : 0;\n  const g = m ? 1 : 0;\n  const h =\
    \ m ? 1 : 0;\n  const i = m ? 1 : 0;\n  const j = m ? 1 : 0;\n  const k = m ?\
    \ 1 : 0;\n  const l = m ? 1 : 0;\n  const m = m ? 1 : 0;\n  const n = m ? 1 :\
    \ 0;\n  const o = m ? 1 : 0;\n  const p = m ? 1 : 0;\n  const q = m ? 1 : 0;\n\
    \  const r = m ? 1 : 0;\n  const s = m ? 1 : 0;\n  const t = m ? 1 : 0;\n  const\
    \ u = m ? 1 : 0;\n  const v = m ? 1 : 0;\n  const w = m ? 1 : 0;\n  const x =\
    \ m ? 1 : 0;\n  const y = m ? 1 : 0;\n  const z = m ? 1 : 0;\n  const a = m ?\
    \ 1 : 0;\n  const b = m ? 1 : 0;\n  const c = m ? 1 : 0;\n  const d = m ? 1 :\
    \ 0;\n  const e = m ? 1 : 0;\n  const f = m ? 1 : 0;\n  const g = m ? 1 : 0;\n\
    \  const h = m ? 1 : 0;\n  const i = m ? 1 : 0;\n  const j = m ? 1 : 0;\n  const\
    \ k = m ? 1 : 0;\n  const l = m ? 1 : 0;\n  const m = m ? 1 : 0;\n  const n =\
    \ m ? 1 : 0;\n  const o = m ? 1 : 0;\n  const p = m ? 1 : 0;\n  const q = m ?\
    \ 1 : 0;\n  const r = m ? 1 : 0;\n  const s = m ? 1 : 0;\n  const t = m ? 1 :\
    \ 0;\n  const u = m ? 1 : 0;\n  const v = m ? 1 : 0;\n  const w = m ? 1 : 0;\n\
    \  const x = m ? 1 : 0;\n  const y = m ? 1 : 0;\n  const z = m ? 1 : 0;\n  const\
    \ a = ", "  if (n <= m) {\n    return -1\n  }\n  let sum = 0\n  for (let i = n;\
    \ i <= m; i++) {\n    sum += i\n  }\n  return sum / 2\n}\n", "  if (n > m) {\n\
    \    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum\
    \ += i;\n  }\n  return sum / 2;\n}\n", "  if (n > m) {\n    return -1;\n  }\n\
    \  const bin = n.toString(2);\n  const len = bin.length;\n  const half = len /\
    \ 2;\n  const left = bin.slice(0, half);\n  const right = bin.slice(half);\n \
    \ const sum = parseInt(left, 2) + parseInt(right, 2);\n  const avg = sum / 2;\n\
    \  return avg.toString(2);\n}\n", "    if (n >= m) {\n        return -1;\n   \
    \ }\n    const result: number = (n - m) / 2;\n    const resultString: string =\
    \ result.toString(2);\n    const resultStringLength = resultString.length;\n \
    \   if (resultStringLength > 1) {\n        return -1;\n    }\n    return resultString;\n\
    }\n", "  if (n < m) {\n    return -1;\n  }\n  const n = Math.ceil(n / 2);\n  const\
    \ m = Math.ceil(m / 2);\n  const binary = \"\";\n  for (let i = n; i <= m; i++)\
    \ {\n    binary += i;\n  }\n  return parseInt(binary, 2);\n}\n", "  if (n > m)\
    \ {\n    return -1;\n  }\n  const n = Math.ceil(n / 2);\n  const m = Math.ceil(m\
    \ / 2);\n  const sum = (n - m) * 2;\n  const binary = sum.toString(2);\n  while\
    \ (binary.length % 2 !== 0) {\n    binary = '0' + binary;\n  }\n  return binary;\n\
    }\n", "  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i =\
    \ n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", "  if\
    \ (n <= m) return n;\n  if (n > m) return -1;\n  const result: number = (n - m)\
    \ / 2;\n  const resultString = result.toString(2);\n  return resultString.padStart(resultString.length,\
    \ '0');\n}\n", "  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for\
    \ (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
