name: HumanEval_126_is_sorted
language: ts
prompt: "//Given an array of numbers, return whether or not they are sorted\n// in\
  \ ascending order. If array has more than 1 duplicate of the same\n// number, return\
  \ false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n\
  // true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2,\
  \ 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1,\
  \ 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n\
  // >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3,\
  \ 4])\n// false\nfunction is_sorted(lst: number[]): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
  \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
  \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
  \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
  \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
  \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
  \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
  \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4]),true);\n}\n\ntest();"
completions: ["  if (lst.length <= 1) return true;\n  const last = lst[lst.length\
    \ - 1];\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] === last)\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "    if (lst.length\
    \ <= 1) return true;\n    let last: number = lst[0];\n    for (let i = 1; i <\
    \ lst.length; i++) {\n        if (lst[i] === last) {\n            return false;\n\
    \        }\n        last = lst[i];\n    }\n    return true;\n}\n", "  if (lst.length\
    \ < 2) {\n    return true;\n  }\n  for (let i = 0; i < lst.length - 1; i++) {\n\
    \    if (lst[i] === lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  if (lst.length < 2) {\n    return true;\n  }\n  const last = lst[lst.length\
    \ - 1];\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] === last)\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if (lst.length\
    \ < 2) return true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i]\
    \ === lst[i + 1]) return false;\n  }\n  return true;\n}\n", "  if (lst.length\
    \ < 2) {\n    return true;\n  }\n  const last = lst[lst.length - 1];\n  for (let\
    \ i = 0; i < lst.length - 2; i++) {\n    if (lst[i] === last) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "  if (lst.length < 2) return true;\n\
    \  const last = lst[lst.length - 1];\n  for (let i = 0; i < lst.length - 1; i++)\
    \ {\n    if (lst[i] === last) {\n      continue;\n    }\n    if (lst[i] > last)\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if (lst.length\
    \ <= 1) return true;\n  const last = lst[lst.length - 1];\n  for (let i = 0; i\
    \ < lst.length - 1; i++) {\n    if (lst[i] === last) {\n      continue;\n    }\n\
    \    if (lst[i] > last) {\n      return false;\n    }\n  }\n  return true;\n}\n",
  "  if (lst.length <= 1) {\n    return true;\n  }\n  const last = lst[lst.length\
    \ - 1];\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] === last)\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if (lst.length\
    \ < 2) {\n    return true;\n  }\n  let last: number = lst[0];\n  for (let i =\
    \ 1; i < lst.length; i++) {\n    if (lst[i] === last) {\n      return false;\n\
    \    }\n    last = lst[i];\n  }\n  return true;\n}\n", "  if (lst.length < 2)\
    \ return true;\n  let hash: number[] = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (hash.indexOf(lst[i]) === -1) {\n      hash.push(lst[i]);\n \
    \   }\n  }\n  return hash.length === lst.length;\n}\n", "  if (lst.length < 2)\
    \ {\n    return true;\n  }\n  const last = lst[lst.length - 1];\n  for (let i\
    \ = 0; i < lst.length - 1; i++) {\n    if (lst[i] === last) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  if (lst.length <= 1) {\n    return true;\n\
    \  }\n  const last = lst[lst.length - 1];\n  for (let i = 0; i < lst.length -\
    \ 1; i++) {\n    if (lst[i] === last) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n", "  if (lst.length < 2) {\n    return true;\n  }\n  const map =\
    \ new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const key = lst[i];\n\
    \    if (map.has(key)) {\n      return false;\n    }\n    map.set(key, true);\n\
    \  }\n  return true;\n}\n", "  if (lst.length < 2) return true;\n  for (let i\
    \ = 0; i < lst.length - 1; i++) {\n    if (lst[i] === lst[i + 1]) return false;\n\
    \  }\n  return true;\n}\n", "    if (lst.length <= 1) return true;\n    let last\
    \ = lst[0];\n    for (let i = 1; i < lst.length; ++i) {\n        if (lst[i] ===\
    \ last) {\n            return false;\n        }\n        last = lst[i];\n    }\n\
    \    return true;\n}\n", "  if (lst.length <= 1) return true;\n  let last: number\
    \ = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] === last)\
    \ {\n      return false;\n    }\n    last = lst[i];\n  }\n  return true;\n}\n",
  "  if (lst.length <= 1) {\n    return true;\n  }\n  const last = lst[lst.length\
    \ - 1];\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] === last)\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if (lst.length\
    \ <= 1) {\n    return true;\n  }\n  let hashMap = new Map<number, boolean>();\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (hashMap.has(lst[i])) {\n  \
    \    return false;\n    }\n    hashMap.set(lst[i], true);\n  }\n  return true;\n\
    }\n", "  if (lst.length <= 1) return true;\n  const last = lst[lst.length - 1];\n\
    \  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] === last) {\n  \
    \    return false;\n    }\n  }\n  return true;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
