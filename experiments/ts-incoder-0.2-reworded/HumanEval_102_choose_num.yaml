name: HumanEval_102_choose_num
language: ts
prompt: "//This function takes two positive numbers x and y and returns the\n// biggest\
  \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
  \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
  \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x: number, y:\
  \ number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = choose_num;\n  assert.deepEqual(candidate(12, 15),14);\n\
  \  assert.deepEqual(candidate(13, 12),-1);\n  assert.deepEqual(candidate(33, 12354),12354);\n\
  \  assert.deepEqual(candidate(5234, 5233),-1);\n  assert.deepEqual(candidate(6,\
  \ 29),28);\n  assert.deepEqual(candidate(27, 10),-1);\n  assert.deepEqual(candidate(7,\
  \ 7),-1);\n  assert.deepEqual(candidate(546, 546),546);\n}\n\ntest();"
completions: ["    if (x > y) {\n        let temp = x;\n        x = y;\n        y\
    \ = temp;\n    }\n    let max_num = x;\n    let min_num = y;\n    while (max_num\
    \ - min_num > 1) {\n        let mid = max_num + min_num / 2;\n        if (mid\
    \ % 2 === 0) {\n            max_num = mid;\n        } else {\n            min_num\
    \ = mid;\n        }\n    }\n    return max_num;\n}\n", "    if (x > y) {\n   \
    \     let temp = x;\n        x = y;\n        y = temp;\n    }\n    let max_num\
    \ = x;\n    let min_num = y;\n    while (max_num - min_num > 1) {\n        let\
    \ mid = min_num + max_num / 2;\n        if (mid % 2 === 0) {\n            max_num\
    \ = mid;\n        } else {\n            min_num = mid;\n        }\n    }\n   \
    \ return max_num;\n}\n", "    if (x > y) {\n        let temp = x;\n        x =\
    \ y;\n        y = temp;\n    }\n    let result = x;\n    while (result < y) {\n\
    \        result += 2;\n    }\n    return result;\n}\n", "    if (x > y) {\n  \
    \      let temp = x;\n        x = y;\n        y = temp;\n    }\n    let result:\
    \ number = x;\n    while (y > 1) {\n        if (y % 2 === 0) {\n            result\
    \ = y;\n        }\n        y = Math.floor(y / 2);\n    }\n    return result;\n\
    }\n", "    let num: number = x;\n    while (num < y) {\n        num += 2;\n  \
    \  }\n    return num;\n}\n", "    if (x > y) {\n        let temp = x;\n      \
    \  x = y;\n        y = temp;\n    }\n    let result: number = x;\n    while (y\
    \ >= 2) {\n        if (y % 2 === 0) {\n            result = y;\n            break;\n\
    \        }\n        y = y / 2;\n    }\n    return result;\n}\n", "    if (x >\
    \ y) {\n        let temp = x;\n        x = y;\n        y = temp;\n    }\n    let\
    \ even = x;\n    let odd = y;\n    while (even > 0 && odd > 0) {\n        if (even\
    \ % 2 === 0 && odd % 2 !== 0) {\n            even = even - 1;\n            odd\
    \ = odd - 1;\n        } else if (even % 2 !== 0 && odd % 2 === 0) {\n        \
    \    even = even - 1;\n            odd = odd + 1;\n        } else if (even % 2\
    \ === 0 && odd % 2 === 0) {\n            even = even + 1;\n            odd = odd\
    \ - 1;\n        }\n    }\n    return even;\n}\n", "\tif (x < y) {\n\t\tlet z =\
    \ x;\n\t\tx = y;\n\t\ty = z;\n\t}\n\tlet z: number = x;\n\twhile (y >= z) {\n\t\
    \tz += y;\n\t}\n\treturn z;\n}\n", "    if (x > y) {\n        let temp = x;\n\
    \        x = y;\n        y = temp;\n    }\n    let even: number = x;\n    let\
    \ odd: number = y;\n    while (even > 0 && odd > 0) {\n        if (even % 2 ===\
    \ 0 && odd % 2 !== 0) {\n            even = even - 1;\n            odd = odd -\
    \ 1;\n        } else if (even % 2 !== 0 && odd % 2 === 0) {\n            even\
    \ = even - 1;\n            odd = odd + 1;\n        } else if (even % 2 === 0 &&\
    \ odd % 2 === 0) {\n            even = even + 1;\n            odd = odd - 1;\n\
    \        }\n    }\n    return even;\n}\n", "    if (x > y) {\n        let temp\
    \ = x;\n        x = y;\n        y = temp;\n    }\n    let max_num = x;\n    let\
    \ min_num = y;\n    while (max_num - min_num > 1) {\n        let mid = Math.floor((max_num\
    \ + min_num) / 2);\n        if (mid % 2 === 0) {\n            max_num = mid;\n\
    \        } else {\n            min_num = mid;\n        }\n    }\n    return max_num;\n\
    }\n", "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n\
    \    }\n    let even: number = x;\n    let odd: number = y;\n    while (even >\
    \ 0 && odd > 0) {\n        if (even % 2 === 0) {\n            even = even / 2;\n\
    \        } else {\n            odd = odd / 2;\n        }\n    }\n    return even;\n\
    }\n", "    if (x > y) {\n        let temp = x;\n        x = y;\n        y = temp;\n\
    \    }\n    let max_num = x;\n    let min_num = y;\n    while (max_num > min_num)\
    \ {\n        let mid = min_num + max_num / 2;\n        if (mid % 2 === 0) {\n\
    \            max_num = mid;\n        } else {\n            min_num = mid;\n  \
    \      }\n    }\n    return max_num;\n}\n", "\tlet max_num: number = x;\n\tlet\
    \ min_num: number = y;\n\twhile (max_num < min_num) {\n\t\tmax_num += 2;\n\t\t\
    min_num -= 2;\n\t}\n\treturn max_num;\n}\n", "    if (x > y) {\n        let temp\
    \ = x;\n        x = y;\n        y = temp;\n    }\n    let mid = (x + y) / 2;\n\
    \    if (mid % 2 === 0) {\n        return mid;\n    } else {\n        return choose_num(x,\
    \ mid);\n    }\n}\n", "    if (x > y) {\n        let temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    let result: number = x;\n    while (result < y)\
    \ {\n        result += 2;\n    }\n    return result;\n}\n", "    if (x > y) {\n\
    \        let temp = x;\n        x = y;\n        y = temp;\n    }\n    let max_num\
    \ = x;\n    let min_num = y;\n    while (max_num > min_num) {\n        let mid\
    \ = min_num + max_num / 2;\n        if (mid % 2 == 0) {\n            max_num =\
    \ mid;\n        } else {\n            min_num = mid;\n        }\n    }\n    return\
    \ max_num;\n}\n", "    if (x > y) {\n        let temp = x;\n        x = y;\n \
    \       y = temp;\n    }\n    let result = x;\n    while (result < y) {\n    \
    \    result *= 2;\n    }\n    while (result > y) {\n        result /= 2;\n   \
    \ }\n    return result;\n}\n", "    if (x > y) {\n        let temp = x;\n    \
    \    x = y;\n        y = temp;\n    }\n    let result = x;\n    while (y > 1)\
    \ {\n        if (y % 2 === 0) {\n            result = y;\n            break;\n\
    \        }\n        y = y / 2;\n    }\n    return result;\n}\n", "    if (x >\
    \ y) {\n        let temp = x;\n        x = y;\n        y = temp;\n    }\n    let\
    \ result: number = x;\n    while (result < y) {\n        result += 2;\n    }\n\
    \    return result;\n}\n", "    if (x > y) {\n        let temp = x;\n        x\
    \ = y;\n        y = temp;\n    }\n    let result = x;\n    while (result < y)\
    \ {\n        result += y;\n    }\n    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
