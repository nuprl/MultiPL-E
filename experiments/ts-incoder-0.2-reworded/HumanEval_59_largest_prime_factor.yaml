name: HumanEval_59_largest_prime_factor
language: ts
prompt: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n//\
  \ 2\nfunction largest_prime_factor(n: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
  \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
  \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
completions: ["  let factors: number[] = [];\n  let maxFactor = n;\n  let maxFactorIndex\
    \ = 0;\n  for (let i = 2; i <= maxFactor; i++) {\n    if (n % i === 0) {\n   \
    \   factors.push(i);\n      if (i > maxFactor) {\n        maxFactor = i;\n   \
    \     maxFactorIndex = factors.length - 1;\n      }\n    }\n  }\n  return factors[maxFactorIndex];\n\
    }\n", "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2;\
    \ i <= n; i++) {\n    if (isPrime) {\n      for (let j = 2; j < i; j++) {\n  \
    \      if (n % j === 0) {\n          isPrime = false;\n          break;\n    \
    \    }\n      }\n    }\n    if (isPrime) {\n      factors.push(i);\n    }\n  }\n\
    \  if (isPrime) {\n    return factors.length ? factors[factors.length - 1] : 1;\n\
    \  }\n  return 1;\n}\n", "  let i = 2;\n  while (i < n) {\n    if (n % i == 0)\
    \ {\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return i;\n\
    }\n", "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n\
    \    } else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n", "  let i = 2;\n\
    \  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n  \
    \    i = i + 1;\n    }\n  }\n  return i;\n}\n", "  let factors: number[] = [];\n\
    \  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n  }\n  return factors.length ? Math.max(...factors) : -1;\n\
    }\n", "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2;\
    \ i <= n; i++) {\n    if (isPrime) {\n      factors.push(i);\n    }\n    for (let\
    \ j = 2; j < i; j++) {\n      if (n % i === 0) {\n        isPrime = false;\n \
    \       break;\n      }\n    }\n  }\n  if (isPrime) {\n    return factors[factors.length\
    \ - 1];\n  }\n  return -1;\n}\n", "    let i = 2;\n    let p = n;\n    while (p\
    \ % i === 0) {\n        ++i;\n    }\n    return i;\n}\n", "  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i =\
    \ i + 1;\n    }\n  }\n  return i;\n}\n", "  let factors: number[] = [];\n  let\
    \ isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime) {\n    \
    \  factors.push(i);\n    }\n    for (let j = factors.length - 1; j >= 0; j--)\
    \ {\n      if (n % factors[j] === 0) {\n        isPrime = false;\n        break;\n\
    \      }\n    }\n  }\n  return factors.length ? factors[factors.length - 1] :\
    \ undefined;\n}\n", "  let factors: number[] = [];\n  let isPrime = true;\n  for\
    \ (let i = 2; i <= n; i++) {\n    isPrime = true;\n    for (let j = 2; j < i;\
    \ j++) {\n      if (i % j === 0) {\n        isPrime = false;\n        break;\n\
    \      }\n    }\n    if (isPrime) {\n      factors.push(i);\n    }\n  }\n  return\
    \ factors.length ? Math.max(...factors) : -1;\n}\n", "  let factors: number[]\
    \ = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n  for (let i = 2; i\
    \ <= maxFactor; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n     \
    \ if (i > maxFactor) {\n        maxFactor = i;\n        maxFactorIndex = factors.length\
    \ - 1;\n      }\n    }\n  }\n  return factors[maxFactorIndex];\n}\n", "  let factors:\
    \ number[] = [];\n  let maxFactor = n;\n  let maxFactorIndex: number = 0;\n  for\
    \ (let i = 2; i <= maxFactor; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n\
    \      if (i > maxFactor) {\n        maxFactor = i;\n        maxFactorIndex =\
    \ factors.length - 1;\n      }\n    }\n  }\n  return factors[maxFactorIndex];\n\
    }\n", "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2;\
    \ i <= n; i++) {\n    if (isPrime) {\n      factors.push(i);\n    }\n    for (let\
    \ j = 2; j < i; j++) {\n      if (n % i == 0) {\n        isPrime = false;\n  \
    \      break;\n      }\n    }\n  }\n  return factors.length ? Math.max(...factors)\
    \ : -1;\n}\n", "  let i = 2;\n  let p = n;\n  while (p % i === 0) {\n    p /=\
    \ i;\n    i += 1;\n  }\n  return p;\n}\n", "  let i = 2;\n  while (i < n) {\n\
    \    if (n % i == 0) {\n      n = n / i;\n    } else {\n      i = i + 1;\n   \
    \ }\n  }\n  return i;\n}\n", "  let factors: number[] = [];\n  let isPrime = true;\n\
    \  for (let i = 2; i <= n; i++) {\n    if (isPrime) {\n      for (let j = 2; j\
    \ < i; j++) {\n        if (n % j === 0) {\n          isPrime = false;\n      \
    \    break;\n        }\n      }\n      if (isPrime) {\n        factors.push(i);\n\
    \      }\n    }\n  }\n  return factors.length ? Math.max(...factors) : -1;\n}\n",
  "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
    \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n", "  let factors: number[]\
    \ = [];\n  let isPrime = true;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime)\
    \ {\n      factors.push(i);\n    }\n    for (let j = 2; j < i; j++) {\n      if\
    \ (n % i === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\
    \  }\n  return factors[factors.length - 1];\n}\n", "  let factors: number[] =\
    \ [];\n  let maxFactor = n;\n  while (n > 1) {\n    let i = 2;\n    while (i <=\
    \ maxFactor) {\n      if (n % i == 0) {\n        factors.push(i);\n        maxFactor\
    \ = i;\n      }\n      i += 1;\n    }\n  }\n  if (factors.length == 0) return\
    \ 1;\n  return factors[factors.length - 1];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
