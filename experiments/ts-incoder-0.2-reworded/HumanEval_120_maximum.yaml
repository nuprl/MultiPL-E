name: HumanEval_120_maximum
language: ts
prompt: "//Given an array arr of integers and a positive integer k, return a sorted\
  \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>>\
  \ maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4,\
  \ 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n\
  // [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n\
  // 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
  \ <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5],\
  \ 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
  \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0,\
  \ 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2,\
  \ -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0],\
  \ 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3,\
  \ -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
  \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
completions: ["    let maxArr = [];\n    let maxIndex = 0;\n    for (let i = 0; i\
    \ < arr.length; i++) {\n        if (maxIndex < k) {\n            if (arr[i] >\
    \ maxArr[maxIndex]) {\n                maxArr[maxIndex] = arr[i];\n          \
    \      maxIndex++;\n            }\n        } else {\n            if (arr[i] >\
    \ maxArr[maxIndex]) {\n                maxArr[maxIndex] = arr[i];\n          \
    \  }\n        }\n    }\n    return maxArr;\n}\n", "  const result = [];\n  for\
    \ (let i = 0; i < k; i++) {\n    let max = 0;\n    for (let j = 0; j < arr.length;\
    \ j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n      }\n    }\n \
    \   result.push(max);\n  }\n  return result;\n}\n", "  const result: number[]\
    \ = [];\n  let max: number = 0;\n  for (let i = 0; i < arr.length; i++) {\n  \
    \  if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  for (let i = 0; i <\
    \ arr.length; i++) {\n    if (arr[i] > max && arr[i] % k === 0) {\n      result.push(arr[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  let result: number[] = [];\n  let max:\
    \ number = arr[0];\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > max) {\n\
    \      max = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    if (arr[i]\
    \ === max) {\n      result.push(max);\n    }\n  }\n  return result;\n}\n", " \
    \ let maxArr = [];\n  for (let i = 0; i < k; i++) {\n    maxArr.push(arr[i]);\n\
    \  }\n  for (let i = k; i < arr.length; i++) {\n    maxArr.push(arr[i]);\n  }\n\
    \  return maxArr;\n}\n", "  if (k > arr.length) return [];\n  if (k === 0) return\
    \ arr;\n  let max: number[] = [];\n  let maxIndex: number[] = [];\n  for (let\
    \ i = 0; i < k; i++) {\n    let maxElement = arr[i];\n    let maxIndex = i;\n\
    \    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j] > maxElement)\
    \ {\n        maxElement = arr[j];\n        maxIndex = j;\n      }\n    }\n   \
    \ max.push(maxElement);\n    maxIndex.push(maxIndex);\n  }\n  return max;\n}\n",
  "  if (k > arr.length) {\n    return arr;\n  }\n  const result: number[] = [];\n\
    \  let max = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > max) {\n  \
    \    max = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    if (arr[i]\
    \ === max) {\n      result.push(max);\n    } else {\n      result.push(arr[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  let max: number[] = [];\n  for (let i\
    \ = 0; i < k; i++) {\n    let maxElement = arr[i];\n    for (let j = 0; j < arr.length;\
    \ j++) {\n      if (arr[j] > maxElement) {\n        maxElement = arr[j];\n   \
    \   }\n    }\n    max.push(maxElement);\n  }\n  return max;\n}\n", "  if (k >\
    \ arr.length) return arr;\n  const maxArr = [];\n  let max = 0;\n  for (let i\
    \ = 0; i < k; i++) {\n    if (arr[i] > max) {\n      maxArr[i] = arr[i];\n   \
    \   max = arr[i];\n    } else {\n      maxArr[i] = max;\n    }\n  }\n  return\
    \ maxArr;\n}\n", "  let result: number[] = [];\n  for (let i = 0; i < k; i++)\
    \ {\n    let max = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j]\
    \ > max) {\n        max = arr[j];\n      }\n    }\n    result.push(max);\n  }\n\
    \  return result;\n}\n", "  let result: number[] = [];\n  let max: number = 0;\n\
    \  for (let i = 0; i < k; i++) {\n    let current: number = arr[i];\n    if (current\
    \ > max) {\n      max = current;\n    }\n  }\n  for (let i = 0; i < k; i++) {\n\
    \    let current: number = arr[i];\n    if (current > max) {\n      max = current;\n\
    \    }\n  }\n  for (let i = 0; i < k; i++) {\n    let current: number = arr[i];\n\
    \    if (current > max) {\n      max = current;\n    }\n  }\n  for (let i = 0;\
    \ i < k; i++) {\n    let current: number = arr[i];\n    if (current > max) {\n\
    \      max = current;\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    let current:\
    \ number = arr[i];\n    if (current > max) {\n      max = current;\n    }\n  }\n\
    \  for (let i = 0; i < k; i++) {\n    let current: number = arr[i];\n    if (current\
    \ > max) {\n      max = current;\n    }\n  }\n  for (let i = 0; i < k; i++) {\n\
    \    let current: number = arr[i];\n    if (current > max) {\n      max = current;\n\
    \    }\n  }\n  for (let i = 0; i < k; i++) {\n    let current: number = arr[i];\n\
    \    if (current > max) {\n      max = current;\n    }\n  }\n  for (let i = 0;\
    \ i < k; i++) {\n    let current: number = arr[i];\n    if (current > max) {\n\
    \      max = current;\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    let current:\
    \ number = arr[i];\n    if (current > max) {\n      max = current;\n    }\n  }\n\
    \  for (let i = 0; i < k; i++) {\n    let current: number = arr[i];\n    if (current\
    \ > max) {\n      max = current;\n    }\n  }\n  for (let i = 0; i < k; i++) {\n\
    \    let current: number = arr[i];\n    if (current > max) {\n      max = current;\n\
    \    }\n  }\n  for (let i = 0; i < k; i++) {\n    let current: number = arr[i];\n\
    \    if (current > max) {\n      max = current;\n    }\n  }\n  for (let i = 0;\
    \ i < k; i++) {\n    let current: number = arr[i];\n    if (current > max) {\n\
    \      max = current;\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    let current:\
    \ number = arr[i];\n    if (current > max) {\n      max = current;\n    }\n  }\n\
    \  for (let i = 0; i < k; i++) {\n    let current: number = arr[i];\n    if (current\
    \ > max) {\n      max = current;\n    }\n  }\n  for (let i = 0; i < k; i++) {\n\
    \    let current: number = arr[i];\n    if (current > max) {\n      max = current;\n\
    \    }\n  }\n  for (let i = 0; i < k; i++) {\n    let current: number = arr[i];\n\
    \    if (current > max) {\n      max = current;", "    let result: number[] =\
    \ [];\n    for (let i = 0; i < k; i++) {\n        let max: number = Number.MIN_VALUE;\n\
    \        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max)\
    \ {\n                max = arr[j];\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n", "  const result: number[] = [];\n  let max =\
    \ 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n    \
    \  max = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > max && arr[i] > k) {\n      result.push(arr[i]);\n    }\n  }\n  return\
    \ result;\n}\n", "  let max: number[] = [];\n  for (let i = 0; i < k; i++) {\n\
    \    let maxElement = arr[i];\n    for (let j = i + 1; j < arr.length; j++) {\n\
    \      if (arr[j] > maxElement) {\n        maxElement = arr[j];\n      }\n   \
    \ }\n    max.push(maxElement);\n  }\n  return max;\n}\n", "  let result: number[]\
    \ = [];\n  let max: number = 0;\n  for (let i = 0; i < arr.length; i++) {\n  \
    \  if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  for (let i = 0; i <\
    \ arr.length; i++) {\n    if (arr[i] > max && arr[i] > k) {\n      result.push(arr[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  if (k > arr.length) {\n    return arr;\n\
    \  }\n  let maxArr: number[] = [];\n  for (let i = 0; i < k; i++) {\n    maxArr.push(Math.max(...arr));\n\
    \    arr.sort((a, b) => a - b);\n  }\n  return maxArr;\n}\n", "  const result\
    \ = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > max)\
    \ {\n      max = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    if\
    \ (arr[i] > max) {\n      result.push(max);\n      max = arr[i];\n    } else {\n\
    \      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n", "  const result\
    \ = [];\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]\
    \ > max) {\n      max = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] === max) {\n      result.push(arr[i]);\n    }\n  }\n\
    \  return result.sort((a, b) => a - b);\n}\n", "  if (k > arr.length) return [];\n\
    \  const result: number[] = [];\n  let max = 0;\n  for (let i = 0; i < k; i++)\
    \ {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  for (let i =\
    \ 0; i < k; i++) {\n    if (arr[i] > max) {\n      result.push(max);\n      max\
    \ = arr[i];\n    } else {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n\
    }\n", "  if (arr.length === 0) {\n    return [];\n  }\n  if (k > arr.length) {\n\
    \    return arr;\n  }\n  const maxArr = [];\n  let maxValue = arr[0];\n  for (let\
    \ i = 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxValue\
    \ = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    maxArr.push(maxValue);\n\
    \  }\n  return maxArr;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
