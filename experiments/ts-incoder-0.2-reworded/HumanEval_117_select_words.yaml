name: HumanEval_117_select_words
language: ts
prompt: "//Given a string s and a natural number n, you have been tasked to implement\
  \ \n// a function that returns an array of all words from string s that contain\
  \ exactly \n// n consonants, in order these words appear in the string s.\n// If\
  \ the string s is empty then the function should return an empty array.\n// Note:\
  \ you may assume the input string contains only letters and spaces.\n// Examples:\n\
  // >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"\
  Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple\
  \ white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"\
  ]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s:\
  \ string, n: number): string[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
  \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
  \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple\
  \ white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
  ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
  \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
  d\", \"f\"]);\n}\n\ntest();"
completions: ["  let words: string[] = [];\n  let index = 0;\n  let count = 0;\n \
    \ while (index < s.length) {\n    if (s.charAt(index) == ' ') {\n      words.push(s.substr(index,\
    \ n - count));\n      index += n - count;\n      count = 0;\n    } else {\n  \
    \    count++;\n    }\n    index++;\n  }\n  return words;\n}\n", "  let result:\
    \ string[] = [];\n  if (s.length == 0) {\n    return result;\n  }\n  for (let\
    \ i = 0; i < s.length; i++) {\n    let word = s.substr(i, n);\n    if (word.length\
    \ == n) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n", "\tlet\
    \ words: string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\t\
    let word = s.substring(index, index+n);\n\t\tif (word.length == n) {\n\t\t\twords.push(word);\n\
    \t\t\tindex += n;\n\t\t}\n\t\telse {\n\t\t\tindex += word.length;\n\t\t}\n\t}\n\
    \treturn words;\n}\n", "\tlet words: string[] = [];\n\tlet index = 0;\n\tlet currentWord\
    \ = \"\";\n\tlet currentWordLength = 0;\n\tlet currentChar = \"\";\n\tlet currentCharLength\
    \ = 0;\n\twhile (index < s.length) {\n\t\tcurrentChar = s.charAt(index);\n\t\t\
    currentCharLength = currentChar.length;\n\t\tcurrentWord = currentChar;\n\t\t\
    currentWordLength = currentCharLength;\n\t\twhile (currentCharLength > 0) {\n\t\
    \t\tif (currentCharLength >= n) {\n\t\t\t\twords.push(currentWord);\n\t\t\t\t\
    currentWord = \"\";\n\t\t\t\tcurrentWordLength = 0;\n\t\t\t\tcurrentChar = \"\"\
    ;\n\t\t\t\tcurrentCharLength = 0;\n\t\t\t} else {\n\t\t\t\tcurrentChar = currentChar.substr(0,\
    \ currentCharLength - 1);\n\t\t\t\tcurrentCharLength = currentChar.length;\n\t\
    \t\t}\n\t\t}\n\t\tindex++;\n\t}\n\treturn words;\n}\n", "  let words: string[]\
    \ = [];\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == \"\
    \ \") {\n      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n\
    \  }\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == \" \"\
    ) {\n      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n\
    \  \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == \" \") {\n\
    \      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n \
    \ \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == \" \") {\n\
    \      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n \
    \ \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == \" \") {\n\
    \      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n \
    \ \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == \" \") {\n\
    \      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n \
    \ \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == \" \") {\n\
    \      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n \
    \ \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == \" \") {\n\
    \      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n \
    \ \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == \" \") {\n\
    \      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n \
    \ \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == \" \") {\n\
    \      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n \
    \ \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == \" \") {\n\
    \      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n \
    \ \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == \" \") {\n\
    \      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n \
    \ \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == \" \") {\n\
    \      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n \
    \ \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == \" \") {\n\
    \      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n \
    \ \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == \" \") {\n\
    \      words.push(s.substr(0, i));\n      s = s.substr(i + 1);", "  let result:\
    \ string[] = [];\n  if (s.length === 0) {\n    return result;\n  }\n  for (let\
    \ i = 0; i < s.length; i++) {\n    for (let j = 0; j < n; j++) {\n      if (s[i]\
    \ !== ' ') {\n        result.push(s[i]);\n      }\n    }\n  }\n  return result;\n\
    }\n", "  let words: string[] = [];\n  let i = 0;\n  while (i < s.length) {\n \
    \   let word = s.substr(i, n);\n    if (word.length >= n) {\n      words.push(word);\n\
    \    }\n    i += n;\n  }\n  return words;\n}\n", "  let words: string[] = [];\n\
    \  let index = 0;\n  while (index < s.length) {\n    let char = s[index];\n  \
    \  if (char === \" \") {\n      words.push(s.substr(index + 1, s.length - index));\n\
    \      index++;\n    }\n    if (char === \"a\" || char === \"e\" || char === \"\
    i\" || char === \"o\" || char === \"u\" || char === \"y\") {\n      index++;\n\
    \    }\n    if (char === \"n\") {\n      index++;\n    }\n    if (char === \"\
    h\") {\n      index++;\n    }\n    if (char === \"l\") {\n      index++;\n   \
    \ }\n    if (char === \"e\") {\n      index++;\n    }\n    if (char === \"l\"\
    ) {\n      index++;\n    }\n    if (char === \"l\") {\n      index++;\n    }\n\
    \    if (char === \"a\") {\n      index++;\n    }\n    if (char === \"m\") {\n\
    \      index++;\n    }\n    if (char === \"a\") {\n      index++;\n    }\n   \
    \ if (char === \"s\") {\n      index++;\n    }\n    if (char === \"s\") {\n  \
    \    index++;\n    }\n    if (char === \"s\") {\n      index++;\n    }\n    if\
    \ (char === \"s\") {\n      index++;\n    }\n    if (char === \"s\") {\n     \
    \ index++;\n    }\n    if (char === \"s\") {\n      index++;\n    }\n    if (char\
    \ === \"s\") {\n      index++;\n    }\n    if (char === \"s\") {\n      index++;\n\
    \    }\n    if (char === \"s\") {\n      index++;\n    }\n    if (char === \"\
    s\") {\n      index++;\n    }\n    if (char === \"s\") {\n      index++;\n   \
    \ }\n    if (char === \"s\") {\n      index++;\n    }\n    if (char === \"s\"\
    ) {\n      index++;\n    }\n    if (char === \"s\") {\n      index++;\n    }\n\
    \    if (char === \"s\") {\n      index++;\n    }\n    if (char === \"s\") {\n\
    \      index++;\n    }\n    if (char === \"s\") {\n      index++;\n    }\n   \
    \ if (char === \"s\") {\n      index++;\n    }\n    if (char === \"s\") {\n  \
    \    index++;\n    }\n    if (char === \"s\") {\n      index++;\n    }\n    if\
    \ (char === \"s\") {\n      index++;\n    }\n    if (char === \"s\") {\n     \
    \ index++;\n    }\n    if (char === \"s\") {\n      index++;\n    }\n    if (char\
    \ === \"s\") {\n      index++;\n    }\n    if (char === \"s\") {\n      index++;\n\
    \    }\n    if (char === \"s\") {\n      index++;\n    }\n    if (char === \"\
    s\") {\n      index++;\n    }\n    if (char === \"s\"", "  let words: string[]\
    \ = [];\n  let index = 0;\n  while (index < s.length && words.length < n) {\n\
    \    if (s[index] === \" \") {\n      index++;\n      continue;\n    }\n    if\
    \ (s[index].match(/[aeiou]/i)) {\n      words.push(s[index]);\n      index++;\n\
    \      continue;\n    }\n    index++;\n  }\n  return words;\n}\n", "\tlet result:\
    \ string[] = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet word\
    \ = s.substring(index, index+n);\n\t\tif (word.length == n) {\n\t\t\tresult.push(word);\n\
    \t\t}\n\t\tindex += n;\n\t}\n\treturn result;\n}\n", "  let words: string[] =\
    \ [];\n  \n  if (s.length === 0) {\n    return words;\n  }\n  \n  for (let i =\
    \ 0; i < s.length; i++) {\n    let char = s[i];\n    let count = 0;\n    \n  \
    \  for (let j = 0; j < char.length; j++) {\n      if (char[j] === ' ') {\n   \
    \     count += 1;\n      }\n    }\n    \n    if (count === n) {\n      words.push(s.substr(0,\
    \ i));\n    }\n  }\n  \n  return words;\n}\n", "\tlet result: string[] = [];\n\
    \tlet index = 0;\n\twhile (index < s.length && n > 0) {\n\t\tlet char = s.charAt(index);\n\
    \t\tif (char === \" \") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char\
    \ === \"a\" || char === \"e\" || char === \"i\" || char === \"o\" || char ===\
    \ \"u\" || char === \"y\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char\
    \ === \"y\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"n\"\
    ) {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"h\") {\n\t\t\t\
    index++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"e\") {\n\t\t\tindex++;\n\t\
    \t\tcontinue;\n\t\t}\n\t\tif (char === \"l\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"l\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"a\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"m\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"a\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"s\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"s\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"s\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"s\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"s\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"s\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"s\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"s\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"s\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"s\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"s\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"s\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"s\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"s\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"s\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"s\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"s\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"s\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"s\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"s\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n", "  let result: string[] = [];\n  let words: string[] = s.split(\" \"\
    );\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n   \
    \ if (word.length >= n) {\n      result.push(word);\n    }\n  }\n  return result;\n\
    }\n", "  let words: string[] = [];\n  let index = 0;\n  while (index < s.length)\
    \ {\n    let word = s.substring(index, index+n);\n    if (word.length == n) {\n\
    \      words.push(word);\n    }\n    index += n;\n  }\n  return words;\n}\n",
  "  let words: string[] = [];\n  let index = 0;\n  while (index < s.length) {\n \
    \   let word = s.substring(index, index + 1);\n    if (word.length == n) {\n \
    \     words.push(word);\n    }\n    index++;\n  }\n  return words;\n}\n", "  if\
    \ (s.length === 0) {\n    return [];\n  }\n  const result: string[] = [];\n  let\
    \ index = 0;\n  while (index < s.length && n > 0) {\n    const char = s[index];\n\
    \    if (char === ' ') {\n      result.push(s.substr(index, n - 1));\n      index\
    \ += n - 1;\n      n--;\n    } else if (char === 'a' || char === 'e' || char ===\
    \ 'i' || char === 'o' || char === 'u') {\n      result.push(s.substr(index, n\
    \ - 1));\n      index += n - 1;\n      n--;\n    } else {\n      index++;\n  \
    \  }\n  }\n  return result;\n}\n", "  let result: string[] = [];\n  let index\
    \ = 0;\n  while (index < s.length) {\n    let word = s.substr(index, n);\n   \
    \ if (word.length == n) {\n      result.push(word);\n    }\n    index += n;\n\
    \  }\n  return result;\n}\n", "\tlet result: string[] = [];\n\tlet index = 0;\n\
    \twhile (index < s.length) {\n\t\tlet char = s[index];\n\t\tif (char === \" \"\
    ) {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"a\" || char ===\
    \ \"e\" || char === \"i\" || char === \"o\" || char === \"u\" || char === \"y\"\
    ) {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"n\") {\n\t\t\t\
    index++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"m\") {\n\t\t\tindex++;\n\t\
    \t\tcontinue;\n\t\t}\n\t\tif (char === \"p\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"l\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"h\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"s\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"t\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"d\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"g\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"f\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"v\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"b\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"k\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"j\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"q\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"x\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"z\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"c\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"v\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"w\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"k\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"b\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"q\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"j\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"k\") {\n\
    \t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char === \"b\") {\n\t\t\tindex++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (char === \"q\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif (char === \"j\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (char === \"k\") {\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (char ===\
    \ \"b", "    let words: string[] = [];\n    let i = 0;\n    while (i < s.length)\
    \ {\n        let word = s.substr(i, n);\n        if (word.length == n) {\n   \
    \         words.push(word);\n        }\n        i += n;\n    }\n    return words;\n\
    }\n", "  if (s.length === 0) {\n    return [];\n  }\n  const words: string[] =\
    \ [];\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if\
    \ (char.match(/[aeiou]/i)) {\n      continue;\n    }\n    if (words.length >=\
    \ n) {\n      break;\n    }\n    words.push(char);\n  }\n  return words;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
