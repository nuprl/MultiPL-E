name: HumanEval_127_intersection
language: ts
prompt: "//You are given two intervals,\n// where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n// The given intervals are closed\
  \ which means that the interval (start, end)\n// includes both start and end.\n\
  // For each given interval, it is assumed that its start is less or equal its end.\n\
  // Your task is to determine whether the length of intersection of these two \n\
  // intervals is a prime number.\n// Example, the intersection of the intervals (1,\
  \ 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n//\
  \ If the length of the intersection is a prime number, return \"YES\",\n// otherwise,\
  \ return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output]\
  \ samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1,\
  \ 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction\
  \ intersection(interval1: [number, number], interval2: [number, number]): string\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = intersection;\n  assert.deepEqual(candidate([1, 2],\
  \ [2, 3]),\"NO\");\n  assert.deepEqual(candidate([-1, 1], [0, 4]),\"NO\");\n  assert.deepEqual(candidate([-3,\
  \ -1], [-5, 5]),\"YES\");\n  assert.deepEqual(candidate([-2, 2], [-4, 0]),\"YES\"\
  );\n  assert.deepEqual(candidate([-11, 2], [-1, -1]),\"NO\");\n  assert.deepEqual(candidate([1,\
  \ 2], [3, 5]),\"NO\");\n  assert.deepEqual(candidate([1, 2], [1, 2]),\"NO\");\n\
  \  assert.deepEqual(candidate([-2, -2], [-3, -2]),\"NO\");\n}\n\ntest();"
completions: ["  if (interval1[0] > interval2[0] || interval1[1] < interval2[1]) {\n\
    \    return \"NO\";\n  }\n  if (interval1[0] >= interval2[0] && interval1[1] <=\
    \ interval2[1]) {\n    return \"YES\";\n  }\n  if (interval1[0] < interval2[0]\
    \ && interval1[1] >= interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0]\
    \ >= interval2[0] && interval1[1] < interval2[1]) {\n    return \"NO\";\n  }\n\
    \  if (interval1[0] < interval2[0] && interval1[1] >= interval2[1]) {\n    return\
    \ \"NO\";\n  }\n  if (interval1[0] >= interval2[0] && interval1[1] < interval2[1])\
    \ {\n    return \"NO\";\n  }\n  if (interval1[0] < interval2[0] && interval1[1]\
    \ >= interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] >= interval2[0]\
    \ && interval1[1] < interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0]\
    \ < interval2[0] && interval1[1] >= interval2[1]) {\n    return \"NO\";\n  }\n\
    \  if (interval1[0] >= interval2[0] && interval1[1] < interval2[1]) {\n    return\
    \ \"NO\";\n  }\n  if (interval1[0] < interval2[0] && interval1[1] >= interval2[1])\
    \ {\n    return \"NO\";\n  }\n  if (interval1[0] >= interval2[0] && interval1[1]\
    \ < interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] < interval2[0]\
    \ && interval1[1] >= interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0]\
    \ >= interval2[0] && interval1[1] < interval2[1]) {\n    return \"NO\";\n  }\n\
    \  if (interval1[0] < interval2[0] && interval1[1] >= interval2[1]) {\n    return\
    \ \"NO\";\n  }\n  if (interval1[0] >= interval2[0] && interval1[1] < interval2[1])\
    \ {\n    return \"NO\";\n  }\n  if (interval1[0] < interval2[0] && interval1[1]\
    \ >= interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] >= interval2[0]\
    \ && interval1[1] < interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0]\
    \ < interval2[0] && interval1[1] >= interval2[1]) {\n    return \"NO\";\n  }\n\
    \  if (interval1[0] >= interval2[0] && interval1[1] < interval2[1]) {\n    return\
    \ \"NO\";\n  }\n  if (interval1[0] < interval2[0] && interval1[1] >= interval2[1])\
    \ {\n    return \"NO\";\n  }\n  if (interval1[0] >= interval2[0]", "  const [start1,\
    \ end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2)\
    \ return \"NO\";\n  if (start2 > end1) return \"NO\";\n  if (start1 <= end2 &&\
    \ start2 <= end1) return \"YES\";\n  return \"NO\";\n}\n", "  const [interval1Start,\
    \ interval1End] = interval1;\n  const [interval2Start, interval2End] = interval2;\n\
    \  if (interval1Start > interval1End) {\n    return `NO`;\n  }\n  if (interval2Start\
    \ > interval2End) {\n    return `NO`;\n  }\n  if (interval1Start === interval1End\
    \ && interval2Start === interval2End) {\n    return `YES`;\n  }\n  if (interval1Start\
    \ > interval2Start) {\n    return `NO`;\n  }\n  if (interval1Start === interval1End\
    \ && interval2Start > interval2End) {\n    return `NO`;\n  }\n  if (interval1Start\
    \ > interval2Start && interval1End < interval2End) {\n    return `YES`;\n  }\n\
    \  if (interval1Start === interval1End && interval2Start > interval2End) {\n \
    \   return `YES`;\n  }\n  if (interval1Start > interval2Start && interval1End\
    \ === interval2End) {\n    return `YES`;\n  }\n  if (interval1Start === interval1End\
    \ && interval2Start > interval2End) {\n    return `YES`;\n  }\n  if (interval1Start\
    \ > interval2Start && interval1End < interval2End) {\n    return `NO`;\n  }\n\
    \  if (interval1Start === interval1End && interval2Start > interval2End) {\n \
    \   return `NO`;\n  }\n  if (interval1Start > interval2Start && interval1End ===\
    \ interval2End) {\n    return `NO`;\n  }\n  if (interval1Start === interval1End\
    \ && interval2Start > interval2End) {\n    return `NO`;\n  }\n  if (interval1Start\
    \ > interval2Start && interval1End < interval2End) {\n    return `YES`;\n  }\n\
    \  if (interval1Start === interval1End && interval2Start > interval2End) {\n \
    \   return `YES`;\n  }\n  if (interval1Start > interval2Start && interval1End\
    \ === interval2End) {\n    return `YES`;\n  }\n  if (interval1Start === interval1End\
    \ && interval2Start > interval2End) {\n    return `YES`;\n  }\n  if (interval1Start\
    \ > interval2Start && interval1End < interval2End) {\n    return `NO`;\n  }\n\
    \  if (interval1Start === interval1End && interval2Start > interval2End) {\n \
    \   return `NO`;\n  }\n  if (interval1Start > interval2Start && interval1End ===\
    \ interval2End) {\n    return `NO`;\n  }\n  if (interval1Start === interval1End\
    \ && interval2Start ", "  if (interval1[0] > interval2[1]) {\n    return `NO`;\n\
    \  }\n  if (interval1[1] < interval2[0]) {\n    return `NO`;\n  }\n  if (interval1[0]\
    \ === interval1[1]) {\n    return `YES`;\n  }\n  if (interval2[0] === interval2[1])\
    \ {\n    return `YES`;\n  }\n  let [start1, end1] = interval1;\n  let [start2,\
    \ end2] = interval2;\n  if (start1 < start2) {\n    [start1, start2] = [start2,\
    \ start1];\n  }\n  if (end1 < end2) {\n    [end1, end2] = [end2, end1];\n  }\n\
    \  if (start1 > end2) {\n    return `NO`;\n  }\n  if (start1 === end1 && start2\
    \ === end2) {\n    return `YES`;\n  }\n  let [start3, end3] = interval1;\n  let\
    \ [start4, end4] = interval2;\n  if (start3 < start4) {\n    [start3, start4]\
    \ = [start4, start3];\n  }\n  if (end3 < end4) {\n    [end3, end4] = [end4, end3];\n\
    \  }\n  if (start3 === end3 && start4 === end4) {\n    return `YES`;\n  }\n  let\
    \ [start5, end5] = interval1;\n  let [start6, end6] = interval2;\n  if (start5\
    \ < start6) {\n    [start5, start6] = [start6, start5];\n  }\n  if (end5 < end6)\
    \ {\n    [end5, end6] = [end6, end5];\n  }\n  if (start5 === end5 && start6 ===\
    \ end6) {\n    return `YES`;\n  }\n  let [start7, end7] = interval1;\n  let [start8,\
    \ end8] = interval2;\n  if (start7 < start8) {\n    [start7, start8] = [start8,\
    \ start7];\n  }\n  if (end7 < end8) {\n    [end7, end8] = [end8, end7];\n  }\n\
    \  if (start7 === end7 && start8 === end8) {\n    return `YES`;\n  }\n  let [start9,\
    \ end9] = interval1;\n  let [start10, end10] = interval2;\n  if (start9 < start10)\
    \ {\n    [start9, start10] = [start10, start9];\n  }\n  if (end9 < end10) {\n\
    \    [end9, end10] = [end10, end9];\n  }\n  if (start9 === end9 && start10 ===\
    \ end10) {\n    return `YES`;\n  }\n  let [start11, end11] = interval1;\n  let\
    \ [start12, end12] = interval2;\n  if (start", "  let [start1, end1] = interval1;\n\
    \  let [start2, end2] = interval2;\n  let start1LessOrEqualEnd1 = start1 <= end1;\n\
    \  let start2LessOrEqualEnd2 = start2 <= end2;\n  if (start1LessOrEqualEnd1 &&\
    \ start2LessOrEqualEnd2) {\n    return start2 <= start1 && end2 >= end1 ? \"YES\"\
    \ : \"NO\";\n  }\n  return start1LessOrEqualEnd1 ? \"NO\" : \"NO\";\n}\n", " \
    \ let [start1, end1] = interval1\n  let [start2, end2] = interval2\n  let start1LessOrEqualEnd2\
    \ = start1 <= end2 && start2 <= end1\n  let start2LessOrEqualEnd1 = start2 <=\
    \ end1 && start1 <= end2\n  if (start1LessOrEqualEnd2 && start2LessOrEqualEnd1)\
    \ {\n    return \"YES\"\n  }\n  if (start1LessOrEqualEnd2 && !start2LessOrEqualEnd1)\
    \ {\n    return \"NO\"\n  }\n  if (!start1LessOrEqualEnd2 && start2LessOrEqualEnd1)\
    \ {\n    return \"NO\"\n  }\n  return \"NO\"\n}\n", "  if (interval1[0] > interval2[1]\
    \ || interval1[1] < interval2[0]) {\n    return \"NO\";\n  }\n  let result: number[]\
    \ = [];\n  for (let i = interval1[0]; i <= interval1[1]; i++) {\n    for (let\
    \ j = interval2[0]; j <= interval2[1]; j++) {\n      if (i === j) {\n        result.push(i);\n\
    \      }\n    }\n  }\n  if (result.length === 0) {\n    return \"NO\";\n  }\n\
    \  if (result.length === 1) {\n    return \"YES\";\n  }\n  if (result.length ===\
    \ 2) {\n    if (result[0] === result[1]) {\n      return \"YES\";\n    }\n   \
    \ return \"NO\";\n  }\n  if (result.length === 3) {\n    if (result[0] === result[1]\
    \ && result[1] === result[2]) {\n      return \"YES\";\n    }\n    return \"NO\"\
    ;\n  }\n  if (result.length === 4) {\n    if (result[0] === result[1] && result[1]\
    \ === result[2] && result[2] === result[3]) {\n      return \"YES\";\n    }\n\
    \    return \"NO\";\n  }\n  if (result.length === 5) {\n    if (result[0] ===\
    \ result[1] && result[1] === result[2] && result[2] === result[3] && result[3]\
    \ === result[4]) {\n      return \"YES\";\n    }\n    return \"NO\";\n  }\n  if\
    \ (result.length === 6) {\n    if (result[0] === result[1] && result[1] === result[2]\
    \ && result[2] === result[3] && result[3] === result[4] && result[4] === result[5])\
    \ {\n      return \"YES\";\n    }\n    return \"NO\";\n  }\n  if (result.length\
    \ === 7) {\n    if (result[0] === result[1] && result[1] === result[2] && result[2]\
    \ === result[3] && result[3] === result[4] && result[4] === result[5] && result[5]\
    \ === result[6]) {\n      return \"YES\";\n    }\n    return \"NO\";\n  }\n  if\
    \ (result.length === 8) {\n    if (result[0] === result[1] && result[1] === result[2]\
    \ && result[2] === result[3] && result[3] === result[4] && result[4] === result[5]\
    \ && result[5] === result[6] && result[6] === result[7]) {\n      return \"YES\"\
    ;\n    }\n    return \"NO\";\n  }\n  if (result.length === 9) {\n    if (result[0]\
    \ === result[1] && result[1] === result[2] && result[2] === result[3] && result[3]\
    \ === result[4] && result[4] === result[5] && result[5] === result[6] && result[6]\
    \ === result[7] && result[7] === result[8]) {\n      return \"YES\";\n    }\n\
    \    return \"NO\";\n  }\n  if (result.length === 10) {\n    if (result[0] ===\
    \ result[1] && result[1] === result[2] && result[2] === result[3] && result[3]\
    \ === result[4] && result[4] === result[5", "  if (interval1[0] > interval2[1])\
    \ {\n    const temp = interval1[1];\n    interval1[1] = interval1[0];\n    interval1[0]\
    \ = temp;\n  }\n  if (interval2[0] > interval1[1]) {\n    const temp = interval2[1];\n\
    \    interval2[1] = interval2[0];\n    interval2[0] = temp;\n  }\n  if (interval1[1]\
    \ < interval2[0]) {\n    const temp = interval1[1];\n    interval1[1] = interval2[0];\n\
    \    interval1[0] = temp;\n  }\n  if (interval2[1] < interval1[0]) {\n    const\
    \ temp = interval2[1];\n    interval2[1] = interval1[0];\n    interval2[0] = temp;\n\
    \  }\n  if (interval1[1] === interval2[1]) {\n    return \"YES\";\n  }\n  if (interval1[1]\
    \ < interval2[1]) {\n    const temp = interval1[1];\n    interval1[1] = interval2[1];\n\
    \    interval1[0] = temp;\n  }\n  if (interval2[1] < interval1[1]) {\n    const\
    \ temp = interval2[1];\n    interval2[1] = interval1[1];\n    interval2[0] = temp;\n\
    \  }\n  if (interval1[0] === interval2[0]) {\n    return \"YES\";\n  }\n  if (interval1[0]\
    \ < interval2[0]) {\n    const temp = interval1[0];\n    interval1[0] = interval2[0];\n\
    \    interval1[1] = temp;\n  }\n  if (interval2[0] < interval1[0]) {\n    const\
    \ temp = interval2[0];\n    interval2[0] = interval1[0];\n    interval2[1] = temp;\n\
    \  }\n  if (interval1[0] === interval2[0]) {\n    return \"YES\";\n  }\n  if (interval1[1]\
    \ === interval2[1]) {\n    return \"YES\";\n  }\n  if (interval1[1] < interval2[1])\
    \ {\n    const temp = interval1[1];\n    interval1[1] = interval2[1];\n    interval1[0]\
    \ = temp;\n  }\n  if (interval2[1] < interval1[1]) {\n    const temp = interval2[1];\n\
    \    interval2[1] = interval1[1];\n    interval2[0] = temp;\n  }\n  if (interval1[0]\
    \ === interval2[0]) {\n    return \"YES\";\n  }\n  if (interval1[1] === interval2[1])\
    \ {\n    return \"YES\";\n  }\n  if (interval1[1] < interval2[1]) {\n    const\
    \ temp = interval1[1];\n    interval1[1] = interval2[1];\n    interval1[0] = temp;\n\
    \  }\n  if (interval2[1] < interval1[1]) {\n    const temp = interval2[1];\n \
    \   interval2[1] = interval1[1];\n    interval2[0] = temp;\n  }\n  if (interval1[0]\
    \ === interval2[0]) {\n    return \"YES\";\n  }\n  if (interval1[1]", "  if (interval1[0]\
    \ > interval2[0]) {\n    const temp = interval1[0];\n    interval1[0] = interval2[0];\n\
    \    interval2[0] = temp;\n  }\n  if (interval1[1] < interval2[1]) {\n    const\
    \ temp = interval1[1];\n    interval1[1] = interval2[1];\n    interval2[1] = temp;\n\
    \  }\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n\
    \  if (start1 < start2) {\n    const temp = start1;\n    start1 = start2;\n  \
    \  start2 = temp;\n  }\n  if (end1 < end2) {\n    const temp = end1;\n    end1\
    \ = end2;\n    end2 = temp;\n  }\n  if (start1 > end2) {\n    return \"NO\";\n\
    \  }\n  const length = end1 - start1;\n  if (length % 2 === 0) {\n    return \"\
    YES\";\n  }\n  for (let i = 2; i <= Math.ceil(length / 2); i++) {\n    if (start1\
    \ + i * 2 > end2 || start1 - i * 2 < start2) {\n      break;\n    }\n    if (start1\
    \ + i * 2 === end2 || start1 - i * 2 === start2) {\n      return \"YES\";\n  \
    \  }\n  }\n  return \"NO\";\n}\n", "  if (interval1[0] >= interval1[1] || interval2[0]\
    \ >= interval2[1]) {\n    return \"NO\";\n  }\n  let result: number[] = [];\n\
    \  for (let i = interval1[0]; i <= interval1[1]; i++) {\n    for (let j = interval2[0];\
    \ j <= interval2[1]; j++) {\n      if (i === j) {\n        result.push(i);\n \
    \     }\n    }\n  }\n  if (result.length === 0) {\n    return \"NO\";\n  }\n \
    \ if (result.length === 1) {\n    return \"YES\";\n  }\n  let prime: boolean;\n\
    \  for (let i = 0; i < result.length; i++) {\n    prime = true;\n    for (let\
    \ j = 0; j < result.length; j++) {\n      if (result[i] === result[j]) {\n   \
    \     prime = false;\n        break;\n      }\n    }\n    if (prime) {\n     \
    \ return \"YES\";\n    }\n  }\n  return \"NO\";\n}\n", "  let [start1, end1] =\
    \ interval1;\n  let [start2, end2] = interval2;\n  if (start1 <= end2 && start2\
    \ <= end1) {\n    if (start1 < start2) {\n      start1 = start2;\n      end1 =\
    \ end2;\n    } else {\n      start2 = start1;\n      end2 = end1;\n    }\n  }\n\
    \  if (start1 > end2) {\n    start1 = end2;\n    end1 = start2;\n  }\n  if (start2\
    \ > end1) {\n    start2 = end1;\n    end2 = start1;\n  }\n  if (start1 < end2\
    \ && start2 < end1) {\n    if (start1 < start2) {\n      start1 = start2;\n  \
    \    end1 = end2;\n    } else {\n      start2 = start1;\n      end2 = end1;\n\
    \    }\n  }\n  if (start1 > end2 && start2 > end1) {\n    if (start1 < start2)\
    \ {\n      start1 = start2;\n      end1 = end2;\n    } else {\n      start2 =\
    \ start1;\n      end2 = end1;\n    }\n  }\n  if (start1 < end2 && start2 < end1)\
    \ {\n    if (start1 < start2) {\n      start1 = start2;\n      end1 = end2;\n\
    \    } else {\n      start2 = start1;\n      end2 = end1;\n    }\n  }\n  if (start1\
    \ > end2 && start2 > end1) {\n    if (start1 < start2) {\n      start1 = start2;\n\
    \      end1 = end2;\n    } else {\n      start2 = start1;\n      end2 = end1;\n\
    \    }\n  }\n  if (start1 < end2 && start2 < end1) {\n    if (start1 < start2)\
    \ {\n      start1 = start2;\n      end1 = end2;\n    } else {\n      start2 =\
    \ start1;\n      end2 = end1;\n    }\n  }\n  if (start1 > end2 && start2 > end1)\
    \ {\n    if (start1 < start2) {\n      start1 = start2;\n      end1 = end2;\n\
    \    } else {\n      start2 = start1;\n      end2 = end1;\n    }\n  }\n  if (start1\
    \ < end2 && start2 < end1) {\n    if (start1 < start2) {\n      start1 = start2;\n\
    \      end1 = end2;\n    } else {\n      start2 = start1;\n      end2 = end1;\n\
    \    }\n  }\n  if (start1 > end2 && start2 > end1) {\n    if (start1 < start2)\
    \ {\n      start1 = start2;\n      end1 = end2;\n    } else {\n      start2 =\
    \ start1;\n      end2 = end1;\n    }\n  }\n  if (start1 < end2 && start2 < end1)\
    \ {\n    if (start1 < start2) {\n      start1 = start2;\n      end1 = end2;\n\
    \    } else {\n      start2 = start1;\n      end", "  const [start1, end1] = interval1;\n\
    \  const [start2, end2] = interval2;\n  if (start1 < start2) {\n    const temp\
    \ = start1;\n    start1 = start2;\n    start2 = temp;\n  }\n  if (end1 < end2)\
    \ {\n    const temp = end1;\n    end1 = end2;\n    end2 = temp;\n  }\n  if (start1\
    \ > end2) {\n    const temp = start1;\n    start1 = end2;\n    end2 = temp;\n\
    \  }\n  if (start2 > end1) {\n    const temp = start2;\n    start2 = end1;\n \
    \   end1 = temp;\n  }\n  if (start1 > end2) {\n    return `NO`;\n  }\n  if (start2\
    \ > end1) {\n    return `NO`;\n  }\n  if (start1 === end1 && start2 === end2)\
    \ {\n    return `YES`;\n  }\n  if (start1 === end1 && start2 === end2) {\n   \
    \ return `YES`;\n  }\n  if (start1 === end1 && start2 === end2) {\n    return\
    \ `YES`;\n  }\n  if (start1 === end1 && start2 === end2) {\n    return `YES`;\n\
    \  }\n  if (start1 === end1 && start2 === end2) {\n    return `YES`;\n  }\n  if\
    \ (start1 === end1 && start2 === end2) {\n    return `YES`;\n  }\n  if (start1\
    \ === end1 && start2 === end2) {\n    return `YES`;\n  }\n  if (start1 === end1\
    \ && start2 === end2) {\n    return `YES`;\n  }\n  if (start1 === end1 && start2\
    \ === end2) {\n    return `YES`;\n  }\n  if (start1 === end1 && start2 === end2)\
    \ {\n    return `YES`;\n  }\n  if (start1 === end1 && start2 === end2) {\n   \
    \ return `YES`;\n  }\n  if (start1 === end1 && start2 === end2) {\n    return\
    \ `YES`;\n  }\n  if (start1 === end1 && start2 === end2) {\n    return `YES`;\n\
    \  }\n  if (start1 === end1 && start2 === end2) {\n    return `YES`;\n  }\n  if\
    \ (start1 === end1 && start2 === end2) {\n    return `YES`;\n  }\n  if (start1\
    \ === end1 && start2 === end2) {\n    return `YES`;\n  }\n  if (start1 === end1\
    \ && start2 === end2) {\n    return `YES`;\n  }\n  if (start1 === end1 && start2\
    \ === end2) {\n    return `YES`;\n  }\n  if (start1 === end1 && start2 === end2)\
    \ {\n    return `YES`;\n  }\n  if (start1 === end1 && start2 === end2) {\n   \
    \ return ", "  let [start1, end1] = interval1\n  let [start2, end2] = interval2\n\
    \  let startIntersection = start1 < start2 ? start1 : start2\n  let endIntersection\
    \ = end1 < end2 ? end1 : end2\n  let intersectionLength = endIntersection - startIntersection\n\
    \  if (intersectionLength === 0) return \"NO\"\n  if (intersectionLength === 1)\
    \ return \"YES\"\n  if (isPrime(intersectionLength)) return \"YES\"\n  return\
    \ \"NO\"\n}\n", "  const [start1, end1] = interval1;\n  const [start2, end2] =\
    \ interval2;\n  if (start1 <= end2 && start2 <= end1) {\n    if (start1 < start2)\
    \ {\n      return \"NO\";\n    } else {\n      return \"YES\";\n    }\n  }\n \
    \ return \"NO\";\n}\n", "  const [interval1Start, interval1End] = interval1;\n\
    \  const [interval2Start, interval2End] = interval2;\n  if (interval1Start > interval1End)\
    \ {\n    return `NO`;\n  }\n  if (interval2Start > interval2End) {\n    return\
    \ `NO`;\n  }\n  if (interval1Start === interval1End) {\n    return `NO`;\n  }\n\
    \  if (interval2Start === interval2End) {\n    return `NO`;\n  }\n  if (interval1Start\
    \ > interval2Start) {\n    return `NO`;\n  }\n  if (interval1Start < interval2Start)\
    \ {\n    return `YES`;\n  }\n  if (interval1Start === interval2Start) {\n    return\
    \ `YES`;\n  }\n  if (interval1Start < interval2Start) {\n    return `YES`;\n \
    \ }\n  return `YES`;\n}\n", "  let [start1, end1] = interval1;\n  let [start2,\
    \ end2] = interval2;\n  let startIntersection = start1 <= end2 && start2 <= end1\
    \ ? start2 : start1;\n  let endIntersection = start1 <= end2 && start2 <= end1\
    \ ? end2 : end1;\n  let intersectionLength = endIntersection - startIntersection;\n\
    \  if (intersectionLength === 0) return \"NO\";\n  if (intersectionLength ===\
    \ 1) return \"YES\";\n  if (isPrime(intersectionLength)) return \"YES\";\n  return\
    \ \"NO\";\n}\n", "  if (interval1[0] > interval1[1] || interval2[0] > interval2[1])\
    \ {\n    return \"NO\";\n  }\n  let result: string = \"NO\";\n  for (let i = interval1[0];\
    \ i <= interval1[1]; i++) {\n    for (let j = interval2[0]; j <= interval2[1];\
    \ j++) {\n      if (i === j) {\n        continue;\n      }\n      if (i === interval1[0]\
    \ && j === interval2[1]) {\n        continue;\n      }\n      if (i === interval1[1]\
    \ && j === interval2[0]) {\n        continue;\n      }\n      if (i === interval1[0]\
    \ && j === interval2[0]) {\n        continue;\n      }\n      if (i === interval1[1]\
    \ && j === interval2[1]) {\n        continue;\n      }\n      if (i === interval1[0]\
    \ && j === interval2[0]) {\n        continue;\n      }\n      if (i === interval1[1]\
    \ && j === interval2[1]) {\n        continue;\n      }\n      if (i === interval1[0]\
    \ && j === interval2[1]) {\n        continue;\n      }\n      if (i === interval1[1]\
    \ && j === interval2[0]) {\n        continue;\n      }\n      if (i === interval1[0]\
    \ && j === interval2[1]) {\n        continue;\n      }\n      if (i === interval1[1]\
    \ && j === interval2[0]) {\n        continue;\n      }\n      if (i === interval1[0]\
    \ && j === interval2[1]) {\n        continue;\n      }\n      if (i === interval1[1]\
    \ && j === interval2[0]) {\n        continue;\n      }\n      if (i === interval1[0]\
    \ && j === interval2[0]) {\n        continue;\n      }\n      if (i === interval1[1]\
    \ && j === interval2[1]) {\n        continue;\n      }\n      if (i === interval1[0]\
    \ && j === interval2[0]) {\n        continue;\n      }\n      if (i === interval1[1]\
    \ && j === interval2[1]) {\n        continue;\n      }\n      if (i === interval1[0]\
    \ && j === interval2[0]) {\n        continue;\n      }\n      if (i === interval1[1]\
    \ && j === interval2[1]) {\n        continue;\n      }\n      if (i === interval1[0]\
    \ && j === interval2[0]) {\n        continue;\n      }\n      if (i === interval1[1]\
    \ && j === interval2[1]) {\n        continue;\n      }\n      if (i === interval1[0]\
    \ && j === interval2[0]) {\n        continue;\n      }\n      if (i === interval1[1]\
    \ && j === interval2[0]) {\n        continue;\n      }\n      if (i === interval1[0]\
    \ && j === interval2[1]) {\n        continue;\n      }\n      if (i === interval1[1]\
    \ && j", "  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n\
    \  const start1LessOrEqualEnd2 = start1 <= end2 && start2 <= end1;\n  const start2LessOrEqualEnd1\
    \ = start2 <= end1 && start1 <= end2;\n  if (start1LessOrEqualEnd2 && start2LessOrEqualEnd1)\
    \ {\n    return \"YES\";\n  }\n  if (start1LessOrEqualEnd2 && !start2LessOrEqualEnd1)\
    \ {\n    return \"NO\";\n  }\n  if (!start1LessOrEqualEnd2 && start2LessOrEqualEnd1)\
    \ {\n    return \"NO\";\n  }\n  return \"NO\";\n}\n", "  const [start1, end1]\
    \ = interval1;\n  const [start2, end2] = interval2;\n  if (start1 < start2) {\n\
    \    return [start1, end1].sort().join() === \"0\" ? \"NO\" : \"YES\";\n  }\n\
    \  if (start2 < start1) {\n    return [start2, end2].sort().join() === \"0\" ?\
    \ \"NO\" : \"YES\";\n  }\n  if (start1 < end2 && end1 < end2) {\n    return \"\
    YES\";\n  }\n  if (start2 < end1 && end2 < end1) {\n    return \"YES\";\n  }\n\
    \  return \"NO\";\n}\n", "  const [start1, end1] = interval1;\n  const [start2,\
    \ end2] = interval2;\n  if (start1 > end2) return \"NO\";\n  if (start2 > end1)\
    \ return \"NO\";\n  if (start2 >= start1 && start2 <= end1 && end2 >= start1 &&\
    \ end2 <= end1) return \"YES\";\n  return \"NO\";\n}\n", "  const [start1, end1]\
    \ = interval1;\n  const [start2, end2] = interval2;\n  const [start3, end3] =\
    \ interval1;\n  const [start4, end4] = interval2;\n  const [start5, end5] = interval1;\n\
    \  const [start6, end6] = interval2;\n  const [start7, end7] = interval1;\n  const\
    \ [start8, end8] = interval2;\n  const [start9, end9] = interval1;\n  const [start10,\
    \ end10] = interval2;\n  const [start11, end11] = interval1;\n  const [start12,\
    \ end12] = interval2;\n  const [start13, end13] = interval1;\n  const [start14,\
    \ end14] = interval2;\n  const [start15, end15] = interval1;\n  const [start16,\
    \ end16] = interval2;\n  const [start17, end17] = interval1;\n  const [start18,\
    \ end18] = interval2;\n  const [start19, end19] = interval1;\n  const [start20,\
    \ end20] = interval2;\n  const [start21, end21] = interval1;\n  const [start22,\
    \ end22] = interval2;\n  const [start23, end23] = interval1;\n  const [start24,\
    \ end24] = interval2;\n  const [start25, end25] = interval1;\n  const [start26,\
    \ end26] = interval2;\n  const [start27, end27] = interval1;\n  const [start28,\
    \ end28] = interval2;\n  const [start29, end29] = interval1;\n  const [start30,\
    \ end30] = interval2;\n  const [start31, end31] = interval1;\n  const [start32,\
    \ end32] = interval2;\n  const [start33, end33] = interval1;\n  const [start34,\
    \ end34] = interval2;\n  const [start35, end35] = interval1;\n  const [start36,\
    \ end36] = interval2;\n  const [start37, end37] = interval1;\n  const [start38,\
    \ end38] = interval2;\n  const [start39, end39] = interval1;\n  const [start40,\
    \ end40] = interval2;\n  const [start41, end41] = interval1;\n  const [start42,\
    \ end42] = interval2;\n  const [start43, end43] = interval1;\n  const [start44,\
    \ end44] = interval2;\n  const [start45, end45] = interval1;\n  const [start46,\
    \ end46] = interval2;\n  const [start47, end47] = interval1;\n  const [start48,\
    \ end48] = interval2;\n  const [start49, end49] = interval1;\n  const [start50,\
    \ end50] = interval2;\n  const [start51, end51] = interval1;\n  const [start",
  "  let [start1, end1] = interval1\n  let [start2, end2] = interval2\n  if (start1\
    \ < start2) {\n    [start1, start2] = [start2, start1]\n  }\n  if (end1 < end2)\
    \ {\n    [end1, end2] = [end2, end1]\n  }\n  if (start1 > end2) {\n    return\
    \ \"NO\"\n  }\n  if (start2 === end2) {\n    return \"NO\"\n  }\n  if (start1\
    \ === end1) {\n    return \"NO\"\n  }\n  let [start3, end3] = interval1\n  let\
    \ [start4, end4] = interval2\n  if (start3 < start4) {\n    [start3, start4] =\
    \ [start4, start3]\n  }\n  if (end3 < end4) {\n    [end3, end4] = [end4, end3]\n\
    \  }\n  if (start3 === end4) {\n    return \"NO\"\n  }\n  if (start4 === end3)\
    \ {\n    return \"NO\"\n  }\n  if (start3 === start4) {\n    return \"NO\"\n \
    \ }\n  if (start4 === end4) {\n    return \"NO\"\n  }\n  let [start5, end5] =\
    \ interval1\n  let [start6, end6] = interval2\n  if (start5 < start6) {\n    [start5,\
    \ start6] = [start6, start5]\n  }\n  if (end5 < end6) {\n    [end5, end6] = [end6,\
    \ end5]\n  }\n  if (start5 === end6) {\n    return \"NO\"\n  }\n  if (start6 ===\
    \ end5) {\n    return \"NO\"\n  }\n  if (start5 === start6) {\n    return \"NO\"\
    \n  }\n  if (start6 === end5) {\n    return \"NO\"\n  }\n  let [start7, end7]\
    \ = interval1\n  let [start8, end8] = interval2\n  if (start7 < start8) {\n  \
    \  [start7, start8] = [start8, start7]\n  }\n  if (end7 < end8) {\n    [end7,\
    \ end8] = [end8, end7]\n  }\n  if (start7 === end8) {\n    return \"NO\"\n  }\n\
    \  if (start8 === end7) {\n    return \"NO\"\n  }\n  if (start7 === start8) {\n\
    \    return \"NO\"\n  }\n  if (start8 === end7) {\n    return \"NO\"\n  }\n  let\
    \ [start9, end9] = interval1\n  let [start10, end10] = interval2\n  if (start9\
    \ < start10) {\n    [start9, start10] = [start10, start9]\n  }\n  if (end9 < end10)\
    \ {\n    [end9, end10] = [end10, end9]\n  }\n  if (start9 === end10) {\n    return\
    \ \"NO", "  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n\
    \  if (start1 > end2) return \"NO\";\n  if (start2 > end1) return \"NO\";\n  if\
    \ (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2\
    \ && end1 !== end2) return \"NO\";\n  if (start2 === start1 && end2 !== end1)\
    \ return \"NO\";\n  if (start2 === start1 && end1 !== end2) return \"NO\";\n \
    \ if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2\
    \ && end1 !== end2) return \"NO\";\n  if (start2 === start1 && end2 !== end1)\
    \ return \"NO\";\n  if (start2 === start1 && end1 !== end2) return \"NO\";\n \
    \ if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2\
    \ && end1 !== end2) return \"NO\";\n  if (start2 === start1 && end2 !== end1)\
    \ return \"NO\";\n  if (start2 === start1 && end1 !== end2) return \"NO\";\n \
    \ if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2\
    \ && end1 !== end2) return \"NO\";\n  if (start2 === start1 && end2 !== end1)\
    \ return \"NO\";\n  if (start2 === start1 && end1 !== end2) return \"NO\";\n \
    \ if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2\
    \ && end1 !== end2) return \"NO\";\n  if (start2 === start1 && end2 !== end1)\
    \ return \"NO\";\n  if (start2 === start1 && end1 !== end2) return \"NO\";\n \
    \ if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2\
    \ && end1 !== end2) return \"NO\";\n  if (start2 === start1 && end2 !== end1)\
    \ return \"NO\";\n  if (start2 === start1 && end1 !== end2) return \"NO\";\n \
    \ if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2\
    \ && end1 !== end2) return \"NO\";\n  if (start2 === start1 && end2 !== end1)\
    \ return \"NO\";\n  if (start2 === start1 && end1 !== end2) return \"NO\";\n \
    \ if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2\
    \ && end1 !== ", "  const [start1, end1] = interval1;\n  const [start2, end2]\
    \ = interval2;\n  const start1LessOrEqualEnd2 = start1 <= end2 && start2 <= end1;\n\
    \  const start2LessOrEqualEnd1 = start2 <= end1 && start1 <= end2;\n  if (start1LessOrEqualEnd2\
    \ && start2LessOrEqualEnd1) {\n    return \"YES\";\n  }\n  if (start1LessOrEqualEnd2\
    \ && !start2LessOrEqualEnd1) {\n    return \"NO\";\n  }\n  if (!start1LessOrEqualEnd2\
    \ && start2LessOrEqualEnd1) {\n    return \"NO\";\n  }\n  return \"NO\";\n}\n",
  "  if (interval1[0] > interval2[1] || interval1[1] < interval2[0]) {\n    return\
    \ \"NO\";\n  }\n  let intersection = [interval1[0], interval1[1]];\n  for (let\
    \ i = interval2[0]; i <= interval2[1]; i++) {\n    if (interval1[0] > i) {\n \
    \     intersection[1] = i;\n    }\n  }\n  if (intersection[1] === interval1[1])\
    \ {\n    return \"YES\";\n  }\n  return \"NO\";\n}\n", "  if (interval1[0] > interval2[1])\
    \ {\n    return `NO`;\n  }\n  if (interval1[1] < interval2[0]) {\n    return `NO`;\n\
    \  }\n  if (interval1[0] === interval1[1]) {\n    return `YES`;\n  }\n  if (interval2[0]\
    \ === interval2[1]) {\n    return `YES`;\n  }\n  let [start1, end1] = interval1;\n\
    \  let [start2, end2] = interval2;\n  let startIntersection = start1 < start2\
    \ ? start1 : start2;\n  let endIntersection = end1 < end2 ? end1 : end2;\n  let\
    \ startIntersectionIndex = startIntersection;\n  let endIntersectionIndex = endIntersection;\n\
    \  let startIntersectionLength = endIntersection - startIntersection;\n  let endIntersectionLength\
    \ = endIntersection - startIntersection;\n  let startIntersectionIndexLength =\
    \ startIntersectionIndex - startIntersection;\n  let endIntersectionIndexLength\
    \ = endIntersectionIndex - endIntersection;\n  let startIntersectionLengthPrime\
    \ = startIntersectionLength % 2 === 0;\n  let endIntersectionLengthPrime = endIntersectionLength\
    \ % 2 === 0;\n  let startIntersectionIndexLengthPrime = startIntersectionIndexLength\
    \ % 2 === 0;\n  let endIntersectionIndexLengthPrime = endIntersectionIndexLength\
    \ % 2 === 0;\n  if (startIntersectionLengthPrime && endIntersectionLengthPrime)\
    \ {\n    return `YES`;\n  }\n  if (startIntersectionLengthPrime && !endIntersectionLengthPrime)\
    \ {\n    return `YES`;\n  }\n  if (!startIntersectionLengthPrime && endIntersectionLengthPrime)\
    \ {\n    return `YES`;\n  }\n  if (!startIntersectionLengthPrime && !endIntersectionLengthPrime)\
    \ {\n    return `NO`;\n  }\n  if (startIntersectionIndexLengthPrime && endIntersectionIndexLengthPrime)\
    \ {\n    return `YES`;\n  }\n  if (startIntersectionIndexLengthPrime && !endIntersectionIndexLengthPrime)\
    \ {\n    return `YES`;\n  }\n  if (!startIntersectionIndexLengthPrime && endIntersectionIndexLengthPrime)\
    \ {\n    return `YES`;\n  }\n  if (!startIntersectionIndexLengthPrime && !endIntersectionIndexLengthPrime)\
    \ {\n    return `NO`;\n  }\n}\n", "  let [start1, end1] = interval1;\n  let [start2,\
    \ end2] = interval2;\n  let start1LessOrEqualEnd2 = start1 <= end2 && start2 <=\
    \ end1;\n  let start2LessOrEqualEnd1 = start2 <= end1 && start1 <= end2;\n  if\
    \ (start1LessOrEqualEnd2 && start2LessOrEqualEnd1) {\n    return \"YES\";\n  }\n\
    \  if (start1LessOrEqualEnd2 && !start2LessOrEqualEnd1) {\n    return \"NO\";\n\
    \  }\n  if (!start1LessOrEqualEnd2 && start2LessOrEqualEnd1) {\n    return \"\
    NO\";\n  }\n  return \"NO\";\n}\n", "  let [start1, end1] = interval1;\n  let\
    \ [start2, end2] = interval2;\n  let start1LessOrEqualEnd1 = start1 <= end1;\n\
    \  let start2LessOrEqualEnd2 = start2 <= end2;\n  let start1LessOrEqualEnd2 =\
    \ start1 <= end2;\n  let start1LessOrEqualEnd1 = start2 <= end1;\n  if (start1LessOrEqualEnd1\
    \ && start2LessOrEqualEnd2) {\n    return `YES`;\n  } else if (start1LessOrEqualEnd1\
    \ && start2LessOrEqualEnd1) {\n    return `NO`;\n  } else if (start1LessOrEqualEnd2\
    \ && start2LessOrEqualEnd1) {\n    return `NO`;\n  } else if (start1LessOrEqualEnd2\
    \ && start2LessOrEqualEnd2) {\n    return `YES`;\n  }\n  return `NO`;\n}\n", " \
    \ if (interval1[0] >= interval1[1] || interval2[0] >= interval2[1]) {\n    return\
    \ \"NO\";\n  }\n  if (interval1[0] < interval1[1] && interval2[0] < interval2[1])\
    \ {\n    return \"YES\";\n  }\n  if (interval1[0] < interval1[1] && interval2[0]\
    \ >= interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] >= interval1[1]\
    \ && interval2[0] < interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0]\
    \ >= interval1[1] && interval2[0] >= interval2[1]) {\n    return \"YES\";\n  }\n\
    }\n", "  if (interval1[0] > interval2[1]) {\n    return intersection(interval2,\
    \ interval1)\n  }\n  if (interval1[1] < interval2[0]) {\n    return intersection(interval1,\
    \ interval2)\n  }\n  if (interval1[0] === interval1[1]) {\n    return \"NO\"\n\
    \  }\n  if (interval2[0] === interval2[1]) {\n    return \"NO\"\n  }\n  let result:\
    \ number[] = []\n  for (let i = interval1[0]; i <= interval1[1]; i++) {\n    for\
    \ (let j = interval2[0]; j <= interval2[1]; j++) {\n      if (i === j) {\n   \
    \     result.push(i)\n      }\n    }\n  }\n  if (result.length === 0) {\n    return\
    \ \"NO\"\n  }\n  if (result.length === 1) {\n    return \"YES\"\n  }\n  if (result.length\
    \ === 2) {\n    return \"YES\"\n  }\n  return \"NO\"\n}\n", "  let [start1, end1]\
    \ = interval1;\n  let [start2, end2] = interval2;\n  if (start1 > end2) [start1,\
    \ end2] = [end2, start1];\n  if (start2 > end1) [start2, end1] = [end1, start2];\n\
    \  if (start1 < start2 && end1 > end2) return \"NO\";\n  if (start1 < start2 &&\
    \ end1 < end2) return \"NO\";\n  if (start1 == start2 && end1 == end2) return\
    \ \"YES\";\n  let [start3, end3] = interval1;\n  let [start4, end4] = interval2;\n\
    \  if (start3 < start4 && end3 > end4) return \"NO\";\n  if (start3 < start4 &&\
    \ end3 < end4) return \"NO\";\n  if (start3 == start4 && end3 == end4) return\
    \ \"YES\";\n  let [start5, end5] = interval1;\n  let [start6, end6] = interval2;\n\
    \  if (start5 < start6 && end5 > end6) return \"NO\";\n  if (start5 < start6 &&\
    \ end5 < end6) return \"NO\";\n  if (start5 == start6 && end5 == end6) return\
    \ \"YES\";\n  let [start7, end7] = interval1;\n  let [start8, end8] = interval2;\n\
    \  if (start7 < start8 && end7 > end8) return \"NO\";\n  if (start7 < start8 &&\
    \ end7 < end8) return \"NO\";\n  if (start7 == start8 && end7 == end8) return\
    \ \"YES\";\n  let [start9, end9] = interval1;\n  let [start10, end10] = interval2;\n\
    \  if (start9 < start10 && end9 > end10) return \"NO\";\n  if (start9 < start10\
    \ && end9 < end10) return \"NO\";\n  if (start9 == start10 && end9 == end10) return\
    \ \"YES\";\n  let [start11, end11] = interval1;\n  let [start12, end12] = interval2;\n\
    \  if (start11 < start12 && end11 > end12) return \"NO\";\n  if (start11 < start12\
    \ && end11 < end12) return \"NO\";\n  if (start11 == start12 && end11 == end12)\
    \ return \"YES\";\n  let [start13, end13] = interval1;\n  let [start14, end14]\
    \ = interval2;\n  if (start13 < start14 && end13 > end14) return \"NO\";\n  if\
    \ (start13 < start14 && end13 < end14) return \"NO\";\n  if (start13 == start14\
    \ && end13 == end14) return \"YES\";", "  if (interval1[0] > interval2[1] || interval2[0]\
    \ > interval1[1]) {\n    return \"NO\";\n  }\n\n  const [start1, end1] = interval1;\n\
    \  const [start2, end2] = interval2;\n\n  if (start1 < start2 && end1 < end2)\
    \ {\n    return \"NO\";\n  }\n\n  if (start2 < start1 && end2 < end1) {\n    return\
    \ \"NO\";\n  }\n\n  if (start1 < start2 && end2 < end1) {\n    return \"NO\";\n\
    \  }\n\n  if (start2 < start1 && end1 < end2) {\n    return \"NO\";\n  }\n\n \
    \ if (start1 < start2 && end2 < end1) {\n    return \"NO\";\n  }\n\n  if (start2\
    \ < start1 && end1 < end2) {\n    return \"NO\";\n  }\n\n  if (start1 < start2\
    \ && end2 < end1) {\n    return \"NO\";\n  }\n\n  if (start2 < start1 && end1\
    \ < end2) {\n    return \"NO\";\n  }\n\n  if (start1 < start2 && end2 < end1)\
    \ {\n    return \"NO\";\n  }\n\n  if (start2 < start1 && end1 < end2) {\n    return\
    \ \"NO\";\n  }\n\n  if (start1 < start2 && end2 < end1) {\n    return \"NO\";\n\
    \  }\n\n  if (start2 < start1 && end1 < end2) {\n    return \"NO\";\n  }\n\n \
    \ if (start1 < start2 && end2 < end1) {\n    return \"NO\";\n  }\n\n  if (start2\
    \ < start1 && end1 < end2) {\n    return \"NO\";\n  }\n\n  if (start1 < start2\
    \ && end2 < end1) {\n    return \"NO\";\n  }\n\n  if (start2 < start1 && end1\
    \ < end2) {\n    return \"NO\";\n  }\n\n  if (start1 < start2 && end2 < end1)\
    \ {\n    return \"NO\";\n  }\n\n  if (start2 < start1 && end1 < end2) {\n    return\
    \ \"NO\";\n  }\n\n  if (start1 < start2 && end2 < end1) {\n    return \"NO\";\n\
    \  }\n\n  if (start2 < start1 && end1 < end2) {\n    return \"NO\";\n  }\n\n \
    \ if (start1 < start2 && end2 < end1) {\n    return \"NO\";\n  }\n\n  if (start2\
    \ < start1 && end1 < end2) {\n    return \"NO\";\n  }\n\n  if (start1 < start2\
    \ && end2 < end1) {\n    return \"NO\";\n  }\n\n  if (start2 < start1 && end1\
    \ < end2) {\n    return \"NO\";\n  }\n\n  if (start1 < start2 && end2 < end1)\
    \ {\n    return \"NO\";\n  }\n\n  if (start2 < start1 && end1 < end2) {\n    return\
    \ \"NO\";\n  }\n\n  if (start1 < start2 && end2 < end1) {\n    return \"NO\";\n\
    \  }\n\n  if (start2 < start1 && end1 < end2) {\n    return \"NO\";\n  }\n\n \
    \ if (start1 < start2 && end2 < end1) {\n    return \"NO\";\n  }\n\n  if (start2\
    \ < start1 && end", "  const [start1, end1] = interval1;\n  const [start2, end2]\
    \ = interval2;\n  const start1LessOrEqualEnd2 = start1 <= end2 && start2 <= end1;\n\
    \  const start2LessOrEqualEnd1 = start2 <= end1 && start1 <= end2;\n  const startLessOrEqualEnd1\
    \ = start1 <= end1 && start2 <= end2;\n  const startLessOrEqualEnd2 = start1 <=\
    \ end2 && start2 <= end1;\n  if (start1LessOrEqualEnd2 && start2LessOrEqualEnd1)\
    \ {\n    return \"NO\";\n  }\n  if (start2LessOrEqualEnd1 && start1LessOrEqualEnd2)\
    \ {\n    return \"NO\";\n  }\n  if (startLessOrEqualEnd1 && startLessOrEqualEnd2)\
    \ {\n    return \"YES\";\n  }\n  return \"NO\";\n}\n", "  const [start1, end1]\
    \ = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2) return\
    \ \"NO\";\n  if (start2 > end1) return \"NO\";\n  if (start2 === end1 && start1\
    \ === end2) return \"YES\";\n  if (start1 === end1 && start2 === end2) return\
    \ \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1\
    \ === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && start2\
    \ === end1) return \"YES\";\n  if (start1 === start2 && start2 === end1) return\
    \ \"YES\";\n  if (start1 === start2 && start2 === end1) return \"YES\";\n  if\
    \ (start1 === start2 && start2 === end1) return \"YES\";\n  if (start1 === start2\
    \ && start2 === end1) return \"YES\";\n  if (start1 === start2 && start2 === end1)\
    \ return \"YES\";\n  if (start1 === start2 && start2 === end1) return \"YES\"\
    ;\n  if (start1 === start2 && start2 === end1) return \"YES\";\n  if (start1 ===\
    \ start2 && start2 === end1) return \"YES\";\n  if (start1 === start2 && start2\
    \ === end1) return \"YES\";\n  if (start1 === start2 && start2 === end1) return\
    \ \"YES\";\n  if (start1 === start2 && start2 === end1) return \"YES\";\n  if\
    \ (start1 === start2 && start2 === end1) return \"YES\";\n  if (start1 === start2\
    \ && start2 === end1) return \"YES\";\n  if (start1 === start2 && start2 === end1)\
    \ return \"YES\";\n  if (start1 === start2 && start2 === end1) return \"YES\"\
    ;\n  if (start1 === start2 && start2 === end1) return \"YES\";\n  if (start1 ===\
    \ start2 && start2 === end1) return \"YES\";\n  if (start1 === start2 && start2\
    \ === end1) return \"YES\";\n  if (start1 === start2 && start2 === end1) return\
    \ \"YES\";\n  if (start1 === start2 && start2 === end1) return \"YES\";\n  if\
    \ (start1 === start2 && start2 === end1) return \"YES\";\n  if (start1 === start2\
    \ && start2 === end1) return \"YES\";\n  if (start1 === start2 && start2 === end1)\
    \ return \"YES\";\n  if (start1 === start2 && start2 === end1) return \"YES\"\
    ;\n  if (start1 === start2 && start2 === ", "  let [start1, end1] = interval1\n\
    \  let [start2, end2] = interval2\n  let start1LessOrEqualEnd2 = start1 <= end2\
    \ && start2 <= end1\n  let start2LessOrEqualEnd1 = start2 <= end1 && start1 <=\
    \ end2\n  if (start1LessOrEqualEnd2 && start2LessOrEqualEnd1) return \"YES\"\n\
    \  if (start1LessOrEqualEnd2 && !start2LessOrEqualEnd1) return \"NO\"\n  if (!start1LessOrEqualEnd2\
    \ && start2LessOrEqualEnd1) return \"NO\"\n  return \"NO\"\n}\n", "  let [start1,\
    \ end1] = interval1;\n  let [start2, end2] = interval2;\n  if (start1 < end2 &&\
    \ start2 < end1) {\n    if (start2 >= start1 && end2 <= end1) {\n      return\
    \ \"YES\";\n    }\n    return \"NO\";\n  }\n  return \"NO\";\n}\n", "  if (interval1[0]\
    \ > interval2[0]) {\n    let temp = interval1[0];\n    interval1[0] = interval2[0];\n\
    \    interval2[0] = temp;\n  }\n  if (interval1[1] < interval2[1]) {\n    let\
    \ temp = interval1[1];\n    interval1[1] = interval2[1];\n    interval2[1] = temp;\n\
    \  }\n  let result = [];\n  let result1 = [];\n  let result2 = [];\n  let result3\
    \ = [];\n  let result4 = [];\n  for (let i = 0; i < interval1.length; i++) {\n\
    \    result1.push(interval1[i]);\n    result2.push(interval2[i]);\n  }\n  for\
    \ (let i = 0; i < result1.length; i++) {\n    for (let j = 0; j < result2.length;\
    \ j++) {\n      if (result1[i] === result2[j]) {\n        result.push(result1[i]);\n\
    \      }\n    }\n  }\n  for (let i = 0; i < result.length; i++) {\n    for (let\
    \ j = 0; j < result3.length; j++) {\n      if (result[i] === result3[j]) {\n \
    \       result4.push(result[i]);\n      }\n    }\n  }\n  for (let i = 0; i < result4.length;\
    \ i++) {\n    for (let j = 0; j < result4.length; j++) {\n      if (result4[i]\
    \ === result4[j]) {\n        result3.push(result4[i]);\n      }\n    }\n  }\n\
    \  for (let i = 0; i < result3.length; i++) {\n    for (let j = 0; j < result3.length;\
    \ j++) {\n      if (result3[i] === result3[j]) {\n        result2.push(result3[i]);\n\
    \      }\n    }\n  }\n  for (let i = 0; i < result2.length; i++) {\n    for (let\
    \ j = 0; j < result2.length; j++) {\n      if (result2[i] === result2[j]) {\n\
    \        result1.push(result2[i]);\n      }\n    }\n  }\n  for (let i = 0; i <\
    \ result1.length; i++) {\n    for (let j = 0; j < result1.length; j++) {\n   \
    \   if (result1[i] === result1[j]) {\n        return \"NO\";\n      }\n    }\n\
    \  }\n  return \"YES\";\n}\n", "  let [start1, end1] = interval1;\n  let [start2,\
    \ end2] = interval2;\n  if (start1 < end2 && start2 < end1) {\n    if (start1\
    \ < start2) {\n      return \"NO\";\n    }\n    if (end1 > end2) {\n      return\
    \ \"NO\";\n    }\n    if (start1 < end2 && end1 < end2) {\n      return \"YES\"\
    ;\n    }\n    return \"NO\";\n  }\n  return \"NO\";\n}\n", "  let [start1, end1]\
    \ = interval1\n  let [start2, end2] = interval2\n  let start1LessOrEqualEnd2 =\
    \ start1 <= end2 && start2 <= end1\n  let start2LessOrEqualEnd1 = start2 <= end1\
    \ && start1 <= end2\n  let startLessOrEqualEnd1 = start1 <= end1 && start2 <=\
    \ end1\n  let startLessOrEqualEnd2 = start2 <= end2 && start1 <= end2\n  let startLessOrEqualEnd1LessOrEqualEnd2\
    \ = startLessOrEqualEnd1 && startLessOrEqualEnd2\n  let startLessOrEqualEnd2LessOrEqualEnd1\
    \ = startLessOrEqualEnd2 && startLessOrEqualEnd1\n  let startLessOrEqualEnd1LessOrEqualEnd2LessOrEqualEnd2\
    \ = startLessOrEqualEnd1LessOrEqualEnd2 && startLessOrEqualEnd2LessOrEqualEnd1\n\
    \  let startLessOrEqualEnd2LessOrEqualEnd1LessOrEqualEnd2 = startLessOrEqualEnd2LessOrEqualEnd1\
    \ && startLessOrEqualEnd1LessOrEqualEnd2\n  let startLessOrEqualEnd1LessOrEqualEnd2LessOrEqualEnd1LessOrEqualEnd2\
    \ = startLessOrEqualEnd1LessOrEqualEnd2LessOrEqualEnd1 && startLessOrEqualEnd2LessOrEqualEnd1LessOrEqualEnd2\n\
    \  let startLessOrEqualEnd2LessOrEqualEnd1LessOrEqualEnd2LessOrEqualEnd1LessOrEqualEnd2\
    \ = startLessOrEqualEnd2LessOrEqualEnd1LessOrEqualEnd2LessOrEqualEnd1 && startLessOrEqualEnd1LessOrEqualEnd2LessOrEqualEnd1LessOrEqualEnd2\n\
    \  let startLessOrEqualEnd1LessOrEqualEnd2LessOrEqualEnd1LessOrEqualEnd2LessOrEqualEnd1LessOrEqualEnd2\
    \ = startLessOrEqualEnd1LessOrEqualEnd2LessOrEqualEnd1LessOrEqualEnd2LessOrEqualEnd1\
    \ && startLessOrEqualEnd2LessOrEqualEnd1LessOrEqualEnd2LessOrEqualEnd1LessOrEqualEnd2\n\
    \  let startLessOrEqualEnd2LessOrEqualEnd1LessOrEqualEnd2LessOrEqualEnd1LessOrEqualEnd2LessOrEqualEnd1LessOrEqualEnd2\
    \ = startLessOrEqualEnd2LessOrEqualEnd1LessOrEqualEnd2LessOrEqualEnd1LessOrEqualEnd2LessOrEqualEnd1\
    \ && startLessOrEqualEnd1LessOrEqualEnd2LessOrEqualEnd1", "  if (interval1[0]\
    \ > interval2[1] || interval1[1] < interval2[0]) {\n    return \"NO\";\n  }\n\
    \  let result = 0;\n  for (let i = interval1[0]; i <= interval1[1]; i++) {\n \
    \   for (let j = interval2[0]; j <= interval2[1]; j++) {\n      if (i === j) {\n\
    \        continue;\n      }\n      result += Math.pow(i, j);\n    }\n  }\n  if\
    \ (result % 1 === 0) {\n    return \"YES\";\n  }\n  return \"NO\";\n}\n", "  if\
    \ (interval1[0] > interval2[1]) {\n    return `NO`;\n  }\n  if (interval1[1] <\
    \ interval2[0]) {\n    return `NO`;\n  }\n  if (interval1[0] === interval1[1])\
    \ {\n    return `YES`;\n  }\n  if (interval2[0] === interval2[1]) {\n    return\
    \ `YES`;\n  }\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n\
    \  const start1End = start1 + end1;\n  const start2End = start2 + end2;\n  const\
    \ start1Start2 = start1 - start2;\n  const start2Start1 = start2 - start1;\n \
    \ const end1End2 = end1 - end2;\n  const end2End1 = end2 - end1;\n  const start1End2Start1\
    \ = start1End + start2Start1;\n  const start2End1Start2 = start2End + start1Start2;\n\
    \  const end1End2End2 = end1End2 + end2End1;\n  const end2End1End2 = end2End1\
    \ + end1End2;\n  const start1End2End2Start1 = start1End2End2 + start2End1Start2;\n\
    \  const start2End1End2End2 = start2End1End2 + end1End2End2;\n  const end1End2End2End1\
    \ = end1End2End2 + end2End1End2;\n  const start1End2End2End2Start1 = start1End2End2End2\
    \ + start2End1End2End2;\n  const start2End1End2End2End1 = start2End1End2End2 +\
    \ end1End2End2End2;\n  const end1End2End2End2End1 = end1End2End2End2 + end2End1End2End2End1;\n\
    \  const start1End2End2End2End2Start1 = start1End2End2End2End2 + start2End1End2End2End2End1;\n\
    \  const start2End1End2End2End2End1 = start2End1End2End2End2End2 + end1End2End2End2End2End1;\n\
    \  const end1End2End2End2End2End1 = end1End2End2End2End2End2 + end2End1End2End2End2End2End1;\n\
    \  const start1End2End2End2End2End2Start1 = start1End2End2End2End2End2End2 + start2End1End2End2End",
  "  let interval1Start = interval1[0];\n  let interval1End = interval1[1];\n  let\
    \ interval2Start = interval2[0];\n  let interval2End = interval2[1];\n\n  if (interval1Start\
    \ > interval2Start || interval1End < interval2End) {\n    return \"NO\";\n  }\n\
    \n  let intersectionStart = Math.min(interval1Start, interval2Start);\n  let intersectionEnd\
    \ = Math.max(interval1End, interval2End);\n\n  if (intersectionStart > intersectionEnd)\
    \ {\n    return \"NO\";\n  }\n\n  if (intersectionStart === intersectionEnd) {\n\
    \    return \"YES\";\n  }\n\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(intersectionEnd);\
    \ i++) {\n    if (intersectionStart % i === 0) {\n      isPrime = false;\n   \
    \   break;\n    }\n  }\n\n  return isPrime ? \"YES\" : \"NO\";\n}\n", "  const\
    \ [start1, end1] = interval1\n  const [start2, end2] = interval2\n  const start1LessOrEqualEnd2\
    \ = start1 <= end2 && start2 <= end1\n  const start2LessOrEqualEnd1 = start2 <=\
    \ end1 && start1 <= end2\n  const start1LessOrEqualEnd2AndStart2LessOrEqualEnd1\
    \ = start1 <= end2 && start2 <= end1 && start2 <= end1\n  const start2LessOrEqualEnd1AndStart1LessOrEqualEnd2\
    \ = start2 <= end1 && start1 <= end2 && start2 <= end1\n  const start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart1LessOrEqualEnd2\
    \ = start1 <= end2 && start2 <= end1 && start2 <= end1 && start1 <= end2\n  const\
    \ start2LessOrEqualEnd1AndStart1LessOrEqualEnd2AndStart2LessOrEqualEnd1 = start2\
    \ <= end1 && start1 <= end2 && start2 <= end1 && start1 <= end2\n  const start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart1LessOrEqualEnd2AndStart2LessOrEqualEnd1\
    \ = start1 <= end2 && start2 <= end1 && start2 <= end1 && start1 <= end2 && start2\
    \ <= end1\n  const start2LessOrEqualEnd1AndStart1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart1LessOrEqualEnd2AndStart2LessOrEqualEnd1\
    \ = start2 <= end1 && start1 <= end2 && start2 <= end1 && start1 <= end2 && start2\
    \ <= end1 && start1 <= end2\n  const start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart1LessOrEqualEnd2AndStart2LessOrEqualEnd1\
    \ = start1 <= end2 && start2 <= end1 && start2 <= end1 && start1 <= end2 && start2\
    \ <= end1 && start1 <= end2 && start2 <= end1\n  const start2LessOrEqualEnd1AndStart1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart1LessOrEqualEnd2AndStart2LessOrEqualEnd1\
    \ = start2 <= end1 && start1 <= end2 && start2 <= end1 && start1 <= end2 && start2\
    \ <= end1 && start1 <= end2 && start2 <= end1\n  const start1LessOrEqualEnd2AndStart2LessOrEqualEnd1",
  "  let [start1, end1] = interval1\n  let [start2, end2] = interval2\n  if (start1\
    \ <= end2 && start2 <= end1) {\n    if (start1 <= start2 && end1 <= end2) {\n\
    \      return \"YES\"\n    } else {\n      return \"NO\"\n    }\n  } else {\n\
    \    return \"NO\"\n  }\n}\n", "  let [start1, end1] = interval1;\n  let [start2,\
    \ end2] = interval2;\n  let start1LessOrEqualEnd2 = start1 < end2 && start2 <\
    \ end1;\n  let start2LessOrEqualEnd1 = start2 < end1 && start1 < end2;\n  let\
    \ start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 = start1 < end2 && start2 < end1\
    \ && start1 < end2;\n  let start1LessOrEqualEnd2AndStart2LessOrEqualEnd2 = start1\
    \ < end2 && start2 < end1 && start1 < end2;\n  let start1LessOrEqualEnd2AndStart2LessOrEqualEnd3\
    \ = start1 < end2 && start2 < end1 && start1 < end2;\n  let start1LessOrEqualEnd2AndStart2LessOrEqualEnd4\
    \ = start1 < end2 && start2 < end1 && start1 < end2;\n  let start1LessOrEqualEnd2AndStart2LessOrEqualEnd5\
    \ = start1 < end2 && start2 < end1 && start1 < end2;\n  let start1LessOrEqualEnd2AndStart2LessOrEqualEnd6\
    \ = start1 < end2 && start2 < end1 && start1 < end2;\n  let start1LessOrEqualEnd2AndStart2LessOrEqualEnd7\
    \ = start1 < end2 && start2 < end1 && start1 < end2;\n  let start1LessOrEqualEnd2AndStart2LessOrEqualEnd8\
    \ = start1 < end2 && start2 < end1 && start1 < end2;\n  let start1LessOrEqualEnd2AndStart2LessOrEqualEnd9\
    \ = start1 < end2 && start2 < end1 && start1 < end2;\n  let start1LessOrEqualEnd2AndStart2LessOrEqualEnd10\
    \ = start1 < end2 && start2 < end1 && start1 < end2;\n  let start1LessOrEqualEnd2AndStart2LessOrEqualEnd11\
    \ = start1 < end2 && start2 < end1 && start1 < end2;\n  let start1LessOrEqualEnd2AndStart2LessOrEqualEnd12\
    \ = start1 < end2 && start2 < end1 && start1 < end2;\n  let start1LessOrEqualEnd2AndStart2LessOrEqualEnd13\
    \ = start1 < end2 && start2 < end1 && start1 < end2;\n  let start1LessOrEqualEnd2AndStart2LessOrEqualEnd14\
    \ = start1 < end2 && start2 < end1 && start1 < end2;\n  let start1LessOrEqualEnd2AndStart2LessOrEqualEnd15\
    \ = start1 < end2 && start2 < end1 && start1 < end2;\n  let start1LessOrEqualEnd2AndStart2LessOrEqualEnd16\
    \ = start1 < end2 && start", "  let [start1, end1] = interval1;\n  let [start2,\
    \ end2] = interval2;\n  if (start1 < start2) {\n    [start1, start2] = [start2,\
    \ start1];\n  }\n  if (end1 < end2) {\n    [end1, end2] = [end2, end1];\n  }\n\
    \  if (start1 > end2) {\n    return \"NO\";\n  }\n  if (start2 === end2) {\n \
    \   return \"NO\";\n  }\n  if (start1 === end1) {\n    return \"NO\";\n  }\n \
    \ let startIntersection = start1;\n  let endIntersection = end1;\n  let lengthIntersection\
    \ = end1 - start1;\n  let startIntersection2 = start2;\n  let endIntersection2\
    \ = end2;\n  let lengthIntersection2 = end2 - start2;\n  while (startIntersection\
    \ < endIntersection) {\n    if (startIntersection2 === endIntersection2) {\n \
    \     return \"NO\";\n    }\n    if (startIntersection2 > endIntersection2) {\n\
    \      return \"NO\";\n    }\n    if (startIntersection2 === startIntersection)\
    \ {\n      startIntersection2 += 1;\n      endIntersection2 += 1;\n      lengthIntersection2\
    \ += 1;\n      continue;\n    }\n    if (startIntersection2 === endIntersection2)\
    \ {\n      startIntersection2 += 1;\n      endIntersection2 += 1;\n      lengthIntersection2\
    \ += 1;\n      continue;\n    }\n    if (startIntersection2 > startIntersection)\
    \ {\n      startIntersection2 += 1;\n      lengthIntersection2 += 1;\n      continue;\n\
    \    }\n    if (startIntersection2 === startIntersection) {\n      startIntersection2\
    \ += 1;\n      lengthIntersection2 += 1;\n      continue;\n    }\n    if (startIntersection2\
    \ === endIntersection2) {\n      startIntersection2 += 1;\n      lengthIntersection2\
    \ += 1;\n      continue;\n    }\n    if (startIntersection2 < startIntersection)\
    \ {\n      startIntersection2 += 1;\n      lengthIntersection2 += 1;\n      continue;\n\
    \    }\n    if (startIntersection2 > endIntersection2) {\n      endIntersection2\
    \ += 1;\n      lengthIntersection2 += 1;\n      continue;\n    }\n    if (startIntersection2\
    \ === endIntersection2) {\n      endIntersection2 += 1;\n      lengthIntersection2\
    \ += 1;\n      continue;\n    }\n    if (startIntersection2 < endIntersection)\
    \ {\n      endIntersection2 += 1;\n      lengthIntersection2 += 1;\n      continue;\n\
    \    }\n    if (startIntersection2 > endIntersection2) {\n      endIntersection2\
    \ += 1;", "  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n\
    \  const [start3, end3] = interval1;\n  const [start4, end4] = interval2;\n  const\
    \ [start5, end5] = interval1;\n  const [start6, end6] = interval2;\n  const [start7,\
    \ end7] = interval1;\n  const [start8, end8] = interval2;\n  const [start9, end9]\
    \ = interval1;\n  const [start10, end10] = interval2;\n  const [start11, end11]\
    \ = interval1;\n  const [start12, end12] = interval2;\n  const [start13, end13]\
    \ = interval1;\n  const [start14, end14] = interval2;\n  const [start15, end15]\
    \ = interval1;\n  const [start16, end16] = interval2;\n  const [start17, end17]\
    \ = interval1;\n  const [start18, end18] = interval2;\n  const [start19, end19]\
    \ = interval1;\n  const [start20, end20] = interval2;\n  const [start21, end21]\
    \ = interval1;\n  const [start22, end22] = interval2;\n  const [start23, end23]\
    \ = interval1;\n  const [start24, end24] = interval2;\n  const [start25, end25]\
    \ = interval1;\n  const [start26, end26] = interval2;\n  const [start27, end27]\
    \ = interval1;\n  const [start28, end28] = interval2;\n  const [start29, end29]\
    \ = interval1;\n  const [start30, end30] = interval2;\n  const [start31, end31]\
    \ = interval1;\n  const [start32, end32] = interval2;\n  const [start33, end33]\
    \ = interval1;\n  const [start34, end34] = interval2;\n  const [start35, end35]\
    \ = interval1;\n  const [start36, end36] = interval2;\n  const [start37, end37]\
    \ = interval1;\n  const [start38, end38] = interval2;\n  const [start39, end39]\
    \ = interval1;\n  const [start40, end40] = interval2;\n  const [start41, end41]\
    \ = interval1;\n  const [start42, end42] = interval2;\n  const [start43, end43]\
    \ = interval1;\n  const [start44, end44] = interval2;\n  const [start45, end45]\
    \ = interval1;\n  const [start46, end46] = interval2;\n  const [start47, end47]\
    \ = interval1;\n  const [start48, end48] = interval2;\n  const [start49, end49]\
    \ = interval1;\n  const [start50, end50] = interval2;\n  const [start51, end51]\
    \ = interval1;\n  const [start", "  let [start1, end1] = interval1\n  let [start2,\
    \ end2] = interval2\n  let start1LessOrEqualEnd1 = start1 <= end1\n  let start2LessOrEqualEnd2\
    \ = start2 <= end2\n  if (start1LessOrEqualEnd1 && start2LessOrEqualEnd2) {\n\
    \    if (start1 <= start2) {\n      return \"NO\"\n    } else {\n      return\
    \ \"YES\"\n    }\n  }\n  if (start1LessOrEqualEnd1 && !start2LessOrEqualEnd2)\
    \ {\n    return \"NO\"\n  }\n  if (!start1LessOrEqualEnd1 && start2LessOrEqualEnd2)\
    \ {\n    return \"NO\"\n  }\n  return \"YES\"\n}\n", "  const [start1, end1] =\
    \ interval1;\n  const [start2, end2] = interval2;\n  if (start1 < end2 && start2\
    \ < end1) {\n    return `YES`;\n  }\n  if (start1 < end2 && start2 < end1) {\n\
    \    return `NO`;\n  }\n  if (start1 < end2 && start2 < end1) {\n    return `NO`;\n\
    \  }\n  return `NO`;\n}\n", "  const [start1, end1] = interval1\n  const [start2,\
    \ end2] = interval2\n  if (start1 > end2) return \"NO\"\n  if (start2 > end1)\
    \ return \"NO\"\n  if (start1 < start2) return \"NO\"\n  if (start2 < start1)\
    \ return \"NO\"\n  if (start1 < end2 && start2 < end1) return \"NO\"\n  if (start1\
    \ < end2 && start2 > end1) return \"NO\"\n  if (start2 < end1 && start1 > end2)\
    \ return \"NO\"\n  if (start2 < end1 && start2 > end1) return \"NO\"\n  if (start1\
    \ < end2 && start2 < end1 && start2 < end2) return \"YES\"\n  return \"NO\"\n\
    }\n", "  const [interval1Start, interval1End] = interval1;\n  const [interval2Start,\
    \ interval2End] = interval2;\n  if (interval1Start > interval1End) {\n    return\
    \ `NO`;\n  }\n  if (interval2Start > interval2End) {\n    return `NO`;\n  }\n\
    \  if (interval1Start === interval1End) {\n    return `NO`;\n  }\n  if (interval2Start\
    \ === interval2End) {\n    return `NO`;\n  }\n  if (interval1Start > interval2Start)\
    \ {\n    return `NO`;\n  }\n  if (interval1Start === interval2Start) {\n    return\
    \ `YES`;\n  }\n  if (interval1Start < interval2Start) {\n    return `YES`;\n \
    \ }\n  return `YES`;\n}\n", "  const [start1, end1] = interval1;\n  const [start2,\
    \ end2] = interval2;\n  if (start1 > end2) return \"NO\";\n  if (start2 > end1)\
    \ return \"NO\";\n  if (start1 < start2) return \"NO\";\n  if (start2 < start1)\
    \ return \"NO\";\n  if (start1 > end1 && start2 > end2) return \"NO\";\n  if (start1\
    \ < start2 && start2 < start1) return \"NO\";\n  if (start1 > end1 && start2 <\
    \ end2) return \"NO\";\n  if (start1 < start2 && start2 > end2) return \"NO\"\
    ;\n  if (start1 > end1 && start2 > end2 && start1 < end2) return \"NO\";\n  if\
    \ (start1 < start2 && start2 < end2 && start1 > end2) return \"NO\";\n  if (start1\
    \ < start2 && start2 < end2 && start1 > end1 && start2 > end2) return \"NO\";\n\
    \  if (start1 < start2 && start2 < end2 && start1 > end1 && start2 > end1 && start2\
    \ < end2) return \"NO\";\n  if (start1 < start2 && start2 < end2 && start1 > end1\
    \ && start2 > end1 && start2 < end2 && start1 < end2) return \"NO\";\n  if (start1\
    \ < start2 && start2 < end2 && start1 > end1 && start2 > end1 && start2 < end2\
    \ && start1 < end2 && start2 > end2) return \"NO\";\n  if (start1 < start2 &&\
    \ start2 < end2 && start1 > end1 && start2 > end1 && start2 < end2 && start1 <\
    \ end2 && start2 > end1 && start2 > end2) return \"NO\";\n  if (start1 < start2\
    \ && start2 < end2 && start1 > end1 && start2 > end1 && start2 < end2 && start1\
    \ < end2 && start2 > end1 && start2 > end1 && start2 > end2) return \"NO\";\n\
    \  if (start1 < start2 && start2 < end2 && start1 > end1 && start2 > end1 && start2\
    \ < end2 && start1 < end2 && start2 > end1 && start2 > end1 && start2 > end2 &&\
    \ start1 < end2) return \"NO\";\n  if (start1 < start2 && start2 < end2 && start1\
    \ > end1 && start2 > end1 && start2 < end2 && start1 < end2 && start2 > end1 &&\
    \ start2 > end1 && start2 > end2 && start1 < end2 && start2 > end2) return \"\
    NO\";\n  if (start1 < start2 && start2 < end2 && start1 > end1 && start2 > end1\
    \ && start2 < end2 && start1 < end2 && start2 > end1 && start2 > end1 && start2\
    \ > end2 && start1 < end2 && start2 > end", "  if (interval1[0] >= interval1[1]\
    \ || interval2[0] >= interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0]\
    \ < interval1[1] && interval2[0] < interval2[1]) {\n    return \"YES\";\n  }\n\
    \  if (interval1[0] < interval1[1] && interval2[0] >= interval2[1]) {\n    return\
    \ \"NO\";\n  }\n  if (interval1[0] >= interval1[1] && interval2[0] < interval2[1])\
    \ {\n    return \"NO\";\n  }\n  if (interval1[0] >= interval1[1] && interval2[0]\
    \ >= interval2[1]) {\n    return \"YES\";\n  }\n}\n", "  if (interval1[0] > interval2[1])\
    \ {\n    return intersection(interval2, interval1)\n  }\n  if (interval1[1] <\
    \ interval2[0]) {\n    return intersection(interval1, interval2)\n  }\n  if (interval1[0]\
    \ === interval1[1]) {\n    return \"NO\"\n  }\n  if (interval2[0] === interval2[1])\
    \ {\n    return \"NO\"\n  }\n  if (interval1[0] === interval2[0]) {\n    return\
    \ \"YES\"\n  }\n  let start1 = interval1[0]\n  let end1 = interval1[1]\n  let\
    \ start2 = interval2[0]\n  let end2 = interval2[1]\n  let startIntersection =\
    \ start1\n  let endIntersection = end1\n  while (startIntersection < endIntersection)\
    \ {\n    if (start1 < start2 && end1 < end2) {\n      startIntersection += start2\n\
    \      endIntersection += end2\n    } else if (start1 < start2 && end1 > end2)\
    \ {\n      startIntersection += start2\n      endIntersection -= end2\n    } else\
    \ if (start1 > start2 && end1 > end2) {\n      startIntersection -= start2\n \
    \     endIntersection -= end2\n    } else if (start1 > start2 && end1 < end2)\
    \ {\n      startIntersection -= start2\n      endIntersection += end2\n    }\n\
    \  }\n  if (startIntersection === endIntersection) {\n    return \"YES\"\n  }\n\
    \  return \"NO\"\n}\n", "  if (interval1[0] > interval1[1] || interval2[0] > interval2[1])\
    \ {\n    return \"NO\";\n  }\n  if (interval1[0] < interval1[1] && interval2[0]\
    \ < interval2[1]) {\n    return \"YES\";\n  }\n  let i1Start = interval1[0];\n\
    \  let i1End = interval1[1];\n  let i2Start = interval2[0];\n  let i2End = interval2[1];\n\
    \  let i1Length = i1End - i1Start;\n  let i2Length = i2End - i2Start;\n  if (i1Start\
    \ > i2Start || i1End < i2End) {\n    return \"NO\";\n  }\n  if (i1Start < i2Start\
    \ && i1End > i2End) {\n    return \"YES\";\n  }\n  if (i1Start < i2Start && i1End\
    \ < i2End) {\n    if (i1Start > i2Start) {\n      i1Start = i1Start + 1;\n   \
    \ }\n    if (i1End < i2End) {\n      i1End = i1End + 1;\n    }\n  }\n  if (i1Start\
    \ > i2Start && i1End < i2End) {\n    if (i1Start < i2Start) {\n      i1Start =\
    \ i1Start - 1;\n    }\n    if (i1End > i2End) {\n      i1End = i1End - 1;\n  \
    \  }\n  }\n  if (i1Start > i2Start && i1End > i2End) {\n    return \"YES\";\n\
    \  }\n  if (i1Start < i2Start && i1End > i2End) {\n    return \"YES\";\n  }\n\
    \  if (i1Start < i2Start && i1End < i2End) {\n    return \"NO\";\n  }\n  if (i1Start\
    \ > i2Start && i1End > i2End) {\n    return \"NO\";\n  }\n  if (i1Start < i2Start\
    \ && i1End < i2End) {\n    return \"NO\";\n  }\n  return \"NO\";\n}\n", "  if\
    \ (interval1[0] > interval2[1]) {\n    return interval1[0] > interval2[0] ? \"\
    NO\" : \"YES\";\n  }\n  if (interval1[1] < interval2[0]) {\n    return interval1[1]\
    \ < interval2[1] ? \"NO\" : \"YES\";\n  }\n  if (interval1[0] < interval2[0])\
    \ {\n    return interval1[0] < interval2[0] ? \"NO\" : \"YES\";\n  }\n  return\
    \ interval1[0] < interval2[0] ? \"YES\" : \"NO\";\n}\n", "  if (interval1[0] >=\
    \ interval1[1] || interval2[0] >= interval2[1]) {\n    return \"NO\";\n  }\n \
    \ let [start1, end1] = interval1;\n  let [start2, end2] = interval2;\n  let start1End\
    \ = start1 < start2 ? start1 : start2;\n  let end1End = end1 < end2 ? end1 : end2;\n\
    \  let start1Start = start1 < start2 ? start2 : start1;\n  let end1Start = end1\
    \ < end2 ? end2 : end1;\n  let start2End = start2 < start1 ? start2 : start1;\n\
    \  let end2End = end2 < end1 ? end2 : end1;\n  let start2Start = start2 < start1\
    \ ? start1 : start2;\n  let end2Start = end2 < end1 ? end1 : end2;\n  let start1End2\
    \ = start1 < start2 ? end1 : end2;\n  let end1End2 = end1 < end2 ? start1 : start2;\n\
    \  let start2End2 = start2 < start1 ? end1 : end2;\n  let end2End2 = end2 < end1\
    \ ? start1 : start2;\n  let start1End2End = start1 < start2 ? end2 : end1;\n \
    \ let end1End2End = end1 < end2 ? start2 : start1;\n  let start2End2End = start2\
    \ < start1 ? end2 : end1;\n  let end2End2End = end2 < end1 ? start2 : start1;\n\
    \  let start1End2EndEnd = start1 < start2 ? end1 : end2;\n  let end1End2EndEnd\
    \ = end1 < end2 ? start1 : start2;\n  let start2End2EndEnd = start2 < start1 ?\
    \ end1 : end2;\n  let end2End2EndEnd = end2 < end1 ? start1 : start2;\n  let start1End2EndEndEndEnd\
    \ = start1 < start2 ? end2 : end1;\n  let end1End2EndEndEndEnd = end1 < end2 ?\
    \ start2 : start1;\n  let start2End2EndEndEndEnd = start2 < start1 ? end1 : end2;\n\
    \  let end2End2EndEndEndEnd = end2 < end1 ? start1 : start2;\n  let start1End2EndEndEndEndEnd\
    \ = start1 < start2 ? end2 : end1;\n  let end1End2EndEndEndEndEnd = end1 < end2\
    \ ? start2 : start1;\n  let start2End2EndEndEndEndEnd = start2 < start1 ? end1\
    \ : end2;\n  let end2End2EndEndEndEndEnd = end2 < end1 ? start1 : start2;\n  let\
    \ start1End2EndEndEndEndEndEnd = start1 < start2 ? end2 : end1;\n  let end1",
  "  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if\
    \ (start1 < start2) {\n    [start1, start2] = [start2, start1];\n  }\n  if (end1\
    \ < end2) {\n    [end1, end2] = [end2, end1];\n  }\n  if (start1 > end2) {\n \
    \   return \"NO\";\n  }\n  if (start2 === end2) {\n    return \"NO\";\n  }\n \
    \ if (start1 === end1) {\n    return \"YES\";\n  }\n  let startIntersection =\
    \ start1;\n  let endIntersection = end2;\n  while (startIntersection < endIntersection)\
    \ {\n    if (startIntersection === endIntersection) {\n      return \"YES\";\n\
    \    }\n    if (startIntersection % endIntersection === 0) {\n      startIntersection\
    \ += 1;\n      endIntersection += 1;\n    } else {\n      startIntersection +=\
    \ 1;\n    }\n  }\n  return \"NO\";\n}\n", "  const [start1, end1] = interval1;\n\
    \  const [start2, end2] = interval2;\n  const start1LessOrEqualEnd2 = start1 <=\
    \ end2;\n  const start2LessOrEqualEnd1 = start2 <= end1;\n  if (start1LessOrEqualEnd2\
    \ && start2LessOrEqualEnd1) {\n    return `YES`;\n  }\n  if (start1LessOrEqualEnd2\
    \ && !start2LessOrEqualEnd1) {\n    return `NO`;\n  }\n  if (!start1LessOrEqualEnd2\
    \ && start2LessOrEqualEnd1) {\n    return `NO`;\n  }\n  return `NO`;\n}\n", " \
    \ const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if\
    \ (start1 <= end2 && start2 <= end1) {\n    if (start1 <= start2 && end1 <= end2)\
    \ {\n      return \"YES\";\n    }\n    return \"NO\";\n  }\n  return \"NO\";\n\
    }\n", "  if (interval1[0] > interval2[1] || interval1[1] < interval2[0]) {\n \
    \   return \"NO\";\n  }\n\n  let intersection: number[] = [];\n  for (let i =\
    \ interval1[0]; i <= interval1[1]; i++) {\n    for (let j = interval2[0]; j <=\
    \ interval2[1]; j++) {\n      if (i === j) {\n        intersection.push(i);\n\
    \      }\n    }\n  }\n\n  if (intersection.length % 2 === 0) {\n    return \"\
    YES\";\n  }\n\n  return \"NO\";\n}\n", "  const [start1, end1] = interval1;\n\
    \  const [start2, end2] = interval2;\n  if (start1 > end2) return \"NO\";\n  if\
    \ (start2 > end1) return \"NO\";\n  if (start1 <= end2 && start2 <= end1) return\
    \ \"YES\";\n  return \"NO\";\n}\n", "  if (interval1[0] > interval2[1] || interval1[1]\
    \ < interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[0] >= interval2[0]\
    \ && interval1[1] <= interval2[1]) {\n    return \"YES\";\n  }\n  let start1 =\
    \ interval1[0];\n  let end1 = interval1[1];\n  let start2 = interval2[0];\n  let\
    \ end2 = interval2[1];\n  let result = [];\n  while (start1 <= end1 && start2\
    \ <= end2) {\n    if (start1 < start2) {\n      result.push(start1);\n      start1++;\n\
    \    } else {\n      result.push(start2);\n      start2++;\n    }\n  }\n  if (start1\
    \ > end1 && start2 > end2) {\n    return \"NO\";\n  }\n  if (start1 < start2 &&\
    \ end1 < end2) {\n    return \"NO\";\n  }\n  if (start1 > end1 && start2 < end2)\
    \ {\n    return \"NO\";\n  }\n  if (start1 < start2 && end1 > end2) {\n    return\
    \ \"NO\";\n  }\n  if (start1 > end1 && start2 > end2) {\n    return \"NO\";\n\
    \  }\n  if (start1 < start2 && end1 < end2) {\n    return \"NO\";\n  }\n  if (start1\
    \ > end1 && start2 < end2) {\n    return \"NO\";\n  }\n  if (start1 < start2 &&\
    \ end1 > end2) {\n    return \"NO\";\n  }\n  if (start1 > end1 && start2 > end2)\
    \ {\n    return \"NO\";\n  }\n  if (start1 < start2 && end1 < end2) {\n    return\
    \ \"NO\";\n  }\n  if (start1 > end1 && start2 < end2) {\n    return \"NO\";\n\
    \  }\n  if (start1 < start2 && end1 > end2) {\n    return \"NO\";\n  }\n  if (start1\
    \ > end1 && start2 > end2) {\n    return \"NO\";\n  }\n  if (start1 < start2 &&\
    \ end1 < end2) {\n    return \"NO\";\n  }\n  if (start1 > end1 && start2 < end2)\
    \ {\n    return \"NO\";\n  }\n  if (start1 < start2 && end1 > end2) {\n    return\
    \ \"NO\";\n  }\n  if (start1 > end1 && start2 > end2) {\n    return \"NO\";\n\
    \  }\n  if (start1 < start2 && end1 < end2) {\n    return \"NO\";\n  }\n  if (start1\
    \ > end1 && start2 < end2) {\n    return \"NO\";\n  }\n  if (start1 < start2 &&\
    \ end1 > end2) {\n    return \"NO\";\n  }\n  if (start1 > end1 && start2 > end2)\
    \ {\n    return \"NO\";\n  }\n  if (start1 < start2 && end1 < end2) {\n    return\
    \ \"NO\";\n  }\n  if (start1 > end1 && start2 < end2) {\n    return \"NO\";\n\
    \  }\n  if (start1 < start2 && end1 > end2) {\n    return \"NO\";", "  const [start1,\
    \ end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 <= end2\
    \ && start2 <= end1) {\n    if (start1 < start2) {\n      return \"NO\";\n   \
    \ }\n    if (start1 > end2) {\n      return \"YES\";\n    }\n    if (end1 < end2)\
    \ {\n      return \"NO\";\n    }\n    return \"YES\";\n  }\n  return \"NO\";\n\
    }\n", "  let [start1, end1] = interval1;\n  let [start2, end2] = interval2;\n\
    \  let startIntersection = start1 < start2 ? start1 : start2;\n  let endIntersection\
    \ = end1 < end2 ? end1 : end2;\n  let startIntersectionIndex = startIntersection;\n\
    \  let endIntersectionIndex = endIntersection;\n  let startIntersectionLength\
    \ = endIntersectionIndex - startIntersectionIndex;\n  let endIntersectionLength\
    \ = endIntersectionIndex - startIntersectionIndex;\n  let startIntersectionPrime\
    \ = startIntersectionIndex === startIntersectionLength;\n  let endIntersectionPrime\
    \ = endIntersectionIndex === endIntersectionLength;\n  if (startIntersectionPrime\
    \ && endIntersectionPrime) {\n    return \"YES\";\n  }\n  if (startIntersectionPrime\
    \ && !endIntersectionPrime) {\n    return \"NO\";\n  }\n  if (!startIntersectionPrime\
    \ && endIntersectionPrime) {\n    return \"NO\";\n  }\n  return \"NO\";\n}\n",
  "  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if\
    \ (start1 < start2) {\n    const temp = start1;\n    start1 = start2;\n    start2\
    \ = temp;\n  }\n  if (end1 < end2) {\n    const temp = end1;\n    end1 = end2;\n\
    \    end2 = temp;\n  }\n  if (start1 > end2) {\n    return \"NO\";\n  }\n  if\
    \ (start2 === end2) {\n    return \"NO\";\n  }\n  if (start1 === start2) {\n \
    \   return \"NO\";\n  }\n  if (start1 < end1 && end1 < end2) {\n    const temp1\
    \ = start1;\n    const temp2 = end1;\n    start1 = end1;\n    end1 = temp1;\n\
    \    end2 = temp2;\n  }\n  if (start1 < end1 && start2 < end2) {\n    const temp1\
    \ = start1;\n    const temp2 = end1;\n    start1 = end1;\n    end1 = temp1;\n\
    \    start2 = end2;\n    end2 = temp2;\n  }\n  if (start1 < end1 && start2 > end2)\
    \ {\n    const temp1 = start1;\n    const temp2 = end1;\n    start1 = end1;\n\
    \    end1 = temp1;\n    start2 = end2;\n    end2 = temp2;\n  }\n  if (start1 >\
    \ end1 && end1 < end2) {\n    const temp1 = start1;\n    const temp2 = end1;\n\
    \    start1 = end1;\n    end1 = temp1;\n    end2 = temp2;\n  }\n  if (start1 >\
    \ end1 && start2 > end2) {\n    const temp1 = start1;\n    const temp2 = end1;\n\
    \    start1 = end1;\n    end1 = temp1;\n    start2 = end2;\n    end2 = temp2;\n\
    \  }\n  if (start1 < end1 && end1 > end2) {\n    const temp1 = start1;\n    const\
    \ temp2 = end1;\n    start1 = end1;\n    end1 = temp1;\n    end2 = temp2;\n  }\n\
    \  if (start1 > end1 && start2 < end2) {\n    const temp1 = start1;\n    const\
    \ temp2 = end1;\n    start1 = end1;\n    end1 = temp1;\n    start2 = end2;\n \
    \   end2 = temp2;\n  }\n  if (start1 > end1 && start2 > end2) {\n    const temp1\
    \ = start1;\n    const temp2 = end1;\n    start1 = end1;\n    end1 = temp1;\n\
    \    start2 = end2;\n    end2 = temp2;\n  }\n  if (start1 < end1 && end1 > end2)\
    \ {\n    const temp1 = start1;\n    const temp2 = end1;\n    start1 = end1;\n\
    \    end1 = temp1;\n    end2 = temp2;\n  }\n  if (start1 > end1 && start2 > end2)\
    \ {\n    const temp1 = start1;\n    const temp2 = end1;\n    start1 = end1;\n\
    \    end1 = temp", "  const [start1, end1] = interval1;\n  const [start2, end2]\
    \ = interval2;\n  if (start1 > end2) return \"NO\";\n  if (start2 > end1) return\
    \ \"NO\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1\
    \ === start2 && end1 !== end2) return \"NO\";\n  if (start1 !== start2 && end1\
    \ === end2) return \"NO\";\n  if (start1 === start2 && end1 !== end2) return \"\
    NO\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1\
    \ === start2 && end1 !== end2) return \"NO\";\n  if (start1 !== start2 && end1\
    \ === end2) return \"NO\";\n  if (start1 === start2 && end1 !== end2) return \"\
    NO\";\n  if (start1 !== start2 && end1 === end2) return \"NO\";\n  if (start1\
    \ === start2 && end1 !== end2) return \"NO\";\n  if (start1 !== start2 && end1\
    \ === end2) return \"NO\";\n  if (start1 === start2 && end1 !== end2) return \"\
    NO\";\n  if (start1 !== start2 && end1 === end2) return \"NO\";\n  if (start1\
    \ === start2 && end1 !== end2) return \"NO\";\n  if (start1 !== start2 && end1\
    \ === end2) return \"NO\";\n  if (start1 === start2 && end1 !== end2) return \"\
    NO\";\n  if (start1 !== start2 && end1 === end2) return \"NO\";\n  if (start1\
    \ === start2 && end1 !== end2) return \"NO\";\n  if (start1 !== start2 && end1\
    \ === end2) return \"NO\";\n  if (start1 === start2 && end1 !== end2) return \"\
    NO\";\n  if (start1 !== start2 && end1 === end2) return \"NO\";\n  if (start1\
    \ === start2 && end1 !== end2) return \"NO\";\n  if (start1 !== start2 && end1\
    \ === end2) return \"NO\";\n  if (start1 === start2 && end1 !== end2) return \"\
    NO\";\n  if (start1 !== start2 && end1 === end2) return \"NO\";\n  if (start1\
    \ === start2 && end1 !== end2) return \"NO\";\n  if (start1 !== start2 && end1\
    \ === end2) return \"NO\";\n  if (start1 === start2 && end1 !== end2) return \"\
    NO\";\n  if (start1 !== start2 && end1 === end2) return \"NO\";\n  if (start1\
    \ === start2 && end1 !== ", "  if (interval1[0] > interval2[0]) {\n    return\
    \ intersection(interval2, interval1);\n  }\n  if (interval1[1] < interval2[1])\
    \ {\n    return intersection(interval1, interval2);\n  }\n  if (interval1[0] >=\
    \ interval2[0] && interval1[1] <= interval2[1]) {\n    return \"YES\";\n  }\n\
    \  return \"NO\";\n}\n", "  const [start1, end1] = interval1;\n  const [start2,\
    \ end2] = interval2;\n  if (start1 > end2) return \"NO\";\n  if (start2 > end1)\
    \ return \"NO\";\n  if (start1 <= start2 && end1 >= end2) return \"YES\";\n  if\
    \ (start2 <= start1 && end2 >= end1) return \"YES\";\n  return \"NO\";\n}\n",
  "  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return\
    \ \"NO\";\n  }\n  let result = [];\n  for (let i = interval1[0]; i <= interval1[1];\
    \ i++) {\n    for (let j = interval2[0]; j <= interval2[1]; j++) {\n      if (i\
    \ === j) {\n        result.push(i);\n      }\n    }\n  }\n  if (result.length\
    \ === 0) {\n    return \"NO\";\n  }\n  if (result.length === 1) {\n    return\
    \ \"YES\";\n  }\n  if (result.length === 2) {\n    if (result[0] === result[1])\
    \ {\n      return \"YES\";\n    }\n    return \"NO\";\n  }\n  return \"NO\";\n\
    }\n", "  let [start1, end1] = interval1;\n  let [start2, end2] = interval2;\n\
    \  let start1LessOrEqualEnd2 = start1 <= end2;\n  let start2LessOrEqualEnd1 =\
    \ start2 <= end1;\n  if (start1LessOrEqualEnd2 && start2LessOrEqualEnd1) {\n \
    \   return `YES`;\n  }\n  if (start1LessOrEqualEnd2 && !start2LessOrEqualEnd1)\
    \ {\n    return `NO`;\n  }\n  if (!start1LessOrEqualEnd2 && start2LessOrEqualEnd1)\
    \ {\n    return `NO`;\n  }\n  return `NO`;\n}\n", "  if (interval1[0] > interval2[1]\
    \ || interval1[1] < interval2[0]) {\n    return \"NO\";\n  }\n  let result = [];\n\
    \  for (let i = interval1[0]; i <= interval1[1]; i++) {\n    for (let j = interval2[0];\
    \ j <= interval2[1]; j++) {\n      if (i === j) {\n        result.push([i, j]);\n\
    \      }\n    }\n  }\n  if (result.length === 0) {\n    return \"NO\";\n  }\n\
    \  if (result.length === 1) {\n    return \"YES\";\n  }\n  let result1 = result[0];\n\
    \  let result2 = result[1];\n  let result1start = result1[0];\n  let result1end\
    \ = result1[1];\n  let result2start = result2[0];\n  let result2end = result2[1];\n\
    \  let result1length = result1end - result1start;\n  let result2length = result2end\
    \ - result2start;\n  if (result1length >= result2length) {\n    return \"YES\"\
    ;\n  }\n  return \"NO\";\n}\n", "  if (interval1[0] > interval2[1] || interval1[1]\
    \ < interval2[0]) {\n    return \"NO\";\n  }\n  let [start1, end1] = interval1;\n\
    \  let [start2, end2] = interval2;\n  let startIntersection = start1 < start2\
    \ ? start2 : start1;\n  let endIntersection = end1 < end2 ? end2 : end1;\n  let\
    \ lengthIntersection = endIntersection - startIntersection;\n  if (lengthIntersection\
    \ % 2 === 0) {\n    return \"NO\";\n  }\n  for (let i = 2; i <= lengthIntersection\
    \ / 2; i++) {\n    if (startIntersection + i === endIntersection) {\n      return\
    \ \"YES\";\n    }\n    if (startIntersection + i % 2 === endIntersection) {\n\
    \      return \"NO\";\n    }\n  }\n  return \"NO\";\n}\n", "  let [start1, end1]\
    \ = interval1\n  let [start2, end2] = interval2\n  let start = Math.min(start1,\
    \ start2)\n  let end = Math.max(end1, end2)\n  if (start > end) {\n    return\
    \ \"NO\"\n  }\n  let length = end - start\n  if (length < 2) {\n    return \"\
    NO\"\n  }\n  for (let i = 2; i <= length; i++) {\n    if (start % i === 0 && end\
    \ % i === 0) {\n      return \"YES\"\n    }\n  }\n  return \"NO\"\n}\n", "  if\
    \ (interval1[0] >= interval2[1] || interval1[1] <= interval2[0]) {\n    return\
    \ \"NO\";\n  }\n  let start1 = interval1[0];\n  let end1 = interval1[1];\n  let\
    \ start2 = interval2[0];\n  let end2 = interval2[1];\n  let length1 = end1 - start1;\n\
    \  let length2 = end2 - start2;\n  let lengthIntersection = length1 + length2;\n\
    \  if (lengthIntersection % 2 === 0) {\n    return \"NO\";\n  }\n  for (let i\
    \ = 2; i <= lengthIntersection / 2; i++) {\n    if (start1 + i === end1 || start2\
    \ + i === end2) {\n      return \"YES\";\n    }\n  }\n  return \"NO\";\n}\n",
  "  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if\
    \ (start1 > end2) return \"NO\";\n  if (start2 > end1) return \"NO\";\n  if (start1\
    \ === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1\
    \ === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return\
    \ \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1\
    \ === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1\
    \ === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return\
    \ \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1\
    \ === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1\
    \ === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return\
    \ \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1\
    \ === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1\
    \ === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return\
    \ \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1\
    \ === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1\
    \ === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return\
    \ \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1\
    \ === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1\
    \ === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return\
    \ \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1\
    \ === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1\
    \ === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return\
    \ \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1\
    \ === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1\
    \ === ", "  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n\
    \  if (start1 > end2) return \"NO\";\n  if (start2 > end1) return \"NO\";\n  if\
    \ (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2\
    \ && end1 !== end2) return \"NO\";\n  if (start1 !== start2 && end1 === end2)\
    \ return \"NO\";\n  if (start1 !== start2 && end1 !== end2) return \"YES\";\n\
    \  if (start1 === start2 && end1 !== end2) return \"YES\";\n  if (start1 === start2\
    \ && end1 === end2) return \"YES\";\n  return \"NO\";\n}\n", "  const [start1,\
    \ end1] = interval1\n  const [start2, end2] = interval2\n  const start1LessOrEqualEnd2\
    \ = start1 <= end2 && start2 <= end1\n  const start2LessOrEqualEnd1 = start2 <=\
    \ end1 && start1 <= end2\n  const start1LessOrEqualEnd2AndStart2LessOrEqualEnd1\
    \ = start1 <= end2 && start2 <= end1 && start2 <= end1\n  const start1LessOrEqualEnd2AndStart1LessOrEqualEnd2\
    \ = start1 <= end2 && start1 <= end1 && start2 <= end2\n  const start2LessOrEqualEnd1AndStart1LessOrEqualEnd2\
    \ = start2 <= end1 && start1 <= end2 && start2 <= end1\n  const start2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start2 <= end1 && start1 <= end2 && start2 <= end2\n  const start1LessOrEqualEnd2AndStart1LessOrEqualEnd2AndStart2LessOrEqualEnd1\
    \ = start1 <= end2 && start2 <= end1 && start2 <= end2 && start1 <= end1\n  const\
    \ start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2 = start1\
    \ <= end2 && start2 <= end1 && start1 <= end2 && start2 <= end2\n  const start1LessOrEqualEnd2AndStart1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1 <= end2 && start2 <= end1 && start1 <= end2 && start2 <= end1 && start2\
    \ <= end2\n  const start1LessOrEqualEnd2AndStart1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart1LessOrEqualEnd2\
    \ = start1 <= end2 && start2 <= end1 && start1 <= end2 && start2 <= end1 && start1\
    \ <= end2\n  const start1LessOrEqualEnd2AndStart1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1 <= end2 && start2 <= end1 && start1 <= end2 && start2 <= end1 && start1\
    \ <= end2 && start2 <= end2\n  const start1LessOrEqualEnd2AndStart1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd1AndStart1LessOrEqualEnd2\
    \ = start1 <= end2 && start2 <= end1 && start1 <= end2 && start2 <= end1 && start1\
    \ <= end2 && start1 <= end2\n  const start1", "  if (interval1[0] > interval2[1]\
    \ || interval1[1] < interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[0]\
    \ === interval1[1]) {\n    return \"NO\";\n  }\n  if (interval2[0] === interval2[1])\
    \ {\n    return \"YES\";\n  }\n  let start1 = interval1[0];\n  let end1 = interval1[1];\n\
    \  let start2 = interval2[0];\n  let end2 = interval2[1];\n  let startIntersection\
    \ = interval1[0];\n  let endIntersection = interval1[1];\n  let startIntersection2\
    \ = interval2[0];\n  let endIntersection2 = interval2[1];\n  while (startIntersection\
    \ < endIntersection) {\n    if (startIntersection2 > endIntersection2) {\n   \
    \   startIntersection2 = interval2[0];\n      endIntersection2 = interval2[1];\n\
    \    } else {\n      startIntersection2 = interval2[1];\n      endIntersection2\
    \ = interval2[1];\n    }\n  }\n  while (startIntersection2 < endIntersection2)\
    \ {\n    if (startIntersection > endIntersection) {\n      startIntersection =\
    \ interval1[0];\n      endIntersection = interval1[1];\n    } else {\n      startIntersection\
    \ = interval1[1];\n      endIntersection = interval1[1];\n    }\n  }\n  if (startIntersection\
    \ === startIntersection2) {\n    return \"YES\";\n  }\n  if (startIntersection\
    \ < startIntersection2) {\n    return \"NO\";\n  }\n  if (startIntersection >\
    \ startIntersection2) {\n    return \"NO\";\n  }\n}\n", "  if (interval1[0] >\
    \ interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  if\
    \ (interval1[0] < interval1[1] && interval2[0] < interval2[1]) {\n    return \"\
    YES\";\n  }\n  if (interval1[0] < interval1[1] && interval2[0] > interval2[1])\
    \ {\n    return \"NO\";\n  }\n  if (interval1[0] > interval1[1] && interval2[0]\
    \ < interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] > interval1[1]\
    \ && interval2[0] > interval2[1]) {\n    return \"YES\";\n  }\n}\n", "  if (interval1[0]\
    \ > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n\
    \  if (interval1[0] < interval1[1] && interval2[0] < interval2[1]) {\n    return\
    \ \"YES\";\n  }\n  let [start1, end1] = interval1;\n  let [start2, end2] = interval2;\n\
    \  let start1End = start1 + end1;\n  let start2End = start2 + end2;\n  let start1End2\
    \ = start1End + start2End;\n  if (start1End2 % 2 === 0) {\n    return \"NO\";\n\
    \  }\n  return \"YES\";\n}\n", "  let [start1, end1] = interval1;\n  let [start2,\
    \ end2] = interval2;\n  let start1End = start1 + end1;\n  let start2End = start2\
    \ + end2;\n  if (start1End >= start2End) {\n    return \"NO\";\n  }\n  if (start1End\
    \ <= start2End) {\n    return \"YES\";\n  }\n  if (start1 < start2) {\n    let\
    \ temp = start1;\n    start1 = start2;\n    start2 = temp;\n  }\n  let start1Start\
    \ = start1 - start2;\n  let start2Start = start2 - start1;\n  let end1End = end1\
    \ - end2;\n  let end2End = end2 - end1;\n  if (end1End >= end2End) {\n    return\
    \ \"NO\";\n  }\n  if (end1End <= end2End) {\n    return \"YES\";\n  }\n  if (end1\
    \ < end2) {\n    let temp = end1;\n    end1 = end2;\n    end2 = temp;\n  }\n \
    \ let end1End = end1 - end2;\n  let end2End = end2 - end1;\n  if (start1Start\
    \ >= end1End || start2Start >= end2End) {\n    return \"NO\";\n  }\n  if (start1Start\
    \ <= end1End && start2Start <= end2End) {\n    return \"YES\";\n  }\n  if (start1Start\
    \ <= end1End || start2Start <= end2End) {\n    return \"YES\";\n  }\n  if (start1Start\
    \ >= end1End && start2Start >= end2End) {\n    return \"NO\";\n  }\n  if (start1Start\
    \ <= end1End || start2Start >= end2End) {\n    return \"NO\";\n  }\n  if (start1Start\
    \ >= end1End && start2Start <= end2End) {\n    return \"YES\";\n  }\n  if (start1Start\
    \ <= end1End && start2Start >= end2End) {\n    return \"NO\";\n  }\n  if (start1Start\
    \ >= end1End || start2Start <= end2End) {\n    return \"NO\";\n  }\n  if (start1Start\
    \ <= end1End || start2Start <= end2End) {\n    return \"YES\";\n  }\n}\n", " \
    \ const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if\
    \ (start1 <= end2 && start2 <= end1) {\n    if (start1 <= start2 && end1 <= end2)\
    \ {\n      if (start2 <= start1 && end2 <= end1) {\n        return \"YES\";\n\
    \      }\n      return \"NO\";\n    }\n    return \"NO\";\n  }\n  return \"NO\"\
    ;\n}\n", "  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n\
    \    return \"NO\";\n  }\n  let intersection = [interval1[0], interval1[1]];\n\
    \  for (let i = 2; i <= Math.max(interval1[1], interval2[1]); i++) {\n    if (interval1[0]\
    \ > interval1[1]) {\n      intersection[1] = interval1[1];\n    } else if (interval2[0]\
    \ > interval2[1]) {\n      intersection[1] = interval2[1];\n    } else {\n   \
    \   if (interval1[1] > interval2[1]) {\n        intersection[1] = interval1[1];\n\
    \      } else {\n        intersection[1] = interval2[1];\n      }\n    }\n   \
    \ if (intersection[0] === intersection[1]) {\n      return \"NO\";\n    }\n  }\n\
    \  return \"YES\";\n}\n", "  let [start1, end1] = interval1;\n  let [start2, end2]\
    \ = interval2;\n  if (start1 < start2) {\n    [start1, start2] = [start2, start1];\n\
    \  }\n  if (end1 < end2) {\n    [end1, end2] = [end2, end1];\n  }\n  let [start1Minus1,\
    \ end1Minus1] = interval1;\n  let [start2Minus1, end2Minus1] = interval2;\n  if\
    \ (start1Minus1 < start2Minus1) {\n    [start1Minus1, start2Minus1] = [start2Minus1,\
    \ start1Minus1];\n  }\n  if (end1Minus1 < end2Minus1) {\n    [end1Minus1, end2Minus1]\
    \ = [end2Minus1, end1Minus1];\n  }\n  let [start1Minus2, end1Minus2] = interval1;\n\
    \  let [start2Minus2, end2Minus2] = interval2;\n  if (start1Minus2 < start2Minus2)\
    \ {\n    [start1Minus2, start2Minus2] = [start2Minus2, start1Minus2];\n  }\n \
    \ if (end1Minus2 < end2Minus2) {\n    [end1Minus2, end2Minus2] = [end2Minus2,\
    \ end1Minus2];\n  }\n  if (start1Minus1 < start2Minus1 && start1Minus2 < start2Minus2)\
    \ {\n    return intersection(interval1, interval2);\n  }\n  if (start1Minus1 <\
    \ start2Minus1 && start2Minus1 < start2Minus2) {\n    return intersection(interval2,\
    \ interval1);\n  }\n  if (start1Minus2 < start2Minus1 && start1Minus1 < start2Minus2)\
    \ {\n    return intersection(interval1, interval2);\n  }\n  if (start2Minus1 <\
    \ start2Minus1 && start1Minus2 < start2Minus2) {\n    return intersection(interval2,\
    \ interval1);\n  }\n  if (start1Minus1 < start2Minus1 && start2Minus1 < start2Minus2)\
    \ {\n    return intersection(interval1, interval2);\n  }\n  if (start1Minus1 <\
    \ start2Minus1 && start2Minus1 < start2Minus2) {\n    return intersection(interval2,\
    \ interval1);\n  }\n  if (start1Minus2 < start2Minus1 && start1Minus1 < start2Minus2)\
    \ {\n    return intersection(interval1, interval2);\n  }\n  if (start2Minus1 <\
    \ start2Minus1 && start1Minus2 < start2Minus2) {\n    return intersection", " \
    \ if (interval1[0] >= interval1[1] || interval2[0] >= interval2[1]) {\n    return\
    \ \"NO\";\n  }\n\n  let interval1Length = interval1[1] - interval1[0] + 1;\n \
    \ let interval2Length = interval2[1] - interval2[0] + 1;\n\n  if (interval1Length\
    \ === 0 || interval2Length === 0) {\n    return \"NO\";\n  }\n\n  let intersectionLength\
    \ = interval1Length - interval2Length;\n  if (intersectionLength === 0) {\n  \
    \  return \"NO\";\n  }\n\n  for (let i = interval1[0]; i <= interval1[1]; i++)\
    \ {\n    for (let j = interval2[0]; j <= interval2[1]; j++) {\n      if (i ===\
    \ j) {\n        continue;\n      }\n      if (j > i) {\n        continue;\n  \
    \    }\n      if (j === i) {\n        continue;\n      }\n      if (j > i && j\
    \ === i) {\n        continue;\n      }\n      if (j > i && j === i) {\n      \
    \  continue;\n      }\n      if (j > i && j === i) {\n        continue;\n    \
    \  }\n      if (j > i && j === i) {\n        continue;\n      }\n      if (j >\
    \ i && j === i) {\n        continue;\n      }\n      if (j > i && j === i) {\n\
    \        continue;\n      }\n      if (j > i && j === i) {\n        continue;\n\
    \      }\n      if (j > i && j === i) {\n        continue;\n      }\n      if\
    \ (j > i && j === i) {\n        continue;\n      }\n      if (j > i && j === i)\
    \ {\n        continue;\n      }\n      if (j > i && j === i) {\n        continue;\n\
    \      }\n      if (j > i && j === i) {\n        continue;\n      }\n      if\
    \ (j > i && j === i) {\n        continue;\n      }\n      if (j > i && j === i)\
    \ {\n        continue;\n      }\n      if (j > i && j === i) {\n        continue;\n\
    \      }\n      if (j > i && j === i) {\n        continue;\n      }\n      if\
    \ (j > i && j === i) {\n        continue;\n      }\n      if (j > i && j === i)\
    \ {\n        continue;\n      }\n      if (j > i && j === i) {\n        continue;\n\
    \      }\n      if (j > i && j === i) {\n        continue;\n      }\n      if\
    \ (j > i && j === i) {\n        continue;\n      }\n      if (j > i && j === i)\
    \ {\n        continue;\n      }\n      if (j > i && j === i) {\n        continue;\n\
    \      }\n      if (j > i && j === i) {\n        continue;\n      }\n      if\
    \ (j > i && j === i) {\n        continue;\n      }\n      if (j > i && j === i)\
    \ {\n        continue;\n      }\n      if (j > i ", "  let interval1Start = interval1[0];\n\
    \  let interval1End = interval1[1];\n  let interval2Start = interval2[0];\n  let\
    \ interval2End = interval2[1];\n  let intersectionStart = Math.min(interval1Start,\
    \ interval2Start);\n  let intersectionEnd = Math.max(interval1End, interval2End);\n\
    \  let intersectionLength = intersectionEnd - intersectionStart;\n  if (intersectionLength\
    \ === 0) return \"NO\";\n  if (intersectionLength === 1) return \"YES\";\n  if\
    \ (intersectionLength === 2) return \"YES\";\n  if (intersectionLength % 2 ===\
    \ 0) return \"NO\";\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(intersectionLength);\
    \ i++) {\n    if (intersectionLength % i === 0) {\n      isPrime = false;\n  \
    \    break;\n    }\n  }\n  return isPrime ? \"YES\" : \"NO\";\n}\n", "  let [start1,\
    \ end1] = interval1;\n  let [start2, end2] = interval2;\n  let startIntersection\
    \ = start1 < start2 ? start1 : start2;\n  let endIntersection = end1 < end2 ?\
    \ end1 : end2;\n  let intersectionLength = endIntersection - startIntersection;\n\
    \  if (intersectionLength === 0) return \"NO\";\n  if (intersectionLength ===\
    \ 1) return \"YES\";\n  if (intersectionLength % 2 === 0) return \"NO\";\n  if\
    \ (startIntersection < endIntersection) {\n    let startPrime = prime(startIntersection);\n\
    \    let endPrime = prime(endIntersection);\n    if (startPrime && endPrime) return\
    \ \"YES\";\n  }\n  return \"NO\";\n}\n", "  const [start1, end1] = interval1;\n\
    \  const [start2, end2] = interval2;\n  if (start1 > end2) return \"NO\";\n  if\
    \ (start2 > end1) return \"NO\";\n  if (start1 === start2 && end1 === end2) return\
    \ \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1\
    \ === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1\
    \ === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return\
    \ \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1\
    \ === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1\
    \ === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return\
    \ \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1\
    \ === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1\
    \ === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return\
    \ \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1\
    \ === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1\
    \ === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return\
    \ \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1\
    \ === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1\
    \ === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return\
    \ \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1\
    \ === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1\
    \ === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return\
    \ \"YES\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n  if (start1\
    \ === start2 && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1\
    \ === end2) return \"YES\";\n  if (start1 === start2 && end1 === end2) return\
    \ \"YES\";\n  if (start1 === start2 && end1 === ", "  let [start1, end1] = interval1;\n\
    \  let [start2, end2] = interval2;\n  if (start1 < start2) {\n    [start1, start2]\
    \ = [start2, start1];\n  }\n  if (end1 < end2) {\n    [end1, end2] = [end2, end1];\n\
    \  }\n  if (start1 > end2) {\n    return \"NO\";\n  }\n  let [start1p, end1p]\
    \ = [start1, end1].sort();\n  let [start2p, end2p] = [start2, end2].sort();\n\
    \  let [start1p2, end1p2] = [start1p, end1p].sort();\n  let [start2p2, end2p2]\
    \ = [start2p, end2p].sort();\n  if (start1p2 === start2p2) {\n    return \"NO\"\
    ;\n  }\n  if (start1p2 > start2p2) {\n    return \"NO\";\n  }\n  if (start1p2\
    \ === start2p2) {\n    return \"NO\";\n  }\n  if (start1p2 > start2p2) {\n   \
    \ return \"NO\";\n  }\n  if (start1p2 === start2p2) {\n    return \"NO\";\n  }\n\
    \  if (start1p2 > start2p2) {\n    return \"NO\";\n  }\n  if (start1p2 === start2p2)\
    \ {\n    return \"NO\";\n  }\n  if (start1p2 > start2p2) {\n    return \"NO\"\
    ;\n  }\n  if (start1p2 === start2p2) {\n    return \"NO\";\n  }\n  if (start1p2\
    \ > start2p2) {\n    return \"NO\";\n  }\n  if (start1p2 === start2p2) {\n   \
    \ return \"NO\";\n  }\n  if (start1p2 > start2p2) {\n    return \"NO\";\n  }\n\
    \  if (start1p2 === start2p2) {\n    return \"NO\";\n  }\n  if (start1p2 > start2p2)\
    \ {\n    return \"NO\";\n  }\n  if (start1p2 === start2p2) {\n    return \"NO\"\
    ;\n  }\n  if (start1p2 > start2p2) {\n    return \"NO\";\n  }\n  if (start1p2\
    \ === start2p2) {\n    return \"NO\";\n  }\n  if (start1p2 > start2p2) {\n   \
    \ return \"NO\";\n  }\n  if (start1p2 === start2p2) {\n    return \"NO\";\n  }\n\
    \  if (start1p2 > start2p2) {\n    return \"NO\";\n  }\n  if (start1p2 === start2p2)\
    \ {\n    return \"NO\";\n  }\n  if (start1p2 > start2p2) {\n    return \"NO\"\
    ;\n", "  let [start1, end1] = interval1;\n  let [start2, end2] = interval2;\n\
    \  if (start1 < start2) {\n    [start1, start2] = [start2, start1];\n  }\n  if\
    \ (end1 < end2) {\n    [end1, end2] = [end2, end1];\n  }\n  if (start1 > end2)\
    \ {\n    return \"NO\";\n  }\n  if (start2 === end2) {\n    return \"NO\";\n \
    \ }\n  if (start1 === end1) {\n    return \"NO\";\n  }\n  let [start3, end3] =\
    \ interval1;\n  let [start4, end4] = interval2;\n  if (start3 < start4) {\n  \
    \  [start3, start4] = [start4, start3];\n  }\n  if (end3 < end4) {\n    [end3,\
    \ end4] = [end4, end3];\n  }\n  if (start3 === end4) {\n    return \"NO\";\n \
    \ }\n  if (start4 === end3) {\n    return \"NO\";\n  }\n  if (start3 === start4)\
    \ {\n    return \"NO\";\n  }\n  let [start5, end5] = interval1;\n  let [start6,\
    \ end6] = interval2;\n  if (start5 < start6) {\n    [start5, start6] = [start6,\
    \ start5];\n  }\n  if (end5 < end6) {\n    [end5, end6] = [end6, end5];\n  }\n\
    \  if (start5 === end6) {\n    return \"NO\";\n  }\n  if (start6 === end5) {\n\
    \    return \"NO\";\n  }\n  if (start5 === start6) {\n    return \"NO\";\n  }\n\
    \  let [start7, end7] = interval1;\n  let [start8, end8] = interval2;\n  if (start7\
    \ < start8) {\n    [start7, start8] = [start8, start7];\n  }\n  if (end7 < end8)\
    \ {\n    [end7, end8] = [end8, end7];\n  }\n  if (start7 === end8) {\n    return\
    \ \"NO\";\n  }\n  if (start8 === end7) {\n    return \"NO\";\n  }\n  if (start7\
    \ === start8) {\n    return \"NO\";\n  }\n  let [start9, end9] = interval1;\n\
    \  let [start10, end10] = interval2;\n  if (start9 < start10) {\n    [start9,\
    \ start10] = [start10, start9];\n  }\n  if (end9 < end10) {\n    [end9, end10]\
    \ = [end10, end9];\n  }\n  if (start9 === end10) {\n    return \"NO\";\n  }\n\
    \  if (start10 === end9) {\n    return \"NO\";\n  }\n  if (start9 === start10)\
    \ {\n    return \"NO\";\n  }\n  let ", "  if (interval1[0] > interval1[1] || interval2[0]\
    \ > interval2[1]) {\n    return \"NO\";\n  }\n\n  if (interval1[0] < interval1[1]\
    \ && interval2[0] < interval2[1]) {\n    return \"YES\";\n  }\n\n  if (interval1[0]\
    \ < interval1[1] && interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n\n\
    \  if (interval1[0] > interval1[1] && interval2[0] < interval2[1]) {\n    return\
    \ \"NO\";\n  }\n\n  if (interval1[0] > interval1[1] && interval2[0] > interval2[1])\
    \ {\n    return \"YES\";\n  }\n\n  let intersection = [interval1[0], interval1[1]];\n\
    \  let [interval2Start, interval2End] = interval2;\n\n  for (let i = interval1[1];\
    \ i <= interval2End; i++) {\n    if (i === interval2Start) {\n      continue;\n\
    \    }\n\n    if (i === interval2End) {\n      break;\n    }\n\n    if (i ===\
    \ interval1[0]) {\n      continue;\n    }\n\n    if (i === interval1[1]) {\n \
    \     break;\n    }\n\n    if (interval1[0] < i && i < interval2End) {\n     \
    \ intersection[1] = i;\n    }\n  }\n\n  if (intersection[1] === interval1[1])\
    \ {\n    return \"YES\";\n  }\n\n  return \"NO\";\n}\n", "  const [start1, end1]\
    \ = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2) return\
    \ \"NO\";\n  if (start2 > end1) return \"NO\";\n  if (start1 === start2 && end1\
    \ === end2) return \"YES\";\n  if (start1 === start2 && end1 !== end2) return\
    \ \"NO\";\n  if (start1 !== start2 && end1 === end2) return \"NO\";\n  if (start1\
    \ === start2 && end1 !== end2) return \"NO\";\n  if (start1 === start2 && end1\
    \ !== end2) return \"NO\";\n  if (start1 !== start2 && end1 === end2) return \"\
    NO\";\n  if (start1 === start2 && end1 !== end2) return \"NO\";\n  if (start1\
    \ === start2 && end1 !== end2) return \"NO\";\n  if (start1 === start2 && end1\
    \ !== end2) return \"NO\";\n  if (start1 === start2 && end1 !== end2) return \"\
    NO\";\n  if (start1 === start2 && end1 !== end2) return \"NO\";\n  if (start1\
    \ === start2 && end1 !== end2) return \"NO\";\n  if (start1 === start2 && end1\
    \ !== end2) return \"NO\";\n  if (start1 === start2 && end1 !== end2) return \"\
    NO\";\n  if (start1 === start2 && end1 !== end2) return \"NO\";\n  if (start1\
    \ === start2 && end1 !== end2) return \"NO\";\n  if (start1 === start2 && end1\
    \ !== end2) return \"NO\";\n  if (start1 === start2 && end1 !== end2) return \"\
    NO\";\n  if (start1 === start2 && end1 !== end2) return \"NO\";\n  if (start1\
    \ === start2 && end1 !== end2) return \"NO\";\n  if (start1 === start2 && end1\
    \ !== end2) return \"NO\";\n  if (start1 === start2 && end1 !== end2) return \"\
    NO\";\n  if (start1 === start2 && end1 !== end2) return \"NO\";\n  if (start1\
    \ === start2 && end1 !== end2) return \"NO\";\n  if (start1 === start2 && end1\
    \ !== end2) return \"NO\";\n  if (start1 === start2 && end1 !== end2) return \"\
    NO\";\n  if (start1 === start2 && end1 !== end2) return \"NO\";\n  if (start1\
    \ === start2 && end1 !== end2) return \"NO\";\n  if (start1 === start2 && end1\
    \ !== end2) return \"NO\";\n  if (start1 === start2 && end1 !== ", "  let [start1,\
    \ end1] = interval1;\n  let [start2, end2] = interval2;\n  let start1LessOrEqualEnd1\
    \ = start1 <= end1;\n  let start2LessOrEqualEnd2 = start2 <= end2;\n  if (start1LessOrEqualEnd1\
    \ && start2LessOrEqualEnd2) {\n    return `YES`;\n  }\n  if (start1LessOrEqualEnd1\
    \ && !start2LessOrEqualEnd2) {\n    return `NO`;\n  }\n  if (!start1LessOrEqualEnd1\
    \ && start2LessOrEqualEnd2) {\n    return `NO`;\n  }\n  return `NO`;\n}\n", " \
    \ if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return\
    \ \"NO\";\n  }\n  let [start1, end1] = interval1;\n  let [start2, end2] = interval2;\n\
    \  let start1End = start1 + end1;\n  let start2End = start2 + end2;\n  if (start1End\
    \ < start2End) {\n    return intersection(interval2, interval1);\n  }\n  if (start1End\
    \ > start2End) {\n    return intersection(interval1, interval2);\n  }\n  let [start1Start,\
    \ start1End] = interval1;\n  let [start2Start, start2End] = interval2;\n  if (start1Start\
    \ <= start2Start && start1End >= start2End) {\n    return \"YES\";\n  }\n  if\
    \ (start1Start >= start2Start && start1End <= start2End) {\n    return \"YES\"\
    ;\n  }\n  if (start1Start <= start2Start && start1End >= start2End) {\n    return\
    \ \"YES\";\n  }\n  return \"NO\";\n}\n", "  const [start1, end1] = interval1;\n\
    \  const [start2, end2] = interval2;\n  if (start1 > end2 || start2 > end1) {\n\
    \    return \"NO\";\n  }\n  if (start1 < start2) {\n    const temp = start1;\n\
    \    start1 = start2;\n    start2 = temp;\n  }\n  if (end1 < end2) {\n    const\
    \ temp = end1;\n    end1 = end2;\n    end2 = temp;\n  }\n  const start = Math.min(start1,\
    \ start2);\n  const end = Math.max(end1, end2);\n  if (start > end) {\n    return\
    \ \"NO\";\n  }\n  const len = end - start;\n  if (len % 2 === 0) {\n    return\
    \ \"NO\";\n  }\n  for (let i = 2; i <= len / 2; i++) {\n    if (len % i === 0)\
    \ {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}\n", "  if (interval1[0]\
    \ >= interval1[1] || interval2[0] >= interval2[1]) {\n    return \"NO\";\n  }\n\
    \  let result: number[] = [];\n  for (let i = interval1[0]; i <= interval1[1];\
    \ i++) {\n    for (let j = interval2[0]; j <= interval2[1]; j++) {\n      if (i\
    \ === j) {\n        result.push(i);\n      }\n    }\n  }\n  if (result.length\
    \ === 0) {\n    return \"NO\";\n  }\n  if (result.length === 1) {\n    return\
    \ \"YES\";\n  }\n  if (result.length >= 2) {\n    return \"YES\";\n  }\n  return\
    \ \"NO\";\n}\n", "  if (interval1[0] > interval1[1] || interval2[0] > interval2[1])\
    \ {\n    return \"NO\";\n  }\n  if (interval1[0] < interval1[1] && interval2[0]\
    \ < interval2[1]) {\n    return \"YES\";\n  }\n  if (interval1[0] < interval1[1]\
    \ && interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0]\
    \ > interval1[1] && interval2[0] < interval2[1]) {\n    return \"NO\";\n  }\n\
    \  if (interval1[0] > interval1[1] && interval2[0] > interval2[1]) {\n    return\
    \ \"YES\";\n  }\n  return \"NO\";\n}\n", "  if (interval1[0] >= interval1[1] ||\
    \ interval2[0] >= interval2[1]) {\n    return \"NO\";\n  }\n  let result: number[]\
    \ = [];\n  for (let i = interval1[0]; i <= interval1[1]; i++) {\n    for (let\
    \ j = interval2[0]; j <= interval2[1]; j++) {\n      if (i === j) {\n        result.push(i);\n\
    \      }\n    }\n  }\n  if (result.length === 0) {\n    return \"NO\";\n  }\n\
    \  if (result.length === 1) {\n    return \"YES\";\n  }\n  let prime: boolean\
    \ = false;\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] % 2\
    \ === 0) {\n      prime = true;\n      break;\n    }\n  }\n  return prime ? \"\
    YES\" : \"NO\";\n}\n", "  if (interval1[0] > interval2[0]) {\n    return intersection(interval2,\
    \ interval1);\n  }\n  if (interval1[1] < interval2[1]) {\n    return intersection(interval1,\
    \ interval2);\n  }\n  if (interval1[0] === interval1[1] && interval2[0] === interval2[1])\
    \ {\n    return \"YES\";\n  }\n  if (interval1[0] === interval1[1]) {\n    return\
    \ interval1[0] === interval2[1] ? \"YES\" : \"NO\";\n  }\n  if (interval2[0] ===\
    \ interval2[1]) {\n    return interval2[0] === interval1[1] ? \"YES\" : \"NO\"\
    ;\n  }\n  if (interval1[0] < interval2[0]) {\n    return intersection(interval1,\
    \ [interval2[0], interval2[1]]);\n  }\n  if (interval1[1] > interval2[1]) {\n\
    \    return intersection([interval1[0], interval1[1]], [interval2[0], interval2[1]]);\n\
    \  }\n}\n", "  if (interval1[0] > interval2[0]) {\n    return intersection(interval2,\
    \ interval1);\n  }\n  if (interval1[1] < interval2[1]) {\n    return intersection(interval1,\
    \ interval2);\n  }\n  if (interval1[0] === interval2[0] && interval1[1] === interval2[1])\
    \ {\n    return \"YES\";\n  }\n  if (interval1[0] === interval2[0]) {\n    return\
    \ interval1[1] === interval2[1] ? \"YES\" : \"NO\";\n  }\n  if (interval1[1] ===\
    \ interval2[1]) {\n    return interval1[0] === interval2[0] ? \"YES\" : \"NO\"\
    ;\n  }\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n\
    \  if (start1 < start2 && end1 < end2) {\n    return intersection([start2, end2],\
    \ [start1, end1]);\n  }\n  if (start2 < start1 && end2 < end1) {\n    return intersection([start1,\
    \ end1], [start2, end2]);\n  }\n  if (start1 < start2 && end2 < end1) {\n    return\
    \ intersection([start1, end1], [start2, end2]);\n  }\n  if (start2 < start1 &&\
    \ end1 < end2) {\n    return intersection([start1, end1], [start2, end2]);\n \
    \ }\n  return \"NO\";\n}\n", "  let [start1, end1] = interval1;\n  let [start2,\
    \ end2] = interval2;\n  let start1LessOrEqualEnd1 = start1 <= end1;\n  let start2LessOrEqualEnd2\
    \ = start2 <= end2;\n  if (start1LessOrEqualEnd1 && start2LessOrEqualEnd2) {\n\
    \    if (start1 < start2) {\n      return \"NO\";\n    } else {\n      return\
    \ \"YES\";\n    }\n  } else if (start1LessOrEqualEnd1 && start2LessOrEqualEnd2)\
    \ {\n    return \"YES\";\n  } else if (start1LessOrEqualEnd1 && start2LessOrEqualEnd2)\
    \ {\n    return \"NO\";\n  } else if (start1LessOrEqualEnd1 && start2LessOrEqualEnd2)\
    \ {\n    return \"NO\";\n  } else if (start1LessOrEqualEnd1 && start2LessOrEqualEnd2)\
    \ {\n    return \"NO\";\n  } else if (start1LessOrEqualEnd1 && start2LessOrEqualEnd2)\
    \ {\n    return \"NO\";\n  } else if (start1LessOrEqualEnd1 && start2LessOrEqualEnd2)\
    \ {\n    return \"NO\";\n  } else if (start1LessOrEqualEnd1 && start2LessOrEqualEnd2)\
    \ {\n    return \"NO\";\n  } else if (start1LessOrEqualEnd1 && start2LessOrEqualEnd2)\
    \ {\n    return \"NO\";\n  } else if (start1LessOrEqualEnd1 && start2LessOrEqualEnd2)\
    \ {\n    return \"NO\";\n  } else if (start1LessOrEqualEnd1 && start2LessOrEqualEnd2)\
    \ {\n    return \"NO\";\n  } else if (start1LessOrEqualEnd1 && start2LessOrEqualEnd2)\
    \ {\n    return \"NO\";\n  } else if (start1LessOrEqualEnd1 && start2LessOrEqualEnd2)\
    \ {\n    return \"NO\";\n  } else if (start1LessOrEqualEnd1 && start2LessOrEqualEnd2)\
    \ {\n    return \"NO\";\n  } else if (start1LessOrEqualEnd1 && start2LessOrEqualEnd2)\
    \ {\n    return \"NO\";\n  } else if (start1LessOrEqualEnd1 && start2LessOrEqualEnd2)\
    \ {\n    return \"NO\";\n  } else if (start1LessOrEqualEnd1 && start2LessOrEqualEnd2)\
    \ {\n    return \"NO\";\n  } else if (start1LessOrEqualEnd1 && start2LessOrEqualEnd2)\
    \ {\n    return \"NO\";\n  } else if (start1LessOrEqualEnd1 && start2LessOrEqualEnd2)\
    \ {\n    return \"NO\";\n  } else if (start1LessOrEqualEnd1 && start2LessOrEqualEnd2)\
    \ {\n    return \"NO\";\n  } else if (start1LessOrEqualEnd1 && start2LessOrEqualEnd2)\
    \ {\n    return \"NO\";\n  } else if (start1LessOrEqualEnd1 && start2LessOrEqualEnd2)\
    \ {\n    return \"NO\";\n  } else if (start1LessOrEqualEnd1 && start2Less", " \
    \ let [start1, end1] = interval1;\n  let [start2, end2] = interval2;\n  if (start1\
    \ < start2) {\n    [start1, end1] = interval2;\n    [start2, end2] = interval1;\n\
    \  }\n  if (end1 < end2) {\n    [start1, end1] = interval1;\n    [start2, end2]\
    \ = interval2;\n  }\n  if (start1 > end2) {\n    [start1, end1] = interval2;\n\
    \    [start2, end2] = interval1;\n  }\n  if (start2 === end2) {\n    return \"\
    NO\";\n  }\n  if (start2 > end2) {\n    return \"NO\";\n  }\n  let [start3, end3]\
    \ = interval1;\n  let [start4, end4] = interval2;\n  if (start3 > start4) {\n\
    \    [start3, end3] = interval2;\n    [start4, end4] = interval1;\n  }\n  if (end3\
    \ > end4) {\n    [start3, end3] = interval1;\n    [start4, end4] = interval2;\n\
    \  }\n  if (start3 === end4) {\n    return \"NO\";\n  }\n  if (start3 > end4)\
    \ {\n    return \"NO\";\n  }\n  let [start5, end5] = interval1;\n  let [start6,\
    \ end6] = interval2;\n  if (start5 > start6) {\n    [start5, end5] = interval2;\n\
    \    [start6, end6] = interval1;\n  }\n  if (end5 > end6) {\n    [start5, end5]\
    \ = interval1;\n    [start6, end6] = interval2;\n  }\n  if (start5 === end6) {\n\
    \    return \"NO\";\n  }\n  if (start5 > end6) {\n    return \"NO\";\n  }\n  if\
    \ (start3 === start4 && start4 === start5 && start5 === start6) {\n    return\
    \ \"NO\";\n  }\n  if (start3 === start4 && start4 === start5 && start5 !== start6)\
    \ {\n    return \"YES\";\n  }\n  if (start3 === start4 && start4 !== start5 &&\
    \ start5 === start6) {\n    return \"YES\";\n  }\n  if (start3 === start4 && start4\
    \ !== start5 && start5 !== start6) {\n    return \"YES\";\n  }\n  if (start3 !==\
    \ start4 && start4 === start5 && start5 === start6) {\n    return \"YES\";\n \
    \ }\n  if (start3 !== start4 && start4 === start5 && start5 !== start6) {\n  \
    \  return \"YES\";\n  }\n  if (start3 !== start4 && start4 !== start5 && start5\
    \ === start6) {\n    return \"YES\";\n  }\n  if (start3 !== start4 && start4 !==\
    \ start5 && ", "  if (interval1[0] > interval2[0] || interval1[1] < interval2[1])\
    \ {\n    return \"NO\";\n  }\n  let result = [];\n  for (let i = interval1[0];\
    \ i <= interval1[1]; i++) {\n    for (let j = interval2[0]; j <= interval2[1];\
    \ j++) {\n      if (i === j) {\n        result.push(i);\n      }\n    }\n  }\n\
    \  if (result.length === 0) {\n    return \"NO\";\n  }\n  if (result.length ===\
    \ 1) {\n    return \"YES\";\n  }\n  if (result.length === 2) {\n    return \"\
    YES\";\n  }\n  if (result.length === 3) {\n    return \"YES\";\n  }\n  if (result.length\
    \ === 4) {\n    return \"YES\";\n  }\n  if (result.length === 5) {\n    return\
    \ \"YES\";\n  }\n  if (result.length === 6) {\n    return \"YES\";\n  }\n  if\
    \ (result.length === 7) {\n    return \"YES\";\n  }\n  if (result.length === 8)\
    \ {\n    return \"YES\";\n  }\n  if (result.length === 9) {\n    return \"YES\"\
    ;\n  }\n  if (result.length === 10) {\n    return \"YES\";\n  }\n  if (result.length\
    \ === 11) {\n    return \"YES\";\n  }\n  if (result.length === 12) {\n    return\
    \ \"YES\";\n  }\n  if (result.length === 13) {\n    return \"YES\";\n  }\n  if\
    \ (result.length === 14) {\n    return \"YES\";\n  }\n  if (result.length ===\
    \ 15) {\n    return \"YES\";\n  }\n  if (result.length === 16) {\n    return \"\
    YES\";\n  }\n  if (result.length === 17) {\n    return \"YES\";\n  }\n  if (result.length\
    \ === 18) {\n    return \"YES\";\n  }\n  if (result.length === 19) {\n    return\
    \ \"YES\";\n  }\n  if (result.length === 20) {\n    return \"YES\";\n  }\n  if\
    \ (result.length === 21) {\n    return \"YES\";\n  }\n  if (result.length ===\
    \ 22) {\n    return \"YES\";\n  }\n  if (result.length === 23) {\n    return \"\
    YES\";\n  }\n  if (result.length === 24) {\n    return \"YES\";\n  }\n  if (result.length\
    \ === 25) {\n    return \"YES\";\n  }\n  if (result.length === 26) {\n    return\
    \ \"YES\";\n  }\n  if (result.length === 27) {\n    return \"YES\";\n  }\n  if\
    \ (result.length === 28) {\n    return \"YES\";\n  }\n  if (result.length ===\
    \ 29) {\n    return \"YES\";\n  }\n  if (result.length === 30) {\n    return \"\
    YES\";\n  }\n  if (result.length === 31) {\n    return \"YES\";\n  }\n  if (result.length\
    \ === 32) {\n    return \"YES\";\n  }\n  if (result.length === 33) {\n    return\
    \ \"YES\";\n  }\n  if (result.length === 34) {\n    return \"YES\";\n  }\n  if\
    \ (result.length === 35) {\n    return \"YES\";\n  }\n  if (result.length ===\
    \ 36) {\n    return \"YES\";\n  }\n  if (result.length === 37", "  let interval1Start\
    \ = interval1[0];\n  let interval1End = interval1[1];\n  let interval2Start =\
    \ interval2[0];\n  let interval2End = interval2[1];\n  if (interval1Start > interval1End)\
    \ {\n    interval1Start = interval1End;\n  }\n  if (interval2Start > interval2End)\
    \ {\n    interval2Start = interval2End;\n  }\n  if (interval1Start === interval1End\
    \ && interval2Start === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start\
    \ === interval1End || interval2Start === interval2End) {\n    return \"NO\";\n\
    \  }\n  if (interval1Start < interval2Start) {\n    interval1Start = interval2Start;\n\
    \  }\n  if (interval1Start < interval2End) {\n    interval1End = interval2End;\n\
    \  }\n  if (interval2Start < interval1End) {\n    interval2Start = interval1End;\n\
    \  }\n  if (interval1Start === interval1End && interval2Start === interval2End)\
    \ {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End || interval2Start\
    \ === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start < interval2Start)\
    \ {\n    interval1Start = interval2Start;\n  }\n  if (interval1Start < interval2End)\
    \ {\n    interval1End = interval2End;\n  }\n  if (interval2Start < interval1End)\
    \ {\n    interval2Start = interval1End;\n  }\n  if (interval1Start === interval1End\
    \ && interval2Start === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start\
    \ === interval1End || interval2Start === interval2End) {\n    return \"NO\";\n\
    \  }\n  if (interval1Start < interval2Start) {\n    interval1Start = interval2Start;\n\
    \  }\n  if (interval1Start < interval2End) {\n    interval1End = interval2End;\n\
    \  }\n  if (interval2Start < interval1End) {\n    interval2Start = interval1End;\n\
    \  }\n  if (interval1Start === interval1End && interval2Start === interval2End)\
    \ {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End || interval2Start\
    \ === interval2End) {\n    return \"NO\";\n  }\n  if (interval1Start < interval2Start)\
    \ {\n    interval1Start = interval2Start;\n  }\n  if (interval1Start < interval2End)\
    \ {\n    interval1End = interval2End;\n  }\n  if (interval2Start < interval1End)\
    \ {\n    interval2Start = interval", "  const [start1, end1] = interval1;\n  const\
    \ [start2, end2] = interval2;\n  if (start1 > end2 || start2 > end1) {\n    return\
    \ \"NO\";\n  }\n  if (start1 < start2) {\n    [start1, end1] = interval2;\n  \
    \  [start2, end2] = interval1;\n  }\n  const [start3, end3] = interval1;\n  const\
    \ [start4, end4] = interval2;\n  if (start3 < start4 || start4 < start3) {\n \
    \   return \"NO\";\n  }\n  if (start3 < end4 && end4 < end3) {\n    return \"\
    NO\";\n  }\n  if (start1 < start2 && start2 < end1 && end1 < end2) {\n    return\
    \ \"NO\";\n  }\n  if (start2 < start1 && start1 < end2 && end2 < end1) {\n   \
    \ return \"NO\";\n  }\n  if (start1 < start2 && start2 < end1 && end2 < end3)\
    \ {\n    return \"NO\";\n  }\n  if (start2 < start1 && start1 < end2 && end1 <\
    \ end3) {\n    return \"NO\";\n  }\n  if (start1 < start2 && start2 < end1 &&\
    \ end2 < end4) {\n    return \"NO\";\n  }\n  if (start2 < start1 && start1 < end2\
    \ && end1 < end4) {\n    return \"NO\";\n  }\n  if (start1 < start2 && start2\
    \ < end1 && end2 < end3) {\n    return \"NO\";\n  }\n  if (start2 < start1 &&\
    \ start1 < end2 && end1 < end3) {\n    return \"NO\";\n  }\n  if (start1 < start2\
    \ && start2 < end1 && end2 < end4) {\n    return \"NO\";\n  }\n  if (start2 <\
    \ start1 && start1 < end2 && end1 < end4) {\n    return \"NO\";\n  }\n  if (start1\
    \ < start2 && start2 < end1 && end2 < end3) {\n    return \"NO\";\n  }\n  if (start2\
    \ < start1 && start1 < end2 && end1 < end3) {\n    return \"NO\";\n  }\n  if (start1\
    \ < start2 && start2 < end1 && end2 < end4) {\n    return \"NO\";\n  }\n  if (start2\
    \ < start1 && start1 < end2 && end1 < end4) {\n    return \"NO\";\n  }\n  if (start1\
    \ < start2 && start2 < end1 && end2 < end3) {\n    return \"NO\";\n  }\n  if (start2\
    \ < start1 && start1 < end2 && end1 < end3) {\n    return \"NO\";\n  }\n  if (start1\
    \ < start2 && start2 < end1 && end2 < end4) {\n    return \"NO\";\n  }\n  if (start2\
    \ < start1 && start1 < end2 && end1 < end4) {\n    return \"NO\";\n  }\n  if (start1\
    \ < start2 && start2 < end1 && end2 < end3) {\n    return \"NO\";\n  }\n  if (start2\
    \ < start1 && start", "  if (interval1[0] > interval2[1] || interval1[1] < interval2[0])\
    \ {\n    return \"NO\";\n  }\n  if (interval1[0] >= interval2[0] && interval1[1]\
    \ <= interval2[1]) {\n    return \"YES\";\n  }\n  if (interval1[0] < interval2[0]\
    \ && interval1[1] >= interval2[1]) {\n    return \"YES\";\n  }\n  if (interval1[0]\
    \ >= interval2[0] && interval1[1] < interval2[1]) {\n    return \"YES\";\n  }\n\
    \  return \"NO\";\n}\n", "  const [interval1Start, interval1End] = interval1;\n\
    \  const [interval2Start, interval2End] = interval2;\n  if (interval1Start > interval1End)\
    \ {\n    return interval1Start === interval2End ? \"NO\" : \"YES\";\n  }\n  if\
    \ (interval2Start > interval2End) {\n    return interval2Start === interval1End\
    \ ? \"NO\" : \"YES\";\n  }\n  if (interval1Start === interval1End) {\n    return\
    \ \"NO\";\n  }\n  if (interval2Start === interval2End) {\n    return \"NO\";\n\
    \  }\n  if (interval1Start > interval2Start) {\n    return interval1Start ===\
    \ interval2End ? \"NO\" : \"YES\";\n  }\n  if (interval2Start > interval1Start)\
    \ {\n    return interval2Start === interval1End ? \"NO\" : \"YES\";\n  }\n  const\
    \ [interval1Start2, interval1End2] = interval1;\n  const [interval2Start2, interval2End2]\
    \ = interval2;\n  if (interval1Start2 > interval1End2) {\n    return interval1Start2\
    \ === interval2End2 ? \"NO\" : \"YES\";\n  }\n  if (interval2Start2 > interval2End2)\
    \ {\n    return interval2Start2 === interval1End2 ? \"NO\" : \"YES\";\n  }\n \
    \ if (interval1Start2 === interval1End2) {\n    return \"NO\";\n  }\n  if (interval2Start2\
    \ === interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start2 > interval2Start2)\
    \ {\n    return interval1Start2 === interval2End2 ? \"NO\" : \"YES\";\n  }\n \
    \ if (interval2Start2 > interval1Start2) {\n    return interval2Start2 === interval1End2\
    \ ? \"NO\" : \"YES\";\n  }\n  const [interval1Start3, interval1End3] = interval1;\n\
    \  const [interval2Start3, interval2End3] = interval2;\n  if (interval1Start3\
    \ > interval1End3) {\n    return interval1Start3 === interval2End3 ? \"NO\" :\
    \ \"YES\";\n  }\n  if (interval2Start3 > interval2End3) {\n    return interval2Start3\
    \ === interval1End3 ? \"NO\" : \"YES\";\n  }\n  if (interval1Start3 === interval1End3)\
    \ {\n    return \"NO\";\n  }\n  if (interval2Start3 === interval2End3) {\n   \
    \ return \"NO\";\n  }\n  if (interval1Start3 > interval2Start3) {\n    return\
    \ interval1Start3 === interval2End3 ? \"NO\" : \"YES\";\n  }\n  if (interval2Start3\
    \ > interval1Start3) {\n    return interval2Start3 === interval1End3 ? \"NO",
  "  if (interval1[0] > interval2[1]) {\n    return intersection(interval2, interval1)\n\
    \  }\n  if (interval1[1] < interval2[0]) {\n    return intersection(interval1,\
    \ interval2)\n  }\n  if (interval1[0] >= interval2[0] && interval1[1] <= interval2[1])\
    \ {\n    return \"YES\"\n  }\n  if (interval1[0] < interval2[0] && interval1[1]\
    \ >= interval2[1]) {\n    return \"NO\"\n  }\n  return \"NO\"\n}\n", "  let [start1,\
    \ end1] = interval1;\n  let [start2, end2] = interval2;\n  if (start1 <= end2\
    \ && start2 <= end1) {\n    if (start1 <= start2 && end2 <= end1) {\n      return\
    \ \"YES\";\n    } else {\n      return \"NO\";\n    }\n  } else {\n    return\
    \ \"NO\";\n  }\n}\n", "  const [start1, end1] = interval1;\n  const [start2, end2]\
    \ = interval2;\n  if (start1 < start2) {\n    const temp = start1;\n    start1\
    \ = start2;\n    start2 = temp;\n  }\n  if (end1 < end2) {\n    const temp = end1;\n\
    \    end1 = end2;\n    end2 = temp;\n  }\n  if (start1 > end2) {\n    const temp\
    \ = start2;\n    start2 = start1;\n    start1 = temp;\n  }\n  if (start2 > end1)\
    \ {\n    const temp = start1;\n    start1 = start2;\n    start2 = temp;\n  }\n\
    \  if (start1 < end1 && start2 < end2) {\n    if (start1 < end2 && end1 < end2)\
    \ {\n      return \"NO\";\n    }\n    if (start2 < end1 && end2 < end1) {\n  \
    \    return \"NO\";\n    }\n    if (start1 < end2 && start2 < end1) {\n      return\
    \ \"YES\";\n    }\n    if (start2 < end1 && end1 < end2) {\n      return \"YES\"\
    ;\n    }\n  }\n  return \"NO\";\n}\n", "  if (interval1[0] > interval2[1]) {\n\
    \    return intersection(interval2, interval1)\n  }\n  if (interval1[1] < interval2[0])\
    \ {\n    return intersection(interval1, interval2)\n  }\n  if (interval1[0] ===\
    \ interval1[1]) {\n    return \"NO\"\n  }\n  if (interval2[0] === interval2[1])\
    \ {\n    return \"NO\"\n  }\n  if (interval1[0] === interval2[0]) {\n    return\
    \ \"YES\"\n  }\n  let start1 = interval1[0]\n  let end1 = interval1[1]\n  let\
    \ start2 = interval2[0]\n  let end2 = interval2[1]\n  let startIntersection =\
    \ start1\n  let endIntersection = end1\n  let startIntersection2 = start2\n  let\
    \ endIntersection2 = end2\n  let startIntersection3 = start1\n  let endIntersection3\
    \ = end1\n  let startIntersection4 = start2\n  let endIntersection4 = end2\n \
    \ let startIntersection5 = start1\n  let endIntersection5 = end1\n  let startIntersection6\
    \ = start2\n  let endIntersection6 = end2\n  let startIntersection7 = start1\n\
    \  let endIntersection7 = end1\n  let startIntersection8 = start2\n  let endIntersection8\
    \ = end2\n  let startIntersection9 = start1\n  let endIntersection9 = end1\n \
    \ let startIntersection10 = start2\n  let endIntersection10 = end2\n  let startIntersection11\
    \ = start1\n  let endIntersection11 = end1\n  let startIntersection12 = start2\n\
    \  let endIntersection12 = end2\n  let startIntersection13 = start1\n  let endIntersection13\
    \ = end1\n  let startIntersection14 = start2\n  let endIntersection14 = end2\n\
    \  let startIntersection15 = start1\n  let endIntersection15 = end1\n  let startIntersection16\
    \ = start2\n  let endIntersection16 = end2\n  let startIntersection17 = start1\n\
    \  let endIntersection17 = end1\n  let startIntersection18 = start2\n  let endIntersection18\
    \ = end2\n  let startIntersection19 = start1\n  let endIntersection19 = end1\n\
    \  let startIntersection20 = start2\n  let endIntersection20 = end2\n  let startIntersection21\
    \ = start1\n  let endIntersection21 = end1\n  let startIntersection22 = start2\n\
    \  let endIntersection22 = end2\n  let startIntersection23 = start1\n  let endIntersection23\
    \ = end1\n  let startIntersection24 = ", "  let [start1, end1] = interval1;\n\
    \  let [start2, end2] = interval2;\n  if (start1 > end2) [start1, end2] = [end2,\
    \ start1];\n  if (start2 > end1) [start2, end1] = [end1, start2];\n  if (start1\
    \ < start2 && end1 > end2) return \"NO\";\n  if (start1 < start2 && end1 < end2)\
    \ return \"NO\";\n  if (start1 == start2 && end1 == end2) return \"YES\";\n  let\
    \ [min1, max1] = interval1;\n  let [min2, max2] = interval2;\n  if (min1 > max2)\
    \ [min1, max2] = [max2, min1];\n  if (min2 > max1) [min2, max1] = [max1, min2];\n\
    \  if (min1 < min2 && max1 > max2) return \"NO\";\n  if (min1 < min2 && max1 <\
    \ max2) return \"NO\";\n  if (min1 == min2 && max1 == max2) return \"YES\";\n\
    \  let [min3, max3] = interval1;\n  let [min4, max4] = interval2;\n  if (min3\
    \ > max4) [min3, max4] = [max4, min3];\n  if (min4 > max3) [min4, max3] = [max3,\
    \ min4];\n  if (min3 < min4 && max3 > max4) return \"NO\";\n  if (min3 < min4\
    \ && max3 < max4) return \"NO\";\n  if (min3 == min4 && max3 == max4) return \"\
    YES\";\n  let [min5, max5] = interval1;\n  let [min6, max6] = interval2;\n  if\
    \ (min5 > max6) [min5, max6] = [max6, min5];\n  if (min6 > max5) [min6, max5]\
    \ = [max5, min6];\n  if (min5 < min6 && max5 > max6) return \"NO\";\n  if (min5\
    \ < min6 && max5 < max6) return \"NO\";\n  if (min5 == min6 && max5 == max6) return\
    \ \"YES\";\n  let [min7, max7] = interval1;\n  let [min8, max8] = interval2;\n\
    \  if (min7 > max8) [min7, max8] = [max8, min7];\n  if (min8 > max7) [min8, max7]\
    \ = [max7, min8];\n  if (min7 < min8 && max7 > max8) return \"NO\";\n  if (min7\
    \ < min8 && max7 < max8) return \"NO\";\n  if (min7 == min8 && max7 == max8) return\
    \ \"YES\";\n  let [min9, max9] = interval1;\n  let ", "  if (interval1[0] > interval1[1]\
    \ || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  let result = [];\n\
    \  for (let i = interval1[0]; i <= interval1[1]; i++) {\n    for (let j = interval2[0];\
    \ j <= interval2[1]; j++) {\n      if (i === j) {\n        result.push(i);\n \
    \     }\n    }\n  }\n  if (result.length === 0) {\n    return \"NO\";\n  }\n \
    \ if (result.length === 1) {\n    return \"YES\";\n  }\n  if (result.length >=\
    \ 2) {\n    let isPrime = true;\n    for (let i = 0; i < result.length; i++) {\n\
    \      if (result[i] % result.length === 0 && !isPrime) {\n        isPrime = false;\n\
    \        break;\n      }\n    }\n    if (isPrime) {\n      return \"YES\";\n \
    \   }\n  }\n  return \"NO\";\n}\n", "  let [start1, end1] = interval1;\n  let\
    \ [start2, end2] = interval2;\n  let startIntersection = start1 < start2 ? start2\
    \ : start1;\n  let endIntersection = end1 < end2 ? end2 : end1;\n  let length\
    \ = endIntersection - startIntersection;\n  if (length === 0) {\n    return \"\
    NO\";\n  }\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  for (let i =\
    \ startIntersection; i <= endIntersection; i = i + 2) {\n    if (i % 2 === 0)\
    \ {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}\n", "  let [start1,\
    \ end1] = interval1;\n  let [start2, end2] = interval2;\n  let [start3, end3]\
    \ = interval1;\n  let [start4, end4] = interval2;\n  let [start5, end5] = interval1;\n\
    \  let [start6, end6] = interval2;\n  let [start7, end7] = interval1;\n  let [start8,\
    \ end8] = interval2;\n  let [start9, end9] = interval1;\n  let [start10, end10]\
    \ = interval2;\n  let [start11, end11] = interval1;\n  let [start12, end12] =\
    \ interval2;\n  let [start13, end13] = interval1;\n  let [start14, end14] = interval2;\n\
    \  let [start15, end15] = interval1;\n  let [start16, end16] = interval2;\n  let\
    \ [start17, end17] = interval1;\n  let [start18, end18] = interval2;\n  let [start19,\
    \ end19] = interval1;\n  let [start20, end20] = interval2;\n  let [start21, end21]\
    \ = interval1;\n  let [start22, end22] = interval2;\n  let [start23, end23] =\
    \ interval1;\n  let [start24, end24] = interval2;\n  let [start25, end25] = interval1;\n\
    \  let [start26, end26] = interval2;\n  let [start27, end27] = interval1;\n  let\
    \ [start28, end28] = interval2;\n  let [start29, end29] = interval1;\n  let [start30,\
    \ end30] = interval2;\n  let [start31, end31] = interval1;\n  let [start32, end32]\
    \ = interval2;\n  let [start33, end33] = interval1;\n  let [start34, end34] =\
    \ interval2;\n  let [start35, end35] = interval1;\n  let [start36, end36] = interval2;\n\
    \  let [start37, end37] = interval1;\n  let [start38, end38] = interval2;\n  let\
    \ [start39, end39] = interval1;\n  let [start40, end40] = interval2;\n  let [start41,\
    \ end41] = interval1;\n  let [start42, end42] = interval2;\n  let [start43, end43]\
    \ = interval1;\n  let [start44, end44] = interval2;\n  let [start45, end45] =\
    \ interval1;\n  let [start46, end46] = interval2;\n  let [start47, end47] = interval1;\n\
    \  let [start48, end48] = interval2;\n  let [start49, end49] = interval1;\n  let\
    \ [start50, end50] = interval2;\n  let [start51, end51] = interval1;\n  let [start",
  "  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return\
    \ \"NO\";\n  }\n  if (interval1[0] < interval1[1] && interval2[0] < interval2[1])\
    \ {\n    return \"YES\";\n  }\n  if (interval1[0] < interval1[1] && interval2[0]\
    \ > interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] > interval1[1]\
    \ && interval2[0] < interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0]\
    \ > interval1[1] && interval2[0] > interval2[1]) {\n    return \"YES\";\n  }\n\
    \  return \"NO\";\n}\n", "  const [start1, end1] = interval1;\n  const [start2,\
    \ end2] = interval2;\n  if (start1 > end2) {\n    const temp = start2;\n    start2\
    \ = end2;\n    end2 = temp;\n  }\n  if (start2 > end1) {\n    const temp = start1;\n\
    \    start1 = end1;\n    end1 = temp;\n  }\n  if (start1 < start2) {\n    const\
    \ temp = start1;\n    start1 = start2;\n    start2 = temp;\n  }\n  if (end1 <\
    \ end2) {\n    const temp = end1;\n    end1 = end2;\n    end2 = temp;\n  }\n \
    \ if (start2 === end1) {\n    return \"NO\";\n  }\n  const start1End = start1\
    \ + end1;\n  const start2End = start2 + end2;\n  if (start1End === start2End)\
    \ {\n    return \"NO\";\n  }\n  if (start1End > start2End) {\n    const temp =\
    \ start1End;\n    start1End = start2End;\n    start2End = temp;\n  }\n  if (start1End\
    \ === start2End) {\n    return \"NO\";\n  }\n  if (start1End < start2End) {\n\
    \    const temp = start1End;\n    start1End = start2End;\n    start2End = temp;\n\
    \  }\n  if (start1End === start2End) {\n    return \"NO\";\n  }\n  if (start1End\
    \ > start2End) {\n    const temp = start1End;\n    start1End = start2End;\n  \
    \  start2End = temp;\n  }\n  if (start1End === start2End) {\n    return \"NO\"\
    ;\n  }\n  if (start1End < start2End) {\n    const temp = start1End;\n    start1End\
    \ = start2End;\n    start2End = temp;\n  }\n  if (start1End === start2End) {\n\
    \    return \"NO\";\n  }\n  if (start1End < start2End) {\n    const temp = start1End;\n\
    \    start1End = start2End;\n    start2End = temp;\n  }\n  if (start1End === start2End)\
    \ {\n    return \"NO\";\n  }\n  if (start1End > start2End) {\n    const temp =\
    \ start1End;\n    start1End = start2End;\n    start2End = temp;\n  }\n  if (start1End\
    \ === start2End) {\n    return \"NO\";\n  }\n  if (start1End < start2End) {\n\
    \    const temp = start1End;\n    start1End = start2End;\n    start2End = temp;\n\
    \  }\n  if (start1End === start2End) {\n    return \"NO\";\n  }\n  if (start1End\
    \ > start2End) {\n    const ", "  const [start1, end1] = interval1;\n  const [start2,\
    \ end2] = interval2;\n  if (start1 < start2) {\n    const temp = start1;\n   \
    \ start1 = start2;\n    start2 = temp;\n  }\n  if (end1 < end2) {\n    const temp\
    \ = end1;\n    end1 = end2;\n    end2 = temp;\n  }\n  if (start1 > end2) {\n \
    \   return \"NO\";\n  }\n  if (start2 === end2) {\n    return \"NO\";\n  }\n \
    \ if (start1 === end1) {\n    return \"YES\";\n  }\n  let startIntersection =\
    \ start1;\n  let endIntersection = end1;\n  while (startIntersection < endIntersection)\
    \ {\n    if (startIntersection === start2) {\n      startIntersection += 1;\n\
    \    } else if (startIntersection === end2) {\n      endIntersection -= 1;\n \
    \   } else {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}\n", "  if\
    \ (interval1[0] > interval2[1] || interval1[1] < interval2[0]) {\n    return \"\
    NO\";\n  }\n  let result = [];\n  for (let i = interval1[0]; i <= interval1[1];\
    \ i++) {\n    for (let j = interval2[0]; j <= interval2[1]; j++) {\n      if (i\
    \ === j) {\n        result.push(i);\n      }\n    }\n  }\n  if (result.length\
    \ === 0) {\n    return \"NO\";\n  }\n  if (result.length === 1) {\n    return\
    \ \"YES\";\n  }\n  let prime = true;\n  for (let i = 0; i < result.length; i++)\
    \ {\n    if (result[i] % 2 === 0) {\n      prime = false;\n      break;\n    }\n\
    \  }\n  return prime ? \"YES\" : \"NO\";\n}\n", "  let [start1, end1] = interval1;\n\
    \  let [start2, end2] = interval2;\n  let [start3, end3] = interval1;\n  let [start4,\
    \ end4] = interval2;\n  let [start5, end5] = interval1;\n  let [start6, end6]\
    \ = interval2;\n  let [start7, end7] = interval1;\n  let [start8, end8] = interval2;\n\
    \  let [start9, end9] = interval1;\n  let [start10, end10] = interval2;\n  let\
    \ [start11, end11] = interval1;\n  let [start12, end12] = interval2;\n  let [start13,\
    \ end13] = interval1;\n  let [start14, end14] = interval2;\n  let [start15, end15]\
    \ = interval1;\n  let [start16, end16] = interval2;\n  let [start17, end17] =\
    \ interval1;\n  let [start18, end18] = interval2;\n  let [start19, end19] = interval1;\n\
    \  let [start20, end20] = interval2;\n  let [start21, end21] = interval1;\n  let\
    \ [start22, end22] = interval2;\n  let [start23, end23] = interval1;\n  let [start24,\
    \ end24] = interval2;\n  let [start25, end25] = interval1;\n  let [start26, end26]\
    \ = interval2;\n  let [start27, end27] = interval1;\n  let [start28, end28] =\
    \ interval2;\n  let [start29, end29] = interval1;\n  let [start30, end30] = interval2;\n\
    \  let [start31, end31] = interval1;\n  let [start32, end32] = interval2;\n  let\
    \ [start33, end33] = interval1;\n  let [start34, end34] = interval2;\n  let [start35,\
    \ end35] = interval1;\n  let [start36, end36] = interval2;\n  let [start37, end37]\
    \ = interval1;\n  let [start38, end38] = interval2;\n  let [start39, end39] =\
    \ interval1;\n  let [start40, end40] = interval2;\n  let [start41, end41] = interval1;\n\
    \  let [start42, end42] = interval2;\n  let [start43, end43] = interval1;\n  let\
    \ [start44, end44] = interval2;\n  let [start45, end45] = interval1;\n  let [start46,\
    \ end46] = interval2;\n  let [start47, end47] = interval1;\n  let [start48, end48]\
    \ = interval2;\n  let [start49, end49] = interval1;\n  let [start50, end50] =\
    \ interval2;\n  let [start51, end51] = interval1;\n  let [start", "  let interval1Start\
    \ = interval1[0];\n  let interval1End = interval1[1];\n  let interval2Start =\
    \ interval2[0];\n  let interval2End = interval2[1];\n  let intersectionStart =\
    \ Math.max(interval1Start, interval2Start);\n  let intersectionEnd = Math.min(interval1End,\
    \ interval2End);\n  let intersectionLength = intersectionEnd - intersectionStart;\n\
    \  if (intersectionLength === 0) return \"NO\";\n  if (intersectionLength ===\
    \ 1) return \"YES\";\n  if (intersectionLength === 2) return \"YES\";\n  if (intersectionLength\
    \ === 3) return \"YES\";\n  if (intersectionLength === 4) return \"YES\";\n  if\
    \ (intersectionLength === 5) return \"YES\";\n  if (intersectionLength === 6)\
    \ return \"YES\";\n  if (intersectionLength === 7) return \"YES\";\n  if (intersectionLength\
    \ === 8) return \"YES\";\n  if (intersectionLength === 9) return \"YES\";\n  if\
    \ (intersectionLength === 10) return \"YES\";\n  if (intersectionLength === 11)\
    \ return \"YES\";\n  if (intersectionLength === 12) return \"YES\";\n  if (intersectionLength\
    \ === 13) return \"YES\";\n  if (intersectionLength === 14) return \"YES\";\n\
    \  if (intersectionLength === 15) return \"YES\";\n  if (intersectionLength ===\
    \ 16) return \"YES\";\n  if (intersectionLength === 17) return \"YES\";\n  if\
    \ (intersectionLength === 18) return \"YES\";\n  if (intersectionLength === 19)\
    \ return \"YES\";\n  if (intersectionLength === 20) return \"YES\";\n  if (intersectionLength\
    \ === 21) return \"YES\";\n  if (intersectionLength === 22) return \"YES\";\n\
    \  if (intersectionLength === 23) return \"YES\";\n  if (intersectionLength ===\
    \ 24) return \"YES\";\n  if (intersectionLength === 25) return \"YES\";\n  if\
    \ (intersectionLength === 26) return \"YES\";\n  if (intersectionLength === 27)\
    \ return \"YES\";\n  if (intersectionLength === 28) return \"YES\";\n  if (intersectionLength\
    \ === 29) return \"YES\";\n  if (intersectionLength === 30) return \"YES\";\n\
    \  if (intersectionLength === 31) return \"YES\";\n  if (intersectionLength ===\
    \ 32) return \"YES\";\n  if (intersectionLength === 33) return \"YES\";\n  if\
    \ (intersectionLength === 34) return \"YES\";\n  if (intersectionLength === 35)\
    \ return \"YES\";\n  if (intersectionLength === 36) return \"YES\";\n  if (intersectionLength\
    \ === 37) return \"YES\";\n  if (intersectionLength === 38) return \"YES\";\n\
    \  if (intersectionLength === 39) return \"YES\";\n  if (intersectionLength ===\
    \ 40) return \"YES\";\n  if (intersectionLength === 41) return \"YES\";\n  if\
    \ (intersectionLength === 42) return \"YES\";\n  if (intersectionLength === 43)\
    \ return \"YES\";\n  if (intersection", "  const [start1, end1] = interval1;\n\
    \  const [start2, end2] = interval2;\n  if (start1 < start2) {\n    const temp\
    \ = start1;\n    start1 = start2;\n    start2 = temp;\n  }\n  if (end1 < end2)\
    \ {\n    const temp = end1;\n    end1 = end2;\n    end2 = temp;\n  }\n  if (start1\
    \ > end2) {\n    return \"NO\";\n  }\n  if (start2 === end2) {\n    return \"\
    NO\";\n  }\n  if (start1 === end1) {\n    return \"YES\";\n  }\n  const [start1Start,\
    \ start1End] = interval1;\n  const [start2Start, start2End] = interval2;\n  if\
    \ (start1Start === start2Start) {\n    return \"YES\";\n  }\n  if (start1Start\
    \ > start2Start) {\n    return \"NO\";\n  }\n  if (start1End < start2End) {\n\
    \    return \"NO\";\n  }\n  if (start1End > start2End) {\n    return \"YES\";\n\
    \  }\n  if (start1Start === start2Start && start1End === start2End) {\n    return\
    \ \"YES\";\n  }\n  if (start1Start === start2Start && start1End > start2End) {\n\
    \    return \"NO\";\n  }\n  if (start1Start > start2Start && start1End < start2End)\
    \ {\n    return \"NO\";\n  }\n  if (start1Start > start2Start && start1End > start2End)\
    \ {\n    return \"YES\";\n  }\n  if (start1Start === start2Start && start1End\
    \ === start2End) {\n    return \"YES\";\n  }\n  if (start1Start > start2Start\
    \ && start1End < start2End) {\n    return \"YES\";\n  }\n  if (start1Start < start2Start\
    \ && start1End > start2End) {\n    return \"YES\";\n  }\n  if (start1Start < start2Start\
    \ && start1End === start2End) {\n    return \"YES\";\n  }\n  if (start1Start >\
    \ start2Start && start1End < start2End) {\n    return \"NO\";\n  }\n  if (start1Start\
    \ < start2Start && start1End > start2End) {\n    return \"NO\";\n  }\n  if (start1Start\
    \ === start2Start && start1End === start2End) {\n    return \"NO\";\n  }\n  if\
    \ (start1Start > start2Start && start1End < start2End) {\n    return \"NO\";\n\
    \  }\n  if (start1Start < start2Start && start1End > start2End) {\n    return\
    \ \"NO\";\n  }\n  if (start1Start === start2Start && start", "  if (interval1[0]\
    \ > interval2[0]) {\n    return intersection(interval2, interval1);\n  }\n  if\
    \ (interval1[1] < interval2[1]) {\n    return intersection(interval1, interval2);\n\
    \  }\n  if (interval1[0] === interval1[1] && interval2[0] === interval2[1]) {\n\
    \    return \"YES\";\n  }\n  if (interval1[0] === interval1[1]) {\n    return\
    \ \"NO\";\n  }\n  if (interval2[0] === interval2[1]) {\n    return \"NO\";\n \
    \ }\n  let [start1, end1] = interval1;\n  let [start2, end2] = interval2;\n  if\
    \ (start1 < start2) {\n    [start1, start2] = [start2, start1];\n  }\n  if (end1\
    \ < end2) {\n    [end1, end2] = [end2, end1];\n  }\n  if (start1 > end2) {\n \
    \   return intersection(interval2, interval1);\n  }\n  if (start2 === end2) {\n\
    \    return \"YES\";\n  }\n  let [start3, end3] = interval1;\n  let [start4, end4]\
    \ = interval2;\n  if (start3 < start4) {\n    [start3, start4] = [start4, start3];\n\
    \  }\n  if (end3 < end4) {\n    [end3, end4] = [end4, end3];\n  }\n  if (start3\
    \ === end4) {\n    return \"YES\";\n  }\n  let [start5, end5] = interval1;\n \
    \ let [start6, end6] = interval2;\n  if (start5 < start6) {\n    [start5, start6]\
    \ = [start6, start5];\n  }\n  if (end5 < end6) {\n    [end5, end6] = [end6, end5];\n\
    \  }\n  if (start5 === end6) {\n    return \"YES\";\n  }\n  let [start7, end7]\
    \ = interval1;\n  let [start8, end8] = interval2;\n  if (start7 < start8) {\n\
    \    [start7, start8] = [start8, start7];\n  }\n  if (end7 < end8) {\n    [end7,\
    \ end8] = [end8, end7];\n  }\n  if (start7 === end8) {\n    return \"YES\";\n\
    \  }\n  let [start9, end9] = interval1;\n  let [start10, end10] = interval2;\n\
    \  if (start9 < start10) {\n    [start9, start10] = [start10, start9];\n  }\n\
    \  if (end9 < end10) {\n    [end9, end10] = [end10, end9];\n  }\n  if (start9\
    \ === end10) {\n    return \"YES\";\n  }\n  let [start11, end11] = interval1;\n\
    \  let [start12, end12] = interval2;\n  if (start11 < start", "  const [start1,\
    \ end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2)\
    \ return \"NO\";\n  if (start2 > end1) return \"NO\";\n  if (start1 === start2\
    \ && end1 === end2) return \"YES\";\n  if (start1 < start2 && end1 < end2) return\
    \ \"NO\";\n  if (start1 < start2 && end1 > end2) return \"NO\";\n  if (start1\
    \ > start2 && end1 < end2) return \"NO\";\n  if (start1 < start2 && end1 > end2)\
    \ return \"NO\";\n  if (start1 < start2 && end1 < end2) return \"NO\";\n  if (start1\
    \ > start2 && end1 > end2) return \"NO\";\n  if (start1 > start2 && end1 > end2)\
    \ return \"NO\";\n  return \"NO\";\n}\n", "  const [interval1Start, interval1End]\
    \ = interval1;\n  const [interval2Start, interval2End] = interval2;\n  if (interval1Start\
    \ > interval1End) {\n    return `NO`;\n  }\n  if (interval2Start > interval2End)\
    \ {\n    return `NO`;\n  }\n  if (interval1Start === interval1End) {\n    return\
    \ `NO`;\n  }\n  if (interval2Start === interval2End) {\n    return `NO`;\n  }\n\
    \  if (interval1Start > interval2Start) {\n    return `NO`;\n  }\n  if (interval1Start\
    \ === interval2Start) {\n    return `YES`;\n  }\n  if (interval1Start > interval2End)\
    \ {\n    return `YES`;\n  }\n  return `YES`;\n}\n", "  let [start1, end1] = interval1;\n\
    \  let [start2, end2] = interval2;\n  let start1LessOrEqualEnd2 = start1 < end2\
    \ && start2 < end1;\n  let start2LessOrEqualEnd1 = start2 < end1 && start1 < end2;\n\
    \  let start1LessOrEqualEnd2 = start1 < end2 && start2 < end1;\n  let start2LessOrEqualEnd1\
    \ = start2 < end1 && start1 < end2;\n  let start1LessOrEqualEnd2 = start1 < end2\
    \ && start2 < end1;\n  let start2LessOrEqualEnd1 = start2 < end1 && start1 < end2;\n\
    \  let start1LessOrEqualEnd2 = start1 < end2 && start2 < end1;\n  let start2LessOrEqualEnd1\
    \ = start2 < end1 && start1 < end2;\n  let start1LessOrEqualEnd2 = start1 < end2\
    \ && start2 < end1;\n  let start2LessOrEqualEnd1 = start2 < end1 && start1 < end2;\n\
    \  let start1LessOrEqualEnd2 = start1 < end2 && start2 < end1;\n  let start2LessOrEqualEnd1\
    \ = start2 < end1 && start1 < end2;\n  let start1LessOrEqualEnd2 = start1 < end2\
    \ && start2 < end1;\n  let start2LessOrEqualEnd1 = start2 < end1 && start1 < end2;\n\
    \  let start1LessOrEqualEnd2 = start1 < end2 && start2 < end1;\n  let start2LessOrEqualEnd1\
    \ = start2 < end1 && start1 < end2;\n  let start1LessOrEqualEnd2 = start1 < end2\
    \ && start2 < end1;\n  let start2LessOrEqualEnd1 = start2 < end1 && start1 < end2;\n\
    \  let start1LessOrEqualEnd2 = start1 < end2 && start2 < end1;\n  let start2LessOrEqualEnd1\
    \ = start2 < end1 && start1 < end2;\n  let start1LessOrEqualEnd2 = start1 < end2\
    \ && start2 < end1;\n  let start2LessOrEqualEnd1 = start2 < end1 && start1 < end2;\n\
    \  let start1LessOrEqualEnd2 = start1 < end2 && start2 < end1;\n  let start2LessOrEqualEnd1\
    \ = start2 < end1 && start1 < end2;\n  let start1LessOrEqualEnd2 = start1 < end2\
    \ && start2 < end1;\n  let start2LessOrEqualEnd1 = start2 < end1 && start1 < end2;\n\
    \  let start1LessOrEqualEnd2 = start1 < end2 && start2 < end1;\n  let start2LessOrEqualEnd1\
    \ = start2 < end1 && start1 < end2;\n  let start1LessOrEqualEnd2 = start1 < end2\
    \ && start2 < end1;\n  let ", "  const [start1, end1] = interval1;\n  const [start2,\
    \ end2] = interval2;\n  if (start1 > end2) return \"NO\";\n  if (start2 > end1)\
    \ return \"NO\";\n  if (start2 === start1 && end2 === end1) return \"NO\";\n \
    \ if (start2 === start1 && end2 > end1) return \"NO\";\n  if (start2 === start1\
    \ && end2 === end1) return \"NO\";\n  if (start2 > start1 && end2 === end1) return\
    \ \"NO\";\n  if (start2 > start1 && end2 > end1) return \"NO\";\n  if (start2\
    \ === start1 && end2 > end1) return \"NO\";\n  if (start2 === start1 && end2 ===\
    \ end1) return \"NO\";\n  if (start2 > start1 && end2 > end1) return \"NO\";\n\
    \  if (start2 > start1 && end2 === end1) return \"NO\";\n  if (start2 === start1\
    \ && end2 > end1) return \"NO\";\n  if (start2 === start1 && end2 === end1) return\
    \ \"NO\";\n  if (start2 > start1 && end2 > end1) return \"NO\";\n  if (start2\
    \ > start1 && end2 === end1) return \"NO\";\n  if (start2 === start1 && end2 >\
    \ end1) return \"NO\";\n  if (start2 === start1 && end2 === end1) return \"NO\"\
    ;\n  if (start2 > start1 && end2 > end1) return \"NO\";\n  if (start2 > start1\
    \ && end2 === end1) return \"NO\";\n  if (start2 === start1 && end2 > end1) return\
    \ \"NO\";\n  if (start2 === start1 && end2 === end1) return \"NO\";\n  if (start2\
    \ > start1 && end2 > end1) return \"NO\";\n  if (start2 > start1 && end2 === end1)\
    \ return \"NO\";\n  if (start2 === start1 && end2 > end1) return \"NO\";\n  if\
    \ (start2 === start1 && end2 === end1) return \"NO\";\n  if (start2 > start1 &&\
    \ end2 > end1) return \"NO\";\n  if (start2 > start1 && end2 === end1) return\
    \ \"NO\";\n  if (start2 === start1 && end2 > end1) return \"NO\";\n  if (start2\
    \ === start1 && end2 === end1) return \"NO\";\n  if (start2 > start1 && end2 >\
    \ end1) return \"NO\";\n  if (start2 > start1 && end2 === end1) return \"NO\"\
    ;\n  if (start2 === start1 && end2 > ", "  let [start1, end1] = interval1;\n \
    \ let [start2, end2] = interval2;\n  if (start1 > end2 || start2 > end1) {\n \
    \   return \"NO\";\n  }\n  if (start1 === start2 && end1 === end2) {\n    return\
    \ \"YES\";\n  }\n  let startIntersection = start1 < start2 ? start1 : start2;\n\
    \  let endIntersection = end1 < end2 ? end1 : end2;\n  let startIntersectionEnd\
    \ = startIntersection + endIntersection;\n  let endIntersectionStart = startIntersection\
    \ - endIntersection;\n  if (startIntersectionEnd % 2 === 0 && endIntersectionStart\
    \ % 2 === 0) {\n    return \"YES\";\n  }\n  return \"NO\";\n}\n", "  const [start1,\
    \ end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 <= end2\
    \ && start2 <= end1) {\n    if (start1 < start2) {\n      return \"NO\";\n   \
    \ } else if (start1 > start2) {\n      return \"YES\";\n    } else {\n      return\
    \ \"NO\";\n    }\n  } else {\n    return \"NO\";\n  }\n}\n", "  let [start1, end1]\
    \ = interval1;\n  let [start2, end2] = interval2;\n  let start1LessEqualEnd2 =\
    \ start1 <= end2;\n  let start2LessEqualEnd1 = start2 <= end1;\n  if (start1LessEqualEnd2\
    \ && start2LessEqualEnd1) {\n    return \"NO\";\n  }\n  if (start1LessEqualEnd2\
    \ && !start2LessEqualEnd1) {\n    return \"NO\";\n  }\n  if (!start1LessEqualEnd2\
    \ && start2LessEqualEnd1) {\n    return \"NO\";\n  }\n  if (start1LessEqualEnd2\
    \ && !start2LessEqualEnd1) {\n    return \"NO\";\n  }\n  if (start1LessEqualEnd2\
    \ && start2LessEqualEnd1) {\n    return \"NO\";\n  }\n  if (start1LessEqualEnd2\
    \ && !start2LessEqualEnd1) {\n    return \"NO\";\n  }\n  if (start1LessEqualEnd2\
    \ && start2LessEqualEnd1) {\n    return \"NO\";\n  }\n  if (start1LessEqualEnd2\
    \ && !start2LessEqualEnd1) {\n    return \"NO\";\n  }\n  if (start1LessEqualEnd2\
    \ && start2LessEqualEnd1) {\n    return \"NO\";\n  }\n  if (start1LessEqualEnd2\
    \ && !start2LessEqualEnd1) {\n    return \"NO\";\n  }\n  if (start1LessEqualEnd2\
    \ && start2LessEqualEnd1) {\n    return \"NO\";\n  }\n  if (start1LessEqualEnd2\
    \ && !start2LessEqualEnd1) {\n    return \"NO\";\n  }\n  if (start1LessEqualEnd2\
    \ && start2LessEqualEnd1) {\n    return \"NO\";\n  }\n  if (start1LessEqualEnd2\
    \ && !start2LessEqualEnd1) {\n    return \"NO\";\n  }\n  if (start1LessEqualEnd2\
    \ && start2LessEqualEnd1) {\n    return \"NO\";\n  }\n  if (start1LessEqualEnd2\
    \ && !start2LessEqualEnd1) {\n    return \"NO\";\n  }\n  if (start1LessEqualEnd2\
    \ && start2LessEqualEnd1) {\n    return \"NO\";\n  }\n  if (start1LessEqualEnd2\
    \ && !start2LessEqualEnd1) {\n    return \"NO\";\n  }\n  if (start1LessEqualEnd2\
    \ && start2LessEqualEnd1) {\n    return \"NO\";\n  }\n  if (start1LessEqualEnd2\
    \ && !start2LessEqualEnd1) {\n    return \"NO\";\n  }\n  if (start1LessEqualEnd2\
    \ && start2LessEqualEnd1) {\n    return \"NO\";\n  }\n  if (start1LessEqualEnd2\
    \ && !start2LessEqualEnd1) {\n    return \"NO\";\n  }\n  if (start1LessEqualEnd2\
    \ && start2LessEqualEnd1) {\n    return \"NO\";\n", "  if (interval1[0] >= interval1[1]\
    \ || interval2[0] >= interval2[1]) {\n    return \"NO\";\n  }\n  let intersection\
    \ = [interval1[0], interval1[1]];\n  let [interval1Start, interval1End] = interval1;\n\
    \  let [interval2Start, interval2End] = interval2;\n  while (interval1Start <=\
    \ interval1End && interval2Start <= interval2End) {\n    if (interval1Start <=\
    \ interval2Start && interval1End >= interval2End) {\n      intersection = [interval1Start,\
    \ interval1End];\n      break;\n    }\n    if (interval1Start <= interval2End\
    \ && interval1End >= interval2Start) {\n      intersection = [interval1Start,\
    \ interval1End];\n      break;\n    }\n    if (interval1Start <= interval2Start\
    \ && interval1End >= interval2End) {\n      intersection = [interval1Start, interval1End];\n\
    \      break;\n    }\n    if (interval1Start <= interval2End && interval1End >=\
    \ interval2Start) {\n      intersection = [interval1Start, interval1End];\n  \
    \    break;\n    }\n    interval1Start++;\n    interval1End--;\n    interval2Start++;\n\
    \    interval2End--;\n  }\n  if (intersection[0] >= intersection[1]) {\n    return\
    \ \"NO\";\n  }\n  if (intersection[0] === intersection[1]) {\n    return \"YES\"\
    ;\n  }\n  return \"NO\";\n}\n", "  if (interval1[0] > interval1[1] || interval2[0]\
    \ > interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] < interval1[1]\
    \ && interval2[0] < interval2[1]) {\n    return \"YES\";\n  }\n  if (interval1[0]\
    \ < interval1[1] && interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n\
    \  if (interval1[0] > interval1[1] && interval2[0] < interval2[1]) {\n    return\
    \ \"NO\";\n  }\n  if (interval1[0] > interval1[1] && interval2[0] > interval2[1])\
    \ {\n    return \"YES\";\n  }\n}\n", "  let [start1, end1] = interval1;\n  let\
    \ [start2, end2] = interval2;\n  let startIntersection = start1 < start2 ? start1\
    \ : start2;\n  let endIntersection = end1 < end2 ? end1 : end2;\n  let intersectionLength\
    \ = endIntersection - startIntersection;\n  if (intersectionLength === 0) return\
    \ \"NO\";\n  if (intersectionLength === 1) return \"YES\";\n  if (intersectionLength\
    \ % 2 === 0) return \"NO\";\n  let isPrime = true;\n  for (let i = 2; i <= intersectionLength\
    \ / 2; i++) {\n    if (startIntersection + i !== endIntersection) {\n      if\
    \ (startIntersection + i % 2 === endIntersection - i % 2) {\n        isPrime =\
    \ false;\n        break;\n      }\n    }\n  }\n  return isPrime ? \"YES\" : \"\
    NO\";\n}\n", "  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n\
    \  if (start1 > end2) return \"NO\"\n  if (start2 > end1) return \"NO\"\n  if\
    \ (start1 < start2) return \"NO\"\n  if (end1 < end2) return \"NO\"\n  if (start2\
    \ === end2) return \"YES\"\n  if (start2 === end1) return \"YES\"\n  if (start1\
    \ === end2) return \"YES\"\n  if (start1 === start2) return \"YES\"\n  return\
    \ \"NO\"\n}\n", "  if (interval1[0] > interval1[1] || interval2[0] > interval2[1])\
    \ {\n    return \"NO\";\n  }\n  if (interval1[0] < interval1[1] && interval2[0]\
    \ < interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] < interval1[1]\
    \ && interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0]\
    \ > interval1[1] && interval2[0] < interval2[1]) {\n    return \"NO\";\n  }\n\
    \  if (interval1[0] > interval1[1] && interval2[0] > interval2[1]) {\n    return\
    \ \"NO\";\n  }\n  if (interval1[0] === interval1[1] && interval2[0] === interval2[1])\
    \ {\n    return \"YES\";\n  }\n  if (interval1[0] === interval1[1]) {\n    return\
    \ \"YES\";\n  }\n  if (interval2[0] === interval2[1]) {\n    return \"YES\";\n\
    \  }\n  if (interval1[0] < interval2[0]) {\n    return \"YES\";\n  }\n  if (interval1[0]\
    \ > interval2[0]) {\n    return \"YES\";\n  }\n  if (interval1[1] < interval2[1])\
    \ {\n    return \"YES\";\n  }\n  if (interval1[1] > interval2[1]) {\n    return\
    \ \"YES\";\n  }\n}\n", "  if (interval1[0] >= interval2[1] || interval1[1] < interval2[0])\
    \ {\n    return \"NO\";\n  }\n  let [start1, end1] = interval1;\n  let [start2,\
    \ end2] = interval2;\n  let start1End = start1 < end1 ? start1 : end1;\n  let\
    \ start2End = start2 < end2 ? start2 : end2;\n  let start1End2 = start1 < end2\
    \ ? start2 : end2;\n  let start2End1 = start2 < end1 ? start1 : end1;\n  let start1End1End\
    \ = start1 < end1 ? start2 : end1;\n  let start2End1End = start2 < end1 ? start1\
    \ : end1;\n  let start1End2End = start1 < end2 ? start2 : end1;\n  let start2End2End\
    \ = start2 < end2 ? start2 : end2;\n  let start1End1EndEnd = start1 < end2 ? start2\
    \ : end1;\n  let start2End1EndEnd = start2 < end2 ? start2 : end1;\n  let start1End2EndEnd\
    \ = start1 < end2 ? start2 : end1;\n  let start2End2EndEnd = start2 < end2 ? start2\
    \ : end2;\n  let start1End1EndEndEnd = start1 < end2 ? start2 : end1;\n  let start2End1EndEndEnd\
    \ = start2 < end2 ? start2 : end1;\n  let start1End2EndEndEnd = start1 < end2\
    \ ? start2 : end1;\n  let start2End2EndEnd = start2 < end2 ? start2 : end2;\n\
    \  let start1End1EndEndEnd = start1 < end2 ? start2 : end1;\n  let start2End1EndEndEnd\
    \ = start2 < end2 ? start2 : end1;\n  let start1End2EndEndEnd = start1 < end2\
    \ ? start2 : end1;\n  let start2End2EndEnd = start2 < end2 ? start2 : end2;\n\
    \  let start1End1EndEndEnd = start1 < end2 ? start2 : end1;\n  let start2End1EndEndEnd\
    \ = start2 < end2 ? start2 : end1;\n  let start1End2EndEndEnd = start1 < end2\
    \ ? start2 : end1;\n  let start2End2EndEnd = start2 < end2 ? start2 : end2;\n\
    \  let start1End1EndEndEnd = start1 < end2 ? start2 : end1;\n  let start2End1EndEndEnd\
    \ = start2 < end2 ? start2 : end1;\n  let start1End2EndEndEnd = start1 < end2\
    \ ? start2 : end1;\n  let start2End2EndEnd = start2 < end2 ? start2 : end2;\n",
  "  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if\
    \ (start1 < start2) {\n    return [start1, end1].sort().join('..') === [start2,\
    \ end2].sort().join('..') ? 'YES' : 'NO';\n  }\n  if (start2 < start1) {\n   \
    \ return [start2, end2].sort().join('..') === [start1, end1].sort().join('..')\
    \ ? 'YES' : 'NO';\n  }\n  return [start1, end1].sort().join('..') === [start2,\
    \ end2].sort().join('..') ? 'YES' : 'NO';\n}\n", "  if (interval1[0] > interval2[1]\
    \ || interval1[1] < interval2[0]) {\n    return \"NO\";\n  }\n  let [start1, end1]\
    \ = interval1;\n  let [start2, end2] = interval2;\n  let startIntersection = start1\
    \ < start2 ? start1 : start2;\n  let endIntersection = end1 < end2 ? end1 : end2;\n\
    \  let lengthIntersection = endIntersection - startIntersection;\n  if (lengthIntersection\
    \ === 1) {\n    return \"YES\";\n  }\n  if (isPrime(lengthIntersection)) {\n \
    \   return \"YES\";\n  }\n  return \"NO\";\n}\n", "  const [start1, end1] = interval1\n\
    \  const [start2, end2] = interval2\n  if (start1 > end2) return \"NO\"\n  if\
    \ (start2 > end1) return \"NO\"\n  if (start1 < start2) return \"NO\"\n  if (end1\
    \ < end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"YES\"\
    \n  if (start1 === start2 && end1 !== end2) return \"NO\"\n  if (start1 !== start2\
    \ && end1 === end2) return \"NO\"\n  if (start1 !== start2 && end1 !== end2) return\
    \ \"YES\"\n}\n", "  const [start1, end1] = interval1;\n  const [start2, end2]\
    \ = interval2;\n  if (start1 <= end2 && start2 <= end1) {\n    if (start1 <= start2\
    \ && end2 <= end1) {\n      return \"YES\";\n    } else {\n      return \"NO\"\
    ;\n    }\n  } else {\n    return \"NO\";\n  }\n}\n", "  let [start1, end1] = interval1;\n\
    \  let [start2, end2] = interval2;\n  let startIntersection = start1 < start2\
    \ ? start1 : start2;\n  let endIntersection = end1 < end2 ? end1 : end2;\n  let\
    \ length = endIntersection - startIntersection;\n  if (length < 2) return \"NO\"\
    ;\n  if (length == 2 && startIntersection == endIntersection) return \"YES\";\n\
    \  if (length == 2 && startIntersection < endIntersection) return \"NO\";\n  if\
    \ (length == 2 && startIntersection > endIntersection) return \"NO\";\n  if (length\
    \ == 2 && startIntersection == endIntersection) return \"YES\";\n  if (length\
    \ == 2 && startIntersection < endIntersection) return \"NO\";\n  if (length ==\
    \ 2 && startIntersection > endIntersection) return \"NO\";\n  if (length == 2\
    \ && startIntersection == endIntersection) return \"YES\";\n  if (length == 2\
    \ && startIntersection < endIntersection) return \"NO\";\n  if (length == 2 &&\
    \ startIntersection > endIntersection) return \"NO\";\n  if (length == 3 && startIntersection\
    \ == endIntersection) return \"YES\";\n  if (length == 3 && startIntersection\
    \ < endIntersection) return \"NO\";\n  if (length == 3 && startIntersection >\
    \ endIntersection) return \"NO\";\n  if (length == 3 && startIntersection == endIntersection)\
    \ return \"YES\";\n  if (length == 3 && startIntersection < endIntersection) return\
    \ \"NO\";\n  if (length == 3 && startIntersection > endIntersection) return \"\
    NO\";\n  if (length == 3 && startIntersection == endIntersection) return \"YES\"\
    ;\n  if (length == 3 && startIntersection < endIntersection) return \"NO\";\n\
    \  if (length == 3 && startIntersection > endIntersection) return \"NO\";\n  if\
    \ (length == 3 && startIntersection == endIntersection) return \"YES\";\n  if\
    \ (length == 3 && startIntersection < endIntersection) return \"NO\";\n  if (length\
    \ == 3 && startIntersection > endIntersection) return \"NO\";\n  if (length ==\
    \ 3 && startIntersection == endIntersection) return \"YES\";\n  if (length ==\
    \ 3 && startIntersection < endIntersection) return \"NO\";\n  if (length == 3\
    \ && startIntersection > endIntersection) return \"NO\";\n  if (length == 3 &&\
    \ startIntersection == endIntersection) return \"YES\";\n  if (length == 3 &&\
    \ startIntersection < endIntersection) return \"NO\";\n  if (length == 3 && startIntersection\
    \ > endIntersection) return \"NO\";\n  if (length == 3 && startIntersection ==\
    \ endIntersection) return ", "  let interval1Start = interval1[0];\n  let interval1End\
    \ = interval1[1];\n  let interval2Start = interval2[0];\n  let interval2End =\
    \ interval2[1];\n  if (interval1Start > interval1End) {\n    let temp = interval1Start;\n\
    \    interval1Start = interval1End;\n    interval1End = temp;\n  }\n  if (interval2Start\
    \ > interval2End) {\n    let temp = interval2Start;\n    interval2Start = interval2End;\n\
    \    interval2End = temp;\n  }\n  if (interval1Start > interval2Start) {\n   \
    \ return \"NO\";\n  }\n  if (interval1Start === interval1End && interval2Start\
    \ === interval2End) {\n    return \"YES\";\n  }\n  let intersectionStart = Math.max(interval1Start,\
    \ interval2Start);\n  let intersectionEnd = Math.min(interval1End, interval2End);\n\
    \  if (intersectionStart === intersectionEnd) {\n    return \"NO\";\n  }\n  if\
    \ (isPrime(intersectionStart - intersectionEnd)) {\n    return \"YES\";\n  }\n\
    \  return \"NO\";\n}\n", "  if (interval1[0] > interval2[1] || interval1[1] <\
    \ interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[0] >= interval2[0]\
    \ && interval1[1] <= interval2[1]) {\n    return \"YES\";\n  }\n  let interval1Length\
    \ = interval1[1] - interval1[0] + 1;\n  let interval2Length = interval2[1] - interval2[0]\
    \ + 1;\n  let intersectionLength = interval1Length - interval2Length;\n  if (intersectionLength\
    \ === 0) {\n    return \"NO\";\n  }\n  if (intersectionLength === 1) {\n    return\
    \ \"YES\";\n  }\n  if (intersectionLength % 2 === 0) {\n    return \"NO\";\n \
    \ }\n  return \"YES\";\n}\n", "  const [start1, end1] = interval1;\n  const [start2,\
    \ end2] = interval2;\n  if (start1 < end2 && start2 < end1) {\n    if (start2\
    \ > end1) {\n      return \"NO\";\n    }\n    if (end2 > end1) {\n      return\
    \ \"NO\";\n    }\n    if (start2 <= end1 && start1 <= end2) {\n      return \"\
    YES\";\n    }\n    return \"NO\";\n  }\n  return \"NO\";\n}\n", "  const [start1,\
    \ end1] = interval1;\n  const [start2, end2] = interval2;\n  const [start3, end3]\
    \ = interval1;\n  const [start4, end4] = interval2;\n\n  if (start1 < start2 ||\
    \ start2 < start3 || start3 < start4 || start4 < start1) {\n    return \"NO\"\
    ;\n  }\n\n  if (end1 < end2 || end2 < end3 || end3 < end4 || end4 < end1) {\n\
    \    return \"NO\";\n  }\n\n  if (start1 > end2 || start2 > end3 || start3 > end4\
    \ || start4 > end1) {\n    return \"NO\";\n  }\n\n  if (start1 < start3 && start2\
    \ < start4 && start3 < end1 && start4 < end2) {\n    return \"NO\";\n  }\n\n \
    \ if (start1 < start2 && start2 < start4 && start2 < end1 && start4 < end3) {\n\
    \    return \"NO\";\n  }\n\n  if (start1 < start2 && start2 < start3 && start2\
    \ < end1 && start3 < end4) {\n    return \"NO\";\n  }\n\n  if (start1 < start3\
    \ && start3 < start4 && start3 < end1 && start4 < end2) {\n    return \"NO\";\n\
    \  }\n\n  if (start1 < start2 && start2 < start3 && start2 < end1 && start3 <\
    \ end4) {\n    return \"NO\";\n  }\n\n  if (start1 < start2 && start2 < start3\
    \ && start2 < end1 && start3 < end4) {\n    return \"NO\";\n  }\n\n  if (start1\
    \ < start2 && start2 < start3 && start2 < end1 && start3 < end4) {\n    return\
    \ \"NO\";\n  }\n\n  if (start1 < start2 && start2 < start3 && start2 < end1 &&\
    \ start3 < end4) {\n    return \"NO\";\n  }\n\n  if (start1 < start2 && start2\
    \ < start3 && start2 < end1 && start3 < end4) {\n    return \"NO\";\n  }\n\n \
    \ if (start1 < start2 && start2 < start3 && start2 < end1 && start3 < end4) {\n\
    \    return \"NO\";\n  }\n\n  if (start1 < start2 && start2 < start3 && start2\
    \ < end1 && start3 < end4) {\n    return \"NO\";\n  }\n\n  if (start1 < start2\
    \ && start2 < start3 && start2 < end1 && start3 < end4) {\n    return \"NO\";\n\
    \  }\n\n  if (start1 < start2 && start2 < start3 && start2 < end1 && start3 <\
    \ end4) {\n    return \"NO\";\n  }\n\n  if (start1 < start2 && start2 < start3\
    \ && start2 < end1 && start3 < end4) {\n    return \"NO\";\n  }\n\n  if (start1\
    \ < start2 && start2 < start3 && start2 < end1 && start3 < end4) {\n    return\
    \ \"NO\";\n  }\n\n  if (start1 < start2 && start2 < start", "  if (interval1[0]\
    \ > interval2[0]) {\n    return intersection(interval2, interval1)\n  }\n  if\
    \ (interval1[1] < interval2[1]) {\n    return intersection(interval1, interval2)\n\
    \  }\n  if (interval1[0] === interval1[1] && interval2[0] === interval2[1]) {\n\
    \    return \"YES\"\n  }\n  if (interval1[0] === interval1[1]) {\n    return \"\
    NO\"\n  }\n  if (interval2[0] === interval2[1]) {\n    return \"NO\"\n  }\n  const\
    \ [start1, end1] = interval1\n  const [start2, end2] = interval2\n  const startIntersection\
    \ = start1 < start2 ? start1 : start2\n  const endIntersection = end1 < end2 ?\
    \ end1 : end2\n  const lengthIntersection = endIntersection - startIntersection\n\
    \  if (lengthIntersection % 2 === 0) {\n    return \"NO\"\n  }\n  return \"YES\"\
    \n}\n", "  let [start1, end1] = interval1;\n  let [start2, end2] = interval2;\n\
    \  let start1LessOrEqualEnd1 = start1 <= end1;\n  let start2LessOrEqualEnd2 =\
    \ start2 <= end2;\n  let start1LessOrEqualEnd2 = start1 <= end2;\n  if (start1LessOrEqualEnd1\
    \ && start2LessOrEqualEnd2) {\n    return `YES`;\n  }\n  if (start1LessOrEqualEnd2\
    \ && start2LessOrEqualEnd1) {\n    return `YES`;\n  }\n  if (start1LessOrEqualEnd1\
    \ && start2LessOrEqualEnd2) {\n    return `YES`;\n  }\n  if (start1LessOrEqualEnd2\
    \ && start2LessOrEqualEnd1) {\n    return `YES`;\n  }\n  if (start1LessOrEqualEnd1\
    \ && start2LessOrEqualEnd2) {\n    return `YES`;\n  }\n  if (start1LessOrEqualEnd2\
    \ && start2LessOrEqualEnd1) {\n    return `YES`;\n  }\n  if (start1LessOrEqualEnd1\
    \ && start2LessOrEqualEnd2) {\n    return `YES`;\n  }\n  if (start1LessOrEqualEnd2\
    \ && start2LessOrEqualEnd1) {\n    return `YES`;\n  }\n  if (start1LessOrEqualEnd1\
    \ && start2LessOrEqualEnd2) {\n    return `YES`;\n  }\n  if (start1LessOrEqualEnd2\
    \ && start2LessOrEqualEnd1) {\n    return `YES`;\n  }\n  if (start1LessOrEqualEnd1\
    \ && start2LessOrEqualEnd2) {\n    return `YES`;\n  }\n  if (start1LessOrEqualEnd2\
    \ && start2LessOrEqualEnd1) {\n    return `YES`;\n  }\n  if (start1LessOrEqualEnd1\
    \ && start2LessOrEqualEnd2) {\n    return `YES`;\n  }\n  if (start1LessOrEqualEnd2\
    \ && start2LessOrEqualEnd1) {\n    return `YES`;\n  }\n  if (start1LessOrEqualEnd1\
    \ && start2LessOrEqualEnd2) {\n    return `YES`;\n  }\n  if (start1LessOrEqualEnd2\
    \ && start2LessOrEqualEnd1) {\n    return `YES`;\n  }\n  if (start1LessOrEqualEnd1\
    \ && start2LessOrEqualEnd2) {\n    return `YES`;\n  }\n  if (start1LessOrEqualEnd2\
    \ && start2LessOrEqualEnd1) {\n    return `YES`;\n  }\n  if (start1LessOrEqualEnd1\
    \ && start2LessOrEqualEnd2) {\n    return `YES`;\n  }\n  if (start1LessOrEqualEnd2\
    \ && start2LessOrEqualEnd1) {\n    return ", "  if (interval1[0] > interval2[0])\
    \ {\n    let temp = interval1[0];\n    interval1[0] = interval2[0];\n    interval2[0]\
    \ = temp;\n  }\n  if (interval1[1] < interval2[1]) {\n    let temp = interval1[1];\n\
    \    interval1[1] = interval2[1];\n    interval2[1] = temp;\n  }\n  if (interval1[0]\
    \ >= interval2[1] || interval1[1] <= interval2[0]) {\n    return \"NO\";\n  }\n\
    \  let count = 0;\n  for (let i = interval1[0]; i <= interval1[1]; i++) {\n  \
    \  for (let j = interval2[0]; j <= interval2[1]; j++) {\n      if (i === j) {\n\
    \        count++;\n      }\n    }\n  }\n  if (count % 2 === 0) {\n    return \"\
    YES\";\n  }\n  return \"NO\";\n}\n", "  let [start1, end1] = interval1;\n  let\
    \ [start2, end2] = interval2;\n  let startIntersection = start1 < start2 ? start1\
    \ : start2;\n  let endIntersection = end1 < end2 ? end1 : end2;\n  let intersectionLength\
    \ = endIntersection - startIntersection;\n  let isPrime = true;\n  for (let i\
    \ = 2; i <= intersectionLength; i++) {\n    if (startIntersection + i !== endIntersection)\
    \ {\n      if (startIntersection + i !== endIntersection && startIntersection\
    \ + i % 2 !== endIntersection % 2) {\n        isPrime = false;\n      }\n    }\n\
    \  }\n  return isPrime ? \"YES\" : \"NO\";\n}\n", "  if (interval1[0] > interval2[1]\
    \ || interval1[1] < interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[0]\
    \ === interval1[1] && interval2[0] === interval2[1]) {\n    return \"YES\";\n\
    \  }\n  let [start1, end1] = interval1;\n  let [start2, end2] = interval2;\n \
    \ let startIntersection = start1 < start2 ? start1 : start2;\n  let endIntersection\
    \ = end1 < end2 ? end1 : end2;\n  let startIntersectionIndex = startIntersection;\n\
    \  let endIntersectionIndex = endIntersection;\n  let startIntersectionLength\
    \ = startIntersectionIndex - start1;\n  let endIntersectionLength = endIntersectionIndex\
    \ - end1;\n  let startIntersectionPrime = startIntersectionLength === 1 && startIntersectionIndex\
    \ === 0;\n  let endIntersectionPrime = endIntersectionLength === 1 && endIntersectionIndex\
    \ === 0;\n  if (startIntersectionPrime && endIntersectionPrime) {\n    return\
    \ \"YES\";\n  }\n  return \"NO\";\n}\n", "  if (interval1[0] >= interval1[1] ||\
    \ interval2[0] >= interval2[1]) {\n    return \"NO\";\n  }\n  let result = [];\n\
    \  let start1 = interval1[0];\n  let end1 = interval1[1];\n  let start2 = interval2[0];\n\
    \  let end2 = interval2[1];\n  let startIntersection = start1;\n  let endIntersection\
    \ = end1;\n  let startIntersection2 = start2;\n  let endIntersection2 = end2;\n\
    \  while (startIntersection < endIntersection && startIntersection2 < endIntersection2)\
    \ {\n    if (startIntersection < startIntersection2) {\n      startIntersection\
    \ += 1;\n    }\n    if (startIntersection2 < endIntersection2) {\n      startIntersection2\
    \ += 1;\n    }\n    if (startIntersection < endIntersection2) {\n      endIntersection2\
    \ += 1;\n    }\n    if (startIntersection2 < endIntersection) {\n      endIntersection\
    \ += 1;\n    }\n    result.push(startIntersection);\n  }\n  if (startIntersection\
    \ < endIntersection) {\n    result.push(endIntersection);\n  }\n  if (startIntersection2\
    \ < endIntersection2) {\n    result.push(endIntersection2);\n  }\n  if (result.length\
    \ === 0) {\n    return \"NO\";\n  }\n  if (result.length === 1) {\n    return\
    \ \"YES\";\n  }\n  if (result.length === 2) {\n    return \"YES\";\n  }\n  if\
    \ (result.length === 3) {\n    return \"YES\";\n  }\n  if (result.length === 4)\
    \ {\n    return \"YES\";\n  }\n  if (result.length === 5) {\n    return \"YES\"\
    ;\n  }\n  if (result.length === 6) {\n    return \"YES\";\n  }\n  if (result.length\
    \ === 7) {\n    return \"YES\";\n  }\n  if (result.length === 8) {\n    return\
    \ \"YES\";\n  }\n  if (result.length === 9) {\n    return \"YES\";\n  }\n  if\
    \ (result.length === 10) {\n    return \"YES\";\n  }\n  if (result.length ===\
    \ 11) {\n    return \"YES\";\n  }\n  if (result.length === 12) {\n    return \"\
    YES\";\n  }\n  if (result.length === 13) {\n    return \"YES\";\n  }\n  if (result.length\
    \ === 14) {\n    return \"YES\";\n  }\n  if (result.length === 15) {\n    return\
    \ \"YES\";\n  }\n  if (result.length === 16) {\n    return \"YES\";\n  }\n  if\
    \ (result.length === 17) {\n    return \"YES\";\n  }\n  if (result.length ===\
    \ 18) {\n    return \"YES\";\n  }\n  if (result.length === 19) {\n    return \"\
    YES\";\n  }\n  if (result.length === 20) {\n    return \"YES\";\n  }\n  if (result.length\
    \ === 21) {\n    return \"YES\";\n  }\n  if (result.length === 22) {\n    return\
    \ \"YES\";\n  }\n  if (result.length === 23) {\n    return \"", "  if (interval1[0]\
    \ > interval2[1] || interval1[1] < interval2[0]) {\n    return \"NO\";\n  }\n\
    \  let intersection = [interval1[0], interval1[1]];\n  for (let i = 2; i <= Math.sqrt(interval1[0]\
    \ * interval1[1] + interval2[0] * interval2[1]); i++) {\n    if (interval1[0]\
    \ * interval1[1] + interval2[0] * interval2[1] % i === 0) {\n      intersection[1]\
    \ = i;\n      break;\n    }\n  }\n  if (intersection[1] === interval1[1] && intersection[0]\
    \ === interval1[0]) {\n    return \"YES\";\n  }\n  return \"NO\";\n}\n", "  if\
    \ (interval1[0] > interval2[0]) {\n    return intersection(interval2, interval1);\n\
    \  }\n  if (interval1[1] < interval2[1]) {\n    return intersection(interval1,\
    \ interval2);\n  }\n  if (interval1[0] >= interval2[0] && interval1[1] <= interval2[1])\
    \ {\n    return \"YES\";\n  }\n  return \"NO\";\n}\n", "  let [start1, end1] =\
    \ interval1\n  let [start2, end2] = interval2\n  let startIntersection = start1\
    \ < start2 ? start1 : start2\n  let endIntersection = end1 < end2 ? end1 : end2\n\
    \  let startIntersectionEnd = startIntersection < endIntersection ? startIntersection\
    \ : endIntersection\n  let endIntersectionStart = startIntersection < endIntersection\
    \ ? endIntersection : startIntersection\n  let startIntersectionLength = startIntersectionEnd\
    \ - startIntersection\n  let endIntersectionLength = endIntersectionStart - endIntersection\n\
    \  let intersectionLength = startIntersectionLength + endIntersectionLength\n\
    \  if (intersectionLength % 2 === 0) {\n    return \"NO\"\n  }\n  if (startIntersectionLength\
    \ % 2 === 0) {\n    return \"NO\"\n  }\n  if (endIntersectionLength % 2 === 0)\
    \ {\n    return \"NO\"\n  }\n  if (startIntersectionLength === 0 && endIntersectionLength\
    \ === 0) {\n    return \"NO\"\n  }\n  if (startIntersectionLength === 0 && endIntersectionLength\
    \ > 0) {\n    return \"NO\"\n  }\n  if (startIntersectionLength > 0 && endIntersectionLength\
    \ === 0) {\n    return \"NO\"\n  }\n  if (startIntersectionLength > 0 && endIntersectionLength\
    \ > 0) {\n    return \"YES\"\n  }\n}\n", "  const [start1, end1] = interval1;\n\
    \  const [start2, end2] = interval2;\n  if (start1 > end2) {\n    [start1, end1]\
    \ = interval2;\n    [start2, end2] = interval1;\n  }\n  if (start2 > end1) {\n\
    \    [start2, end2] = interval1;\n    [start1, end1] = interval2;\n  }\n  if (start2\
    \ === end1 && start1 === end2) {\n    return \"NO\";\n  }\n  if (start2 === end1\
    \ && start1 !== end2) {\n    return \"YES\";\n  }\n  if (start2 !== end1 && start1\
    \ === end2) {\n    return \"YES\";\n  }\n  if (start1 === end1 && start2 !== end2)\
    \ {\n    return \"NO\";\n  }\n  if (start1 !== end1 && start2 === end2) {\n  \
    \  return \"NO\";\n  }\n  if (start1 === end1 && start2 === end2) {\n    return\
    \ \"YES\";\n  }\n  if (start1 === end1 && start2 !== end2) {\n    return \"NO\"\
    ;\n  }\n  if (start2 === end1 && start1 !== end2) {\n    return \"NO\";\n  }\n\
    \  if (start2 === end1 && start1 === end2) {\n    return \"YES\";\n  }\n  if (start1\
    \ === end1 && start2 !== end2) {\n    return \"NO\";\n  }\n  if (start1 !== end1\
    \ && start2 === end2) {\n    return \"YES\";\n  }\n  if (start1 === end1 && start2\
    \ === end2) {\n    return \"YES\";\n  }\n  if (start1 === end1 && start2 !== end2)\
    \ {\n    return \"NO\";\n  }\n  if (start2 === end1 && start1 !== end2) {\n  \
    \  return \"YES\";\n  }\n  if (start2 === end1 && start1 === end2) {\n    return\
    \ \"YES\";\n  }\n  if (start1 === end1 && start2 !== end2) {\n    return \"NO\"\
    ;\n  }\n  if (start1 === end1 && start2 === end2) {\n    return \"NO\";\n  }\n\
    \  if (start1 === end1 && start2 !== end2) {\n    return \"YES\";\n  }\n  if (start2\
    \ === end1 && start1 !== end2) {\n    return \"NO\";\n  }\n  if (start2 === end1\
    \ && start1 === end2) {\n    return \"NO\";\n  }\n  if (start1 === end1 && start2\
    \ !== end2) {\n    return \"YES\";\n  }\n  if (start2 === end1 && start1 === end2)\
    \ {\n    return \"YES\";\n  }\n  if (start1 === end1 && start2 !== end2) {\n \
    \   return \"NO\";\n  }\n  if (start2 === end1 && start1 === end2) {\n    return\
    \ \"NO\";\n  }\n  if (start1 === end1 && start2 !== end2) {\n    return \"", " \
    \ if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return\
    \ \"NO\";\n  }\n\n  let [start1, end1] = interval1;\n  let [start2, end2] = interval2;\n\
    \n  if (start1 < start2) {\n    [start1, start2] = [start2, start1];\n  }\n\n\
    \  if (end1 < end2) {\n    [end1, end2] = [end2, end1];\n  }\n\n  let [start3,\
    \ end3] = interval1;\n  let [start4, end4] = interval2;\n\n  if (start3 < start4)\
    \ {\n    [start3, start4] = [start4, start3];\n  }\n\n  if (end3 < end4) {\n \
    \   [end3, end4] = [end4, end3];\n  }\n\n  let [start5, end5] = interval1;\n \
    \ let [start6, end6] = interval2;\n\n  if (start5 < start6) {\n    [start5, start6]\
    \ = [start6, start5];\n  }\n\n  if (end5 < end6) {\n    [end5, end6] = [end6,\
    \ end5];\n  }\n\n  let [start7, end7] = interval1;\n  let [start8, end8] = interval2;\n\
    \n  if (start7 < start8) {\n    [start7, start8] = [start8, start7];\n  }\n\n\
    \  if (end7 < end8) {\n    [end7, end8] = [end8, end7];\n  }\n\n  let [start9,\
    \ end9] = interval1;\n  let [start10, end10] = interval2;\n\n  if (start9 < start10)\
    \ {\n    [start9, start10] = [start10, start9];\n  }\n\n  if (end9 < end10) {\n\
    \    [end9, end10] = [end10, end9];\n  }\n\n  let [start11, end11] = interval1;\n\
    \  let [start12, end12] = interval2;\n\n  if (start11 < start12) {\n    [start11,\
    \ start12] = [start12, start11];\n  }\n\n  if (end11 < end12) {\n    [end11, end12]\
    \ = [end12, end11];\n  }\n\n  let [start13, end13] = interval1;\n  let [start14,\
    \ end14] = interval2;\n\n  if (start13 < start14) {\n    [start13, start14] =\
    \ [start14, start13];\n  }\n\n  if (end13 < end14) {\n    [end13, end14] = [end14,\
    \ end13];\n  }\n\n  let [start15, end15] = interval1;\n  let [start16, end16]\
    \ = interval2;\n\n  if (start15 < start16) {\n    [start15, start16] = [start16,\
    \ start15];\n  }\n\n  if (end15 < end16) {\n    [end15, end16", "  let [start1,\
    \ end1] = interval1\n  let [start2, end2] = interval2\n  let startIntersection\
    \ = start1 < start2 ? start1 : start2\n  let endIntersection = end1 < end2 ? end1\
    \ : end2\n  let intersectionLength = endIntersection - startIntersection\n  let\
    \ isPrime = true\n  for (let i = 2; i <= intersectionLength; i++) {\n    if (startIntersection\
    \ + i !== endIntersection) {\n      if (startIntersection + i % 2 !== endIntersection\
    \ - i % 2) {\n        isPrime = false\n        break\n      }\n    }\n  }\n  return\
    \ isPrime ? \"YES\" : \"NO\"\n}\n", "  if (interval1[0] >= interval1[1] || interval2[0]\
    \ >= interval2[1]) {\n    return \"NO\";\n  }\n  let result = 0;\n  for (let i\
    \ = interval1[0]; i <= interval1[1]; i++) {\n    for (let j = interval2[0]; j\
    \ <= interval2[1]; j++) {\n      if (i === j) {\n        continue;\n      }\n\
    \      result += Math.pow(i, j);\n    }\n  }\n  if (result % 1 === 0) {\n    return\
    \ \"YES\";\n  }\n  return \"NO\";\n}\n", "  if (interval1[0] >= interval1[1] ||\
    \ interval2[0] >= interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0]\
    \ < interval1[1] && interval2[0] < interval2[1]) {\n    return \"YES\";\n  }\n\
    \  let intersection = [interval1[0], interval1[1]];\n  for (let i = interval1[1]\
    \ + 1; i <= interval2[1]; i++) {\n    if (interval1[0] < i && interval2[0] < i)\
    \ {\n      intersection = [intersection[0], i];\n    }\n  }\n  if (intersection[0]\
    \ === intersection[1]) {\n    return \"NO\";\n  }\n  if (isPrime(intersection[0])\
    \ && isPrime(intersection[1])) {\n    return \"YES\";\n  }\n  return \"NO\";\n\
    }\n", "  if (interval1[0] > interval2[1]) {\n    return intersection(interval2,\
    \ interval1)\n  }\n  if (interval1[1] < interval2[0]) {\n    return intersection(interval1,\
    \ interval2)\n  }\n  if (interval1[0] === interval2[0]) {\n    return \"YES\"\n\
    \  }\n  if (interval1[1] === interval2[1]) {\n    return \"YES\"\n  }\n  if (interval1[0]\
    \ < interval2[0]) {\n    return intersection(interval1, [interval2[0], interval2[1]])\n\
    \  }\n  if (interval1[1] > interval2[1]) {\n    return intersection([interval1[0],\
    \ interval1[1]], [interval2[0], interval2[1]])\n  }\n}\n", "  let [start1, end1]\
    \ = interval1\n  let [start2, end2] = interval2\n  let startIntersection = start1\
    \ <= end2 && start2 <= end1 ? start1 : start2\n  let endIntersection = start1\
    \ <= end2 && start2 <= end1 ? end1 : end2\n  let intersectionLength = endIntersection\
    \ - startIntersection\n  if (intersectionLength === 0) return \"NO\"\n  if (intersectionLength\
    \ === 1) return \"YES\"\n  if (intersectionLength % 2 === 0) return \"NO\"\n \
    \ return \"YES\"\n}\n", "  if (interval1[0] > interval2[1] || interval1[1] < interval2[0])\
    \ {\n    return \"NO\";\n  }\n\n  let result = [];\n  for (let i = interval1[0];\
    \ i <= interval1[1]; i++) {\n    for (let j = interval2[0]; j <= interval2[1];\
    \ j++) {\n      if (i === j) {\n        result.push(i);\n      }\n    }\n  }\n\
    \n  if (result.length === 0) {\n    return \"NO\";\n  }\n\n  if (result.length\
    \ === 1) {\n    return \"YES\";\n  }\n\n  if (result.length >= 2) {\n    return\
    \ \"YES\";\n  }\n\n  return \"NO\";\n}\n", "  const [start1, end1] = interval1;\n\
    \  const [start2, end2] = interval2;\n  const start1LessOrEqualEnd2 = start1 <=\
    \ end2;\n  const start2LessOrEqualEnd1 = start2 <= end1;\n  if (start1LessOrEqualEnd2\
    \ && start2LessOrEqualEnd1) {\n    return `${start2}-${end2}`;\n  }\n  if (start1LessOrEqualEnd2\
    \ && !start2LessOrEqualEnd1) {\n    return `${start1}-${end1}`;\n  }\n  if (!start1LessOrEqualEnd2\
    \ && start2LessOrEqualEnd1) {\n    return `${start2}-${end1}`;\n  }\n  return\
    \ \"NO\";\n}\n", "  const [start1, end1] = interval1\n  const [start2, end2] =\
    \ interval2\n  if (start1 < start2) {\n    const temp = start1\n    start1 = start2\n\
    \    start2 = temp\n  }\n  if (end1 < end2) {\n    const temp = end1\n    end1\
    \ = end2\n    end2 = temp\n  }\n  if (start1 > end2) {\n    return `NO`\n  }\n\
    \  if (start2 === end2) {\n    return `YES`\n  }\n  let count = 0\n  for (let\
    \ i = start1; i <= end1; i++) {\n    for (let j = start2; j <= end2; j++) {\n\
    \      if (i === j) {\n        count += 1\n      }\n    }\n  }\n  if (count %\
    \ 2 === 0) {\n    return `YES`\n  }\n  return `NO`\n}\n", "  let interval1Start\
    \ = interval1[0];\n  let interval1End = interval1[1];\n  let interval2Start =\
    \ interval2[0];\n  let interval2End = interval2[1];\n  let intersectionStart =\
    \ Math.min(interval1Start, interval2Start);\n  let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n  let intersectionLength = intersectionEnd - intersectionStart;\n\
    \  if (intersectionLength === 0) return \"NO\";\n  if (intersectionLength ===\
    \ 1) return \"YES\";\n  if (intersectionLength === 2) return \"YES\";\n  if (intersectionLength\
    \ % 2 === 0) return \"NO\";\n  if (intersectionLength % 2 === 1) return \"YES\"\
    ;\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(intersectionLength);\
    \ i++) {\n    if (intersectionLength % i === 0) {\n      isPrime = false;\n  \
    \    break;\n    }\n  }\n  return isPrime ? \"YES\" : \"NO\";\n}\n", "  let interval1Start\
    \ = interval1[0];\n  let interval1End = interval1[1];\n  let interval2Start =\
    \ interval2[0];\n  let interval2End = interval2[1];\n  let intersectionStart =\
    \ Math.max(interval1Start, interval2Start);\n  let intersectionEnd = Math.min(interval1End,\
    \ interval2End);\n  let intersectionLength = intersectionEnd - intersectionStart;\n\
    \  if (intersectionLength === 0) return \"NO\";\n  if (interval1Start === interval1End)\
    \ return \"NO\";\n  if (interval2Start === interval2End) return \"NO\";\n  if\
    \ (intersectionStart === interval1Start && intersectionStart === interval2Start)\
    \ return \"NO\";\n  if (intersectionStart === interval1Start && intersectionStart\
    \ === interval2End) return \"NO\";\n  if (intersectionStart === interval1End &&\
    \ intersectionStart === interval2Start) return \"NO\";\n  if (intersectionStart\
    \ === interval1End && intersectionStart === interval2End) return \"NO\";\n  if\
    \ (intersectionStart === interval1Start && intersectionStart === interval2Start)\
    \ return \"NO\";\n  if (intersectionStart === interval1Start && intersectionStart\
    \ === interval2End) return \"NO\";\n  if (intersectionStart === interval1End &&\
    \ intersectionStart === interval2Start) return \"NO\";\n  if (intersectionStart\
    \ === interval1End && intersectionStart === interval2End) return \"NO\";\n  if\
    \ (intersectionStart < interval1Start && intersectionStart < interval2Start) return\
    \ \"NO\";\n  if (intersectionStart < interval1Start && intersectionStart < interval2End)\
    \ return \"NO\";\n  if (intersectionStart < interval1End && intersectionStart\
    \ < interval2Start) return \"NO\";\n  if (intersectionStart < interval1End &&\
    \ intersectionStart < interval2End) return \"NO\";\n  if (intersectionStart <\
    \ interval1Start && intersectionStart < interval2Start) return \"NO\";\n  if (intersectionStart\
    \ < interval1Start && intersectionStart < interval2End) return \"NO\";\n  if (intersectionStart\
    \ < interval1End && intersectionStart < interval2Start) return \"NO\";\n  if (intersectionStart\
    \ < interval1End && intersectionStart < interval2End) return \"NO\";\n  if (intersectionStart\
    \ === interval1Start && intersectionStart === interval2Start) return \"NO\";\n\
    \  if (intersectionStart === interval1Start && intersectionStart === interval2End)\
    \ return \"NO\";\n  if (intersectionStart === interval1End && intersectionStart\
    \ === interval2Start) return \"NO\";\n  if (intersectionStart === interval1End\
    \ && intersectionStart === interval2End) return \"NO\";\n  if (intersectionStart\
    \ === interval1Start && intersectionStart === interval2Start) return \"NO\";\n\
    \  if (intersectionStart === interval1Start && intersection", "  const [start1,\
    \ end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 < start2)\
    \ {\n    const temp = start1\n    start1 = start2\n    start2 = temp\n  }\n  if\
    \ (end1 < end2) {\n    const temp = end1\n    end1 = end2\n    end2 = temp\n \
    \ }\n  if (start1 > end2) {\n    const temp = start1\n    start1 = end2\n    end2\
    \ = temp\n  }\n  if (start2 > end1) {\n    const temp = start2\n    start2 = end1\n\
    \    end1 = temp\n  }\n  if (start1 < start2 && end1 > end2) {\n    return \"\
    NO\"\n  }\n  if (start1 < start2 && end1 < end2) {\n    return \"NO\"\n  }\n \
    \ if (start2 < start1 && end2 > end1) {\n    return \"NO\"\n  }\n  if (start2\
    \ < start1 && end2 < end1) {\n    return \"NO\"\n  }\n  if (start1 < start2 &&\
    \ end1 > end2) {\n    return \"NO\"\n  }\n  if (start1 < start2 && end1 < end2)\
    \ {\n    return \"NO\"\n  }\n  if (start2 < start1 && end2 > end1) {\n    return\
    \ \"NO\"\n  }\n  if (start2 < start1 && end2 < end1) {\n    return \"NO\"\n  }\n\
    \  if (start1 < start2 && end1 > end2) {\n    return \"NO\"\n  }\n  if (start1\
    \ < start2 && end1 < end2) {\n    return \"NO\"\n  }\n  if (start2 < start1 &&\
    \ end2 > end1) {\n    return \"NO\"\n  }\n  if (start2 < start1 && end2 < end1)\
    \ {\n    return \"NO\"\n  }\n  if (start1 < start2 && end1 > end2) {\n    return\
    \ \"NO\"\n  }\n  if (start1 < start2 && end1 < end2) {\n    return \"NO\"\n  }\n\
    \  if (start2 < start1 && end2 > end1) {\n    return \"NO\"\n  }\n  if (start2\
    \ < start1 && end2 < end1) {\n    return \"NO\"\n  }\n  if (start1 < start2 &&\
    \ end1 > end2) {\n    return \"NO\"\n  }\n  if (start1 < start2 && end1 < end2)\
    \ {\n    return \"NO\"\n  }\n  if (start2 < start1 && end2 > end1) {\n    return\
    \ \"NO\"\n  }\n  if (start2 < start1 && end2 < end1) {\n    return \"NO\"\n  }\n\
    \  if (start1 < start2 && end1 > end2) {\n    return \"NO\"\n  }\n  if (start1\
    \ < start2 && end1 < end2) {\n    return \"NO\"\n  }\n  if (start2 < start1 &&\
    \ end2 > end1) {\n    return \"NO\"\n  }\n  if (start2 < start1 && end2 < end1)\
    \ {\n    return \"NO\"\n  }\n  if (start1 < start2 && end1 > end2) {\n    return\
    \ \"NO\"\n  }", "  if (interval1[0] > interval2[1] || interval1[1] < interval2[0])\
    \ {\n    return \"NO\";\n  }\n  if (interval1[0] === interval1[1]) {\n    return\
    \ \"NO\";\n  }\n  if (interval2[0] === interval2[1]) {\n    return \"YES\";\n\
    \  }\n  let [start1, end1] = interval1;\n  let [start2, end2] = interval2;\n \
    \ let startIntersection = start1 < start2 ? start1 : start2;\n  let endIntersection\
    \ = end1 < end2 ? end1 : end2;\n  let lengthIntersection = endIntersection - startIntersection;\n\
    \  if (lengthIntersection === 1) {\n    return \"YES\";\n  }\n  if (lengthIntersection\
    \ % 2 === 0) {\n    return \"NO\";\n  }\n  let prime = true;\n  for (let i = 2;\
    \ i <= lengthIntersection; i++) {\n    if (lengthIntersection % i === 0) {\n \
    \     prime = false;\n      break;\n    }\n  }\n  return prime ? \"YES\" : \"\
    NO\";\n}\n", "  if (interval1[0] > interval2[0]) {\n    const temp = interval1[0];\n\
    \    interval1[0] = interval2[0];\n    interval2[0] = temp;\n  }\n  if (interval1[1]\
    \ < interval2[1]) {\n    const temp = interval1[1];\n    interval1[1] = interval2[1];\n\
    \    interval2[1] = temp;\n  }\n  let result = \"NO\";\n  for (let i = 0; i <\
    \ interval1.length; i++) {\n    for (let j = 0; j < interval2.length; j++) {\n\
    \      if (interval1[i] === interval2[j]) {\n        result += \"YES\";\n    \
    \    break;\n      }\n    }\n  }\n  return result;\n}\n", "  const [start1, end1]\
    \ = interval1;\n  const [start2, end2] = interval2;\n  const start1LessOrEqualEnd2\
    \ = start1 <= end2;\n  const start2LessOrEqualEnd1 = start2 <= end1;\n  const\
    \ start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 = start1LessOrEqualEnd2 && start2LessOrEqualEnd1;\n\
    \  const start2LessOrEqualEnd1AndStart1LessOrEqualEnd2 = start2LessOrEqualEnd1\
    \ && start1LessOrEqualEnd2;\n  const start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart1LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd1AndStart1LessOrEqualEnd2;\n\
    \  const start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart1LessOrEqualEnd2AndStart1LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart1LessOrEqualEnd2 && start2LessOrEqualEnd1AndStart1LessOrEqualEnd2AndStart1LessOrEqualEnd2;\n\
    \  const start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart1LessOrEqualEnd2AndStart1LessOrEqualEnd2AndStart1LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart1LessOrEqualEnd2AndStart1LessOrEqualEnd2\
    \ && start2LessOrEqualEnd1AndStart1LessOrEqualEnd2AndStart1LessOrEqualEnd2AndStart1LessOrEqualEnd2;\n\
    \  const start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart1LessOrEqualEnd2AndStart1LessOrEqualEnd2AndStart1LessOrEqualEnd2AndStart1LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart1LessOrEqualEnd2AndStart1LessOrEqualEnd2AndStart1LessOrEqualEnd2\
    \ && start2LessOrEqualEnd1AndStart1LessOrEqualEnd2AndStart1LessOrEqualEnd2AndStart1LessOrEqualEnd2AndStart1LessOrEqualEnd2;\n\
    \  const start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart1LessOrEqualEnd2AndStart1LessOrEqualEnd2AndStart1LessOrEqualEnd2And",
  "  if (interval1[0] > interval2[0]) {\n    return intersection(interval2, interval1);\n\
    \  }\n  if (interval1[1] < interval2[1]) {\n    return intersection(interval1,\
    \ interval2);\n  }\n  if (interval1[0] < interval2[0] && interval1[1] > interval2[1])\
    \ {\n    return \"YES\";\n  }\n  if (interval1[0] < interval2[0] && interval1[1]\
    \ < interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] > interval2[0]\
    \ && interval1[1] > interval2[1]) {\n    return \"NO\";\n  }\n}\n", "  let [start1,\
    \ end1] = interval1;\n  let [start2, end2] = interval2;\n  if (start1 < start2)\
    \ {\n    [start1, start2] = [start2, start1];\n  }\n  if (end1 < end2) {\n   \
    \ [end1, end2] = [end2, end1];\n  }\n  if (start1 > end2) {\n    return \"NO\"\
    ;\n  }\n  let length = end1 - start1;\n  if (length <= 0) {\n    return \"NO\"\
    ;\n  }\n  for (let i = start2; i <= end2; i++) {\n    if (i !== start1 && i !==\
    \ end1 && i % start1 === 0 && i % end1 === 0) {\n      return \"YES\";\n    }\n\
    \  }\n  return \"NO\";\n}\n", "  const [start1, end1] = interval1;\n  const [start2,\
    \ end2] = interval2;\n  if (start1 > end2) return \"NO\";\n  if (start2 > end1)\
    \ return \"NO\";\n  if (start1 < start2) return \"NO\";\n  if (start2 < start1)\
    \ return \"NO\";\n  if (start1 < end2 && start2 < end1) return \"NO\";\n  if (start1\
    \ < end2 && start2 > end1) return \"NO\";\n  if (start2 < end1 && start1 > end2)\
    \ return \"NO\";\n  if (start2 < end1 && start2 > end1) return \"NO\";\n  if (start1\
    \ < end2 && start2 < end1) return \"NO\";\n  if (start1 < end2 && start2 > end1)\
    \ return \"NO\";\n  if (start2 < end1 && start1 > end2) return \"NO\";\n  if (start2\
    \ < end1 && start2 > end1) return \"NO\";\n  if (start1 < end2 && start2 < end1)\
    \ return \"NO\";\n  if (start1 < end2 && start2 > end1) return \"NO\";\n  if (start2\
    \ < end1 && start1 > end2) return \"NO\";\n  if (start2 < end1 && start2 > end1)\
    \ return \"NO\";\n  if (start1 < end2 && start2 < end1) return \"NO\";\n  if (start1\
    \ < end2 && start2 > end1) return \"NO\";\n  if (start2 < end1 && start1 > end2)\
    \ return \"NO\";\n  if (start2 < end1 && start2 > end1) return \"NO\";\n  if (start1\
    \ < end2 && start2 < end1) return \"NO\";\n  if (start1 < end2 && start2 > end1)\
    \ return \"NO\";\n  if (start2 < end1 && start1 > end2) return \"NO\";\n  if (start2\
    \ < end1 && start2 > end1) return \"NO\";\n  if (start1 < end2 && start2 < end1)\
    \ return \"NO\";\n  if (start1 < end2 && start2 > end1) return \"NO\";\n  if (start2\
    \ < end1 && start1 > end2) return \"NO\";\n  if (start2 < end1 && start2 > end1)\
    \ return \"NO\";\n  if (start1 < end2 && start2 < end1) return \"NO\";\n  if (start1\
    \ < end2 && start2 > end1) return \"NO\";\n  if (start2 < end1 && start1 > end2)\
    \ return \"NO\";\n  if (start2 < end1 && start2 > end1) return \"NO\";\n  if (start1\
    \ < end2 && start2 < end1) return \"NO\";\n  if (start1 < end2 && start2 > end1)\
    \ return \"NO\";\n  if (start2 < end1 && start1 > end2) return \"NO\";\n  if (start2\
    \ < end", "  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n\
    \  if (start1 < start2) {\n    const temp = start1;\n    start1 = start2;\n  \
    \  start2 = temp;\n  }\n  if (end1 < end2) {\n    const temp = end1;\n    end1\
    \ = end2;\n    end2 = temp;\n  }\n  if (start1 > end2) {\n    return \"NO\";\n\
    \  }\n  if (start2 === end2) {\n    return \"NO\";\n  }\n  if (start1 === end1)\
    \ {\n    return \"YES\";\n  }\n  const start1End = start1 + end1;\n  const start2End\
    \ = start2 + end2;\n  if (start1End > start2End) {\n    return \"NO\";\n  }\n\
    \  if (start2End === start1End) {\n    return \"YES\";\n  }\n  const start1Start\
    \ = start1 - end1;\n  const start2Start = start2 - end2;\n  if (start1Start >\
    \ start2Start) {\n    return \"NO\";\n  }\n  if (start2Start === start1Start)\
    \ {\n    return \"YES\";\n  }\n  const start1StartEnd = start1Start + start1End;\n\
    \  const start2StartEnd = start2Start + start2End;\n  if (start1StartEnd > start2StartEnd)\
    \ {\n    return \"NO\";\n  }\n  if (start2StartEnd === start1StartEnd) {\n   \
    \ return \"YES\";\n  }\n  const start1StartStartEnd = start1StartEnd + start1StartEnd;\n\
    \  const start2StartStartEnd = start2StartEnd + start2StartEnd;\n  if (start1StartStartEnd\
    \ > start2StartStartEnd) {\n    return \"NO\";\n  }\n  if (start2StartStartEnd\
    \ === start1StartStartEnd) {\n    return \"YES\";\n  }\n  const start1StartStartStartEnd\
    \ = start1StartStartEnd + start1StartStartEnd;\n  const start2StartStartStartEnd\
    \ = start2StartStartEnd + start2StartStartEnd;\n  if (start1StartStartStartEnd\
    \ > start2StartStartStartEnd) {\n    return \"NO\";\n  }\n  if (start2StartStartStartEnd\
    \ === start1StartStartStartEnd) {\n    return \"YES\";\n  }\n  const start1StartStartStartStartEnd\
    \ = start1StartStartStartEnd + start1StartStartStartEnd;\n  const start2StartStartStartStartEnd\
    \ = start2StartStartStartEnd + start2StartStartStartEnd;\n  if (start1StartStartStartStartEnd\
    \ > start2StartStartStartStartEnd) {\n    return \"NO\";\n  }\n  if (start2StartStartStartStartEnd\
    \ === start1StartStartStartStartEnd) {\n", "  if (interval1[0] > interval2[0])\
    \ {\n    return intersection(interval2, interval1);\n  }\n  if (interval1[1] <\
    \ interval2[1]) {\n    return intersection(interval1, interval2);\n  }\n  if (interval1[0]\
    \ === interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] === interval2[1])\
    \ {\n    return \"YES\";\n  }\n  let [start1, end1] = interval1;\n  let [start2,\
    \ end2] = interval2;\n  let [start3, end3] = interval1;\n  let [start4, end4]\
    \ = interval2;\n  let [start5, end5] = interval1;\n  let [start6, end6] = interval2;\n\
    \  let [start7, end7] = interval1;\n  let [start8, end8] = interval2;\n  let [start9,\
    \ end9] = interval1;\n  let [start10, end10] = interval2;\n  let [start11, end11]\
    \ = interval1;\n  let [start12, end12] = interval2;\n  let [start13, end13] =\
    \ interval1;\n  let [start14, end14] = interval2;\n  let [start15, end15] = interval1;\n\
    \  let [start16, end16] = interval2;\n  let [start17, end17] = interval1;\n  let\
    \ [start18, end18] = interval2;\n  let [start19, end19] = interval1;\n  let [start20,\
    \ end20] = interval2;\n  let [start21, end21] = interval1;\n  let [start22, end22]\
    \ = interval2;\n  let [start23, end23] = interval1;\n  let [start24, end24] =\
    \ interval2;\n  let [start25, end25] = interval1;\n  let [start26, end26] = interval2;\n\
    \  let [start27, end27] = interval1;\n  let [start28, end28] = interval2;\n  let\
    \ [start29, end29] = interval1;\n  let [start30, end30] = interval2;\n  let [start31,\
    \ end31] = interval1;\n  let [start32, end32] = interval2;\n  let [start33, end33]\
    \ = interval1;\n  let [start34, end34] = interval2;\n  let [start35, end35] =\
    \ interval1;\n  let [start36, end36] = interval2;\n  let [start37, end37] = interval1;\n\
    \  let [start38, end38] = interval2;\n  let [start39, end39] = interval1;\n  let\
    \ [start40, end40] = interval2;\n  let [start41, end41] = interval1;\n  let [start42,\
    \ end42] = interval2;\n  let [start43, end43] = interval1;\n  let [start44, end44]\
    \ = interval2;\n  let [", "  const [start1, end1] = interval1;\n  const [start2,\
    \ end2] = interval2;\n  if (start1 <= end2 && start2 <= end1) {\n    if (start1\
    \ < start2) {\n      return \"NO\";\n    } else if (start1 > end2) {\n      return\
    \ \"YES\";\n    } else {\n      return \"YES\";\n    }\n  } else {\n    return\
    \ \"NO\";\n  }\n}\n", "  const [start1, end1] = interval1;\n  const [start2, end2]\
    \ = interval2;\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n\
    \  }\n  if (start1 === start2 && end1 === end2) {\n    return \"NO\";\n  }\n \
    \ const [start1Minus1, end1Minus1] = interval1;\n  const [start2Minus2, end2Minus2]\
    \ = interval2;\n  if (start1Minus1 < start2Minus2) {\n    return intersection(interval2,\
    \ interval1);\n  }\n  if (start2Minus1 < start1Minus2) {\n    return intersection(interval1,\
    \ interval2);\n  }\n  if (start1Minus1 === start2Minus2 && end1Minus1 === end2Minus2)\
    \ {\n    return \"NO\";\n  }\n  if (start1Minus1 === start2Minus2 && end1Minus1\
    \ === end2Minus2) {\n    return \"NO\";\n  }\n  if (start1Minus1 === start2Minus2\
    \ && end1Minus1 === end2Minus2) {\n    return \"NO\";\n  }\n  if (start1Minus1\
    \ === start2Minus2 && end1Minus1 === end2Minus2) {\n    return \"NO\";\n  }\n\
    \  if (start1Minus1 === start2Minus2 && end1Minus1 === end2Minus2) {\n    return\
    \ \"NO\";\n  }\n  if (start1Minus1 === start2Minus2 && end1Minus1 === end2Minus2)\
    \ {\n    return \"NO\";\n  }\n  if (start1Minus1 === start2Minus2 && end1Minus1\
    \ === end2Minus2) {\n    return \"NO\";\n  }\n  if (start1Minus1 === start2Minus2\
    \ && end1Minus1 === end2Minus2) {\n    return \"NO\";\n  }\n  if (start1Minus1\
    \ === start2Minus2 && end1Minus1 === end2Minus2) {\n    return \"NO\";\n  }\n\
    \  if (start1Minus1 === start2Minus2 && end1Minus1 === end2Minus2) {\n    return\
    \ \"NO\";\n  }\n  if (start1Minus1 === start2Minus2 && end1Minus1 === end2Minus2)\
    \ {\n    return \"NO\";\n  }\n  if (start1Minus1 === start2Minus2 && end1Minus1\
    \ === end2Minus2) {\n    return \"NO\";\n  }\n  if (start1Minus1 === start2Minus2\
    \ && end1Minus1 === end2Minus2) {\n", "  const [start1, end1] = interval1;\n \
    \ const [start2, end2] = interval2;\n  if (start1 > end2) return \"NO\";\n  if\
    \ (start2 > end1) return \"NO\";\n  if (start1 < start2) return \"NO\";\n  if\
    \ (start2 < start1) return \"NO\";\n  if (start1 < end2 && start2 < end1) return\
    \ \"NO\";\n  if (start1 < end2 && start2 < end1) return \"NO\";\n  if (start1\
    \ < end2 && start2 < end1) return \"NO\";\n  if (start1 < end2 && start2 < end1)\
    \ return \"NO\";\n  if (start1 < end2 && start2 < end1) return \"NO\";\n  if (start1\
    \ < end2 && start2 < end1) return \"NO\";\n  if (start1 < end2 && start2 < end1)\
    \ return \"NO\";\n  if (start1 < end2 && start2 < end1) return \"NO\";\n  if (start1\
    \ < end2 && start2 < end1) return \"NO\";\n  if (start1 < end2 && start2 < end1)\
    \ return \"NO\";\n  if (start1 < end2 && start2 < end1) return \"NO\";\n  if (start1\
    \ < end2 && start2 < end1) return \"NO\";\n  if (start1 < end2 && start2 < end1)\
    \ return \"NO\";\n  if (start1 < end2 && start2 < end1) return \"NO\";\n  if (start1\
    \ < end2 && start2 < end1) return \"NO\";\n  if (start1 < end2 && start2 < end1)\
    \ return \"NO\";\n  if (start1 < end2 && start2 < end1) return \"NO\";\n  if (start1\
    \ < end2 && start2 < end1) return \"NO\";\n  if (start1 < end2 && start2 < end1)\
    \ return \"NO\";\n  if (start1 < end2 && start2 < end1) return \"NO\";\n  if (start1\
    \ < end2 && start2 < end1) return \"NO\";\n  if (start1 < end2 && start2 < end1)\
    \ return \"NO\";\n  if (start1 < end2 && start2 < end1) return \"NO\";\n  if (start1\
    \ < end2 && start2 < end1) return \"NO\";\n  if (start1 < end2 && start2 < end1)\
    \ return \"NO\";\n  if (start1 < end2 && start2 < end1) return \"NO\";\n  if (start1\
    \ < end2 && start2 < end1) return \"NO\";\n  if (start1 < end2 && start2 < end1)\
    \ return \"NO\";\n  if (start1 < end2 && start2 < end1) return \"NO\";\n  if (start1\
    \ < end2 && start2 < end1) return \"NO\";\n  if (start1 < end2 && start2 < end1)\
    \ return \"NO\";\n  if (start1 < end2 && start2 < end1) return \"NO\";\n  if (start1\
    \ < end2 && ", "  const [interval1Start, interval1End] = interval1;\n  const [interval2Start,\
    \ interval2End] = interval2;\n  if (interval1Start > interval1End) {\n    return\
    \ `NO`;\n  }\n  if (interval2Start > interval2End) {\n    return `NO`;\n  }\n\
    \  if (interval1Start === interval1End) {\n    return `YES`;\n  }\n  if (interval2Start\
    \ === interval2End) {\n    return `YES`;\n  }\n  const intersectionStart = Math.min(interval1Start,\
    \ interval2Start);\n  const intersectionEnd = Math.max(interval1End, interval2End);\n\
    \  if (intersectionStart === intersectionEnd) {\n    return `YES`;\n  }\n  const\
    \ intersectionLength = intersectionEnd - intersectionStart;\n  if (intersectionLength\
    \ === 2) {\n    return `YES`;\n  }\n  if (intersectionLength === 1) {\n    return\
    \ `NO`;\n  }\n  return `NO`;\n}\n", "  let [start1, end1] = interval1;\n  let\
    \ [start2, end2] = interval2;\n  let startIntersection = start1 <= start2 && start2\
    \ <= end2 ? start2 : start1;\n  let endIntersection = end1 <= start2 && end2 <=\
    \ end2 ? end2 : end1;\n  let intersectionLength = endIntersection - startIntersection;\n\
    \  if (intersectionLength === 1) {\n    return \"NO\";\n  }\n  if (intersectionLength\
    \ > 1) {\n    return \"YES\";\n  }\n  return \"NO\";\n}\n", "  if (interval1[0]\
    \ >= interval1[1] || interval2[0] >= interval2[1]) {\n    return \"NO\";\n  }\n\
    \  if (interval1[0] < interval1[1] && interval2[0] < interval2[1]) {\n    return\
    \ \"YES\";\n  }\n  let result: number[] = [];\n  for (let i = interval1[0]; i\
    \ <= interval1[1]; i++) {\n    for (let j = interval2[0]; j <= interval2[1]; j++)\
    \ {\n      if (i === j) {\n        result.push(i);\n      }\n    }\n  }\n  if\
    \ (result.length === 0) {\n    return \"NO\";\n  }\n  if (result.length === 1)\
    \ {\n    return \"YES\";\n  }\n  if (result.length === 2) {\n    return \"YES\"\
    ;\n  }\n  let result2 = result.sort((a, b) => a - b);\n  if (result2[0] === result2[1])\
    \ {\n    return \"YES\";\n  }\n  return \"NO\";\n}\n", "  let [start1, end1] =\
    \ interval1;\n  let [start2, end2] = interval2;\n  if (start1 > end2) [start1,\
    \ end2] = [end2, start1];\n  if (start2 > end1) [start2, end1] = [end1, start2];\n\
    \  if (start1 < start2 && end1 > end2) return \"NO\";\n  if (start1 < start2 &&\
    \ end1 < end2) return \"NO\";\n  if (start1 == start2 && end1 == end2) return\
    \ \"YES\";\n  let [start3, end3] = interval1;\n  let [start4, end4] = interval2;\n\
    \  if (start3 > end4) [start3, end4] = [end4, start3];\n  if (start4 > end3) [start4,\
    \ end3] = [end3, start4];\n  if (start3 < start4 && end3 > end4) return \"NO\"\
    ;\n  if (start3 < start4 && end3 < end4) return \"NO\";\n  if (start3 == start4\
    \ && end3 == end4) return \"YES\";\n  let [start5, end5] = interval1;\n  let [start6,\
    \ end6] = interval2;\n  if (start5 > end6) [start5, end6] = [end6, start5];\n\
    \  if (start6 > end5) [start6, end5] = [end5, start6];\n  if (start5 < start6\
    \ && end5 > end6) return \"NO\";\n  if (start5 < start6 && end5 < end6) return\
    \ \"NO\";\n  if (start5 == start6 && end5 == end6) return \"YES\";\n  let [start7,\
    \ end7] = interval1;\n  let [start8, end8] = interval2;\n  if (start7 > end8)\
    \ [start7, end8] = [end8, start7];\n  if (start8 > end7) [start8, end7] = [end7,\
    \ start8];\n  if (start7 < start8 && end7 > end8) return \"NO\";\n  if (start7\
    \ < start8 && end7 < end8) return \"NO\";\n  if (start7 == start8 && end7 == end8)\
    \ return \"YES\";\n  let [start9, end9] = interval1;\n  let [start10, end10] =\
    \ interval2;\n  if (start9 > end10) [start9, end10] = [end10, start9];\n  if (start10\
    \ > end9) [start10, end9] = [end9, start10];\n  if (start9 < start10 && end9 >\
    \ end10) return \"NO\";\n  if (start9 < start10 && end9 < end10) return \"NO\"\
    ;\n  if (start9 == start10 && end9 == end10) return \"", "  if (interval1[0] >\
    \ interval2[1] || interval1[1] < interval2[0]) {\n    return \"NO\";\n  }\n  let\
    \ length1 = interval1[1] - interval1[0] + 1;\n  let length2 = interval2[1] - interval2[0]\
    \ + 1;\n  let lengthIntersection = length1 - length2;\n  if (lengthIntersection\
    \ === 1) {\n    return \"YES\";\n  }\n  if (lengthIntersection % 2 === 0) {\n\
    \    return \"NO\";\n  }\n  let prime = true;\n  for (let i = 2; i <= lengthIntersection;\
    \ i++) {\n    if (lengthIntersection % i === 0) {\n      prime = false;\n    \
    \  break;\n    }\n  }\n  return prime ? \"YES\" : \"NO\";\n}\n", "  const [start1,\
    \ end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2)\
    \ return \"NO\";\n  if (start2 > end1) return \"NO\";\n  if (start1 === start2\
    \ && end1 === end2) return \"YES\";\n  if (start1 === start2 && end1 !== end2)\
    \ return \"NO\";\n  if (start1 !== start2 && end1 === end2) return \"NO\";\n \
    \ if (start1 === start2 && end1 !== end2) return \"NO\";\n  if (start1 === start2\
    \ && end1 === end2) return \"YES\";\n  if (start1 !== start2 && end1 !== end2)\
    \ return \"NO\";\n  if (start1 === start2 && end1 === end2) return \"YES\";\n\
    \  if (start1 !== start2 && end1 !== end2) return \"NO\";\n  if (start1 === start2\
    \ && end1 !== end2) return \"YES\";\n  if (start1 !== start2 && end1 === end2)\
    \ return \"NO\";\n  if (start1 === start2 && end1 !== end2) return \"YES\";\n\
    \  if (start1 !== start2 && end1 === end2) return \"NO\";\n  if (start1 === start2\
    \ && end1 !== end2) return \"YES\";\n  if (start1 !== start2 && end1 === end2)\
    \ return \"NO\";\n  if (start1 === start2 && end1 !== end2) return \"YES\";\n\
    \  if (start1 !== start2 && end1 === end2) return \"NO\";\n  if (start1 === start2\
    \ && end1 !== end2) return \"YES\";\n  if (start1 !== start2 && end1 === end2)\
    \ return \"NO\";\n  if (start1 === start2 && end1 !== end2) return \"YES\";\n\
    \  if (start1 !== start2 && end1 === end2) return \"NO\";\n  if (start1 === start2\
    \ && end1 !== end2) return \"YES\";\n  if (start1 !== start2 && end1 === end2)\
    \ return \"NO\";\n  if (start1 === start2 && end1 !== end2) return \"YES\";\n\
    \  if (start1 !== start2 && end1 === end2) return \"NO\";\n  if (start1 === start2\
    \ && end1 !== end2) return \"YES\";\n  if (start1 !== start2 && end1 === end2)\
    \ return \"NO\";\n  if (start1 === start2 && end1 !== end2) return \"YES\";\n\
    \  if (start1 !== start2 && end1 === end2) return \"NO\";\n  if (start1 === start2\
    \ && end1 !== end2) return \"YES\";\n  if (start1 !== start2 && end1 === ", " \
    \ const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if\
    \ (start1 <= end2 && start2 <= end1) {\n    return isPrime(end1 - start1 + end2\
    \ - start2);\n  }\n  return \"NO\";\n}\n", "  const [start1, end1] = interval1;\n\
    \  const [start2, end2] = interval2;\n  const start1LessOrEqualEnd2 = start1 <=\
    \ end2 && start2 <= end1;\n  const start2LessOrEqualEnd1 = start2 <= end1 && start1\
    \ <= end2;\n  if (start1LessOrEqualEnd2 && start2LessOrEqualEnd1) {\n    return\
    \ \"YES\";\n  }\n  if (start1LessOrEqualEnd2 && !start2LessOrEqualEnd1) {\n  \
    \  return \"NO\";\n  }\n  if (!start1LessOrEqualEnd2 && start2LessOrEqualEnd1)\
    \ {\n    return \"NO\";\n  }\n  return \"NO\";\n}\n", "  let [start1, end1] =\
    \ interval1\n  let [start2, end2] = interval2\n  let startIntersection = start1\
    \ < start2 ? start1 : start2\n  let endIntersection = end1 < end2 ? end1 : end2\n\
    \  let intersectionLength = endIntersection - startIntersection\n  if (intersectionLength\
    \ === 0) return \"NO\"\n  if (intersectionLength === 1) return \"YES\"\n  if (intersectionLength\
    \ % 2 === 0) return \"NO\"\n  return \"YES\"\n}\n", "  if (interval1[0] > interval2[1])\
    \ {\n    return interval1[1] > interval2[0] ? \"NO\" : \"NO\";\n  }\n  if (interval1[1]\
    \ > interval2[0]) {\n    return interval1[0] > interval2[1] ? \"NO\" : \"NO\"\
    ;\n  }\n  if (interval1[0] === interval2[0]) {\n    return \"NO\";\n  }\n  if\
    \ (interval1[1] === interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0]\
    \ < interval2[0]) {\n    return interval1[1] > interval2[0] ? \"NO\" : \"NO\"\
    ;\n  }\n  if (interval1[1] < interval2[1]) {\n    return interval1[0] > interval2[1]\
    \ ? \"NO\" : \"NO\";\n  }\n  if (interval1[0] === interval2[0]) {\n    return\
    \ \"NO\";\n  }\n  if (interval1[1] === interval2[1]) {\n    return \"NO\";\n \
    \ }\n  if (interval1[0] > interval2[0]) {\n    return interval1[1] > interval2[0]\
    \ ? \"NO\" : \"NO\";\n  }\n  if (interval1[1] > interval2[1]) {\n    return interval1[0]\
    \ > interval2[1] ? \"NO\" : \"NO\";\n  }\n  if (interval1[0] === interval2[0])\
    \ {\n    return \"NO\";\n  }\n  if (interval1[1] === interval2[1]) {\n    return\
    \ \"NO\";\n  }\n  if (interval1[0] < interval2[0]) {\n    return interval1[1]\
    \ > interval2[0] ? \"NO\" : \"NO\";\n  }\n  if (interval1[1] < interval2[1]) {\n\
    \    return interval1[0] > interval2[1] ? \"NO\" : \"NO\";\n  }\n  if (interval1[0]\
    \ === interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[1] === interval2[1])\
    \ {\n    return \"NO\";\n  }\n  return \"YES\";\n}\n", "  let [start1, end1] =\
    \ interval1\n  let [start2, end2] = interval2\n  let start1LessOrEqualEnd2 = start1\
    \ <= end2 && start2 <= end1\n  let start2LessOrEqualEnd1 = start2 <= end1 && start1\
    \ <= end2\n  if (start1LessOrEqualEnd2 && start2LessOrEqualEnd1) {\n    return\
    \ \"YES\"\n  }\n  if (start1LessOrEqualEnd2 && !start2LessOrEqualEnd1) {\n   \
    \ return \"NO\"\n  }\n  if (!start1LessOrEqualEnd2 && start2LessOrEqualEnd1) {\n\
    \    return \"NO\"\n  }\n  return \"NO\"\n}\n", "  if (interval1[0] > interval2[1]\
    \ || interval1[1] < interval2[0]) {\n    return \"NO\";\n  }\n  if (interval1[0]\
    \ === interval1[1] && interval2[0] === interval2[1]) {\n    return \"YES\";\n\
    \  }\n  let start1 = interval1[0];\n  let end1 = interval1[1];\n  let start2 =\
    \ interval2[0];\n  let end2 = interval2[1];\n  let startIntersect = start1;\n\
    \  let endIntersect = end1;\n  while (startIntersect <= end2) {\n    if (startIntersect\
    \ === end2) {\n      endIntersect = end2;\n    } else {\n      endIntersect =\
    \ endIntersect + 1;\n    }\n    if (start2 === endIntersect) {\n      return \"\
    YES\";\n    }\n    startIntersect = startIntersect + 1;\n  }\n  return \"NO\"\
    ;\n}\n", "  let [start1, end1] = interval1;\n  let [start2, end2] = interval2;\n\
    \  if (start1 > end2) return \"NO\";\n  if (start2 > end1) return \"NO\";\n  if\
    \ (start1 <= start2 && end1 >= end2) return \"YES\";\n  if (start2 <= start1 &&\
    \ end2 >= end1) return \"YES\";\n  return \"NO\";\n}\n", "  if (interval1[0] >\
    \ interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  if\
    \ (interval1[0] < interval1[1] && interval2[0] < interval2[1]) {\n    return \"\
    NO\";\n  }\n  if (interval1[0] < interval1[1] && interval2[0] > interval2[1])\
    \ {\n    return \"NO\";\n  }\n  if (interval1[0] > interval1[1] && interval2[0]\
    \ < interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] > interval1[1]\
    \ && interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0]\
    \ === interval1[1] && interval2[0] === interval2[1]) {\n    return \"YES\";\n\
    \  }\n  if (interval1[0] === interval1[1]) {\n    return \"YES\";\n  }\n  if (interval2[0]\
    \ === interval2[1]) {\n    return \"YES\";\n  }\n  return \"NO\";\n}\n", "  let\
    \ [start1, end1] = interval1\n  let [start2, end2] = interval2\n  let start =\
    \ Math.max(start1, start2)\n  let end = Math.min(end1, end2)\n  let length = end\
    \ - start\n  if (length === 0) {\n    return \"NO\"\n  }\n  if (length == 1) {\n\
    \    return \"YES\"\n  }\n  if (length == 2) {\n    if (start1 <= start2 && end1\
    \ >= end2) {\n      return \"YES\"\n    }\n    if (start1 >= start2 && end1 <=\
    \ end2) {\n      return \"YES\"\n    }\n    if (start1 <= start2 && end1 <= end2)\
    \ {\n      return \"NO\"\n    }\n    if (start1 >= start2 && end1 >= end2) {\n\
    \      return \"NO\"\n    }\n  }\n  if (length == 3) {\n    if (start1 <= start2\
    \ && end1 >= end2) {\n      if (start1 <= start2 && end1 <= end2) {\n        return\
    \ \"YES\"\n      }\n      if (start1 >= start2 && end1 <= end2) {\n        return\
    \ \"YES\"\n      }\n      if (start1 <= start2 && end1 >= end2) {\n        return\
    \ \"NO\"\n      }\n      if (start1 >= start2 && end1 >= end2) {\n        return\
    \ \"NO\"\n      }\n    }\n    if (start1 >= start2 && end1 >= end2) {\n      if\
    \ (start1 <= start2 && end1 <= end2) {\n        return \"YES\"\n      }\n    \
    \  if (start1 >= start2 && end1 <= end2) {\n        return \"YES\"\n      }\n\
    \      if (start1 <= start2 && end1 >= end2) {\n        return \"NO\"\n      }\n\
    \      if (start1 >= start2 && end1 >= end2) {\n        return \"NO\"\n      }\n\
    \    }\n  }\n  if (length == 4) {\n    if (start1 <= start2 && end1 >= end2) {\n\
    \      if (start1 <= start2 && end1 <= end2) {\n        if (start1 <= start2 &&\
    \ end1 <= end2) {\n          return \"YES\"\n        }\n        if (start1 >=\
    \ start2 && end1 <= end2) {\n          return \"YES\"\n        }\n        if (start1\
    \ <= start2 && end1 >= end2) {\n          return \"NO\"\n        }\n        if\
    \ (start1 >= start2 && end1 >= end2) {\n          return \"NO\"\n        }\n \
    \     }\n      if (start1 >= start2 && end1 <= end2) {\n        if (start1 <=\
    \ start2 && end1 <= end2) {\n          return \"YES\"\n        }\n        if (start1\
    \ >= start2 && end1 <= end2) {\n          return \"YES\"\n        }\n        if\
    \ (start1 <= start2 && end1 >= end2) {\n          return \"NO\"\n        }\n \
    \       if (start1 >= start2 && end1 >= end2) {\n          return \"NO\"\n   \
    \     }\n      }\n    }\n    if (start1 >= start2 && end1 >= end2) {\n      if\
    \ (start1 <= start2 && end1 <= end2) {\n        if (start1 <= start2 && end1 <=\
    \ end2) {\n          if (start1 <= start2 && end1 <= end2) {\n", "  if (interval1[0]\
    \ > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n\
    \  let [start1, end1] = interval1;\n  let [start2, end2] = interval2;\n  let start1End\
    \ = start1 + end1;\n  let start2End = start2 + end2;\n  let start1End2 = start1End\
    \ + start2;\n  if (start1End2 === start1End && start2End === start2End) {\n  \
    \  return \"YES\";\n  }\n  if (start1End2 === start1End || start2End === start2End)\
    \ {\n    return \"NO\";\n  }\n  let start1End2Intersection = start1End + start2End\
    \ - start1End2;\n  if (start1End2Intersection === start1End && start2End === start2End)\
    \ {\n    return \"YES\";\n  }\n  if (start1End2Intersection === start1End || start2End\
    \ === start2End) {\n    return \"NO\";\n  }\n  let start1End2Intersection2 = start1End\
    \ + start2End - start1End2;\n  if (start1End2Intersection2 === start1End && start2End\
    \ === start2End) {\n    return \"YES\";\n  }\n  if (start1End2Intersection2 ===\
    \ start1End || start2End === start2End) {\n    return \"NO\";\n  }\n  let start1End2Intersection3\
    \ = start1End + start2End - start1End2;\n  if (start1End2Intersection3 === start1End\
    \ && start2End === start2End) {\n    return \"YES\";\n  }\n  if (start1End2Intersection3\
    \ === start1End || start2End === start2End) {\n    return \"NO\";\n  }\n  let\
    \ start1End2Intersection4 = start1End + start2End - start1End2;\n  if (start1End2Intersection4\
    \ === start1End && start2End === start2End) {\n    return \"YES\";\n  }\n  if\
    \ (start1End2Intersection4 === start1End || start2End === start2End) {\n    return\
    \ \"NO\";\n  }\n  let start1End2Intersection5 = start1End + start2End - start1End2;\n\
    \  if (start1End2Intersection5 === start1End && start2End === start2End) {\n \
    \   return \"YES\";\n  }\n  if (start1End2Intersection5 === start1End || start2End\
    \ === start2End) {\n    return \"NO\";\n  }\n  let start1End2Intersection", " \
    \ let [start1, end1] = interval1;\n  let [start2, end2] = interval2;\n  let start1LessEqualEnd2\
    \ = start1 < end2;\n  let start2LessEqualEnd1 = start2 < end1;\n  let start1LessEqualEnd2AndStart2LessEqualEnd1\
    \ = start1LessEqualEnd2 && start2LessEqualEnd1;\n  if (start1LessEqualEnd2AndStart2LessEqualEnd1)\
    \ {\n    return \"NO\";\n  }\n  let start1LessEqualEnd2AndStart2LessEqualEnd1AndStart1LessEqualEnd2\
    \ = start1LessEqualEnd2AndStart2LessEqualEnd1 && start2LessEqualEnd1;\n  if (start1LessEqualEnd2AndStart2LessEqualEnd1AndStart1LessEqualEnd2)\
    \ {\n    return \"YES\";\n  }\n  let start1LessEqualEnd2AndStart2LessEqualEnd1AndStart1LessEqualEnd2AndStart2LessEqualEnd1\
    \ = start1LessEqualEnd2AndStart2LessEqualEnd1 && start2LessEqualEnd1 && start1\
    \ < end2;\n  if (start1LessEqualEnd2AndStart2LessEqualEnd1AndStart1LessEqualEnd2AndStart2LessEqualEnd1)\
    \ {\n    return \"YES\";\n  }\n  let start1LessEqualEnd2AndStart2LessEqualEnd1AndStart1LessEqualEnd2AndStart2LessEqualEnd1AndStart1LessEqualEnd2\
    \ = start1LessEqualEnd2AndStart2LessEqualEnd1 && start2LessEqualEnd1 && start1\
    \ < end2 && start2 < end1;\n  if (start1LessEqualEnd2AndStart2LessEqualEnd1AndStart1LessEqualEnd2AndStart2LessEqualEnd1AndStart1LessEqualEnd2)\
    \ {\n    return \"YES\";\n  }\n  let start1LessEqualEnd2AndStart2LessEqualEnd1AndStart1LessEqualEnd2AndStart2LessEqualEnd1AndStart1LessEqualEnd2AndStart2LessEqualEnd1AndStart1LessEqualEnd2\
    \ = start1LessEqualEnd2AndStart2LessEqualEnd1 && start2LessEqualEnd1 && start1\
    \ < end2 && start2 < end1 && start1 < end2;\n  if (start1LessEqualEnd2AndStart2LessEqualEnd1AndStart1LessEqualEnd2AndStart2LessEqualEnd1AndStart1LessEqualEnd2AndStart2LessEqualEnd1AndStart1LessEqualEnd2AndStart2LessEqualEnd1)\
    \ {\n    return \"YES\";\n  }\n  let start1LessEqualEnd2AndStart2LessEqualEnd1AndStart1",
  "  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if\
    \ (start1 > end2) return \"NO\";\n  if (start2 > end1) return \"NO\";\n  if (start2\
    \ >= start1 && start2 <= end1) return \"YES\";\n  return \"NO\";\n}\n", "  const\
    \ [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1\
    \ <= end2 && start2 <= end1) {\n    if (start1 <= start2 && end2 <= end1) {\n\
    \      return \"YES\";\n    } else {\n      return \"NO\";\n    }\n  } else {\n\
    \    return \"NO\";\n  }\n}\n", "  const [start1, end1] = interval1;\n  const\
    \ [start2, end2] = interval2;\n  if (start1 > end2) {\n    return [start2, end2].sort().join(',')\
    \ === [start1, end1].sort().join(',') ? 'YES' : 'NO';\n  }\n  if (start2 > end1)\
    \ {\n    return [start1, end1].sort().join(',') === [start2, end2].sort().join(',')\
    \ ? 'YES' : 'NO';\n  }\n  if (start1 === start2 && end1 === end2) {\n    return\
    \ 'YES';\n  }\n  if (start1 === start2 && end1 > end2) {\n    return 'NO';\n \
    \ }\n  if (start1 > start2 && end1 === end2) {\n    return 'NO';\n  }\n  if (start1\
    \ < start2 && end1 === end2) {\n    return 'YES';\n  }\n}\n", "  if (interval1[0]\
    \ > interval2[1] || interval1[1] < interval2[0]) {\n    return \"NO\";\n  }\n\
    \  let i1 = interval1[0];\n  let i2 = interval1[1];\n  let j1 = interval2[0];\n\
    \  let j2 = interval2[1];\n  let i1End = i1 + 1;\n  let i2End = i2 + 1;\n  let\
    \ j1End = j1 + 1;\n  let j2End = j2 + 1;\n  let i1Start = 0;\n  let i2Start =\
    \ 0;\n  let j1Start = 0;\n  let j2Start = 0;\n  let i1End2 = i1End + 1;\n  let\
    \ i2End2 = i2End + 1;\n  let j1End2 = j1End + 1;\n  let j2End2 = j2End + 1;\n\
    \  let i1Start2 = i1Start + 1;\n  let i2Start2 = i2Start + 1;\n  let j1Start2\
    \ = j1Start + 1;\n  let j2Start2 = j2Start + 1;\n  let i1End3 = i1End2 + 1;\n\
    \  let i2End3 = i2End2 + 1;\n  let j1End3 = j1End2 + 1;\n  let j2End3 = j2End2\
    \ + 1;\n  let i1Start3 = i1Start2 + 1;\n  let i2Start3 = i2Start2 + 1;\n  let\
    \ j1Start3 = j1Start2 + 1;\n  let j2Start3 = j2Start2 + 1;\n  let i1End4 = i1End3\
    \ + 1;\n  let i2End4 = i2End3 + 1;\n  let j1End4 = j1End3 + 1;\n  let j2End4 =\
    \ j2End3 + 1;\n  let i1Start4 = i1Start3 + 1;\n  let i2Start4 = i2Start3 + 1;\n\
    \  let j1Start4 = j1Start3 + 1;\n  let j2Start4 = j2Start3 + 1;\n  let i1End5\
    \ = i1End4 + 1;\n  let i2End5 = i2End4 + 1;\n  let j1End5 = j1End4 + 1;\n  let\
    \ j2End5 = j2End4 + 1;\n  let i1Start5 = i1Start4 + 1;\n  let i2Start5 = i2Start4\
    \ + 1;\n  let j1Start5 = j1Start4 + 1;\n  let j2Start5 = j2Start4 + 1;\n  let\
    \ i1End6 = i1End5 + 1;\n  let i2End6 = i2End5 + 1;\n  let j1End6 = j1End5 + 1;\n\
    \  let j2End6 = j2End5 + 1;\n  let i1Start6 = i1Start5 + 1;\n  let i2Start6 =\
    \ i2Start5 + 1;\n  let j1Start6 = j1Start"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
