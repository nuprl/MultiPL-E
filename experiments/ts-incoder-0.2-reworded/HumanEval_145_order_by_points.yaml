name: HumanEval_145_order_by_points
language: ts
prompt: "//Write a function which sorts the given array of integers\n// in ascending\
  \ order according to the sum of their digits.\n// Note: if there are several items\
  \ with similar sum of their digits,\n// order them based on their index in original\
  \ array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1,\
  \ -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums:\
  \ number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
  \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
  \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
  \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
  \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9,\
  \ 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
  \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
completions: ["  const len = nums.length;\n  if (len === 0) {\n    return nums;\n\
    \  }\n  const digits = nums.map(n => parseInt(n.toString(), 10));\n  const sums\
    \ = digits.reduce((acc, d) => acc + d, 0);\n  const order = sums.map((s, i) =>\
    \ [s, i]);\n  return order.sort((a, b) => a[0] - b[0]).map(a => a[1]);\n}\n",
  "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
    \ = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((acc,\
    \ cur) => acc + +cur, 0));\n  const order = sums.map((s, i) => [s, i]);\n  return\
    \ order.sort((a, b) => a[0] - b[0]).map(a => a[1]);\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(x => parseInt(x,\
    \ 10));\n  const sums = digits.map(x => x * x);\n  const sorted = sums.sort((a,\
    \ b) => a - b);\n  const index = sums.indexOf(Math.max(...sorted));\n  return\
    \ nums.map(x => parseInt(x, 10)).sort((a, b) => a - b).map(x => index === x ?\
    \ x : index - x);\n}\n", "  const len = nums.length;\n  if (len === 0) {\n   \
    \ return [];\n  }\n  const digits = nums.map(n => n.toString()).map(Number);\n\
    \  const sums = digits.map(d => d.reduce((acc, d) => acc + d, 0));\n  const indexes\
    \ = sums.map((d, i) => i);\n  return nums.map((n, i) => indexes[i]).sort();\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => n.toString()).join('');\n  const chars = digits.split('');\n\
    \  const sorted = chars.sort((a, b) => a.localeCompare(b));\n  const result =\
    \ [];\n  for (let i = 0; i < len; i++) {\n    result.push(parseInt(sorted[i],\
    \ 10));\n  }\n  return result;\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return nums;\n  }\n  const max_sum = nums.reduce((max_sum, num) =>\
    \ {\n    const digits = num.toString().split('');\n    const sum = digits.reduce((sum,\
    \ digit) => sum + +digit, 0);\n    return sum > max_sum ? sum : max_sum;\n  },\
    \ 0);\n  const min_sum = nums.reduce((min_sum, num) => {\n    const digits = num.toString().split('');\n\
    \    const sum = digits.reduce((sum, digit) => sum + +digit, 0);\n    return sum\
    \ < min_sum ? sum : min_sum;\n  }, 0);\n  const order = [];\n  for (let i = 0;\
    \ i < len; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n\
    \    const sum = digits.reduce((sum, digit) => sum + +digit, 0);\n    if (sum\
    \ === max_sum) {\n      order.push(num);\n    } else if (sum === min_sum) {\n\
    \      order.unshift(num);\n    }\n  }\n  return order;\n}\n", "  const len =\
    \ nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n\
    \ => parseInt(n.toString(), 10));\n  const sum_digits = digits.reduce((sum, digit)\
    \ => sum + digit, 0);\n  const digits_len = digits.length;\n  const result = [];\n\
    \  for (let i = 0; i < len; i++) {\n    const digit = digits[i];\n    const index\
    \ = sum_digits - digit;\n    if (index >= 0) {\n      result.push(nums[index]);\n\
    \    }\n  }\n  return result;\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString());\n\
    \  const sums = digits.map(d => d.split('').reduce((acc, cur) => acc + +cur, 0));\n\
    \  return sums.sort((a, b) => a - b).map(i => nums[i]);\n}\n", "  const len =\
    \ nums.length;\n  const arr = [];\n  let sum = 0;\n  for (let i = 0; i < len;\
    \ i++) {\n    sum += nums[i];\n    arr.push(sum);\n  }\n  return arr;\n}\n", " \
    \ const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
    \ digits = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((a,\
    \ b) => a + +b, 0));\n  const indexes = sums.map((s, i) => i);\n  return nums.map((n,\
    \ i) => indexes[sums[i]]).sort((a, b) => a - b);\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString());\n\
    \  const sum_digits = digits.reduce((sum, digit) => sum + +digit, 0);\n  const\
    \ digits_len = digits.length;\n  const result = [];\n  for (let i = 0; i < len;\
    \ i++) {\n    const num = nums[i];\n    const digit = digits[i];\n    if (sum_digits\
    \ - +digit < 0) {\n      result.push(num);\n    } else {\n      const index =\
    \ sum_digits - +digit;\n      result.splice(index, 0, num);\n    }\n  }\n  return\
    \ result;\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return [];\n\
    \  }\n  const digits = nums.map(x => Math.abs(x).toString()).sort();\n  const\
    \ points: number[] = [];\n  let max = 0;\n  for (let i = 0; i < digits.length;\
    \ i++) {\n    const digit = digits[i];\n    const index = digits.indexOf(digit);\n\
    \    if (index > max) {\n      max = index;\n    }\n    points.push(index);\n\
    \  }\n  return points.map(x => nums[x]);\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString());\n\
    \  const sums = digits.map(d => d.split('').reduce((acc, cur) => acc + +cur, 0));\n\
    \  return sums.sort((a, b) => a - b).map(i => nums[i]);\n}\n", "  const len =\
    \ nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n\
    \ => n.toString());\n  const sums = digits.map(d => d.split('').reduce((a, b)\
    \ => a + +b, 0));\n  const indexes = sums.map((s, i) => i);\n  const sorted =\
    \ indexes.sort((a, b) => sums[a] - sums[b]);\n  return nums.map((_, i) => sorted[i]);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => parseInt(n.toString(), 10));\n  const sums = digits.map(d\
    \ => d.reduce((acc, d) => acc + d, 0));\n  const order = sums.map((s, i) => [s,\
    \ i]);\n  return order.sort((a, b) => a[0] - b[0]).map(a => a[1]);\n}\n", "  const\
    \ len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
    \ = nums.map(n => Math.abs(n));\n  const sum_digits = digits.reduce((sum, n) =>\
    \ sum + n);\n  const digits_sum = digits.reduce((sum, n) => sum + n);\n  const\
    \ digits_len = digits.length;\n  const points = [];\n  let index = 0;\n  while\
    \ (index < len) {\n    const digit = digits[index];\n    const sum_digits_index\
    \ = sum_digits - digit;\n    if (sum_digits_index >= digits_len) {\n      points.push(digit);\n\
    \      index++;\n    } else {\n      const point_index = sum_digits_index - digits_sum;\n\
    \      points.push(digits[point_index]);\n      index++;\n    }\n  }\n  return\
    \ points;\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n\
    \  }\n  const digits = nums.map(n => n.toString());\n  const sums = digits.map(d\
    \ => d.split('').reduce((acc, cur) => acc + +cur, 0));\n  const order = sums.map((s,\
    \ i) => [s, i]);\n  return order.sort((a, b) => a[0] - b[0]).map(a => a[1]);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => parseInt(n.toString(), 10));\n  const sums = digits.reduce((sum,\
    \ digit) => sum + digit, 0);\n  return nums.sort((a, b) => sums[a] - sums[b]);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => n.toString()).join('');\n  const map = new Map<string,\
    \ number>();\n  for (let i = 0; i < digits.length; i++) {\n    const digit = digits[i];\n\
    \    const count = map.get(digit);\n    if (count === undefined) {\n      map.set(digit,\
    \ 1);\n    } else {\n      map.set(digit, count + 1);\n    }\n  }\n  const result\
    \ = [];\n  for (const [key, value] of map.entries()) {\n    result.push([key,\
    \ value]);\n  }\n  return result.sort((a, b) => a[1] - b[1]).map(a => a[0]);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n \
    \ const digits = nums.map(n => n.toString()).map(Number);\n  const sums = digits.map(d\
    \ => d.reduce((a, b) => a + b, 0));\n  const order = sums.map((s, i) => [s, i]);\n\
    \  return order.sort((a, b) => a[0] - b[0]).map(a => a[1]);\n}\n", "  const len\
    \ = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits =\
    \ nums.map(n => n.toString()).map(Number);\n  const sums = digits.map(d => d.reduce((p,\
    \ c) => p + c, 0));\n  const sorted = sums.sort((a, b) => a - b);\n  const index\
    \ = sums.indexOf(sorted[0]);\n  return nums.map((n, i) => i === index ? n : sorted[i]);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => Math.abs(n));\n  const sums = digits.map(d =>\
    \ d.reduce((acc, d) => acc + d, 0));\n  const indexes = sums.map((s, i) => i);\n\
    \  const sorted = indexes.sort((a, b) => sums[a] - sums[b]);\n  return nums.map((n,\
    \ i) => sorted[i]);\n}\n", "  const len = nums.length;\n  if (len === 0) {\n \
    \   return nums;\n  }\n  const digits = nums.map(n => n.toString());\n  const\
    \ sums = digits.map(d => d.split('').reduce((acc, cur) => acc + +cur, 0));\n \
    \ return sums.sort((a, b) => a - b).map(i => nums[i]);\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString());\n\
    \  const sums = digits.map(d => d.split('').reduce((acc, cur) => acc + +cur, 0));\n\
    \  return sums.sort((a, b) => a - b).map(i => nums[i]);\n}\n", "  const sums =\
    \ nums.map(n => n.toString().split('').map(Number).reduce((a, b) => a + b, 0));\n\
    \  return nums.sort((a, b) => sums[a] - sums[b]);\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(x => parseInt(x,\
    \ 10));\n  const sums = digits.map(x => x * x);\n  const indexes = sums.map(x\
    \ => digits.indexOf(x));\n  return indexes.sort((a, b) => sums[a] - sums[b]);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => n.toString()).sort();\n  const sums = digits.map(d\
    \ => d.split('').reduce((acc, cur) => acc + +cur, 0));\n  return nums.map(n =>\
    \ sums.map(s => s === n ? n : s).filter(s => s !== 0).sort((a, b) => a - b)[0]);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n \
    \ const digits = nums.map(n => n.toString());\n  const sums = digits.map(d =>\
    \ d.split('').reduce((acc, cur) => acc + +cur, 0));\n  const order = sums.map((sum,\
    \ i) => [sum, i]); // Sort by sum\n  return order.sort((a, b) => a[0] - b[0]).map(a\
    \ => nums[a[1]]);\n}\n", "  const len = nums.length;\n  if (len === 0) {\n   \
    \ return [];\n  }\n  const digits = nums.map(n => n.toString()).sort();\n  const\
    \ sums = digits.map(d => d.split('').map(Number).reduce((a, b) => a + b, 0));\n\
    \  const indexes = Array.from({ length: len }).map((_, i) => sums.indexOf(sums[i]));\n\
    \  return nums.map((n, i) => indexes[i] < 0 ? nums[i] : n);\n}\n", "  const len\
    \ = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits =\
    \ nums.map(n => parseInt(n.toString(), 10));\n  const sums = digits.map(d => d.reduce((a,\
    \ b) => a + b, 0));\n  const sorted = sums.map((s, i) => [s, i]);\n  sorted.sort((a,\
    \ b) => a[0] - b[0]);\n  return sorted.map(a => nums[a[1]]);\n}\n", "  const len\
    \ = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n\
    \ => parseInt(n.toString(), 10));\n  const sum_digits = digits.reduce((sum, n)\
    \ => sum + n, 0);\n  const digits_len = digits.length;\n  const result = [];\n\
    \  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const digit\
    \ = digits[i];\n    if (digit === sum_digits) {\n      result.push(num);\n   \
    \   continue;\n    }\n    const index = digits_len - 1;\n    while (index >= 0)\
    \ {\n      const left = digits[index];\n      const right = digits[index + 1];\n\
    \      if (left < right && num >= left && num <= right) {\n        result.push(num);\n\
    \        break;\n      }\n      index--;\n    }\n  }\n  return result;\n}\n",
  "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
    \ digits = nums.map(n => n % 10);\n  const sums = digits.map(n => n * n);\n  const\
    \ indexes = Array.from(Array(len).keys()).sort((a, b) => sums[a] - sums[b]);\n\
    \  return indexes.map(i => nums[i]);\n}\n", "  const len = nums.length;\n  if\
    \ (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => parseInt(n.toString(),\
    \ 10));\n  const sums = digits.map(d => d.reduce((acc, d) => acc + d, 0));\n \
    \ const order = sums.map((s, i) => [s, i]);\n  return order.sort((a, b) => a[0]\
    \ - b[0]).map(a => a[1]);\n}\n", "  const len = nums.length;\n  const arr = [];\n\
    \  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const digits\
    \ = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length;\
    \ j++) {\n      sum += parseInt(digits[j], 10);\n    }\n    arr.push(sum);\n \
    \ }\n  arr.sort((a, b) => a - b);\n  return arr;\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n %\
    \ 10);\n  const sum_digits = digits.reduce((sum, n) => sum + n, 0);\n  const digits_len\
    \ = digits.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n\
    \    const num = nums[i];\n    const digit = num / Math.pow(10, digits_len - i);\n\
    \    const index = sum_digits - digit;\n    if (index >= 0) {\n      result.push(nums[index]);\n\
    \    }\n  }\n  return result;\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return [];\n  }\n  const digits = nums.map(x => parseInt(x, 10));\n\
    \  const sums = digits.map(x => x * x);\n  const sorted = sums.sort((a, b) =>\
    \ a - b);\n  return nums.map(x => parseInt(x, 10)).sort((a, b) => a - b);\n}\n",
  "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
    \ = nums.map(n => Math.abs(n));\n  const sums = digits.map(d => d.reduce((a, b)\
    \ => a + b, 0));\n  const indexes = sums.map((d, i) => i);\n  const sorted = indexes.sort((a,\
    \ b) => sums[a] - sums[b]);\n  return indexes.map(i => nums[sorted[i]]);\n}\n",
  "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
    \ = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((acc,\
    \ cur) => acc + +cur, 0));\n  const order = sums.map((sum, idx) => [sum, idx]);\n\
    \  return order.sort((a, b) => a[0] - b[0]).map(a => a[1]);\n}\n", "  const len\
    \ = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits =\
    \ nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((acc,\
    \ cur) => acc + +cur, 0));\n  return sums.sort((a, b) => a - b).map(i => nums[i]);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(x => parseInt(x, 10));\n  const sum_digits = digits.reduce((sum,\
    \ digit) => sum + digit, 0);\n  const digits_len = digits.length;\n  const result\
    \ = [];\n  for (let i = 0; i < len; i++) {\n    const digit = digits[i];\n   \
    \ const index = sum_digits - digit;\n    if (index >= 0) {\n      result.push(nums[index]);\n\
    \    }\n  }\n  return result;\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return nums;\n  }\n  const digits = nums.map(n => parseInt(n.toString(),\
    \ 10));\n  const sums = digits.map(d => d.reduce((acc, d) => acc + d, 0));\n \
    \ const indexes = Array.from({ length: len }).map((_, i) => i);\n  indexes.sort((a,\
    \ b) => {\n    const sumA = sums[a];\n    const sumB = sums[b];\n    if (sumA\
    \ === sumB) {\n      return indexes[a] - indexes[b];\n    }\n    return sumA <\
    \ sumB ? -1 : 1;\n  });\n  return indexes.map(i => nums[indexes[i]]);\n}\n", " \
    \ const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
    \ = nums.map(n => n % 10);\n  const sums = digits.reduce((acc, d) => acc + d,\
    \ 0);\n  const order = Array.from({ length }, (_, i) => sums - digits[i]);\n \
    \ return nums.map(n => order[n % order.length]);\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => parseInt(n.toString(),\
    \ 10));\n  const sums = digits.reduce((sum, digit) => sum + digit, 0);\n  const\
    \ indexes = Array.from({ length: len }).map((_, i) => i);\n  indexes.sort((a,\
    \ b) => sums[a] - sums[b]);\n  return indexes.map(i => nums[indexes[i]]);\n}\n",
  "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
    \ digits = nums.map(n => parseInt(n.toString(), 10));\n  const sums = digits.map(d\
    \ => d.reduce((acc, d) => acc + d, 0));\n  const order = sums.map((s, i) => [s,\
    \ i]);\n  return order.sort((a, b) => a[0] - b[0]).map(a => a[1]);\n}\n", "  const\
    \ len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits\
    \ = nums.map(n => n % 10);\n  const sums = digits.reduce((sum, digit) => sum +\
    \ digit, 0);\n  const indexes = digits.map((digit, i) => sums - digit).sort((a,\
    \ b) => a - b);\n  return nums.map((n, i) => indexes[i] ? n : -1);\n}\n", "  const\
    \ len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits\
    \ = nums.map(n => parseInt(n.toString(), 10));\n  const sums = digits.map(d =>\
    \ d.reduce((acc, d) => acc + d, 0));\n  const order = sums.map((s, i) => [s, i]);\n\
    \  return order.sort((a, b) => a[0] - b[0]).map(a => a[1]);\n}\n", "  const len\
    \ = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(num\
    \ => num.toString().split('').reduce((acc, cur) => acc + +cur, 0));\n  const sums\
    \ = digits.map(num => nums.reduce((acc, cur) => acc + +cur, 0) + num);\n  return\
    \ sums.sort((a, b) => a - b).map(i => nums[i]);\n}\n", "  const len = nums.length;\n\
    \  const arr: number[] = [];\n  let sum = 0;\n  for (let i = 0; i < len; i++)\
    \ {\n    sum += nums[i];\n    arr.push(sum);\n  }\n  arr.sort((a, b) => a - b);\n\
    \  return arr;\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return\
    \ nums;\n  }\n  const digits = nums.map(n => n.toString());\n  const sums = digits.map(n\
    \ => parseInt(n, 10));\n  const len = sums.length;\n  if (len === 0) {\n    return\
    \ nums;\n  }\n  const sorted = [];\n  let index = 0;\n  while (index < len) {\n\
    \    const sum = sums[index];\n    const pos = sums.indexOf(sum);\n    if (pos\
    \ === -1) {\n      sorted.push(sum);\n      index++;\n    } else {\n      sorted.splice(pos,\
    \ 0, sum);\n    }\n  }\n  return sorted;\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString());\n\
    \  const sums = digits.map(n => parseInt(n, 10));\n  const indexes = sums.map((sum,\
    \ i) => sums.indexOf(sum) + i);\n  return nums.map(num => nums[indexes.indexOf(num)]);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => parseInt(n.toString(), 10));\n  const sums = digits.map(d\
    \ => d.reduce((acc, d) => acc + d, 0));\n  const sorted = sums.sort((a, b) =>\
    \ a - b);\n  return nums.map(n => sorted[nums.indexOf(n)]);\n}\n", "  const len\
    \ = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits =\
    \ nums.map(n => parseInt(n.toString(), 10));\n  const sums = digits.reduce((sum,\
    \ digit) => sum + digit, 0);\n  const indexes = digits.map((digit, i) => sums\
    \ - digit).sort((a, b) => a - b).map(i => i);\n  return nums.map((n, i) => indexes[i]\
    \ ? n : nums[i - 1]);\n}\n", "  const len = nums.length;\n  if (len === 0) {\n\
    \    return nums;\n  }\n  const digits = nums.map(n => parseInt(n.toString(),\
    \ 10));\n  const sums = digits.map(d => d.reduce((acc, d) => acc + d, 0));\n \
    \ const order = sums.map((s, i) => [s, i]);\n  return order.sort((a, b) => a[0]\
    \ - b[0]).map(a => a[1]);\n}\n", "  const len = nums.length;\n  if (len === 0)\
    \ {\n    return nums;\n  }\n  const digits = nums.map(x => parseInt(x, 10));\n\
    \  const sums = digits.map(x => +x);\n  const len = sums.length;\n  if (len ===\
    \ 0) {\n    return nums;\n  }\n  const sorted = [];\n  for (let i = 0; i < len;\
    \ i++) {\n    const index = sums.indexOf(Math.max(...sums));\n    sorted.push(nums[index]);\n\
    \    sums.splice(index, 1);\n  }\n  return sorted;\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString()).sort();\n\
    \  const sums = digits.map(n => +n);\n  const len = sums.length;\n  if (len ===\
    \ 0) {\n    return nums;\n  }\n  let [minSum, maxSum] = sums.map(n => n);\n  for\
    \ (let i = 0; i < len; i++) {\n    minSum = Math.min(minSum, sums[i]);\n    maxSum\
    \ = Math.max(maxSum, sums[i]);\n  }\n  const result = [];\n  for (let i = 0; i\
    \ < len; i++) {\n    const num = nums[i];\n    if (num < minSum) {\n      result.push(num);\n\
    \    } else if (num > maxSum) {\n      result.push(num);\n    } else {\n     \
    \ const index = sums.indexOf(num);\n      result.push(nums[index]);\n    }\n \
    \ }\n  return result;\n}\n", "  const sums = nums.map(num => num.toString().split('').map(Number).reduce((a,\
    \ b) => a + b));\n  return nums.sort((a, b) => {\n    const sumA = sums[a];\n\
    \    const sumB = sums[b];\n    return sumA - sumB;\n  });\n}\n", "  const sums\
    \ = nums.map(n => n.toString().split('').map(Number).reduce((a, b) => a + b))\n\
    \  return nums.sort((a, b) => {\n    const aSum = sums[a]\n    const bSum = sums[b]\n\
    \    return aSum - bSum\n  })\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n % 10);\n  const\
    \ sum_digits = digits.reduce((sum, digit) => sum + digit, 0);\n  const digits_len\
    \ = digits.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n\
    \    const num = nums[i];\n    const digit = num % 10;\n    const index = sum_digits\
    \ - digit + digits_len;\n    if (index >= 0) {\n      result[index] = num;\n \
    \   }\n  }\n  return result;\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n % 10);\n  const\
    \ sum_digits = digits.reduce((sum, n) => sum + n, 0);\n  const digits_len = digits.length;\n\
    \  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n\
    \    const digit = num / Math.pow(10, digits_len - i);\n    if (sum_digits - digit\
    \ < 0) {\n      result.push(num);\n    } else {\n      result.push(num * Math.pow(10,\
    \ digits_len - i - 1));\n    }\n  }\n  return result;\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString()).map(Number);\n\
    \  const sums = digits.map(d => d.reduce((acc, d) => acc + d, 0));\n  const order\
    \ = sums.map((s, i) => [s, i]);\n  return order.sort((a, b) => a[0] - b[0]).map(a\
    \ => a[1]);\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return\
    \ nums;\n  }\n  const digits = nums.map(n => parseInt(n.toString(), 10));\n  const\
    \ sums = digits.reduce((acc, d) => acc + d, 0);\n  const indexes = digits.map(d\
    \ => sums.indexOf(d)).filter(d => d !== -1);\n  return indexes.sort((a, b) =>\
    \ a - b).map(i => nums[i]);\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n % 10);\n  const\
    \ sums = digits.map(d => digits.reduce((p, c) => p + c, 0));\n  const indexes\
    \ = sums.map((s, i) => i);\n  return nums.map((n, i) => indexes[sums.indexOf(n\
    \ - digits[i])]);\n}\n", "  const len = nums.length;\n  const arr = [];\n  let\
    \ sum = 0;\n  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    sum\
    \ += num;\n    arr.push(num);\n  }\n  arr.sort((a, b) => {\n    return sum - a\
    \ + b;\n  });\n  return arr;\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString()).sort();\n\
    \  const sums = digits.map(d => d.split('').reduce((a, b) => a + +b, 0));\n  return\
    \ digits.map((d, i) => sums[i] - +d);\n}\n", "  const len = nums.length;\n  if\
    \ (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n % 10);\n\
    \  const sums = digits.reduce((sum, digit) => sum + digit, 0);\n  return nums.sort((a,\
    \ b) => sums - digits[a] - digits[b]);\n}\n", "  const len = nums.length;\n  if\
    \ (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString());\n\
    \  const sums = digits.map(d => d.split('').reduce((acc, cur) => acc + +cur, 0));\n\
    \  const order = sums.map((sum, i) => [sum, i]) as [number, number][];\n  return\
    \ order.sort((a, b) => a[0] - b[0]).map(a => nums[a[1]]);\n}\n", "  const len\
    \ = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n\
    \ => n.toString()).join('');\n  const sums = digits.length ? digits.split('').map(Number)\
    \ : [];\n  const indexes = sums.map((sum, i) => sums.indexOf(sum) + i);\n  return\
    \ indexes.sort((a, b) => a - b);\n}\n", "  const len = nums.length;\n  if (len\
    \ === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString());\n\
    \  const sums = digits.map(n => +n);\n  const indexes = sums.map((sum, i) => sums.indexOf(sum)\
    \ + i);\n  return indexes.sort((a, b) => a - b).map(i => nums[i]);\n}\n", "  const\
    \ sums = nums.map(num => num.toString().split('').map(Number).reduce((a, b) =>\
    \ a + b, 0));\n  return nums.sort((a, b) => sums.indexOf(a) - sums.indexOf(b));\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(num => String(num).split('').reduce((acc, cur) => acc\
    \ + +cur, 0));\n  const sums = digits.map(num => nums.reduce((acc, cur) => acc\
    \ + +cur, 0) + +num);\n  return sums.sort((a, b) => a - b).map(num => nums.indexOf(num));\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n \
    \ const digits = nums.map(n => n.toString());\n  const sums = digits.map(n =>\
    \ parseInt(n, 10));\n  const len = sums.length;\n  const result = [];\n  for (let\
    \ i = 0; i < len; i++) {\n    const index = sums.indexOf(sums[i]);\n    if (index\
    \ > 0) {\n      result.push(nums[index]);\n    }\n  }\n  return result;\n}\n",
  "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
    \ digits = nums.map(n => n.toString());\n  const len = digits.length;\n  const\
    \ map = new Map<number, number>();\n  for (let i = 0; i < len; i++) {\n    const\
    \ digit = digits[i];\n    const index = map.get(digit);\n    if (index === undefined)\
    \ {\n      map.set(digit, i);\n    } else {\n      map.set(digit, index + 1);\n\
    \    }\n  }\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const\
    \ digit = digits[i];\n    const index = map.get(digit);\n    if (index === undefined)\
    \ {\n      result.push(nums[i]);\n    } else {\n      result.push(nums[index]);\n\
    \    }\n  }\n  return result;\n}\n", "  const sums = nums.map(n => n.toString().split('').reduce((a,\
    \ b) => a + +b, 0));\n  return nums.sort((a, b) => sums[a] - sums[b]);\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n\
    \  }\n  nums.sort((a, b) => a - b);\n  for (let i = 0; i < nums.length; i++) {\n\
    \    nums[i] = nums[i] - sum;\n  }\n  return nums;\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString());\n\
    \  const sums = digits.map(n => Number(n));\n  const maxSum = Math.max(...sums);\n\
    \  const minSum = Math.min(...sums);\n  const order = new Array(len).fill(0);\n\
    \  for (let i = 0; i < len; i++) {\n    order[i] = sums[i] - maxSum;\n  }\n  const\
    \ sortedOrder = order.sort((a, b) => a - b);\n  const sortedNums = nums.map(n\
    \ => sortedOrder.indexOf(n));\n  return sortedNums;\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString()).sort();\n\
    \  const buckets = digits.length < len ? [digits, []] : [[], digits];\n  for (let\
    \ i = 0; i < buckets.length; ++i) {\n    const digit = buckets[i];\n    for (let\
    \ j = 0; j < len; ++j) {\n      if (digits[j].length < digit.length) {\n     \
    \   buckets[i] = digits[j];\n        break;\n      }\n    }\n  }\n  return buckets.reduce((acc,\
    \ cur) => acc.concat(cur), []);\n}\n", "  const len = nums.length;\n  if (len\
    \ === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => parseInt(n.toString(),\
    \ 10));\n  const sums = digits.reduce((acc, d) => acc + d, 0);\n  const indexes\
    \ = Array.from({ length: len }).map((_, i) => i);\n  indexes.sort((a, b) => {\n\
    \    const da = digits[a];\n    const db = digits[b];\n    return sums - da -\
    \ db;\n  });\n  return indexes.map(i => nums[i]);\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString()).map(Number);\n\
    \  const sums = digits.map(d => d.reduce((a, b) => a + b, 0));\n  const order\
    \ = sums.map((s, i) => [s, i]);\n  return order.sort((a, b) => a[0] - b[0]).map(a\
    \ => a[1]);\n}\n", "  const sums: number[] = [];\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sums.push(nums.reduce((sum, num) => sum + num));\n  }\n  return\
    \ nums.sort((a, b) => sums.indexOf(b) - sums.indexOf(a));\n}\n", "  const len\
    \ = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits =\
    \ nums.map(n => n.toString()).map(Number);\n  const sums = digits.map(d => d.reduce((acc,\
    \ d) => acc + d, 0));\n  const order = sums.map((s, i) => [s, i]);\n  return order.sort((a,\
    \ b) => a[0] - b[0]).map(a => a[1]);\n}\n", "  const len = nums.length;\n  if\
    \ (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => Math.abs(n));\n\
    \  const sum_digits = digits.reduce((sum, n) => sum + n, 0);\n  const digits_len\
    \ = digits.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n\
    \    const num = nums[i];\n    const digit = digits[i];\n    if (sum_digits -\
    \ digit < 0) {\n      result.push(num);\n    } else {\n      const index = sum_digits\
    \ - digit;\n      result.push(nums[index]);\n      result.push(nums[index + 1]);\n\
    \    }\n  }\n  return result;\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return [];\n  }\n  const digits = nums.map(n => n.toString()).map(Number);\n\
    \  const sums = digits.map(d => d.reduce((a, b) => a + b, 0));\n  return digits.sort((a,\
    \ b) => sums.indexOf(a) - sums.indexOf(b));\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const max_sum = nums.reduce((max_sum,\
    \ num) => {\n    const sum = num.toString().split('').reduce((sum, digit) => sum\
    \ + +digit, 0);\n    return sum > max_sum ? sum : max_sum;\n  }, 0);\n  return\
    \ nums.sort((a, b) => a > b ? 1 : a < b ? -1 : max_sum - a);\n}\n", "  const len\
    \ = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits =\
    \ nums.map(n => Math.abs(n));\n  const sum_digits = digits.reduce((sum, digit)\
    \ => sum + digit, 0);\n  const digits_len = digits.length;\n  const result = [];\n\
    \  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const digit\
    \ = digits[i];\n    if (sum_digits - digit < 0) {\n      result.push(num);\n \
    \   } else {\n      result.push(nums[digits_len - i - 1]);\n    }\n  }\n  return\
    \ result;\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return [];\n\
    \  }\n  const digits = nums.map(n => n.toString());\n  const sums = digits.map(d\
    \ => d.split('').reduce((acc, cur) => acc + +cur, 0));\n  const sorted = sums.sort((a,\
    \ b) => a - b);\n  const result = [];\n  for (let i = 0; i < len; i++) {\n   \
    \ if (sorted[i] !== sums[i]) {\n      result.push(nums[i]);\n    }\n  }\n  return\
    \ result;\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n\
    \  }\n  const max_sum = nums.reduce((acc, curr) => acc + curr, 0);\n  const min_sum\
    \ = nums.reduce((acc, curr) => acc + curr, 0);\n  const sorted_nums = nums.sort((a,\
    \ b) => a - b);\n  const sorted_nums_len = sorted_nums.length;\n  for (let i =\
    \ 0; i < sorted_nums_len; i++) {\n    const curr = sorted_nums[i];\n    const\
    \ diff = curr - min_sum;\n    if (diff > 0) {\n      min_sum = curr - diff;\n\
    \    } else {\n      max_sum = curr + diff;\n    }\n  }\n  return sorted_nums.map(num\
    \ => num - min_sum).concat(sorted_nums.map(num => max_sum - num));\n}\n", "  const\
    \ len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const max_sum\
    \ = nums.reduce((max_sum, num) => {\n    const sum = nums.reduce((sum, digit)\
    \ => sum + digit, 0);\n    return sum > max_sum ? sum : max_sum;\n  }, 0);\n \
    \ const min_sum = nums.reduce((min_sum, num) => {\n    const sum = nums.reduce((sum,\
    \ digit) => sum + digit, 0);\n    return sum < min_sum ? sum : min_sum;\n  },\
    \ 0);\n  const order = [];\n  for (let i = 0; i < len; i++) {\n    const num =\
    \ nums[i];\n    const digits = num.toString().split('');\n    const sum_digits\
    \ = digits.reduce((sum, digit) => sum + +digit, 0);\n    if (sum_digits > max_sum)\
    \ {\n      order.push(num);\n    } else if (sum_digits < min_sum) {\n      order.push(num);\n\
    \    }\n  }\n  return order;\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n % 10);\n  const\
    \ sum_digits = digits.reduce((sum, digit) => sum + digit, 0);\n  const digits_len\
    \ = digits.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n\
    \    const num = nums[i];\n    const digit = num % 10;\n    if (digit === sum_digits)\
    \ {\n      result.push(num);\n    }\n  }\n  return result;\n}\n", "  const len\
    \ = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n\
    \ => Math.abs(n));\n  const sum_digits = digits.reduce((sum, n) => sum + n, 0);\n\
    \  const digits_len = digits.length;\n  const result = [];\n  for (let i = 0;\
    \ i < len; ++i) {\n    const num = nums[i];\n    const digit = digits[i];\n  \
    \  if (digit < sum_digits) {\n      result.push(num);\n    } else if (sum_digits\
    \ === digit) {\n      result.push(num);\n      result.push(nums[i - 1]);\n   \
    \ } else {\n      result.push(nums[i - 1]);\n    }\n  }\n  return result;\n}\n",
  "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
    \ digits = nums.map(n => n % 10);\n  const sum_digits = digits.reduce((sum, digit)\
    \ => sum + digit, 0);\n  const result = [];\n  for (let i = 0; i < len; i++) {\n\
    \    const num = nums[i];\n    const digit = digits[i];\n    if (sum_digits -\
    \ digit > 0) {\n      result.push(num);\n    }\n  }\n  return result;\n}\n", " \
    \ const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
    \ digits = nums.map(n => n.toString()).sort();\n  const sums = digits.map(d =>\
    \ d.split('').reduce((acc, cur) => acc + +cur, 0));\n  return nums.map(n => sums.indexOf(n));\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => n.toString());\n  const sums = digits.map(d =>\
    \ d.split('').reduce((a, b) => a + +b, 0));\n  return sums.sort((a, b) => a -\
    \ b).map(i => nums[i]);\n}\n", "  const len = nums.length;\n  if (len === 0) {\n\
    \    return nums;\n  }\n  const digits = nums.map(num => parseInt(String(num),\
    \ 10));\n  const sums = digits.map(num => num.reduce((acc, curr) => acc + curr,\
    \ 0));\n  const sorted = sums.map((sum, index) => ({ sum, index }));\n  sorted.sort((a,\
    \ b) => a.sum - b.sum);\n  return sorted.map(item => nums[item.index]);\n}\n",
  "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
    \ digits = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((acc,\
    \ cur) => acc + +cur, 0));\n  return sums.sort((a, b) => a - b).map(i => nums[i]);\n\
    }\n", "  const len = nums.length;\n  const points = new Array<number>(len);\n\
    \  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const digits\
    \ = num.toString().split('');\n    points.push([digits.length, digits]);\n  }\n\
    \  points.sort((a, b) => a[0] - b[0] || a[1] - b[1]);\n  const result = [];\n\
    \  for (let i = 0; i < len; i++) {\n    const [digits, nums] = points[i];\n  \
    \  for (let j = 0; j < digits; j++) {\n      result.push(nums[j]);\n    }\n  }\n\
    \  return result;\n}\n", "  const len = nums.length;\n  const points = new Array<number>(len);\n\
    \  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const digits\
    \ = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length;\
    \ j++) {\n      sum += parseInt(digits[j], 10);\n    }\n    points[i] = sum;\n\
    \  }\n  points.sort((a, b) => a - b);\n  return points.map(i => nums[i]);\n}\n",
  "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
    \ digits = nums.map(n => parseInt(n.toString(), 10));\n  const sums = digits.map(d\
    \ => d.reduce((acc, d) => acc + d, 0));\n  const order = sums.map((sum, index)\
    \ => [sum, index]);\n  return order.sort((a, b) => a[0] - b[0]).map(a => a[1]);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => parseInt(n.toString(), 10));\n  const sum_digits\
    \ = digits.reduce((sum, n) => sum + n, 0);\n  const digits_len = digits.length;\n\
    \  const result = [];\n  for (let i = 0; i < digits_len; i++) {\n    const index\
    \ = sum_digits - digits[i];\n    if (index >= 0) {\n      result.push(nums[index]);\n\
    \    }\n  }\n  return result;\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return [];\n  }\n  const digits = nums.map(n => n.toString());\n \
    \ const sums = digits.map(d => d.split('').map(Number).reduce((acc, n) => acc\
    \ + n, 0));\n  const sorted = sums.map(s => [s, nums.findIndex(n => n.toString()\
    \ === s.toString())]);\n  return sorted.sort((a, b) => b[0] - a[0]).map(a => a[1]);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => n.toString()).map(Number);\n  const sum_digits\
    \ = digits.reduce((sum, n) => sum + n, 0);\n  const digits_len = digits.length;\n\
    \  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n\
    \    const digit = digits[i];\n    if (sum_digits - digit < 0) {\n      result.push(num);\n\
    \    } else {\n      result.push(nums[digits_len - i - 1]);\n    }\n  }\n  return\
    \ result;\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n\
    \  }\n  const digits = nums.map(x => parseInt(x, 10));\n  const sums = digits.reduce((acc,\
    \ x) => acc + x, 0);\n  const indexes = digits.map(x => sums.indexOf(x));\n  return\
    \ indexes.sort((a, b) => a - b).map(x => nums[x]);\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n %\
    \ 10);\n  const sums = digits.map(n => n * n);\n  const indexes = Array.from({\
    \ length: sums.length }, (_, i) => i);\n  const sorted = indexes.sort((a, b) =>\
    \ sums[a] - sums[b]);\n  return indexes.map(i => nums[sorted[i]]);\n}\n", "  const\
    \ len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits\
    \ = nums.map(n => parseInt(n.toString(), 10));\n  const sum_digits = digits.reduce((sum,\
    \ n) => sum + n, 0);\n  const digits_len = digits.length;\n  const result = [];\n\
    \  for (let i = 0; i < digits_len; i++) {\n    const index = sum_digits - digits[i];\n\
    \    if (index >= 0) {\n      result.push(nums[index]);\n    }\n  }\n  return\
    \ result;\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n\
    \  }\n  const digits = nums.map(num => String(num).split('').sort().join(''));\n\
    \  const sums = digits.map(d => d.split('').map(Number).reduce((a, b) => a + b,\
    \ 0));\n  return nums.map(num => sums.indexOf(String(num).split('').reduce((a,\
    \ b) => a + b, 0)) > -1 ? num : -1);\n}\n", "  const sums = nums.map(n => n.toString().split('').map(Number).reduce((a,\
    \ b) => a + b, 0));\n  return nums.sort((a, b) => {\n    const sumA = sums[a];\n\
    \    const sumB = sums[b];\n    if (sumA !== sumB) {\n      return sumA - sumB;\n\
    \    }\n    return a - b;\n  });\n}\n", "  const len = nums.length;\n  if (len\
    \ === 0) {\n    return nums;\n  }\n  const digits = nums.map(x => parseInt(x,\
    \ 10));\n  const sums = digits.map(x => +x);\n  const indexes = sums.map(x =>\
    \ digits.indexOf(x));\n  const sorted = indexes.sort((a, b) => sums[a] - sums[b]);\n\
    \  return indexes.map(x => nums[x]);\n}\n", "  const len = nums.length;\n  if\
    \ (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n => n.toString()).sort();\n\
    \  const sums = digits.map(d => d.split('').map(Number).reduce((acc, n) => acc\
    \ + n, 0));\n  return digits.map((d, i) => sums[i] - +d);\n}\n", "  const len\
    \ = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits =\
    \ nums.map(n => n.toString()).map(Number);\n  const sums = digits.map(d => d.reduce((a,\
    \ b) => a + b, 0));\n  const order = sums.map((s, i) => [s, i]);\n  return order.sort((a,\
    \ b) => a[0] - b[0]).map(a => a[1]);\n}\n", "  const len = nums.length;\n  if\
    \ (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n => n.toString());\n\
    \  const sums = digits.map(d => d.split('').reduce((acc, cur) => acc + +cur, 0));\n\
    \  const order = sums.map((s, i) => [s, i]);\n  return order.sort((a, b) => a[0]\
    \ - b[0]).map(a => a[1]);\n}\n", "  const len = nums.length;\n  if (len === 0)\
    \ {\n    return nums;\n  }\n  const digits = nums.map(num => String(num).split('').reduce((acc,\
    \ cur) => acc + +cur, 0));\n  const sums = digits.map(num => nums.reduce((acc,\
    \ cur) => acc + +cur, 0) + num);\n  return sums.map(sum => nums.find(num => sum\
    \ === num));\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return\
    \ nums;\n  }\n  const digits = nums.map(n => n.toString());\n  const sums = digits.map(d\
    \ => d.split('').reduce((a, b) => a + +b, 0));\n  return sums.sort((a, b) => a\
    \ - b).map(i => nums[i]);\n}\n", "  const len = nums.length;\n  if (len === 0)\
    \ {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString());\n  const\
    \ sums = digits.map(n => parseInt(n, 10));\n  const indexes = sums.map((sum, i)\
    \ => sums.indexOf(sum) + i);\n  return nums.sort((a, b) => {\n    const aIndex\
    \ = indexes.indexOf(a.toString());\n    const bIndex = indexes.indexOf(b.toString());\n\
    \    return aIndex - bIndex;\n  });\n}\n", "  const len = nums.length;\n  if (len\
    \ === 0) {\n    return nums;\n  }\n  const max_sum = nums.reduce((max_sum, num)\
    \ => {\n    const sum_of_digits = num.toString().split('').reduce((sum, digit)\
    \ => sum + +digit, 0);\n    return sum_of_digits > max_sum ? sum_of_digits : max_sum;\n\
    \  }, 0);\n  return nums.sort((a, b) => sum_of_digits(a) - sum_of_digits(b));\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => n.toString());\n  const sums = digits.map(n =>\
    \ Number(n));\n  const len = sums.length;\n  if (len === 0) {\n    return nums;\n\
    \  }\n  const sorted = [];\n  let index = 0;\n  while (index < len) {\n    const\
    \ sum = sums[index];\n    const pos = sums.indexOf(sum);\n    if (pos === -1)\
    \ {\n      sorted.push(sum);\n      index++;\n    } else {\n      sorted.splice(pos,\
    \ 0, sum);\n      index++;\n    }\n  }\n  return sorted;\n}\n", "  const len =\
    \ nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n\
    \ => n % 10);\n  const sums = digits.reduce((sum, digit) => sum + digit, 0);\n\
    \  const indexes = Array.from({ length: len }).map((_, i) => sums / digits[i]);\n\
    \  return indexes.sort((a, b) => a - b).map(i => nums[i]);\n}\n", "  const len\
    \ = nums.length;\n  const points = new Array(len);\n  for (let i = 0; i < len;\
    \ i++) {\n    const num = nums[i];\n    const digits = String(num).split(\"\"\
    );\n    const point = 0;\n    for (let j = 0; j < digits.length; j++) {\n    \
    \  point += (digits[j] * Math.pow(10, j));\n    }\n    points[i] = point;\n  }\n\
    \  return points.sort((a, b) => a - b);\n}\n", "  const len = nums.length;\n \
    \ const points = new Array(len);\n  for (let i = 0; i < len; i++) {\n    const\
    \ p = nums[i];\n    const point = p * 10;\n    points[point] = i;\n  }\n  return\
    \ points.sort((a, b) => a - b).map((i) => nums[i]);\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const max_sum = nums.reduce((a,\
    \ b) => a + b, 0);\n  const min_sum = nums.reduce((a, b) => a - b, 0);\n  const\
    \ digits = nums.map(n => n % 10);\n  const sum_digits = digits.reduce((a, b) =>\
    \ a + b, 0);\n  const order = sum_digits - max_sum;\n  return nums.sort((a, b)\
    \ => {\n    const a_index = digits.indexOf(a);\n    const b_index = digits.indexOf(b);\n\
    \    return a_index - b_index;\n  });\n}\n", "  const len = nums.length;\n  if\
    \ (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n % 10);\n\
    \  const sums = digits.map(n => ~~(n / 10));\n  const indexes = sums.map((sum,\
    \ i) => sums.indexOf(sum) + i);\n  return nums.map((n, i) => indexes[i]).sort((a,\
    \ b) => a - b);\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return\
    \ nums;\n  }\n  const digits = nums.map(x => parseInt(x, 10));\n  const sum_digits\
    \ = digits.reduce((sum, digit) => sum + digit, 0);\n  const sorted_nums = nums.sort((a,\
    \ b) => sum_digits - parseInt(b, 10) - parseInt(a, 10));\n  return sorted_nums;\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n \
    \ const digits = nums.map(n => n % 10);\n  const sum_digits = digits.reduce((sum,\
    \ n) => sum + n, 0);\n  const digits_len = digits.length;\n  const result = [];\n\
    \  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const digit\
    \ = num % 10;\n    if (sum_digits - digit < 0) {\n      result.push(num);\n  \
    \  } else {\n      result.push(nums[digits_len - 1 - i]);\n    }\n  }\n  return\
    \ result;\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n\
    \  }\n  const max_sum = nums.reduce((acc, n) => acc + n, 0);\n  const min_sum\
    \ = nums.reduce((acc, n) => acc + n, 0);\n  const min_idx = nums.findIndex(n =>\
    \ n < min_sum);\n  const max_idx = nums.findIndex(n => n > max_sum);\n  const\
    \ min_sum = nums[min_idx];\n  const max_sum = nums[max_idx];\n  const min_idx\
    \ = nums.findIndex(n => n < min_sum);\n  const max_idx = nums.findIndex(n => n\
    \ > max_sum);\n  const min_sum = nums[min_idx];\n  const max_sum = nums[max_idx];\n\
    \  const min_idx = nums.findIndex(n => n < min_sum);\n  const max_idx = nums.findIndex(n\
    \ => n > max_sum);\n  const min_sum = nums[min_idx];\n  const max_sum = nums[max_idx];\n\
    \  const min_idx = nums.findIndex(n => n < min_sum);\n  const max_idx = nums.findIndex(n\
    \ => n > max_sum);\n  const min_sum = nums[min_idx];\n  const max_sum = nums[max_idx];\n\
    \  const min_idx = nums.findIndex(n => n < min_sum);\n  const max_idx = nums.findIndex(n\
    \ => n > max_sum);\n  const min_sum = nums[min_idx];\n  const max_sum = nums[max_idx];\n\
    \  const min_idx = nums.findIndex(n => n < min_sum);\n  const max_idx = nums.findIndex(n\
    \ => n > max_sum);\n  const min_sum = nums[min_idx];\n  const max_sum = nums[max_idx];\n\
    \  const min_idx = nums.findIndex(n => n < min_sum);\n  const max_idx = nums.findIndex(n\
    \ => n > max_sum);\n  const min_sum = nums[min_idx];\n  const max_sum = nums[max_idx];\n\
    \  const min_idx = nums.findIndex(n => n < min_sum);\n  const max_idx = nums.findIndex(n\
    \ => n > max_sum);\n  const min_sum = nums[min_idx];\n  const max_sum = nums[max_idx];\n\
    \  const min_idx = nums.findIndex(n => n < min_sum);\n  const max_idx = nums.findIndex(n\
    \ => n > max_sum);\n  const min_sum = nums[min_idx];\n  const max_sum = nums[max_idx];\n\
    \  const min_idx = nums.findIndex(n => n < min_sum);\n  const max_idx = nums.findIndex(n\
    \ => n > max_sum);\n  const min_sum = nums[min_idx];\n  const max_sum = nums[max_idx];\n\
    \  const min_idx = nums.findIndex(", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return nums;\n  }\n  const digits = nums.map(x => parseInt(x, 10));\n\
    \  const sum_digits = digits.reduce((sum, digit) => sum + digit, 0);\n  const\
    \ digits_len = digits.length;\n  const result = [];\n  for (let i = 0; i < len;\
    \ i++) {\n    const digit = digits[i];\n    if (digit < sum_digits) {\n      result.push(nums[i]);\n\
    \    } else if (digit === sum_digits) {\n      result.push(digit);\n    }\n  }\n\
    \  return result;\n}\n", "  const len = nums.length;\n  if (len === 0) {\n   \
    \ return nums;\n  }\n  const digits = nums.map(n => n.toString());\n  const sums\
    \ = digits.map(d => d.split('').reduce((acc, cur) => acc + +cur, 0));\n  return\
    \ sums.sort((a, b) => a - b).map(i => nums[i]);\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(x => parseInt(x,\
    \ 10));\n  const sum_digits = digits.reduce((sum, digit) => sum + digit, 0);\n\
    \  const orders = digits.map((digit, i) => {\n    const order = sum_digits - digit;\n\
    \    return { digit, order };\n  });\n  return orders.sort((a, b) => a.order -\
    \ b.order).map(a => a.digit);\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString()).sort();\n\
    \  const sums = digits.map(d => d.split('').reduce((a, b) => a + +b, 0));\n  return\
    \ digits.map((d, i) => sums[i] - +d);\n}\n", "  const len = nums.length;\n  if\
    \ (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n => n.toString());\n\
    \  const sums = digits.map(d => d.split('').reduce((acc, c) => acc + +c, 0));\n\
    \  const order = sums.map((s, i) => [s, i]);\n  return order.sort((a, b) => a[0]\
    \ - b[0]).map(a => a[1]);\n}\n", "  const sums = nums.map(n => n.toString().split('').map(Number).reduce((a,\
    \ b) => a + b));\n  return sums.sort((a, b) => a - b);\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString());\n\
    \  const sums = digits.map(d => d.split('').reduce((acc, cur) => acc + +cur, 0));\n\
    \  const order = sums.map((sum, i) => [sum, i]) as [number, number][];\n  return\
    \ order.sort((a, b) => a[0] - b[0]).map(a => nums[a[1]]);\n}\n", "  const len\
    \ = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits =\
    \ nums.map(n => n.toString()).sort();\n  const sums = digits.map(d => d.split('').reduce((acc,\
    \ c) => acc + +c, 0));\n  return digits.map((d, i) => sums[i] - +d);\n}\n", " \
    \ const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
    \ digits = nums.map(x => parseInt(x, 10));\n  const sums = digits.map(x => x *\
    \ x);\n  const indexes = Array.from(Array(len).keys());\n  indexes.sort((a, b)\
    \ => sums[a] - sums[b]);\n  return indexes.map(i => nums[i]);\n}\n", "  const\
    \ len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const max_sum\
    \ = nums.reduce((max_sum, num) => {\n    const digits = String(num).split('');\n\
    \    return max_sum + Number(digits[digits.length - 1]);\n  }, 0);\n  return nums.sort((a,\
    \ b) => {\n    const a_digits = String(a).split('');\n    const b_digits = String(b).split('');\n\
    \    const a_sum = a_digits[a_digits.length - 1];\n    const b_sum = b_digits[b_digits.length\
    \ - 1];\n    return a_sum - b_sum;\n  });\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n => n % 10);\n\
    \  const sums = digits.map(d => digits.reduce((p, c) => p + c, 0));\n  const sorted\
    \ = sums.map(d => nums.indexOf(d)).sort();\n  return sorted.map(i => nums[i]);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => n.toString()).map(Number);\n  const sums = digits.reduce((sum,\
    \ digit) => sum + digit, 0);\n  const indexes = digits.map(digit => sums.indexOf(digit));\n\
    \  return nums.map((n, i) => indexes[i] < 0 ? -n : n);\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString()).join('');\n\
    \  const sums = digits.split('').reduce((sum, digit) => sum + +digit, 0);\n  return\
    \ nums.sort((a, b) => sums.localeCompare(b.toString()));\n}\n", "  const len =\
    \ nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n\
    \ => n % 10);\n  const sums = digits.map(n => ~~(n));\n  const indexes = sums.map((sum,\
    \ i) => sums.indexOf(sum) + i);\n  return nums.map((n, i) => indexes[i]).sort();\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n \
    \ const digits = nums.map(num => parseInt(String(num), 10));\n  const sum_digits\
    \ = digits.reduce((sum, digit) => sum + digit, 0);\n  const digits_len = digits.length;\n\
    \  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n\
    \    const digit = digits[i];\n    if (digit < sum_digits) {\n      result.push(num);\n\
    \      continue;\n    }\n    const index = sum_digits - digit;\n    if (index\
    \ >= digits_len) {\n      result.push(num);\n      continue;\n    }\n    const\
    \ left = nums[index];\n    const right = nums[index + 1];\n    if (left < right)\
    \ {\n      result.push(num);\n      continue;\n    }\n    const left_digit = digits[index];\n\
    \    const right_digit = digits[index + 1];\n    if (left_digit > right_digit)\
    \ {\n      result.push(num);\n      continue;\n    }\n    const left_index = sum_digits\
    \ - left_digit;\n    const right_index = sum_digits - right_digit;\n    if (left_index\
    \ > right_index) {\n      result.push(num);\n      continue;\n    }\n    const\
    \ left_num = nums[left_index];\n    const right_num = nums[right_index];\n   \
    \ if (left_num < right_num) {\n      result.push(num);\n      continue;\n    }\n\
    \  }\n  return result;\n}\n", "  const sums = nums.map(num => num.toString().split('').map(Number).reduce((acc,\
    \ cur) => acc + cur));\n  const sorted = sums.sort((a, b) => a - b);\n  return\
    \ nums.map(num => num.toString().split('').map(Number).reduce((acc, cur) => acc\
    \ + cur)).sort((a, b) => a - b).map(num => nums[sorted.indexOf(num)] || num);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => n.toString());\n  const sums = digits.map(n =>\
    \ +n);\n  const indexes = sums.map((sum, index) => [sum, index]);\n  indexes.sort((a,\
    \ b) => a[0] - b[0]);\n  return indexes.map(index => nums[index[1]]);\n}\n", " \
    \ const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
    \ digits = nums.map(n => n % 10);\n  const sums = digits.map(n => ~~(n / 10));\n\
    \  const sorted = sums.sort((a, b) => a - b);\n  const result = [];\n  for (let\
    \ i = 0; i < len; i++) {\n    const num = nums[i];\n    const index = sorted.indexOf(num);\n\
    \    if (index > -1) {\n      result.push(num);\n      sorted.splice(index, 1);\n\
    \    }\n  }\n  return result;\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n % 10);\n  const\
    \ sums = digits.map(n => ~~(n / 10));\n  const indexes = sums.map((sum, i) =>\
    \ sums.indexOf(sum) + i);\n  return nums.map((n, i) => indexes[i]).sort((a, b)\
    \ => a - b);\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const digits = nums.map(n => n % 10);\n  const sum_digits = digits.reduce((sum,\
    \ n) => sum + n, 0);\n  const digits_len = digits.length;\n  const result = [];\n\
    \  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const digit\
    \ = num % 10;\n    const index = sum_digits - digit;\n    if (index >= 0) {\n\
    \      result.push(nums[index]);\n    }\n  }\n  return result;\n}\n", "  const\
    \ len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits\
    \ = nums.map(n => parseInt(n.toString(), 10));\n  const sums = digits.map(d =>\
    \ d.reduce((a, b) => a + b, 0));\n  const order = sums.map((s, i) => [s, i]);\n\
    \  return order.sort((a, b) => a[0] - b[0]).map(a => a[1]);\n}\n", "  const len\
    \ = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits =\
    \ nums.map(n => n % 10);\n  const sum_digits = digits.reduce((sum, n) => sum +\
    \ n, 0);\n  const digits_len = digits.length;\n  const result = [];\n  for (let\
    \ i = 0; i < len; i++) {\n    const num = nums[i];\n    const digit = num % 10;\n\
    \    const index = sum_digits - digit + digits_len;\n    result.push(nums[index]);\n\
    \  }\n  return result;\n}\n", "  const len = nums.length;\n  if (len === 0) {\n\
    \    return nums;\n  }\n  const digits = nums.map(x => parseInt(x, 10));\n  const\
    \ sums = digits.map(x => Math.pow(10, x.length));\n  const sorted = sums.map((sum,\
    \ index) => [sum, index]);\n  sorted.sort((a, b) => a[0] - b[0]);\n  return sorted.map(x\
    \ => nums[x[1]]);\n}\n", "  const len = nums.length;\n  if (len === 0) {\n   \
    \ return nums;\n  }\n  const digits = nums.map(n => Math.abs(n));\n  const sum_digits\
    \ = digits.reduce((sum, n) => sum + n);\n  const digits_len = digits.length;\n\
    \  const min_digit = Math.min(...digits);\n  const max_digit = Math.max(...digits);\n\
    \  const min_sum_digit = Math.min(sum_digits, max_digit);\n  const max_sum_digit\
    \ = Math.max(sum_digits, min_digit);\n  const min_digit_index = digits_len - min_sum_digit;\n\
    \  const max_digit_index = digits_len - max_sum_digit;\n  const min_digits = digits.slice(0,\
    \ min_digit_index);\n  const max_digits = digits.slice(0, max_digit_index);\n\
    \  const min_sum = min_digits.reduce((sum, n) => sum + n);\n  const max_sum =\
    \ max_digits.reduce((sum, n) => sum + n);\n  const min_sum_digit = Math.min(min_sum,\
    \ max_sum);\n  const max_sum_digit = Math.max(min_sum, max_sum);\n  const min_digits_len\
    \ = min_digits.length;\n  const max_digits_len = max_digits.length;\n  const min_sum_digits\
    \ = min_digits.slice(0, min_sum_digit);\n  const max_sum_digits = max_digits.slice(0,\
    \ max_sum_digit);\n  const min_sum_digits_len = min_sum_digits.length;\n  const\
    \ max_sum_digits_len = max_sum_digits.length;\n  const min_digits_len = Math.min(min_digits_len,\
    \ max_digits_len);\n  const max_digits_len = Math.max(min_digits_len, max_digits_len);\n\
    \  const min_digits_sum = min_sum_digits.reduce((sum, n) => sum + n);\n  const\
    \ max_digits_sum = max_sum_digits.reduce((sum, n) => sum + n);\n  const min_digits_sum_len\
    \ = min_digits_sum;\n  const max_digits_sum_len = max_digits_sum;\n  const min_digits_sum_digit\
    \ = Math.min(min_digits_sum, max_digits_sum);\n  const max_digits_sum_digit =\
    \ Math.max(min_digits_sum, max_digits_sum);\n  const min_digits_sum_digits = min_sum_digits.slice(0,\
    \ min_digits_sum_digit);\n  const max_digits_sum_digits = max_sum_digits.slice(0,\
    \ max_digits_sum_digit);\n  const min_digits_sum_digits_len = min_digits_sum_digits.length;\n\
    \  const max_digits_sum_digits_len = max_digits_sum_digits.length;\n  const min_digits_sum_digits_len\
    \ = Math.min(min_digits_sum_digits_len, max_digits_sum_digits_len);\n  const max_digits_sum_digits_len\
    \ = Math.max(min_digits_sum_digits_len, max_digits_sum_digits_len);\n  const min_digits_sum_digits_sum\
    \ = min_digits_sum_digits.reduce((sum", "  const len = nums.length;\n  if (len\
    \ === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n % 10);\n \
    \ const sums = digits.map(d => digits.reduce((sum, d2) => sum + d2, 0));\n  const\
    \ order = sums.map((s, i) => [s, i]);\n  return order.sort((a, b) => a[0] - b[0]).map(a\
    \ => a[1]);\n}\n", "  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n\
    \    sum += nums[i];\n  }\n  let result = [];\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    if (sum > 0) {\n      result.push(nums[i]);\n      sum -= nums[i];\n\
    \    } else {\n      result.push(nums[i]);\n    }\n  }\n  return result;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n\
    \  }\n  nums.sort(function (a, b) {\n    return sum - a + b;\n  });\n  return\
    \ nums;\n}\n", "  const sums = nums.map(n => n.toString().split('').map(Number).reduce((a,\
    \ b) => a + b, 0));\n  const order = sums.map((sum, i) => [sum, i]); // Sort by\
    \ sum\n  return order.map(o => nums[o[1]]); // Reverse the order\n}\n", "  const\
    \ len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
    \ = nums.map(n => n.toString()).map(Number);\n  const sums = digits.map(d => d.reduce((a,\
    \ b) => a + b, 0));\n  const order = sums.map((s, i) => [s, i]);\n  return order.sort((a,\
    \ b) => a[0] - b[0]).map(a => a[1]);\n}\n", "  const len = nums.length;\n  if\
    \ (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => parseInt(n.toString(),\
    \ 10));\n  const sums = digits.map(d => d.reduce((acc, cur) => acc + cur, 0));\n\
    \  const indexes = sums.map((s, i) => i);\n  const sorted = indexes.sort((a, b)\
    \ => sums[a] - sums[b]);\n  return nums.map((_, i) => sorted[i]);\n}\n", "  const\
    \ len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits\
    \ = nums.map(n => n % 10);\n  const sums = digits.reduce((sum, digit) => sum +\
    \ digit, 0);\n  return nums.sort((a, b) => sums - digits[a] - digits[b]);\n}\n",
  "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
    \ digits = nums.map(num => String(num).split('').reduce((acc, cur) => acc + +cur,\
    \ 0));\n  const len = digits.length;\n  const arr: number[] = [];\n  for (let\
    \ i = 0; i < len; i++) {\n    const index = digits.indexOf(Math.max(...digits));\n\
    \    arr.push(nums[index]);\n    digits.splice(index, 1);\n  }\n  return arr;\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(x => parseInt(x, 10));\n  const sum_digits = digits.reduce((sum,\
    \ digit) => sum + digit, 0);\n  const orders = digits.map((digit, i) => {\n  \
    \  const index = sum_digits - digit;\n    return index % len;\n  });\n  return\
    \ orders.map(i => nums[i]);\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString()).map(Number);\n\
    \  const sums = digits.map(n => digits.reduce((acc, d) => acc + d, 0));\n  return\
    \ sums.sort((a, b) => a - b).map(i => nums[i]);\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  nums.sort((a,\
    \ b) => sum - b);\n  return nums;\n}\n", "  const len = nums.length;\n  const\
    \ arr = [];\n  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n   \
    \ const digits = String(num).split('');\n    const sum = 0;\n    for (let j =\
    \ 0; j < digits.length; j++) {\n      sum += Number(digits[j]);\n    }\n    arr.push(sum);\n\
    \  }\n  arr.sort((a, b) => a - b);\n  const result = [];\n  for (let i = 0; i\
    \ < len; i++) {\n    result.push(nums[arr[i] - 1]);\n  }\n  return result;\n}\n",
  "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
    \ digits = nums.map(n => Math.abs(n));\n  const sums = digits.map(n => n * n);\n\
    \  const indexes = Array.from({ length: sums.length }, (_, i) => i);\n  const\
    \ sorted = indexes.map(i => nums[i]);\n  const sorted = sorted.concat(indexes.map(i\
    \ => nums[sorted[i]]));\n  return sorted.sort((a, b) => sums[a] - sums[b]);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n \
    \ const digits = nums.map(n => n.toString());\n  const sums = digits.map(d =>\
    \ d.split('').reduce((acc, cur) => acc + +cur, 0));\n  const indexes = sums.map((s,\
    \ i) => i);\n  const sorted = indexes.sort((a, b) => sums[a] - sums[b]);\n  return\
    \ nums.map((n, i) => sorted[i]);\n}\n", "  const sums: number[] = [];\n  for (let\
    \ i = 0; i < nums.length; i++) {\n    sums.push(nums.reduce((a, b) => a + b, 0));\n\
    \  }\n  return sums.sort((a, b) => a - b);\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n => n.toString());\n\
    \  const sums = digits.map(n => +n);\n  const indexes = sums.map((sum, i) => sums.indexOf(sum)\
    \ + i);\n  return indexes.sort((a, b) => a - b);\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString());\n\
    \  const sums = digits.map(d => d.split('').reduce((acc, cur) => acc + +cur, 0));\n\
    \  const order = sums.map((sum, i) => [sum, i]) as [number, number][];\n  order.sort((a,\
    \ b) => a[0] - b[0]);\n  return order.map(([sum, i]) => nums[i]);\n}\n", "  const\
    \ len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
    \ = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((acc,\
    \ cur) => acc + +cur, 0));\n  const order = sums.map((sum, index) => [sum, index]);\n\
    \  return order.sort((a, b) => a[0] - b[0]).map(a => a[1]);\n}\n", "  const len\
    \ = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits =\
    \ nums.map(n => n.toString());\n  const len = digits.length;\n  const maxLen =\
    \ Math.max(...digits);\n  const maxDigits = digits.map(d => parseInt(d));\n  const\
    \ maxSum = Math.max(...maxDigits);\n  const minSum = Math.min(...maxDigits);\n\
    \  const sums = digits.map(d => parseInt(d));\n  const sortedSums = sums.sort((a,\
    \ b) => a - b);\n  const sortedDigits = digits.sort((a, b) => a - b);\n  const\
    \ sortedSumsLen = sortedSums.length;\n  const sortedDigitLen = sortedDigits.length;\n\
    \  const sortedSumsIndex = sortedSums.findIndex(s => s === maxSum);\n  const sortedDigitIndex\
    \ = sortedDigits.findIndex(d => d === minSum);\n  const sortedSumsIndex2 = sortedSums.findIndex(s\
    \ => s === minSum);\n  const sortedDigitIndex2 = sortedDigits.findIndex(d => d\
    \ === maxSum);\n  const sortedSumsIndex3 = sortedSums.findIndex(s => s === maxSum);\n\
    \  const sortedDigitIndex3 = sortedDigits.findIndex(d => d === minSum);\n  const\
    \ sortedSumsIndex4 = sortedSums.findIndex(s => s === minSum);\n  const sortedDigitIndex4\
    \ = sortedDigits.findIndex(d => d === maxSum);\n  const sortedSumsIndex5 = sortedSums.findIndex(s\
    \ => s === maxSum);\n  const sortedDigitIndex5 = sortedDigits.findIndex(d => d\
    \ === minSum);\n  const sortedSumsIndex6 = sortedSums.findIndex(s => s === minSum);\n\
    \  const sortedDigitIndex6 = sortedDigits.findIndex(d => d === maxSum);\n  const\
    \ sortedSumsIndex7 = sortedSums.findIndex(s => s === minSum);\n  const sortedDigitIndex7\
    \ = sortedDigits.findIndex(d => d === maxSum);\n  const sortedSumsIndex8 = sortedSums.findIndex(s\
    \ => s === maxSum);\n  const sortedDigitIndex8 = sortedDigits.findIndex(d => d\
    \ === minSum);\n  const sortedSumsIndex9 = sortedSums.findIndex(s => s === minSum);\n\
    \  const sortedDigitIndex9 = sortedDigits.findIndex(d => d === maxSum);\n  const\
    \ sortedSumsIndex10 = sortedSums.findIndex(s => s === maxSum);\n  const sortedDigitIndex10\
    \ = sortedDigits.findIndex(d => d === minSum);\n  const sortedSumsIndex11 = sortedSums.findIndex(s\
    \ => s === minSum);\n  const sortedDigitIndex11 = sortedDigits.", "  const len\
    \ = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits =\
    \ nums.map(num => parseInt(String(num), 10));\n  const sums = digits.reduce((acc,\
    \ cur) => acc + cur, 0);\n  const order = sums.map((sum, index) => ({ sum, index\
    \ }));\n  return order.sort((a, b) => a.sum - b.sum).map(item => nums[item.index]);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => n % 10);\n  const sums = digits.map(d => digits.reduce((sum,\
    \ d2) => sum + d2, 0));\n  return sums.sort((a, b) => a - b).map(i => nums[i]);\n\
    }\n", "  let result: number[] = [];\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    result.push(sum);\n  }\n  return result;\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n \
    \ const digits = nums.map(n => n % 10);\n  const sums = digits.map(d => digits.reduce((acc,\
    \ d) => acc + d, 0));\n  const order = sums.map((s, i) => [s, i]);\n  return order.sort((a,\
    \ b) => a[0] - b[0]).map(a => a[1]);\n}\n", "  const len = nums.length;\n  if\
    \ (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => parseInt(n.toString(),\
    \ 10));\n  const sum_digits = digits.reduce((sum, n) => sum + n, 0);\n  const\
    \ digits_len = digits.length;\n  const result = [];\n  for (let i = 0; i < len;\
    \ i++) {\n    const num = nums[i];\n    const digit = digits[i];\n    if (sum_digits\
    \ - digit < 0) {\n      result.push(num);\n      continue;\n    }\n    const index\
    \ = sum_digits - digit;\n    if (index >= digits_len) {\n      result.push(num);\n\
    \      continue;\n    }\n    const left_num = nums[index];\n    const right_num\
    \ = nums[index + 1];\n    if (left_num === right_num) {\n      result.push(left_num);\n\
    \      continue;\n    }\n    if (left_num < right_num) {\n      result.push(left_num);\n\
    \    } else {\n      result.push(right_num);\n    }\n  }\n  return result;\n}\n",
  "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
    \ digits = nums.map(n => n.toString()).map(Number);\n  const sums = digits.map(d\
    \ => d.reduce((acc, d) => acc + d, 0));\n  return sums.sort((a, b) => a - b).map(i\
    \ => nums[i]);\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const digits = nums.map(n => n.toString());\n  const sum_digits\
    \ = digits.reduce((acc, digit) => acc + digit, 0);\n  const digits_len = digits.length;\n\
    \  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n\
    \    const digit = digits[i];\n    const index = sum_digits - digit;\n    if (index\
    \ >= 0) {\n      result.push(nums[index]);\n    }\n  }\n  return result;\n}\n",
  "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
    \ digits = nums.map(x => parseInt(x, 10));\n  const sums = digits.map(x => x *\
    \ x);\n  const indexes = sums.map((x, i) => i);\n  const sorted = indexes.sort((a,\
    \ b) => sums[a] - sums[b]);\n  return nums.map(x => sorted[x]);\n}\n", "  const\
    \ len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits\
    \ = nums.map(n => parseInt(n.toString(), 10));\n  const sums = digits.reduce((sum,\
    \ digit) => sum + digit, 0);\n  const indexes = Array.from({ length: len }).map((_,\
    \ i) => i);\n  indexes.sort((a, b) => sums[a] - sums[b]);\n  return indexes.map(i\
    \ => nums[indexes[i]]);\n}\n", "  const len = nums.length;\n  if (len === 0) {\n\
    \    return nums;\n  }\n  const digits = nums.map(num => parseInt(num.toString(),\
    \ 10));\n  const sums = digits.reduce((sum, digit) => sum + digit, 0);\n  const\
    \ order = sums.map((sum, i) => [sum, i]) as number[];\n  order.sort((a, b) =>\
    \ a[0] - b[0]);\n  return order.map(item => nums[item[1]]);\n}\n", "  const sums\
    \ = nums.map(num => num.toString().split('').map(Number).reduce((a, b) => a +\
    \ b, 0));\n  return nums.sort((a, b) => sums[a] - sums[b]);\n}\n", "  const len\
    \ = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits =\
    \ nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((acc,\
    \ cur) => acc + +cur, 0));\n  return sums.sort((a, b) => a - b).map(i => nums[i]);\n\
    }\n", "  const sums = nums.map(n => n.toString().split('').reduce((acc, cur) =>\
    \ acc + +cur, 0));\n  return nums.sort((a, b) => sums[a] - sums[b]);\n}\n", " \
    \ const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
    \ digits = nums.map(x => Math.abs(x).toString()).sort();\n  const sums = digits.map(x\
    \ => x.split('').reduce((acc, cur) => acc + +cur, 0));\n  return nums.map(x =>\
    \ sums.indexOf(x) > -1 ? x : nums[sums.indexOf(x)]);\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n => n.toString());\n\
    \  const sums = digits.map(n => parseInt(n, 10));\n  const len = sums.length;\n\
    \  const result = [];\n  for (let i = 0; i < len; i++) {\n    const index = sums.indexOf(sums[i]);\n\
    \    if (index > 0) {\n      result.push(nums[index]);\n    }\n  }\n  return result;\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => n.toString()).sort();\n  const sums = digits.map(n\
    \ => Number(n));\n  const len = sums.length;\n  const result = [];\n  for (let\
    \ i = 0; i < len; i++) {\n    const index = sums.indexOf(sums[i]);\n    if (index\
    \ === -1) {\n      result.push(nums[i]);\n    } else {\n      result.push(nums[index]);\n\
    \    }\n  }\n  return result;\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return [];\n  }\n  const digits = nums.map(x => Math.abs(x));\n  const\
    \ sum_digits = digits.reduce((acc, x) => acc + x, 0);\n  const digits_len = digits.length;\n\
    \  const result = [];\n  for (let i = 0; i < len; ++i) {\n    const num = nums[i];\n\
    \    const digit = num / Math.pow(10, digits_len - i);\n    if (digit < 0 || sum_digits\
    \ - digit >= 0) {\n      continue;\n    }\n    result.push(num);\n  }\n  return\
    \ result;\n}\n", "  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n\
    \    sum += nums[i];\n  }\n  let result = [];\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    if (sum > 0) {\n      result.push(nums[i]);\n      sum -= nums[i];\n\
    \    } else {\n      result.push(nums[i]);\n    }\n  }\n  return result;\n}\n",
  "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
    \ digits = nums.map(n => n.toString()).sort();\n  const sums = digits.map(d =>\
    \ d.split('').reduce((acc, c) => acc + c, 0));\n  const indexes = sums.map((s,\
    \ i) => i);\n  return nums.map((n, i) => indexes[i]).sort();\n}\n", "  const len\
    \ = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits =\
    \ nums.map(n => n.toString());\n  const sum_digits = digits.reduce((sum, digit)\
    \ => sum + digit, 0);\n  const sorted_nums = nums.sort((a, b) => sum_digits -\
    \ a.toString().localeCompare(b.toString()));\n  return sorted_nums;\n}\n", " \
    \ const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
    \ digits = nums.map(n => n % 10);\n  const sums = digits.map(d => digits.reduce((acc,\
    \ d) => acc + d, 0));\n  const order = sums.map((d, i) => [d, i]);\n  return order.sort((a,\
    \ b) => a[0] - b[0]).map(a => a[1]);\n}\n", "  const len = nums.length;\n  if\
    \ (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(num => String(num).split('').reduce((acc,\
    \ cur) => acc + +cur, 0));\n  const sum = digits[digits.length - 1];\n  const\
    \ indexes = digits.map(d => digits.indexOf(d)).sort((a, b) => a - b).filter(d\
    \ => d !== -1);\n  return indexes.map(i => nums[i]);\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const max_sum = nums.reduce((max,\
    \ num) => Math.max(max, num), 0);\n  const min_sum = nums.reduce((min, num) =>\
    \ Math.min(min, num), 0);\n  const sum_of_digits = nums.reduce((sum, num) => sum\
    \ + num % 10, 0);\n  const digits = nums.map(num => num % 10);\n  const indexes\
    \ = digits.map((digit, i) => digit * 10 + i);\n  const sorted = indexes.sort((a,\
    \ b) => a - b);\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    const\
    \ index = sorted[i];\n    if (index >= max_sum) {\n      continue;\n    }\n  \
    \  if (index < min_sum) {\n      continue;\n    }\n    res.push(nums[index]);\n\
    \  }\n  return res;\n}\n", "  const len = nums.length;\n  if (len === 0) {\n \
    \   return nums;\n  }\n  const digits = nums.map(x => parseInt(x, 10));\n  const\
    \ sum_digits = digits.reduce((sum, digit) => sum + digit, 0);\n  const orders\
    \ = digits.map((digit, i) => {\n    const order = sum_digits - digit;\n    return\
    \ { digit, order };\n  });\n  return orders.sort((a, b) => a.order - b.order).map(a\
    \ => a.digit);\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return\
    \ [];\n  }\n  const digits = nums.map(n => n % 10);\n  const sums = digits.reduce((sum,\
    \ digit) => sum + digit, 0);\n  const indexes = Array.from({ length: sums }, (_,\
    \ i) => i);\n  return indexes.sort((a, b) => sums[a] - sums[b]);\n}\n", "  const\
    \ len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const max_sum\
    \ = nums.reduce((max, n) => Math.max(max, n), 0);\n  const min_sum = nums.reduce((min,\
    \ n) => Math.min(min, n), 0);\n  const sum_of_digits = nums.map(n => n.toString().split('').reduce((sum,\
    \ digit) => sum + +digit, 0));\n  const digits = sum_of_digits.map(d => d / max_sum);\n\
    \  const indexes = digits.map(d => max_sum - d);\n  const indexes = indexes.map(i\
    \ => Math.min(i + 1, len - 1));\n  const result = indexes.map(i => nums[i]);\n\
    \  return result;\n}\n", "  const len = nums.length;\n  const points = new Array(len);\n\
    \  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const digits\
    \ = num.toString().split('');\n    const point = 0;\n    for (let j = 0; j < digits.length;\
    \ j++) {\n      point += (digits[j] - '0') * (Math.pow(10, j));\n    }\n    points[i]\
    \ = point;\n  }\n  return points.sort((a, b) => a - b);\n}\n", "  const sums =\
    \ nums.map(n => n.toString().split('').map(Number).reduce((a, b) => a + b, 0));\n\
    \  return nums.sort((a, b) => sums.indexOf(a) - sums.indexOf(b));\n}\n", "  const\
    \ len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
    \ = nums.map(n => n.toString()).map(Number);\n  const sums = digits.map(d => d.reduce((acc,\
    \ d) => acc + d, 0));\n  const sorted = sums.map((s, i) => [s, i]);\n  sorted.sort((a,\
    \ b) => a[0] - b[0]);\n  return sorted.map(a => nums[a[1]]);\n}\n", "  const len\
    \ = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits =\
    \ nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').map(Number).reduce((a,\
    \ b) => a + b, 0));\n  return nums.sort((a, b) => {\n    const aSum = sums[a];\n\
    \    const bSum = sums[b];\n    return aSum - bSum;\n  });\n}\n", "  const len\
    \ = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n\
    \ => n.toString());\n  const sums = digits.map(d => d.split('').reduce((acc, cur)\
    \ => acc + +cur, 0));\n  const indexes = sums.map((s, i) => i);\n  return nums.map((n,\
    \ i) => indexes[i]).sort((a, b) => a - b);\n}\n", "  const len = nums.length;\n\
    \  const points = new Array(len);\n  for (let i = 0; i < len; i++) {\n    const\
    \ num = nums[i];\n    const digits = num.toString().split('');\n    points[i]\
    \ = digits[digits.length - 1];\n  }\n  return points.sort((a, b) => a - b);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n \
    \ const digits = nums.map(n => parseInt(n.toString(), 10));\n  const sums = digits.map(d\
    \ => d.reduce((p, c) => p + c, 0));\n  const indexes = Array.from({ length: sums.length\
    \ }, (_, i) => i);\n  const sorted = indexes.sort((a, b) => sums[a] - sums[b]);\n\
    \  return nums.map((n, i) => sorted[i]);\n}\n", "  const sums: number[] = [];\n\
    \  for (let i = 0; i < nums.length; i++) {\n    sums.push(nums[i].toString().split('').reduce((a,\
    \ b) => a + +b, 0));\n  }\n  return nums.sort((a, b) => sums.indexOf(a) - sums.indexOf(b));\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => Math.abs(n));\n  const sum_digits = digits.reduce((sum,\
    \ n) => sum + n, 0);\n  const digits_len = digits.length;\n  const result = [];\n\
    \  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const digit\
    \ = digits[i];\n    if (digit === sum_digits) {\n      result.push(num);\n   \
    \   continue;\n    }\n    const index = sum_digits - digit;\n    if (index >=\
    \ digits_len) {\n      result.push(num);\n      continue;\n    }\n    const left_num\
    \ = nums[index];\n    const right_num = nums[index + 1];\n    if (left_num > right_num)\
    \ {\n      result.push(num);\n      continue;\n    }\n    if (left_num < right_num)\
    \ {\n      result.push(nums[index + 1]);\n      result.push(num);\n      continue;\n\
    \    }\n  }\n  return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
