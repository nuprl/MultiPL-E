name: HumanEval_145_order_by_points
language: ts
prompt: "//Write a function which sorts the given array of integers\n// in ascending\
  \ order according to the sum of their digits.\n// Note: if there are several items\
  \ with similar sum of their digits,\n// order them based on their index in original\
  \ array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1,\
  \ -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums:\
  \ number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
  \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
  \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
  \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
  \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9,\
  \ 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
  \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
completions: ["  const len = nums.length;\n  if (len === 0) {\n    return nums;\n\
    \  }\n  const digits = nums.map(n => parseInt(n.toString(), 10));\n  const sums\
    \ = digits.reduce((acc, d) => acc + d, 0);\n  const order = sums.map((s, i) =>\
    \ [s, i]);\n  return order.sort((a, b) => a[0] - b[0]).map(a => a[1]);\n}\n",
  "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
    \ = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((acc,\
    \ cur) => acc + +cur, 0));\n  const order = sums.map((s, i) => [s, i]);\n  return\
    \ order.sort((a, b) => a[0] - b[0]).map(a => a[1]);\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(x => parseInt(x,\
    \ 10));\n  const sums = digits.map(x => x * x);\n  const sorted = sums.sort((a,\
    \ b) => a - b);\n  const index = sums.indexOf(Math.max(...sorted));\n  return\
    \ nums.map(x => parseInt(x, 10)).sort((a, b) => a - b).map(x => index === x ?\
    \ x : index - x);\n}\n", "  const len = nums.length;\n  if (len === 0) {\n   \
    \ return [];\n  }\n  const digits = nums.map(n => n.toString()).map(Number);\n\
    \  const sums = digits.map(d => d.reduce((acc, d) => acc + d, 0));\n  const indexes\
    \ = sums.map((d, i) => i);\n  return nums.map((n, i) => indexes[i]).sort();\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => n.toString()).join('');\n  const chars = digits.split('');\n\
    \  const sorted = chars.sort((a, b) => a.localeCompare(b));\n  const result =\
    \ [];\n  for (let i = 0; i < len; i++) {\n    result.push(parseInt(sorted[i],\
    \ 10));\n  }\n  return result;\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return nums;\n  }\n  const max_sum = nums.reduce((max_sum, num) =>\
    \ {\n    const digits = num.toString().split('');\n    const sum = digits.reduce((sum,\
    \ digit) => sum + +digit, 0);\n    return sum > max_sum ? sum : max_sum;\n  },\
    \ 0);\n  const min_sum = nums.reduce((min_sum, num) => {\n    const digits = num.toString().split('');\n\
    \    const sum = digits.reduce((sum, digit) => sum + +digit, 0);\n    return sum\
    \ < min_sum ? sum : min_sum;\n  }, 0);\n  const order = [];\n  for (let i = 0;\
    \ i < len; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n\
    \    const sum = digits.reduce((sum, digit) => sum + +digit, 0);\n    if (sum\
    \ === max_sum) {\n      order.push(num);\n    } else if (sum === min_sum) {\n\
    \      order.unshift(num);\n    }\n  }\n  return order;\n}\n", "  const len =\
    \ nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n\
    \ => parseInt(n.toString(), 10));\n  const sum_digits = digits.reduce((sum, digit)\
    \ => sum + digit, 0);\n  const digits_len = digits.length;\n  const result = [];\n\
    \  for (let i = 0; i < len; i++) {\n    const digit = digits[i];\n    const index\
    \ = sum_digits - digit;\n    if (index >= 0) {\n      result.push(nums[index]);\n\
    \    }\n  }\n  return result;\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString());\n\
    \  const sums = digits.map(d => d.split('').reduce((acc, cur) => acc + +cur, 0));\n\
    \  return sums.sort((a, b) => a - b).map(i => nums[i]);\n}\n", "  const len =\
    \ nums.length;\n  const arr = [];\n  let sum = 0;\n  for (let i = 0; i < len;\
    \ i++) {\n    sum += nums[i];\n    arr.push(sum);\n  }\n  return arr;\n}\n", " \
    \ const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
    \ digits = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((a,\
    \ b) => a + +b, 0));\n  const indexes = sums.map((s, i) => i);\n  return nums.map((n,\
    \ i) => indexes[sums[i]]).sort((a, b) => a - b);\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString());\n\
    \  const sum_digits = digits.reduce((sum, digit) => sum + +digit, 0);\n  const\
    \ digits_len = digits.length;\n  const result = [];\n  for (let i = 0; i < len;\
    \ i++) {\n    const num = nums[i];\n    const digit = digits[i];\n    if (sum_digits\
    \ - +digit < 0) {\n      result.push(num);\n    } else {\n      const index =\
    \ sum_digits - +digit;\n      result.splice(index, 0, num);\n    }\n  }\n  return\
    \ result;\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return [];\n\
    \  }\n  const digits = nums.map(x => Math.abs(x).toString()).sort();\n  const\
    \ points: number[] = [];\n  let max = 0;\n  for (let i = 0; i < digits.length;\
    \ i++) {\n    const digit = digits[i];\n    const index = digits.indexOf(digit);\n\
    \    if (index > max) {\n      max = index;\n    }\n    points.push(index);\n\
    \  }\n  return points.map(x => nums[x]);\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString());\n\
    \  const sums = digits.map(d => d.split('').reduce((acc, cur) => acc + +cur, 0));\n\
    \  return sums.sort((a, b) => a - b).map(i => nums[i]);\n}\n", "  const len =\
    \ nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n\
    \ => n.toString());\n  const sums = digits.map(d => d.split('').reduce((a, b)\
    \ => a + +b, 0));\n  const indexes = sums.map((s, i) => i);\n  const sorted =\
    \ indexes.sort((a, b) => sums[a] - sums[b]);\n  return nums.map((_, i) => sorted[i]);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => parseInt(n.toString(), 10));\n  const sums = digits.map(d\
    \ => d.reduce((acc, d) => acc + d, 0));\n  const order = sums.map((s, i) => [s,\
    \ i]);\n  return order.sort((a, b) => a[0] - b[0]).map(a => a[1]);\n}\n", "  const\
    \ len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
    \ = nums.map(n => Math.abs(n));\n  const sum_digits = digits.reduce((sum, n) =>\
    \ sum + n);\n  const digits_sum = digits.reduce((sum, n) => sum + n);\n  const\
    \ digits_len = digits.length;\n  const points = [];\n  let index = 0;\n  while\
    \ (index < len) {\n    const digit = digits[index];\n    const sum_digits_index\
    \ = sum_digits - digit;\n    if (sum_digits_index >= digits_len) {\n      points.push(digit);\n\
    \      index++;\n    } else {\n      const point_index = sum_digits_index - digits_sum;\n\
    \      points.push(digits[point_index]);\n      index++;\n    }\n  }\n  return\
    \ points;\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n\
    \  }\n  const digits = nums.map(n => n.toString());\n  const sums = digits.map(d\
    \ => d.split('').reduce((acc, cur) => acc + +cur, 0));\n  const order = sums.map((s,\
    \ i) => [s, i]);\n  return order.sort((a, b) => a[0] - b[0]).map(a => a[1]);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => parseInt(n.toString(), 10));\n  const sums = digits.reduce((sum,\
    \ digit) => sum + digit, 0);\n  return nums.sort((a, b) => sums[a] - sums[b]);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => n.toString()).join('');\n  const map = new Map<string,\
    \ number>();\n  for (let i = 0; i < digits.length; i++) {\n    const digit = digits[i];\n\
    \    const count = map.get(digit);\n    if (count === undefined) {\n      map.set(digit,\
    \ 1);\n    } else {\n      map.set(digit, count + 1);\n    }\n  }\n  const result\
    \ = [];\n  for (const [key, value] of map.entries()) {\n    result.push([key,\
    \ value]);\n  }\n  return result.sort((a, b) => a[1] - b[1]).map(a => a[0]);\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n \
    \ const digits = nums.map(n => n.toString()).map(Number);\n  const sums = digits.map(d\
    \ => d.reduce((a, b) => a + b, 0));\n  const order = sums.map((s, i) => [s, i]);\n\
    \  return order.sort((a, b) => a[0] - b[0]).map(a => a[1]);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
