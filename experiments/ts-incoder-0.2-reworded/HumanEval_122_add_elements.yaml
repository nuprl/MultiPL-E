name: HumanEval_122_add_elements
language: ts
prompt: "//Given a non-empty array of integers arr and an integer k, return\n// the\
  \ sum of the elements with at most two digits from the first k elements of arr.\n\
  // Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n\
  // Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction\
  \ add_elements(arr: number[], k: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2,\
  \ -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121,\
  \ 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7,\
  \ 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
  \ 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
completions: ["  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n\
    \  }\n  return sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i < k; i++) {\n\
    \    sum += arr[i];\n  }\n  return sum;\n}\n", "  let sum = 0;\n  for (let i =\
    \ 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n", "  let sum =\
    \ 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n\
    }\n", "  if (k > arr.length) return 0;\n  let sum = 0;\n  for (let i = 0; i <\
    \ k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n", "  let sum = 0;\n \
    \ for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n",
  "  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n\
    \  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i]);\n  }\n\
    \  return arr.reduce((acc, val) => acc + val, 0);\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n", " \
    \ let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return\
    \ sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n\
    \  }\n  return sum;\n}\n", "  const len = arr.length;\n  if (len < k) {\n    return\
    \ 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n\
    \  }\n  for (let i = k; i < len; i++) {\n    sum += arr[i] - 10;\n  }\n  return\
    \ sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n\
    \  }\n  return sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i < k; i++) {\n\
    \    sum += arr[i];\n  }\n  return sum;\n}\n", "  let sum = 0;\n  for (let i =\
    \ 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n", "  const len\
    \ = arr.length;\n  if (len === 0) {\n    return 0;\n  }\n  if (k > len) {\n  \
    \  return arr[0];\n  }\n  const first = arr[0];\n  let sum = 0;\n  for (let i\
    \ = 1; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum + first;\n}\n", " \
    \ if (k > arr.length) return 0;\n  let sum = 0;\n  for (let i = 0; i < k; i++)\
    \ {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i <\
    \ k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n", "  let sum = 0;\n \
    \ for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i\
    \ < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n", "  let sum\
    \ = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n \
    \ }\n  return sum;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
