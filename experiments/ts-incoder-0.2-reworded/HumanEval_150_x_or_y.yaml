name: HumanEval_150_x_or_y
language: ts
prompt: "//A simple program which should return the value of x if n is \n// a prime\
  \ number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7,\
  \ 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n: number, x: number,\
  \ y: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = x_or_y;\n  assert.deepEqual(candidate(7, 34, 12),34);\n\
  \  assert.deepEqual(candidate(15, 8, 5),5);\n  assert.deepEqual(candidate(3, 33,\
  \ 5212),33);\n  assert.deepEqual(candidate(1259, 3, 52),3);\n  assert.deepEqual(candidate(7919,\
  \ -1, 12),-1);\n  assert.deepEqual(candidate(3609, 1245, 583),583);\n  assert.deepEqual(candidate(91,\
  \ 56, 129),129);\n  assert.deepEqual(candidate(6, 34, 1234),1234);\n  assert.deepEqual(candidate(1,\
  \ 2, 0),0);\n  assert.deepEqual(candidate(2, 2, 0),2);\n}\n\ntest();"
completions: ["    if (is_prime(n)) {\n        return x;\n    } else {\n        return\
    \ y;\n    }\n}\n", "    if (n % 2 === 0) {\n        return y;\n    } else {\n\
    \        return x;\n    }\n}\n", "    if (n % 2 === 0) {\n        return y;\n\
    \    }\n    return x;\n}\n", "    if (n % 2 === 0) {\n        return y;\n    }\
    \ else {\n        return x;\n    }\n}\n", "    if (n % 2 === 0) {\n        return\
    \ y;\n    }\n    return x;\n}\n", "    if (n % 2 === 0) {\n        return y;\n\
    \    } else {\n        return x;\n    }\n}\n", "    if (is_prime(n)) {\n     \
    \   return y;\n    } else {\n        return x;\n    }\n}\n", "    if (is_prime(n))\
    \ {\n        return y;\n    } else {\n        return x;\n    }\n}\n", "    if\
    \ (is_prime(n)) {\n        return y;\n    } else {\n        return x;\n    }\n\
    }\n", "    if (n % 2 === 0) {\n        return y;\n    } else {\n        return\
    \ x;\n    }\n}\n", "    if (is_prime(n)) {\n        return x;\n    } else {\n\
    \        return y;\n    }\n}\n", "  if (is_prime(n)) {\n    return x;\n  } else\
    \ {\n    return y;\n  }\n}\n", "  if (is_prime(n)) {\n    return x;\n  } else\
    \ {\n    return y;\n  }\n}\n", "    if (is_prime(n)) {\n        return x;\n  \
    \  } else {\n        return y;\n    }\n}\n", "  if (is_prime(n)) {\n    return\
    \ x;\n  } else {\n    return y;\n  }\n}\n", "    if (is_prime(n)) {\n        return\
    \ y;\n    } else {\n        return x;\n    }\n}\n", "  if (n % 2 === 0) {\n  \
    \  return x;\n  }\n  return y;\n}\n", "    if (is_prime(n)) {\n        return\
    \ y;\n    } else {\n        return x;\n    }\n}\n", "  if (is_prime(n)) {\n  \
    \  return x;\n  } else {\n    return y;\n  }\n}\n", "  if (isPrime(n)) {\n   \
    \ return x;\n  }\n  return y;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
